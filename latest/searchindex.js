Search.setIndex({"docnames": ["autoapi/block_mask/index", "autoapi/neural_compressor/adaptor/adaptor/index", "autoapi/neural_compressor/adaptor/index", "autoapi/neural_compressor/adaptor/keras/index", "autoapi/neural_compressor/adaptor/keras_utils/conv2d/index", "autoapi/neural_compressor/adaptor/keras_utils/dense/index", "autoapi/neural_compressor/adaptor/keras_utils/depthwise_conv2d/index", "autoapi/neural_compressor/adaptor/keras_utils/index", "autoapi/neural_compressor/adaptor/keras_utils/pool2d/index", "autoapi/neural_compressor/adaptor/keras_utils/quantizer/index", "autoapi/neural_compressor/adaptor/keras_utils/separable_conv2d/index", "autoapi/neural_compressor/adaptor/mxnet/index", "autoapi/neural_compressor/adaptor/mxnet_utils/index", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index", "autoapi/neural_compressor/adaptor/onnxrt/index", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index", "autoapi/neural_compressor/adaptor/ox_utils/calibrator/index", "autoapi/neural_compressor/adaptor/ox_utils/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/norm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/reduce/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/unary_op/index", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index", "autoapi/neural_compressor/adaptor/ox_utils/smooth_quant/index", "autoapi/neural_compressor/adaptor/ox_utils/util/index", "autoapi/neural_compressor/adaptor/ox_utils/weight_only/index", "autoapi/neural_compressor/adaptor/pytorch/index", "autoapi/neural_compressor/adaptor/query/index", "autoapi/neural_compressor/adaptor/tensorflow/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/dequantize_cast_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_node/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_schema/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/tf2onnx_utils/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index", "autoapi/neural_compressor/adaptor/tf_utils/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/fake_quantize/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_config/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_helper/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/optimize_layer/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_wrapper/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_calibration/index", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_scaler/index", "autoapi/neural_compressor/adaptor/tf_utils/tf2onnx_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index", "autoapi/neural_compressor/adaptor/tf_utils/util/index", "autoapi/neural_compressor/adaptor/torch_utils/autoround/autoround/index", "autoapi/neural_compressor/adaptor/torch_utils/autoround/export/index", "autoapi/neural_compressor/adaptor/torch_utils/autoround/index", "autoapi/neural_compressor/adaptor/torch_utils/autoround/model_wrapper/index", "autoapi/neural_compressor/adaptor/torch_utils/autoround/sign_sgd/index", "autoapi/neural_compressor/adaptor/torch_utils/awq/index", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index", "autoapi/neural_compressor/adaptor/torch_utils/gptq/index", "autoapi/neural_compressor/adaptor/torch_utils/hawq_metric/index", "autoapi/neural_compressor/adaptor/torch_utils/index", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/index", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/modified_pickle/index", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/quantize/index", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/torch_load/index", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/utils/index", "autoapi/neural_compressor/adaptor/torch_utils/mixed_precision/index", "autoapi/neural_compressor/adaptor/torch_utils/model_wrapper/index", "autoapi/neural_compressor/adaptor/torch_utils/pattern_detector/index", "autoapi/neural_compressor/adaptor/torch_utils/smooth_quant/index", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index", "autoapi/neural_compressor/adaptor/torch_utils/teq/index", "autoapi/neural_compressor/adaptor/torch_utils/util/index", "autoapi/neural_compressor/adaptor/torch_utils/weight_only/index", "autoapi/neural_compressor/algorithm/algorithm/index", "autoapi/neural_compressor/algorithm/fast_bias_correction/index", "autoapi/neural_compressor/algorithm/index", "autoapi/neural_compressor/algorithm/smooth_quant/index", "autoapi/neural_compressor/algorithm/weight_correction/index", "autoapi/neural_compressor/benchmark/index", "autoapi/neural_compressor/common/base_config/index", "autoapi/neural_compressor/common/base_tuning/index", "autoapi/neural_compressor/common/index", "autoapi/neural_compressor/common/utils/constants/index", "autoapi/neural_compressor/common/utils/index", "autoapi/neural_compressor/common/utils/logger/index", "autoapi/neural_compressor/common/utils/utility/index", "autoapi/neural_compressor/compression/callbacks/index", "autoapi/neural_compressor/compression/distillation/criterions/index", "autoapi/neural_compressor/compression/distillation/index", "autoapi/neural_compressor/compression/distillation/optimizers/index", "autoapi/neural_compressor/compression/distillation/utility/index", "autoapi/neural_compressor/compression/hpo/index", "autoapi/neural_compressor/compression/hpo/sa_optimizer/index", "autoapi/neural_compressor/compression/hpo/search_algorithms/index", "autoapi/neural_compressor/compression/hpo/search_space/index", "autoapi/neural_compressor/compression/index", "autoapi/neural_compressor/compression/pruner/criteria/index", "autoapi/neural_compressor/compression/pruner/dsnot/index", "autoapi/neural_compressor/compression/pruner/index", "autoapi/neural_compressor/compression/pruner/model_slim/auto_slim/index", "autoapi/neural_compressor/compression/pruner/model_slim/index", "autoapi/neural_compressor/compression/pruner/model_slim/pattern_analyzer/index", "autoapi/neural_compressor/compression/pruner/model_slim/weight_slim/index", "autoapi/neural_compressor/compression/pruner/patterns/base/index", "autoapi/neural_compressor/compression/pruner/patterns/index", "autoapi/neural_compressor/compression/pruner/patterns/mha/index", "autoapi/neural_compressor/compression/pruner/patterns/ninm/index", "autoapi/neural_compressor/compression/pruner/patterns/nxm/index", "autoapi/neural_compressor/compression/pruner/pruners/base/index", "autoapi/neural_compressor/compression/pruner/pruners/basic/index", "autoapi/neural_compressor/compression/pruner/pruners/block_mask/index", "autoapi/neural_compressor/compression/pruner/pruners/index", "autoapi/neural_compressor/compression/pruner/pruners/mha/index", "autoapi/neural_compressor/compression/pruner/pruners/pattern_lock/index", "autoapi/neural_compressor/compression/pruner/pruners/progressive/index", "autoapi/neural_compressor/compression/pruner/pruners/retrain_free/index", "autoapi/neural_compressor/compression/pruner/pruners/sparse_gpt/index", "autoapi/neural_compressor/compression/pruner/pruning/index", "autoapi/neural_compressor/compression/pruner/regs/index", "autoapi/neural_compressor/compression/pruner/schedulers/index", "autoapi/neural_compressor/compression/pruner/tf_criteria/index", "autoapi/neural_compressor/compression/pruner/utils/index", "autoapi/neural_compressor/compression/pruner/wanda/index", "autoapi/neural_compressor/compression/pruner/wanda/prune/index", "autoapi/neural_compressor/compression/pruner/wanda/utils/index", "autoapi/neural_compressor/compression/pruner/wanda/wrapper/index", "autoapi/neural_compressor/conf/config/index", "autoapi/neural_compressor/conf/dotdict/index", "autoapi/neural_compressor/conf/index", "autoapi/neural_compressor/conf/pythonic_config/index", "autoapi/neural_compressor/config/index", "autoapi/neural_compressor/contrib/index", "autoapi/neural_compressor/contrib/strategy/index", "autoapi/neural_compressor/contrib/strategy/sigopt/index", "autoapi/neural_compressor/contrib/strategy/tpe/index", "autoapi/neural_compressor/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/data/dataloaders/dataloader/index", "autoapi/neural_compressor/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/data/dataloaders/fetcher/index", "autoapi/neural_compressor/data/dataloaders/index", "autoapi/neural_compressor/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/data/dataloaders/sampler/index", "autoapi/neural_compressor/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/data/datasets/bert_dataset/index", "autoapi/neural_compressor/data/datasets/coco_dataset/index", "autoapi/neural_compressor/data/datasets/dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/data/datasets/index", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/data/filters/coco_filter/index", "autoapi/neural_compressor/data/filters/filter/index", "autoapi/neural_compressor/data/filters/index", "autoapi/neural_compressor/data/index", "autoapi/neural_compressor/data/transforms/coco_transform/index", "autoapi/neural_compressor/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/data/transforms/index", "autoapi/neural_compressor/data/transforms/postprocess/index", "autoapi/neural_compressor/data/transforms/tokenization/index", "autoapi/neural_compressor/data/transforms/transform/index", "autoapi/neural_compressor/experimental/benchmark/index", "autoapi/neural_compressor/experimental/common/criterion/index", "autoapi/neural_compressor/experimental/common/dataloader/index", "autoapi/neural_compressor/experimental/common/index", "autoapi/neural_compressor/experimental/common/metric/index", "autoapi/neural_compressor/experimental/common/model/index", "autoapi/neural_compressor/experimental/common/optimizer/index", "autoapi/neural_compressor/experimental/common/postprocess/index", "autoapi/neural_compressor/experimental/common/torch_utils/index", "autoapi/neural_compressor/experimental/component/index", "autoapi/neural_compressor/experimental/compression/index", "autoapi/neural_compressor/experimental/contrib/index", "autoapi/neural_compressor/experimental/contrib/strategy/index", "autoapi/neural_compressor/experimental/contrib/strategy/sigopt/index", "autoapi/neural_compressor/experimental/contrib/strategy/tpe/index", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index", "autoapi/neural_compressor/experimental/data/dataloaders/index", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/index", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index", "autoapi/neural_compressor/experimental/data/filters/filter/index", "autoapi/neural_compressor/experimental/data/filters/index", "autoapi/neural_compressor/experimental/data/index", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/experimental/data/transforms/index", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index", "autoapi/neural_compressor/experimental/data/transforms/transform/index", "autoapi/neural_compressor/experimental/distillation/index", "autoapi/neural_compressor/experimental/export/index", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index", "autoapi/neural_compressor/experimental/export/tf2onnx/index", "autoapi/neural_compressor/experimental/export/torch2onnx/index", "autoapi/neural_compressor/experimental/graph_optimization/index", "autoapi/neural_compressor/experimental/index", "autoapi/neural_compressor/experimental/metric/bleu/index", "autoapi/neural_compressor/experimental/metric/bleu_util/index", "autoapi/neural_compressor/experimental/metric/coco_label_map/index", "autoapi/neural_compressor/experimental/metric/coco_tools/index", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index", "autoapi/neural_compressor/experimental/metric/f1/index", "autoapi/neural_compressor/experimental/metric/index", "autoapi/neural_compressor/experimental/metric/metric/index", "autoapi/neural_compressor/experimental/mixed_precision/index", "autoapi/neural_compressor/experimental/model_conversion/index", "autoapi/neural_compressor/experimental/nas/basic_nas/index", "autoapi/neural_compressor/experimental/nas/dynas/index", "autoapi/neural_compressor/experimental/nas/index", "autoapi/neural_compressor/experimental/nas/nas/index", "autoapi/neural_compressor/experimental/nas/nas_utils/index", "autoapi/neural_compressor/experimental/nas/search_algorithms/index", "autoapi/neural_compressor/experimental/pruner_legacy/gradient_sensitivity/index", "autoapi/neural_compressor/experimental/pruner_legacy/group_lasso/index", "autoapi/neural_compressor/experimental/pruner_legacy/index", "autoapi/neural_compressor/experimental/pruner_legacy/magnitude/index", "autoapi/neural_compressor/experimental/pruner_legacy/pattern_lock/index", "autoapi/neural_compressor/experimental/pruner_legacy/pruner/index", "autoapi/neural_compressor/experimental/pruning/index", "autoapi/neural_compressor/experimental/pruning_recipes/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index", "autoapi/neural_compressor/experimental/pruning_v2/index", "autoapi/neural_compressor/experimental/pytorch_pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index", "autoapi/neural_compressor/experimental/quantization/index", "autoapi/neural_compressor/experimental/scheduler/index", "autoapi/neural_compressor/experimental/strategy/auto_mixed_precision/index", "autoapi/neural_compressor/experimental/strategy/basic/index", "autoapi/neural_compressor/experimental/strategy/bayesian/index", "autoapi/neural_compressor/experimental/strategy/exhaustive/index", "autoapi/neural_compressor/experimental/strategy/index", "autoapi/neural_compressor/experimental/strategy/mse/index", "autoapi/neural_compressor/experimental/strategy/mse_v2/index", "autoapi/neural_compressor/experimental/strategy/random/index", "autoapi/neural_compressor/experimental/strategy/strategy/index", "autoapi/neural_compressor/experimental/strategy/utils/constant/index", "autoapi/neural_compressor/experimental/strategy/utils/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_sampler/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_space/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_structs/index", "autoapi/neural_compressor/experimental/strategy/utils/utility/index", "autoapi/neural_compressor/index", "autoapi/neural_compressor/metric/bleu/index", "autoapi/neural_compressor/metric/bleu_util/index", "autoapi/neural_compressor/metric/coco_label_map/index", "autoapi/neural_compressor/metric/coco_tools/index", "autoapi/neural_compressor/metric/evaluate_squad/index", "autoapi/neural_compressor/metric/f1/index", "autoapi/neural_compressor/metric/index", "autoapi/neural_compressor/metric/metric/index", "autoapi/neural_compressor/mix_precision/index", "autoapi/neural_compressor/model/base_model/index", "autoapi/neural_compressor/model/index", "autoapi/neural_compressor/model/keras_model/index", "autoapi/neural_compressor/model/model/index", "autoapi/neural_compressor/model/mxnet_model/index", "autoapi/neural_compressor/model/nets_factory/index", "autoapi/neural_compressor/model/onnx_model/index", "autoapi/neural_compressor/model/tensorflow_model/index", "autoapi/neural_compressor/model/torch_model/index", "autoapi/neural_compressor/objective/index", "autoapi/neural_compressor/onnxrt/algorithms/index", "autoapi/neural_compressor/onnxrt/algorithms/smoother/calibrator/index", "autoapi/neural_compressor/onnxrt/algorithms/smoother/core/index", "autoapi/neural_compressor/onnxrt/algorithms/smoother/index", "autoapi/neural_compressor/onnxrt/algorithms/weight_only/awq/index", "autoapi/neural_compressor/onnxrt/algorithms/weight_only/gptq/index", "autoapi/neural_compressor/onnxrt/algorithms/weight_only/index", "autoapi/neural_compressor/onnxrt/algorithms/weight_only/rtn/index", "autoapi/neural_compressor/onnxrt/algorithms/weight_only/utility/index", "autoapi/neural_compressor/onnxrt/index", "autoapi/neural_compressor/onnxrt/quantization/algorithm_entry/index", "autoapi/neural_compressor/onnxrt/quantization/calibrate/index", "autoapi/neural_compressor/onnxrt/quantization/config/index", "autoapi/neural_compressor/onnxrt/quantization/index", "autoapi/neural_compressor/onnxrt/quantization/quantize/index", "autoapi/neural_compressor/onnxrt/utils/index", "autoapi/neural_compressor/onnxrt/utils/onnx_model/index", "autoapi/neural_compressor/onnxrt/utils/utility/index", "autoapi/neural_compressor/profiling/index", "autoapi/neural_compressor/profiling/parser/factory/index", "autoapi/neural_compressor/profiling/parser/index", "autoapi/neural_compressor/profiling/parser/onnx_parser/factory/index", "autoapi/neural_compressor/profiling/parser/onnx_parser/index", "autoapi/neural_compressor/profiling/parser/onnx_parser/parser/index", "autoapi/neural_compressor/profiling/parser/parser/index", "autoapi/neural_compressor/profiling/parser/result/index", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/factory/index", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/index", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/parser/index", "autoapi/neural_compressor/profiling/profiler/factory/index", "autoapi/neural_compressor/profiling/profiler/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/factory/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/profiler/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/utils/index", "autoapi/neural_compressor/profiling/profiler/profiler/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/factory/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/profiler/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/utils/index", "autoapi/neural_compressor/quantization/index", "autoapi/neural_compressor/strategy/auto/index", "autoapi/neural_compressor/strategy/auto_mixed_precision/index", "autoapi/neural_compressor/strategy/basic/index", "autoapi/neural_compressor/strategy/bayesian/index", "autoapi/neural_compressor/strategy/conservative/index", "autoapi/neural_compressor/strategy/exhaustive/index", "autoapi/neural_compressor/strategy/hawq_v2/index", "autoapi/neural_compressor/strategy/index", "autoapi/neural_compressor/strategy/mse/index", "autoapi/neural_compressor/strategy/mse_v2/index", "autoapi/neural_compressor/strategy/random/index", "autoapi/neural_compressor/strategy/strategy/index", "autoapi/neural_compressor/strategy/utils/constant/index", "autoapi/neural_compressor/strategy/utils/index", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index", "autoapi/neural_compressor/strategy/utils/tuning_space/index", "autoapi/neural_compressor/strategy/utils/tuning_structs/index", "autoapi/neural_compressor/strategy/utils/utility/index", "autoapi/neural_compressor/template/api_doc_example/index", "autoapi/neural_compressor/template/index", "autoapi/neural_compressor/tensorflow/algorithms/index", "autoapi/neural_compressor/tensorflow/algorithms/smoother/calibration/index", "autoapi/neural_compressor/tensorflow/algorithms/smoother/core/index", "autoapi/neural_compressor/tensorflow/algorithms/smoother/index", "autoapi/neural_compressor/tensorflow/algorithms/smoother/scaler/index", "autoapi/neural_compressor/tensorflow/algorithms/static_quant/index", "autoapi/neural_compressor/tensorflow/algorithms/static_quant/keras/index", "autoapi/neural_compressor/tensorflow/algorithms/static_quant/keras_utils/conv2d/index", "autoapi/neural_compressor/tensorflow/algorithms/static_quant/keras_utils/dense/index", "autoapi/neural_compressor/tensorflow/algorithms/static_quant/keras_utils/depthwise_conv2d/index", "autoapi/neural_compressor/tensorflow/algorithms/static_quant/keras_utils/index", "autoapi/neural_compressor/tensorflow/algorithms/static_quant/keras_utils/pool2d/index", "autoapi/neural_compressor/tensorflow/algorithms/static_quant/keras_utils/quantizer/index", "autoapi/neural_compressor/tensorflow/algorithms/static_quant/keras_utils/separable_conv2d/index", "autoapi/neural_compressor/tensorflow/index", "autoapi/neural_compressor/tensorflow/quantization/algorithm_entry/index", "autoapi/neural_compressor/tensorflow/quantization/config/index", "autoapi/neural_compressor/tensorflow/quantization/index", "autoapi/neural_compressor/tensorflow/quantization/quantize/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_add_to_biasadd/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_layout/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_leakyrelu/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_nan_to_random/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_placeholder_to_const/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/dilated_contraction/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/dummy_biasadd/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/expanddims_optimizer/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fetch_weight_from_reshape/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fold_batch_norm/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fold_constant/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_biasadd_add/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_column_wise_mul/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_conv_with_math/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_decomposed_bn/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_decomposed_in/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_gelu/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_layer_norm/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_pad_with_conv/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_reshape_transpose/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/graph_cse_optimizer/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/grappler_pass/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/insert_print_node/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/move_squeeze_after_relu/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/pre_optimize/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/remove_training_nodes/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/rename_batch_norm/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/split_shared_input/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/strip_equivalent_nodes/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/strip_unused_nodes/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/switch_optimizer/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/graph_base/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_util/index", "autoapi/neural_compressor/tensorflow/quantization/utils/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph_common/index", "autoapi/neural_compressor/tensorflow/quantization/utils/utility/index", "autoapi/neural_compressor/tensorflow/utils/constants/index", "autoapi/neural_compressor/tensorflow/utils/data/index", "autoapi/neural_compressor/tensorflow/utils/index", "autoapi/neural_compressor/tensorflow/utils/model/index", "autoapi/neural_compressor/tensorflow/utils/model_wrappers/index", "autoapi/neural_compressor/tensorflow/utils/nets_factory/index", "autoapi/neural_compressor/tensorflow/utils/utility/index", "autoapi/neural_compressor/torch/algorithms/habana_fp8/fp8_quant/index", "autoapi/neural_compressor/torch/algorithms/habana_fp8/index", "autoapi/neural_compressor/torch/algorithms/habana_fp8/modules/index", "autoapi/neural_compressor/torch/algorithms/habana_fp8/observer/index", "autoapi/neural_compressor/torch/algorithms/index", "autoapi/neural_compressor/torch/algorithms/layer_wise/index", "autoapi/neural_compressor/torch/algorithms/layer_wise/load/index", "autoapi/neural_compressor/torch/algorithms/layer_wise/modified_pickle/index", "autoapi/neural_compressor/torch/algorithms/layer_wise/utils/index", "autoapi/neural_compressor/torch/algorithms/weight_only/awq/index", "autoapi/neural_compressor/torch/algorithms/weight_only/gptq/index", "autoapi/neural_compressor/torch/algorithms/weight_only/index", "autoapi/neural_compressor/torch/algorithms/weight_only/modules/index", "autoapi/neural_compressor/torch/algorithms/weight_only/rtn/index", "autoapi/neural_compressor/torch/algorithms/weight_only/utility/index", "autoapi/neural_compressor/torch/amp/autocast/index", "autoapi/neural_compressor/torch/amp/fp8/functions/index", "autoapi/neural_compressor/torch/amp/fp8/index", "autoapi/neural_compressor/torch/amp/index", "autoapi/neural_compressor/torch/index", "autoapi/neural_compressor/torch/quantization/algorithm_entry/index", "autoapi/neural_compressor/torch/quantization/autotune/index", "autoapi/neural_compressor/torch/quantization/config/index", "autoapi/neural_compressor/torch/quantization/index", "autoapi/neural_compressor/torch/quantization/modules/index", "autoapi/neural_compressor/torch/quantization/quantize/index", "autoapi/neural_compressor/torch/utils/constants/index", "autoapi/neural_compressor/torch/utils/environ/index", "autoapi/neural_compressor/torch/utils/index", "autoapi/neural_compressor/torch/utils/utility/index", "autoapi/neural_compressor/training/index", "autoapi/neural_compressor/utils/collect_layer_histogram/index", "autoapi/neural_compressor/utils/constant/index", "autoapi/neural_compressor/utils/create_obj_from_config/index", "autoapi/neural_compressor/utils/index", "autoapi/neural_compressor/utils/kl_divergence/index", "autoapi/neural_compressor/utils/load_huggingface/index", "autoapi/neural_compressor/utils/logger/index", "autoapi/neural_compressor/utils/neural_insights_utils/index", "autoapi/neural_compressor/utils/options/index", "autoapi/neural_compressor/utils/pytorch/index", "autoapi/neural_compressor/utils/utility/index", "autoapi/neural_compressor/utils/weights_details/index", "autoapi/neural_compressor/version/index", "docs/build_docs/source/index", "docs/source/CODE_OF_CONDUCT", "docs/source/CONTRIBUTING", "docs/source/FX", "docs/source/NAS", "docs/source/SECURITY", "docs/source/Welcome", "docs/source/adaptor", "docs/source/add_new_adaptor", "docs/source/add_new_data_type", "docs/source/api-doc/adaptor", "docs/source/api-doc/adaptor/onnxrt", "docs/source/api-doc/adaptor/torch_utils", "docs/source/api-doc/api_doc_example", "docs/source/api-doc/apis", "docs/source/api-doc/benchmark", "docs/source/api-doc/compression", "docs/source/api-doc/config", "docs/source/api-doc/mix_precision", "docs/source/api-doc/model", "docs/source/api-doc/objective", "docs/source/api-doc/quantization", "docs/source/api-doc/strategy", "docs/source/api-doc/training", "docs/source/benchmark", "docs/source/calibration", "docs/source/dataloader", "docs/source/dataset", "docs/source/design", "docs/source/diagnosis", "docs/source/distillation", "docs/source/distillation_quantization", "docs/source/distributed", "docs/source/examples_readme", "docs/source/export", "docs/source/faq", "docs/source/framework_yaml", "docs/source/get_started", "docs/source/incompatible_changes", "docs/source/infrastructure", "docs/source/installation_guide", "docs/source/legal_information", "docs/source/llm_recipes", "docs/source/metric", "docs/source/migration", "docs/source/mixed_precision", "docs/source/model", "docs/source/neural_coder/README", "docs/source/neural_coder/docs/AWSSageMakerSupport", "docs/source/neural_coder/docs/BigDLNanoSupport", "docs/source/neural_coder/docs/IntelCPU_PerformanceSetting", "docs/source/neural_coder/docs/PythonAPI", "docs/source/neural_coder/docs/PythonLauncher", "docs/source/neural_coder/docs/Quantization", "docs/source/neural_coder/docs/SupportMatrix", "docs/source/neural_coder/docs/release_notes/v0.4", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/DEVELOP", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/README", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/RELEASE", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/DEVELOP", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/RELEASE", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/README", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/vsc-extension-quickstart", "docs/source/neural_insights/README", "docs/source/neural_insights/docs/source/onnx_accuracy_debug", "docs/source/neural_insights/docs/source/pytorch_nlp_cli_mode", "docs/source/neural_insights/docs/source/tf_accuracy_debug", "docs/source/neural_insights/gui/README", "docs/source/neural_solution/README", "docs/source/neural_solution/docs/source/README", "docs/source/neural_solution/docs/source/description_api", "docs/source/neural_solution/docs/source/ns_design_doc", "docs/source/neural_solution/docs/source/template/task_request_description", "docs/source/neural_solution/examples/README", "docs/source/neural_solution/examples/custom_models_optimized/tf_example1/README", "docs/source/neural_solution/examples/hf_models/README", "docs/source/neural_solution/examples/hf_models_grpc/README", "docs/source/neural_solution/frontend/README", "docs/source/objective", "docs/source/orchestration", "docs/source/pruning", "docs/source/publication_list", "docs/source/pythonic_style", "docs/source/quantization", "docs/source/quantization_layer_wise", "docs/source/quantization_mixed_precision", "docs/source/quantization_weight_only", "docs/source/releases_info", "docs/source/sigopt_strategy", "docs/source/smooth_quant", "docs/source/tensorboard", "docs/source/transform", "docs/source/tuning_strategies", "docs/source/user_guide", "docs/source/user_yaml", "docs/source/validated_model_list", "index"], "filenames": ["autoapi/block_mask/index.rst", "autoapi/neural_compressor/adaptor/adaptor/index.rst", "autoapi/neural_compressor/adaptor/index.rst", "autoapi/neural_compressor/adaptor/keras/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/conv2d/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/dense/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/depthwise_conv2d/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/pool2d/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/quantizer/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/separable_conv2d/index.rst", "autoapi/neural_compressor/adaptor/mxnet/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index.rst", "autoapi/neural_compressor/adaptor/onnxrt/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/calibrator/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/norm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/reduce/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/unary_op/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/smooth_quant/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/util/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/weight_only/index.rst", "autoapi/neural_compressor/adaptor/pytorch/index.rst", "autoapi/neural_compressor/adaptor/query/index.rst", "autoapi/neural_compressor/adaptor/tensorflow/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/dequantize_cast_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_node/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_schema/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/tf2onnx_utils/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/fake_quantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_config/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_helper/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/optimize_layer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_wrapper/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_calibration/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_scaler/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/tf2onnx_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/util/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/autoround/autoround/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/autoround/export/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/autoround/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/autoround/model_wrapper/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/autoround/sign_sgd/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/awq/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/gptq/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/hawq_metric/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/modified_pickle/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/quantize/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/torch_load/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/utils/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/mixed_precision/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/model_wrapper/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/pattern_detector/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/smooth_quant/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/teq/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/util/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/weight_only/index.rst", "autoapi/neural_compressor/algorithm/algorithm/index.rst", "autoapi/neural_compressor/algorithm/fast_bias_correction/index.rst", "autoapi/neural_compressor/algorithm/index.rst", "autoapi/neural_compressor/algorithm/smooth_quant/index.rst", "autoapi/neural_compressor/algorithm/weight_correction/index.rst", "autoapi/neural_compressor/benchmark/index.rst", "autoapi/neural_compressor/common/base_config/index.rst", "autoapi/neural_compressor/common/base_tuning/index.rst", "autoapi/neural_compressor/common/index.rst", "autoapi/neural_compressor/common/utils/constants/index.rst", "autoapi/neural_compressor/common/utils/index.rst", "autoapi/neural_compressor/common/utils/logger/index.rst", "autoapi/neural_compressor/common/utils/utility/index.rst", "autoapi/neural_compressor/compression/callbacks/index.rst", "autoapi/neural_compressor/compression/distillation/criterions/index.rst", "autoapi/neural_compressor/compression/distillation/index.rst", "autoapi/neural_compressor/compression/distillation/optimizers/index.rst", "autoapi/neural_compressor/compression/distillation/utility/index.rst", "autoapi/neural_compressor/compression/hpo/index.rst", "autoapi/neural_compressor/compression/hpo/sa_optimizer/index.rst", "autoapi/neural_compressor/compression/hpo/search_algorithms/index.rst", "autoapi/neural_compressor/compression/hpo/search_space/index.rst", "autoapi/neural_compressor/compression/index.rst", "autoapi/neural_compressor/compression/pruner/criteria/index.rst", "autoapi/neural_compressor/compression/pruner/dsnot/index.rst", "autoapi/neural_compressor/compression/pruner/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/auto_slim/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/pattern_analyzer/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/weight_slim/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/base/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/mha/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/ninm/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/nxm/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/base/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/basic/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/block_mask/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/mha/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/pattern_lock/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/progressive/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/retrain_free/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/sparse_gpt/index.rst", "autoapi/neural_compressor/compression/pruner/pruning/index.rst", "autoapi/neural_compressor/compression/pruner/regs/index.rst", "autoapi/neural_compressor/compression/pruner/schedulers/index.rst", "autoapi/neural_compressor/compression/pruner/tf_criteria/index.rst", "autoapi/neural_compressor/compression/pruner/utils/index.rst", "autoapi/neural_compressor/compression/pruner/wanda/index.rst", "autoapi/neural_compressor/compression/pruner/wanda/prune/index.rst", "autoapi/neural_compressor/compression/pruner/wanda/utils/index.rst", "autoapi/neural_compressor/compression/pruner/wanda/wrapper/index.rst", "autoapi/neural_compressor/conf/config/index.rst", "autoapi/neural_compressor/conf/dotdict/index.rst", "autoapi/neural_compressor/conf/index.rst", "autoapi/neural_compressor/conf/pythonic_config/index.rst", "autoapi/neural_compressor/config/index.rst", "autoapi/neural_compressor/contrib/index.rst", "autoapi/neural_compressor/contrib/strategy/index.rst", "autoapi/neural_compressor/contrib/strategy/sigopt/index.rst", "autoapi/neural_compressor/contrib/strategy/tpe/index.rst", "autoapi/neural_compressor/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/data/dataloaders/index.rst", "autoapi/neural_compressor/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/data/datasets/index.rst", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/data/filters/filter/index.rst", "autoapi/neural_compressor/data/filters/index.rst", "autoapi/neural_compressor/data/index.rst", "autoapi/neural_compressor/data/transforms/coco_transform/index.rst", "autoapi/neural_compressor/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/data/transforms/index.rst", "autoapi/neural_compressor/data/transforms/postprocess/index.rst", "autoapi/neural_compressor/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/benchmark/index.rst", "autoapi/neural_compressor/experimental/common/criterion/index.rst", "autoapi/neural_compressor/experimental/common/dataloader/index.rst", "autoapi/neural_compressor/experimental/common/index.rst", "autoapi/neural_compressor/experimental/common/metric/index.rst", "autoapi/neural_compressor/experimental/common/model/index.rst", "autoapi/neural_compressor/experimental/common/optimizer/index.rst", "autoapi/neural_compressor/experimental/common/postprocess/index.rst", "autoapi/neural_compressor/experimental/common/torch_utils/index.rst", "autoapi/neural_compressor/experimental/component/index.rst", "autoapi/neural_compressor/experimental/compression/index.rst", "autoapi/neural_compressor/experimental/contrib/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/sigopt/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/tpe/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/index.rst", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/index.rst", "autoapi/neural_compressor/experimental/data/index.rst", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/experimental/data/transforms/index.rst", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/experimental/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/distillation/index.rst", "autoapi/neural_compressor/experimental/export/index.rst", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index.rst", "autoapi/neural_compressor/experimental/export/tf2onnx/index.rst", "autoapi/neural_compressor/experimental/export/torch2onnx/index.rst", "autoapi/neural_compressor/experimental/graph_optimization/index.rst", "autoapi/neural_compressor/experimental/index.rst", "autoapi/neural_compressor/experimental/metric/bleu/index.rst", "autoapi/neural_compressor/experimental/metric/bleu_util/index.rst", "autoapi/neural_compressor/experimental/metric/coco_label_map/index.rst", "autoapi/neural_compressor/experimental/metric/coco_tools/index.rst", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/experimental/metric/f1/index.rst", "autoapi/neural_compressor/experimental/metric/index.rst", "autoapi/neural_compressor/experimental/metric/metric/index.rst", "autoapi/neural_compressor/experimental/mixed_precision/index.rst", "autoapi/neural_compressor/experimental/model_conversion/index.rst", "autoapi/neural_compressor/experimental/nas/basic_nas/index.rst", "autoapi/neural_compressor/experimental/nas/dynas/index.rst", "autoapi/neural_compressor/experimental/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas_utils/index.rst", "autoapi/neural_compressor/experimental/nas/search_algorithms/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/gradient_sensitivity/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/group_lasso/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/magnitude/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/pattern_lock/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/pruner/index.rst", "autoapi/neural_compressor/experimental/pruning/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_v2/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index.rst", "autoapi/neural_compressor/experimental/quantization/index.rst", "autoapi/neural_compressor/experimental/scheduler/index.rst", "autoapi/neural_compressor/experimental/strategy/auto_mixed_precision/index.rst", "autoapi/neural_compressor/experimental/strategy/basic/index.rst", "autoapi/neural_compressor/experimental/strategy/bayesian/index.rst", "autoapi/neural_compressor/experimental/strategy/exhaustive/index.rst", "autoapi/neural_compressor/experimental/strategy/index.rst", "autoapi/neural_compressor/experimental/strategy/mse/index.rst", "autoapi/neural_compressor/experimental/strategy/mse_v2/index.rst", "autoapi/neural_compressor/experimental/strategy/random/index.rst", "autoapi/neural_compressor/experimental/strategy/strategy/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/constant/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_sampler/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_space/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_structs/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/utility/index.rst", "autoapi/neural_compressor/index.rst", "autoapi/neural_compressor/metric/bleu/index.rst", "autoapi/neural_compressor/metric/bleu_util/index.rst", "autoapi/neural_compressor/metric/coco_label_map/index.rst", "autoapi/neural_compressor/metric/coco_tools/index.rst", "autoapi/neural_compressor/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/metric/f1/index.rst", "autoapi/neural_compressor/metric/index.rst", "autoapi/neural_compressor/metric/metric/index.rst", "autoapi/neural_compressor/mix_precision/index.rst", "autoapi/neural_compressor/model/base_model/index.rst", "autoapi/neural_compressor/model/index.rst", "autoapi/neural_compressor/model/keras_model/index.rst", "autoapi/neural_compressor/model/model/index.rst", "autoapi/neural_compressor/model/mxnet_model/index.rst", "autoapi/neural_compressor/model/nets_factory/index.rst", "autoapi/neural_compressor/model/onnx_model/index.rst", "autoapi/neural_compressor/model/tensorflow_model/index.rst", "autoapi/neural_compressor/model/torch_model/index.rst", "autoapi/neural_compressor/objective/index.rst", "autoapi/neural_compressor/onnxrt/algorithms/index.rst", "autoapi/neural_compressor/onnxrt/algorithms/smoother/calibrator/index.rst", "autoapi/neural_compressor/onnxrt/algorithms/smoother/core/index.rst", "autoapi/neural_compressor/onnxrt/algorithms/smoother/index.rst", "autoapi/neural_compressor/onnxrt/algorithms/weight_only/awq/index.rst", "autoapi/neural_compressor/onnxrt/algorithms/weight_only/gptq/index.rst", "autoapi/neural_compressor/onnxrt/algorithms/weight_only/index.rst", "autoapi/neural_compressor/onnxrt/algorithms/weight_only/rtn/index.rst", "autoapi/neural_compressor/onnxrt/algorithms/weight_only/utility/index.rst", "autoapi/neural_compressor/onnxrt/index.rst", "autoapi/neural_compressor/onnxrt/quantization/algorithm_entry/index.rst", "autoapi/neural_compressor/onnxrt/quantization/calibrate/index.rst", "autoapi/neural_compressor/onnxrt/quantization/config/index.rst", "autoapi/neural_compressor/onnxrt/quantization/index.rst", "autoapi/neural_compressor/onnxrt/quantization/quantize/index.rst", "autoapi/neural_compressor/onnxrt/utils/index.rst", "autoapi/neural_compressor/onnxrt/utils/onnx_model/index.rst", "autoapi/neural_compressor/onnxrt/utils/utility/index.rst", "autoapi/neural_compressor/profiling/index.rst", "autoapi/neural_compressor/profiling/parser/factory/index.rst", "autoapi/neural_compressor/profiling/parser/index.rst", "autoapi/neural_compressor/profiling/parser/onnx_parser/factory/index.rst", "autoapi/neural_compressor/profiling/parser/onnx_parser/index.rst", "autoapi/neural_compressor/profiling/parser/onnx_parser/parser/index.rst", "autoapi/neural_compressor/profiling/parser/parser/index.rst", "autoapi/neural_compressor/profiling/parser/result/index.rst", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/factory/index.rst", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/index.rst", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/parser/index.rst", "autoapi/neural_compressor/profiling/profiler/factory/index.rst", "autoapi/neural_compressor/profiling/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/factory/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/utils/index.rst", "autoapi/neural_compressor/profiling/profiler/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/factory/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/utils/index.rst", "autoapi/neural_compressor/quantization/index.rst", "autoapi/neural_compressor/strategy/auto/index.rst", "autoapi/neural_compressor/strategy/auto_mixed_precision/index.rst", "autoapi/neural_compressor/strategy/basic/index.rst", "autoapi/neural_compressor/strategy/bayesian/index.rst", "autoapi/neural_compressor/strategy/conservative/index.rst", "autoapi/neural_compressor/strategy/exhaustive/index.rst", "autoapi/neural_compressor/strategy/hawq_v2/index.rst", "autoapi/neural_compressor/strategy/index.rst", "autoapi/neural_compressor/strategy/mse/index.rst", "autoapi/neural_compressor/strategy/mse_v2/index.rst", "autoapi/neural_compressor/strategy/random/index.rst", "autoapi/neural_compressor/strategy/strategy/index.rst", "autoapi/neural_compressor/strategy/utils/constant/index.rst", "autoapi/neural_compressor/strategy/utils/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_space/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_structs/index.rst", "autoapi/neural_compressor/strategy/utils/utility/index.rst", "autoapi/neural_compressor/template/api_doc_example/index.rst", "autoapi/neural_compressor/template/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/smoother/calibration/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/smoother/core/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/smoother/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/smoother/scaler/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/static_quant/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/static_quant/keras/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/static_quant/keras_utils/conv2d/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/static_quant/keras_utils/dense/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/static_quant/keras_utils/depthwise_conv2d/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/static_quant/keras_utils/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/static_quant/keras_utils/pool2d/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/static_quant/keras_utils/quantizer/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/static_quant/keras_utils/separable_conv2d/index.rst", "autoapi/neural_compressor/tensorflow/index.rst", "autoapi/neural_compressor/tensorflow/quantization/algorithm_entry/index.rst", "autoapi/neural_compressor/tensorflow/quantization/config/index.rst", "autoapi/neural_compressor/tensorflow/quantization/index.rst", "autoapi/neural_compressor/tensorflow/quantization/quantize/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_add_to_biasadd/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_layout/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_leakyrelu/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_nan_to_random/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_placeholder_to_const/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/dilated_contraction/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/dummy_biasadd/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/expanddims_optimizer/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fetch_weight_from_reshape/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fold_batch_norm/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fold_constant/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_biasadd_add/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_column_wise_mul/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_conv_with_math/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_decomposed_bn/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_decomposed_in/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_gelu/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_layer_norm/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_pad_with_conv/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_reshape_transpose/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/graph_cse_optimizer/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/grappler_pass/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/insert_print_node/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/move_squeeze_after_relu/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/pre_optimize/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/remove_training_nodes/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/rename_batch_norm/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/split_shared_input/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/strip_equivalent_nodes/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/strip_unused_nodes/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/switch_optimizer/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/graph_base/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_util/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph_common/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/utility/index.rst", "autoapi/neural_compressor/tensorflow/utils/constants/index.rst", "autoapi/neural_compressor/tensorflow/utils/data/index.rst", "autoapi/neural_compressor/tensorflow/utils/index.rst", "autoapi/neural_compressor/tensorflow/utils/model/index.rst", "autoapi/neural_compressor/tensorflow/utils/model_wrappers/index.rst", "autoapi/neural_compressor/tensorflow/utils/nets_factory/index.rst", "autoapi/neural_compressor/tensorflow/utils/utility/index.rst", "autoapi/neural_compressor/torch/algorithms/habana_fp8/fp8_quant/index.rst", "autoapi/neural_compressor/torch/algorithms/habana_fp8/index.rst", "autoapi/neural_compressor/torch/algorithms/habana_fp8/modules/index.rst", "autoapi/neural_compressor/torch/algorithms/habana_fp8/observer/index.rst", "autoapi/neural_compressor/torch/algorithms/index.rst", "autoapi/neural_compressor/torch/algorithms/layer_wise/index.rst", "autoapi/neural_compressor/torch/algorithms/layer_wise/load/index.rst", "autoapi/neural_compressor/torch/algorithms/layer_wise/modified_pickle/index.rst", "autoapi/neural_compressor/torch/algorithms/layer_wise/utils/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/awq/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/gptq/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/modules/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/rtn/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/utility/index.rst", "autoapi/neural_compressor/torch/amp/autocast/index.rst", "autoapi/neural_compressor/torch/amp/fp8/functions/index.rst", "autoapi/neural_compressor/torch/amp/fp8/index.rst", "autoapi/neural_compressor/torch/amp/index.rst", "autoapi/neural_compressor/torch/index.rst", "autoapi/neural_compressor/torch/quantization/algorithm_entry/index.rst", "autoapi/neural_compressor/torch/quantization/autotune/index.rst", "autoapi/neural_compressor/torch/quantization/config/index.rst", "autoapi/neural_compressor/torch/quantization/index.rst", "autoapi/neural_compressor/torch/quantization/modules/index.rst", "autoapi/neural_compressor/torch/quantization/quantize/index.rst", "autoapi/neural_compressor/torch/utils/constants/index.rst", "autoapi/neural_compressor/torch/utils/environ/index.rst", "autoapi/neural_compressor/torch/utils/index.rst", "autoapi/neural_compressor/torch/utils/utility/index.rst", "autoapi/neural_compressor/training/index.rst", "autoapi/neural_compressor/utils/collect_layer_histogram/index.rst", "autoapi/neural_compressor/utils/constant/index.rst", "autoapi/neural_compressor/utils/create_obj_from_config/index.rst", "autoapi/neural_compressor/utils/index.rst", "autoapi/neural_compressor/utils/kl_divergence/index.rst", "autoapi/neural_compressor/utils/load_huggingface/index.rst", "autoapi/neural_compressor/utils/logger/index.rst", "autoapi/neural_compressor/utils/neural_insights_utils/index.rst", "autoapi/neural_compressor/utils/options/index.rst", "autoapi/neural_compressor/utils/pytorch/index.rst", "autoapi/neural_compressor/utils/utility/index.rst", "autoapi/neural_compressor/utils/weights_details/index.rst", "autoapi/neural_compressor/version/index.rst", "docs/build_docs/source/index.rst", "docs/source/CODE_OF_CONDUCT.md", "docs/source/CONTRIBUTING.md", "docs/source/FX.md", "docs/source/NAS.md", "docs/source/SECURITY.md", "docs/source/Welcome.md", "docs/source/adaptor.md", "docs/source/add_new_adaptor.md", "docs/source/add_new_data_type.md", "docs/source/api-doc/adaptor.rst", "docs/source/api-doc/adaptor/onnxrt.rst", "docs/source/api-doc/adaptor/torch_utils.rst", "docs/source/api-doc/api_doc_example.rst", "docs/source/api-doc/apis.rst", "docs/source/api-doc/benchmark.rst", "docs/source/api-doc/compression.rst", "docs/source/api-doc/config.rst", "docs/source/api-doc/mix_precision.rst", "docs/source/api-doc/model.rst", "docs/source/api-doc/objective.rst", "docs/source/api-doc/quantization.rst", "docs/source/api-doc/strategy.rst", "docs/source/api-doc/training.rst", "docs/source/benchmark.md", "docs/source/calibration.md", "docs/source/dataloader.md", "docs/source/dataset.md", "docs/source/design.md", "docs/source/diagnosis.md", "docs/source/distillation.md", "docs/source/distillation_quantization.md", "docs/source/distributed.md", "docs/source/examples_readme.md", "docs/source/export.md", "docs/source/faq.md", "docs/source/framework_yaml.md", "docs/source/get_started.md", "docs/source/incompatible_changes.md", "docs/source/infrastructure.md", "docs/source/installation_guide.md", "docs/source/legal_information.md", "docs/source/llm_recipes.md", "docs/source/metric.md", "docs/source/migration.md", "docs/source/mixed_precision.md", "docs/source/model.md", "docs/source/neural_coder/README.md", "docs/source/neural_coder/docs/AWSSageMakerSupport.md", "docs/source/neural_coder/docs/BigDLNanoSupport.md", "docs/source/neural_coder/docs/IntelCPU_PerformanceSetting.md", "docs/source/neural_coder/docs/PythonAPI.md", "docs/source/neural_coder/docs/PythonLauncher.md", "docs/source/neural_coder/docs/Quantization.md", "docs/source/neural_coder/docs/SupportMatrix.md", "docs/source/neural_coder/docs/release_notes/v0.4.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/DEVELOP.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/README.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/RELEASE.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/DEVELOP.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/RELEASE.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/README.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/vsc-extension-quickstart.md", "docs/source/neural_insights/README.md", "docs/source/neural_insights/docs/source/onnx_accuracy_debug.md", "docs/source/neural_insights/docs/source/pytorch_nlp_cli_mode.md", "docs/source/neural_insights/docs/source/tf_accuracy_debug.md", "docs/source/neural_insights/gui/README.md", "docs/source/neural_solution/README.md", "docs/source/neural_solution/docs/source/README.md", "docs/source/neural_solution/docs/source/description_api.md", "docs/source/neural_solution/docs/source/ns_design_doc.md", "docs/source/neural_solution/docs/source/template/task_request_description.md", "docs/source/neural_solution/examples/README.md", "docs/source/neural_solution/examples/custom_models_optimized/tf_example1/README.md", "docs/source/neural_solution/examples/hf_models/README.md", "docs/source/neural_solution/examples/hf_models_grpc/README.md", "docs/source/neural_solution/frontend/README.md", "docs/source/objective.md", "docs/source/orchestration.md", "docs/source/pruning.md", "docs/source/publication_list.md", "docs/source/pythonic_style.md", "docs/source/quantization.md", "docs/source/quantization_layer_wise.md", "docs/source/quantization_mixed_precision.md", "docs/source/quantization_weight_only.md", "docs/source/releases_info.md", "docs/source/sigopt_strategy.md", "docs/source/smooth_quant.md", "docs/source/tensorboard.md", "docs/source/transform.md", "docs/source/tuning_strategies.md", "docs/source/user_guide.md", "docs/source/user_yaml.md", "docs/source/validated_model_list.md", "index.rst"], "titles": ["<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">block_mask</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.adaptor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.dense</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.depthwise_conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.pool2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.separable_conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.onnxrt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.calibration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.calibrator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.activation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.argmax</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.attention</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.binary_op</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.concat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.direct_q8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.embed_layernorm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gather</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gavgpool</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gemm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.lstm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.maxpool</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.ops</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.pad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.reduce</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.resize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.split</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.unary_op</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.smooth_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.weight_only</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.query</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tensorflow</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_converter_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph_common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.smooth_quant_calibration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.smooth_quant_scaler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.tf2onnx_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.bias_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.insert_logging</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.autoround.autoround</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.autoround.export</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.autoround</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.autoround.model_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.autoround.sign_sgd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.awq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.bf16_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.gptq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.hawq_metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.layer_wise_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.layer_wise_quant.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.model_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.pattern_detector</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.smooth_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.symbolic_trace</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.teq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.weight_only</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.fast_bias_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.smooth_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.weight_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.common.base_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.common.base_tuning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.common.utils.constants</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.common.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.common.utils.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.common.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.callbacks</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.distillation.criterions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.distillation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.distillation.optimizers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.distillation.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.hpo</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.hpo.sa_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.hpo.search_algorithms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.hpo.search_space</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.criteria</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.dsnot</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim.auto_slim</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim.pattern_analyzer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim.weight_slim</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns.base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns.mha</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns.ninm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns.nxm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.basic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.block_mask</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.mha</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.pattern_lock</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.progressive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.retrain_free</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.sparse_gpt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.regs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.schedulers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.tf_criteria</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.wanda</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.wanda.prune</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.wanda.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.wanda.wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.dotdict</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.pythonic_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy.sigopt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy.tpe</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.base_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.default_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.fetcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.mxnet_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.onnxrt_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.pytorch_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.tensorflow_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.bert_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.coco_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dummy_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dummy_dataset_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.imagenet_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.style_transfer_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters.coco_filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters.filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.coco_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.imagenet_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.postprocess</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.tokenization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.criterion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.postprocess</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.torch_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.component</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.compression</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib.strategy.sigopt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib.strategy.tpe</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.base_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.default_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.fetcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.mxnet_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.onnxrt_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.pytorch_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.tensorflow_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.bert_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.coco_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dummy_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dummy_dataset_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.imagenet_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.style_transfer_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters.coco_filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters.filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.imagenet_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.tokenization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.distillation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.qlinear2qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.tf2onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.torch2onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.graph_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.bleu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.bleu_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.coco_label_map</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.coco_tools</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.evaluate_squad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.f1</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.model_conversion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.basic_nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.nas_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.search_algorithms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.gradient_sensitivity</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.group_lasso</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.magnitude</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.pattern_lock</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns.pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns.tile_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.prune_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.scheduler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.scheduler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.auto_mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.basic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.bayesian</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.exhaustive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.mse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.mse_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.tuning_sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.tuning_space</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.tuning_structs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.bleu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.bleu_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.coco_label_map</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.coco_tools</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.evaluate_squad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.f1</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.mix_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.base_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.keras_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.mxnet_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.nets_factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.onnx_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.tensorflow_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.torch_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.objective</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.algorithms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.algorithms.smoother.calibrator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.algorithms.smoother.core</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.algorithms.smoother</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.algorithms.weight_only.awq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.algorithms.weight_only.gptq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.algorithms.weight_only</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.algorithms.weight_only.rtn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.algorithms.weight_only.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.quantization.algorithm_entry</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.quantization.calibrate</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.quantization.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.quantization.quantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.utils.onnx_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.onnx_parser.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.onnx_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.onnx_parser.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.result</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.tensorflow_parser.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.tensorflow_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.tensorflow_parser.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.onnxrt_profiler.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.onnxrt_profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.onnxrt_profiler.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.onnxrt_profiler.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.tensorflow_profiler.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.tensorflow_profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.tensorflow_profiler.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.tensorflow_profiler.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.auto</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.auto_mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.basic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.bayesian</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.conservative</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.exhaustive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.hawq_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.mse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.mse_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_space</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_structs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.template.api_doc_example</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.template</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.algorithms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.algorithms.smoother.calibration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.algorithms.smoother.core</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.algorithms.smoother</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.algorithms.smoother.scaler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.algorithms.static_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.algorithms.static_quant.keras</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.algorithms.static_quant.keras_utils.conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.algorithms.static_quant.keras_utils.dense</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.algorithms.static_quant.keras_utils.depthwise_conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.algorithms.static_quant.keras_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.algorithms.static_quant.keras_utils.pool2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.algorithms.static_quant.keras_utils.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.algorithms.static_quant.keras_utils.separable_conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.algorithm_entry</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.quantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_add_to_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_layout</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_leakyrelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_nan_to_random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_placeholder_to_const</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dilated_contraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dummy_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.expanddims_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fetch_weight_from_reshape</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_biasadd_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_column_wise_mul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_conv_with_math</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_gelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_fp32_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_reshape_transpose</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.graph_cse_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.grappler_pass</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.insert_print_node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.move_squeeze_after_relu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.pre_optimize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.remove_training_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.rename_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.split_shared_input</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_equivalent_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_unused_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.switch_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph_common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.utils.constants</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.utils.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.utils.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.utils.model_wrappers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.utils.nets_factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.habana_fp8.fp8_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.habana_fp8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.habana_fp8.modules</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.habana_fp8.observer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.layer_wise</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.layer_wise.load</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.layer_wise.modified_pickle</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.layer_wise.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.weight_only.awq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.weight_only.gptq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.weight_only</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.weight_only.modules</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.weight_only.rtn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.weight_only.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.amp.autocast</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.amp.fp8.functions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.amp.fp8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.amp</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.quantization.algorithm_entry</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.quantization.autotune</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.quantization.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.quantization.modules</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.quantization.quantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.utils.constants</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.utils.environ</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.training</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.collect_layer_histogram</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.create_obj_from_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.kl_divergence</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.load_huggingface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.neural_insights_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.options</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.weights_details</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.version</span></code>", "Intel\u00ae Neural Compressor Documentation", "Contributor Covenant Code of Conduct", "Contribution Guidelines", "FX", "Neural Architecture Search", "Security Policy", "Intel\u00ae Neural Compressor", "Adaptor", "How to Add An Adaptor", "How to Support New Data Type, Like Int4, with a Few Line Changes", "Adaptor", "ONNX Runtime", "Torch Utils", "API Document Example", "APIs", "Benchmark", "Compression", "Config", "Mix Precision", "Model", "Objective", "Quantization", "Strategy", "Training", "Benchmarking", "Calibration Algorithms in Quantization", "DataLoader", "Dataset", "Design", "Diagnosis", "Distillation", "Distillation for Quantization", "Distributed Training and Inference (Evaluation)", "Examples", "Export", "Frequently Asked Questions", "Framework YAML Configuration Files", "Getting Started", "Incompatible changes between v1.2 and v1.1", "Infrastructure of Intel\u00ae Neural Compressor", "Installation", "Legal Information", "LLMs Quantization Recipes", "Metrics", "Code Migration from Intel Neural Compressor 1.X to Intel Neural Compressor 2.X", "Mixed Precision", "Model", "Neural Coder", "AWS Amazon SageMaker Support", "BigDL Nano Support", "Intel CPU Platforms: Best Performance Setting", "Neural Coder as Python API", "Python Launcher", "Neural Coder for Quantization", "Supported Optimization Features", "v0.4", "Changelog", "neural_compressor_ext_lab", "Intel\u00ae Neural Compressor as JupyterLab Extension", "Making a new release of neural_compressor_ext_lab", "Changelog", "neural_compressor_ext_lab_alibaba", "Making a new release of neural_compressor_ext_lab_alibaba", "Change Log", "Neural Coder", "Welcome to your VS Code Extension", "Neural Insights", "Step by step example how to debug accuracy with Neural Insights", "Step by step example how to dump weights data for PyTorch model with Neural Insights", "Step by step example how to debug accuracy with Neural Insights", "Getting Started with Create React App", "What\u2019s Neural Solution?", "Get started", "Neural Solution API", "Design Doc for Optimization as a Service [WIP]", "Task request description", "Examples List", "An end-to-end example: quantize a custom model with Neural Solution", "An end-to-end example: quantize a Hugging Face model with Neural Solution", "An end-to-end example: quantize a Hugging Face model with Neural Solution gRPC API", "Client", "Objective", "Optimization Orchestration", "Pruning", "Full Publications/Events (79)", "Pythonic Style Access for Configurations", "Quantization", "Layer Wise Quantization (LWQ)", "Turn OFF Auto Mixed Precision during Quantization", "Weight Only Quantization (WOQ)", "Release", "SigOpt Strategy", "Smooth Quant", "TensorBoard", "Transform", "Tuning Strategies", "User Guide", "User YAML Configuration Files", "Validated Models", "Intel\u00ae Neural Compressor Documentation"], "terms": {"block": [0, 44, 149, 166, 170, 171, 195, 206, 209, 214, 220, 340, 381, 387, 390, 441, 517, 522, 591, 633, 635, 641, 647], "mask": [0, 195, 202, 204, 207, 209, 213, 214, 244, 287, 313, 342, 366, 635, 650], "adaptor_registri": [1, 559], "cl": [1, 163, 172, 186, 188, 192, 193, 202, 207, 216, 217, 218, 246, 253, 261, 263, 268, 289, 296, 302, 324, 331, 335, 340, 342, 344, 355, 370, 381, 434, 507, 516, 549], "sourc": [1, 3, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 113, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 153, 154, 155, 156, 157, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 183, 184, 185, 186, 188, 189, 192, 193, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 228, 229, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 275, 276, 277, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 329, 330, 331, 332, 335, 336, 337, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 370, 371, 372, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 386, 387, 389, 390, 392, 393, 394, 398, 399, 401, 403, 405, 406, 407, 408, 410, 411, 413, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 434, 437, 438, 439, 440, 441, 444, 445, 447, 449, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 499, 500, 502, 504, 505, 506, 507, 514, 515, 516, 517, 518, 520, 521, 522, 523, 528, 529, 530, 533, 537, 538, 539, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 555, 558, 593, 596, 609, 611, 613, 614, 616, 636], "The": [1, 3, 11, 14, 16, 34, 54, 74, 113, 119, 121, 140, 148, 149, 150, 153, 162, 164, 170, 172, 177, 178, 179, 185, 186, 188, 192, 193, 195, 196, 200, 202, 204, 205, 207, 208, 209, 214, 215, 216, 217, 218, 219, 220, 225, 226, 228, 229, 232, 233, 234, 244, 245, 246, 247, 248, 252, 253, 261, 263, 266, 268, 271, 275, 276, 277, 287, 288, 289, 290, 291, 295, 296, 302, 303, 308, 310, 311, 312, 314, 315, 317, 319, 320, 321, 323, 324, 326, 327, 329, 330, 331, 332, 335, 337, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 352, 353, 354, 355, 359, 361, 363, 364, 365, 367, 368, 370, 371, 379, 381, 392, 399, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 434, 438, 440, 441, 444, 445, 449, 458, 461, 463, 483, 500, 502, 505, 507, 514, 523, 528, 529, 533, 537, 538, 539, 541, 543, 544, 548, 549, 550, 553, 555, 556, 559, 560, 561, 562, 564, 568, 571, 574, 576, 577, 578, 579, 581, 582, 584, 586, 588, 590, 591, 592, 594, 595, 596, 597, 598, 601, 602, 604, 607, 609, 610, 611, 613, 614, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 629, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650], "decor": [1, 16, 34, 67, 68, 70, 148, 172, 178, 188, 192, 193, 202, 207, 216, 218, 261, 268, 302, 317, 324, 331, 335, 340, 342, 344, 355, 358, 370, 381, 399, 434, 476, 477, 479, 500, 507, 523, 537, 549, 555, 556, 559, 647], "us": [1, 13, 16, 34, 42, 43, 44, 48, 49, 70, 103, 105, 116, 141, 149, 150, 153, 157, 162, 164, 170, 171, 177, 186, 188, 192, 193, 195, 200, 202, 207, 211, 212, 216, 218, 219, 222, 225, 226, 228, 229, 232, 233, 242, 243, 244, 245, 246, 247, 248, 251, 260, 261, 262, 263, 268, 275, 276, 285, 286, 287, 288, 289, 290, 291, 294, 301, 302, 306, 307, 308, 310, 311, 313, 317, 318, 319, 324, 331, 332, 335, 337, 340, 342, 343, 344, 345, 346, 349, 352, 355, 358, 359, 363, 364, 366, 370, 381, 386, 387, 389, 390, 399, 416, 421, 422, 426, 429, 431, 434, 438, 440, 441, 447, 449, 479, 502, 507, 514, 517, 521, 522, 523, 537, 538, 539, 540, 541, 542, 544, 549, 553, 554, 555, 556, 559, 560, 576, 577, 579, 581, 582, 583, 584, 586, 588, 590, 592, 593, 596, 597, 598, 599, 600, 601, 603, 604, 607, 609, 611, 613, 614, 616, 618, 619, 620, 621, 622, 629, 630, 631, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 649, 650], "regist": [1, 16, 34, 160, 162, 172, 178, 186, 188, 192, 193, 195, 197, 202, 203, 207, 210, 216, 217, 218, 219, 246, 253, 261, 263, 268, 289, 296, 302, 317, 324, 331, 335, 340, 342, 344, 355, 358, 370, 381, 399, 434, 440, 459, 507, 514, 515, 537, 546, 556, 559, 579, 584, 595, 596, 617, 633, 644, 647], "all": [1, 13, 16, 34, 44, 45, 63, 97, 156, 162, 163, 170, 171, 172, 174, 177, 178, 185, 188, 193, 197, 202, 210, 220, 228, 229, 234, 235, 242, 246, 253, 261, 262, 268, 271, 277, 285, 289, 296, 302, 307, 310, 313, 315, 317, 324, 331, 335, 336, 340, 346, 355, 358, 363, 366, 368, 370, 372, 381, 434, 440, 459, 472, 502, 505, 507, 514, 516, 517, 518, 541, 549, 553, 554, 558, 559, 560, 561, 578, 579, 584, 588, 592, 596, 599, 607, 610, 611, 614, 615, 616, 617, 618, 621, 622, 624, 625, 629, 630, 631, 634, 635, 636, 638, 640, 641, 644, 646, 647], "subclass": [1, 16, 34, 172, 188, 192, 193, 202, 207, 216, 218, 239, 243, 246, 253, 261, 268, 282, 286, 289, 296, 302, 317, 324, 331, 335, 340, 342, 344, 355, 358, 370, 381, 434, 559], "paramet": [1, 11, 13, 14, 16, 42, 43, 44, 45, 67, 68, 70, 86, 105, 116, 132, 140, 141, 148, 149, 150, 153, 155, 156, 157, 162, 163, 167, 168, 170, 171, 172, 177, 178, 179, 185, 186, 188, 190, 192, 193, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 223, 225, 226, 228, 229, 232, 233, 243, 244, 246, 253, 257, 261, 263, 268, 275, 276, 286, 287, 289, 296, 299, 302, 303, 305, 306, 307, 308, 310, 311, 313, 314, 315, 317, 319, 320, 321, 323, 324, 325, 326, 327, 329, 330, 331, 332, 335, 337, 340, 341, 342, 343, 344, 345, 349, 355, 359, 361, 363, 364, 366, 367, 368, 370, 371, 375, 379, 381, 386, 387, 389, 390, 399, 416, 421, 422, 426, 434, 438, 440, 441, 444, 447, 458, 461, 476, 477, 479, 495, 500, 505, 507, 514, 516, 517, 518, 521, 522, 523, 533, 537, 538, 541, 544, 545, 546, 548, 549, 555, 560, 578, 579, 582, 584, 591, 595, 596, 610, 616, 617, 618, 619, 624, 629, 630, 635, 638, 639, 641, 643, 644, 646, 647, 649], "framework_specific_info": [1, 3, 11, 14, 45, 47, 449, 559], "base": [1, 3, 11, 13, 14, 16, 34, 45, 46, 47, 86, 105, 116, 120, 122, 132, 144, 149, 153, 157, 160, 166, 170, 172, 178, 179, 185, 192, 193, 194, 195, 197, 203, 210, 217, 219, 229, 234, 237, 242, 244, 246, 253, 261, 271, 277, 280, 285, 287, 289, 296, 302, 317, 323, 325, 331, 332, 335, 337, 342, 352, 355, 359, 370, 372, 379, 380, 381, 386, 393, 431, 434, 438, 495, 502, 505, 515, 556, 558, 559, 560, 561, 579, 583, 584, 588, 596, 597, 604, 605, 607, 616, 619, 624, 627, 630, 631, 635, 636, 638, 641, 643, 644, 645, 647, 650], "framework": [1, 3, 11, 13, 14, 45, 153, 177, 178, 186, 188, 197, 203, 207, 210, 214, 215, 216, 230, 231, 235, 236, 240, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 255, 258, 261, 263, 264, 268, 273, 274, 278, 279, 281, 283, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 298, 300, 302, 308, 317, 318, 345, 353, 359, 370, 371, 372, 373, 375, 432, 438, 449, 459, 541, 558, 559, 561, 577, 581, 584, 585, 589, 590, 591, 592, 595, 596, 597, 618, 619, 635, 636, 638, 642, 645, 646, 647, 648, 649, 650], "layer": [1, 3, 11, 14, 45, 46, 47, 116, 117, 118, 119, 121, 122, 149, 156, 159, 161, 163, 167, 171, 175, 186, 189, 198, 200, 201, 202, 206, 211, 220, 223, 224, 228, 229, 263, 270, 340, 341, 449, 507, 513, 516, 518, 521, 539, 541, 549, 558, 559, 560, 561, 583, 591, 619, 635, 641, 642, 648], "mxnet_util": 2, "util": [2, 12, 17, 105, 110, 111, 139, 142, 155, 157, 158, 159, 168, 178, 187, 194, 197, 221, 228, 229, 270, 309, 311, 341, 351, 362, 364, 383, 384, 386, 387, 389, 394, 414, 419, 430, 458, 461, 512, 513, 530, 560, 561, 562, 577, 584, 596, 599, 619, 635, 638, 647, 648], "ox_util": 2, "oper": [2, 17, 43, 104, 110, 140, 148, 200, 201, 206, 224, 228, 229, 257, 299, 340, 416, 421, 444, 497, 500, 555, 576, 578, 581, 586, 616, 622, 635, 638, 641, 644, 646, 647], "activ": [2, 17, 29, 44, 141, 154, 170, 171, 189, 228, 229, 270, 359, 386, 438, 440, 447, 517, 559, 560, 561, 577, 581, 583, 588, 596, 617, 618, 621, 629, 630, 631, 637, 638, 641, 644, 645, 649], "argmax": [2, 17, 29], "attent": [2, 17, 29, 166, 198, 200, 211, 228, 229, 244, 287, 553, 582, 635], "binary_op": [2, 17, 29], "concat": [2, 17, 29, 147], "conv": [2, 17, 29, 58, 62, 66, 71, 72, 73, 92, 109, 175, 228, 229, 394, 467, 471, 475, 480, 481, 482, 555, 560, 561, 596, 635, 637, 638, 647], "direct_q8": [2, 17, 29], "embed_layernorm": [2, 17, 29], "gather": [2, 13, 17, 29, 228, 229, 340], "gavgpool": [2, 17, 29], "gemm": [2, 17, 29, 228, 229, 394], "lstm": [2, 17, 29], "matmul": [2, 17, 29, 44, 53, 59, 65, 73, 94, 109, 128, 137, 206, 228, 229, 340, 386, 387, 389, 390, 394, 459, 462, 468, 474, 482, 588, 619, 641, 647], "maxpool": [2, 17, 29, 129, 138, 588], "norm": [2, 17, 29], "op": [2, 13, 17, 29, 45, 51, 53, 65, 66, 67, 68, 69, 70, 71, 72, 74, 78, 81, 85, 88, 91, 92, 93, 94, 96, 105, 107, 109, 123, 124, 125, 131, 133, 134, 135, 136, 141, 143, 146, 148, 155, 157, 168, 170, 171, 175, 200, 228, 229, 307, 352, 359, 360, 416, 421, 427, 429, 431, 438, 439, 440, 447, 462, 474, 475, 476, 477, 478, 479, 480, 481, 483, 487, 490, 494, 500, 522, 523, 537, 543, 549, 559, 560, 561, 581, 588, 596, 597, 620, 621, 635, 638, 640, 642, 644, 645, 647, 649], "pad": [2, 17, 29, 44, 71, 72, 244, 261, 287, 302, 390, 480, 481, 579, 646], "pool": [2, 17, 29, 626], "reduc": [2, 17, 29, 228, 229, 559, 577, 583, 596, 597, 616, 617, 635, 636, 638, 639, 640, 641, 644, 647, 649], "resiz": [2, 17, 29, 244, 245, 257, 261, 287, 288, 299, 302, 579, 646], "split": [2, 17, 29, 43, 82, 149, 171, 260, 261, 301, 302, 491, 517, 521, 555, 639, 641, 644, 646], "unary_op": [2, 17, 29], "calibr": [2, 11, 13, 14, 17, 44, 49, 89, 90, 140, 170, 171, 177, 228, 229, 232, 233, 275, 276, 308, 345, 384, 385, 386, 387, 390, 392, 422, 446, 458, 461, 517, 522, 533, 543, 559, 561, 579, 590, 591, 635, 638, 641, 647, 648, 649], "quantiz": [2, 11, 13, 14, 16, 17, 42, 43, 44, 48, 49, 88, 92, 94, 96, 99, 107, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 149, 150, 154, 155, 156, 157, 158, 159, 163, 164, 165, 167, 169, 170, 171, 175, 177, 179, 185, 228, 229, 232, 233, 257, 264, 271, 275, 276, 299, 307, 308, 309, 319, 346, 352, 358, 362, 383, 384, 386, 387, 389, 390, 399, 427, 429, 431, 440, 444, 445, 447, 449, 513, 516, 517, 518, 520, 521, 522, 538, 539, 543, 544, 548, 549, 559, 566, 578, 579, 584, 585, 588, 590, 591, 595, 598, 599, 604, 606, 607, 610, 623, 625, 626, 628, 634, 636, 642, 645, 646, 647, 648, 649], "smooth_quant": [2, 17, 161, 170, 174, 228, 229, 362, 638, 644], "weight_onli": [2, 17, 229, 548, 639, 641], "tf_util": 2, "graph_rewrit": [2, 111], "bf16": [2, 44, 87, 111, 155, 228, 229, 359, 386, 387, 389, 390, 438, 559, 560, 588, 596, 601, 606, 610, 616, 640, 647, 650], "gener": [2, 13, 48, 49, 87, 111, 122, 148, 156, 170, 177, 200, 220, 232, 233, 234, 243, 246, 247, 248, 249, 261, 275, 276, 277, 286, 289, 290, 291, 292, 302, 310, 318, 349, 363, 371, 394, 417, 422, 426, 441, 459, 496, 500, 502, 518, 530, 538, 554, 555, 559, 561, 578, 582, 595, 596, 597, 599, 604, 609, 611, 613, 614, 616, 618, 619, 633, 635, 636, 638, 640, 641, 644, 645, 646, 647], "int8": [2, 18, 19, 43, 44, 87, 111, 123, 124, 125, 131, 133, 134, 135, 136, 143, 148, 171, 176, 177, 228, 229, 257, 299, 305, 306, 307, 359, 361, 386, 387, 389, 390, 399, 438, 440, 459, 500, 522, 548, 549, 554, 555, 558, 559, 560, 561, 576, 579, 583, 588, 594, 596, 597, 601, 604, 606, 607, 610, 616, 619, 621, 636, 637, 638, 640, 641, 642, 643, 644, 645, 646, 649], "onnx": [2, 14, 15, 16, 29, 41, 43, 44, 87, 111, 142, 175, 228, 229, 240, 283, 305, 306, 307, 371, 378, 384, 386, 387, 389, 390, 392, 398, 399, 416, 547, 554, 558, 559, 560, 562, 578, 581, 585, 586, 588, 589, 591, 597, 598, 601, 606, 607, 619, 636, 637, 641, 642, 644, 647], "qdq": [2, 42, 87, 111, 112, 113, 142, 170, 171, 228, 229, 305, 306, 307, 522, 559, 581, 586, 591, 606, 607, 638, 642, 644], "graph_bas": [2, 87, 111, 496], "quantize_graph": [2, 111], "qat": [2, 111, 112, 168, 229, 319, 379, 505, 583, 584, 591, 596, 638], "quantize_graph_bas": [2, 111, 112], "quantize_graph_bn": [2, 111, 112], "quantize_graph_concatv2": [2, 111, 112], "quantize_graph_conv": [2, 111, 112], "quantize_graph_for_intel_cpu": [2, 111, 112], "quantize_graph_matmul": [2, 111, 112], "quantize_graph_pool": [2, 111, 112], "transform_graph": [2, 111], "bias_correct": [2, 111, 145], "graph_transform_bas": [2, 111, 145], "insert_log": [2, 111, 145], "rerange_quantized_concat": [2, 111, 145], "graph_convert": [2, 111], "graph_converter_without_calib": [2, 111], "graph_util": [2, 111, 498], "quantize_graph_common": [2, 111, 498], "smooth_quant_calibr": [2, 111], "smooth_quant_scal": [2, 111], "tf2onnx_convert": [2, 111], "torch_util": [2, 265, 309, 362, 639, 644], "layer_wise_qu": [2, 158, 229, 639], "modified_pickl": [2, 158, 159, 512, 513], "torch_load": [2, 158, 159], "bf16_convert": [2, 52, 87, 111, 158], "hawq_metr": [2, 158], "model_wrapp": [2, 15, 151, 158, 503], "pattern_detector": [2, 158], "symbolic_trac": [2, 158], "tensorflow": [2, 52, 54, 75, 76, 77, 87, 95, 101, 102, 103, 104, 105, 106, 110, 111, 112, 114, 117, 130, 140, 141, 142, 145, 148, 186, 188, 219, 228, 229, 243, 244, 245, 246, 249, 251, 253, 261, 268, 286, 287, 288, 289, 292, 294, 296, 302, 306, 307, 308, 311, 313, 317, 318, 319, 345, 353, 364, 366, 370, 371, 379, 415, 416, 420, 421, 422, 432, 549, 554, 556, 558, 559, 560, 577, 578, 581, 582, 583, 585, 588, 589, 591, 592, 596, 597, 598, 606, 607, 618, 621, 635, 636, 637, 643, 644, 647, 649], "kerasadaptor": [3, 449], "kerasqueri": [3, 449], "local_config_fil": [3, 11, 14, 45, 47, 449], "none": [3, 13, 14, 41, 43, 44, 45, 47, 48, 49, 63, 89, 102, 104, 105, 110, 116, 142, 148, 149, 153, 154, 156, 157, 161, 162, 163, 164, 165, 167, 169, 170, 171, 177, 178, 179, 185, 186, 193, 195, 197, 198, 200, 204, 216, 220, 222, 224, 225, 226, 228, 229, 232, 233, 234, 236, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 251, 257, 261, 262, 263, 264, 271, 275, 276, 277, 279, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292, 294, 299, 302, 303, 306, 307, 308, 313, 317, 318, 319, 320, 323, 332, 337, 341, 345, 347, 349, 352, 353, 354, 355, 359, 366, 370, 371, 381, 415, 420, 421, 422, 423, 424, 426, 427, 429, 431, 432, 433, 434, 438, 441, 449, 458, 459, 461, 472, 497, 500, 502, 507, 514, 516, 517, 518, 520, 522, 523, 529, 530, 533, 538, 539, 541, 544, 546, 548, 549, 559, 560, 578, 579, 595, 619, 638, 641, 645, 646, 647], "defin": [3, 11, 14, 45, 46, 86, 153, 157, 192, 193, 200, 202, 207, 208, 209, 214, 215, 216, 217, 218, 228, 229, 232, 233, 275, 276, 320, 321, 323, 324, 325, 332, 337, 340, 341, 342, 344, 371, 393, 422, 495, 538, 548, 553, 556, 559, 560, 578, 579, 582, 583, 588, 591, 595, 596, 617, 634, 635, 638, 641, 643, 644, 645, 647, 649], "queri": [3, 11, 13, 14, 45, 47, 148, 170, 200, 211, 228, 229, 449, 500, 560, 561, 626, 638], "interfac": [3, 11, 14, 45, 46, 86, 113, 225, 308, 332, 337, 345, 346, 495, 541, 591, 596, 607, 625, 638, 642], "each": [3, 11, 14, 45, 46, 141, 148, 157, 162, 170, 171, 220, 228, 229, 242, 246, 249, 257, 261, 285, 289, 292, 299, 302, 311, 313, 314, 315, 352, 364, 366, 367, 368, 431, 447, 500, 514, 522, 549, 554, 559, 560, 561, 579, 581, 582, 583, 588, 596, 601, 607, 610, 616, 624, 626, 633, 635, 639, 641, 643, 645, 646, 647, 648], "adapt": [3, 11, 14, 45, 46, 149, 553, 558, 560, 579, 607, 636], "should": [3, 11, 14, 45, 46, 55, 115, 116, 162, 185, 198, 200, 211, 228, 229, 232, 233, 242, 244, 246, 261, 266, 275, 276, 285, 287, 289, 302, 307, 311, 364, 370, 371, 422, 441, 464, 514, 523, 538, 549, 555, 556, 559, 560, 561, 579, 582, 584, 595, 596, 602, 611, 614, 616, 618, 619, 633, 635, 638, 641, 646, 647, 649], "implement": [3, 11, 14, 45, 46, 110, 143, 147, 153, 154, 162, 232, 233, 239, 242, 243, 244, 246, 275, 276, 282, 285, 286, 287, 289, 310, 363, 371, 381, 422, 429, 497, 514, 517, 538, 561, 578, 579, 595, 596, 607, 617, 635, 638, 641, 642, 645, 647, 649], "inherit": [3, 11, 14, 45, 46, 185, 186, 212, 213, 218, 228, 241, 261, 263, 271, 284, 302, 342, 344, 556, 559, 560, 579], "specif": [3, 11, 14, 42, 45, 46, 104, 116, 153, 171, 177, 178, 188, 220, 224, 228, 229, 244, 245, 246, 247, 251, 253, 268, 287, 288, 289, 290, 294, 296, 326, 327, 329, 330, 331, 370, 422, 502, 521, 523, 546, 553, 556, 559, 560, 577, 578, 581, 582, 588, 590, 594, 595, 596, 597, 598, 599, 603, 604, 606, 610, 616, 618, 624, 633, 635, 637, 641, 647, 649], "backend": [3, 11, 14, 15, 41, 42, 45, 46, 175, 188, 228, 229, 230, 231, 235, 236, 240, 244, 245, 247, 248, 249, 250, 251, 255, 258, 261, 267, 268, 273, 274, 278, 279, 281, 283, 287, 288, 290, 291, 292, 293, 294, 298, 300, 302, 318, 353, 371, 372, 373, 375, 432, 555, 561, 581, 584, 590, 591, 596, 597, 605, 624, 629, 630, 631, 637, 641, 646, 647, 649], "own": [3, 11, 14, 45, 46, 74, 162, 242, 261, 285, 302, 381, 483, 514, 556, 560, 578, 579, 591, 595, 618, 622, 633, 641, 643, 648], "mxnetadaptor": 11, "do": [11, 14, 153, 156, 185, 216, 228, 229, 243, 244, 286, 287, 303, 307, 310, 313, 343, 363, 366, 518, 548, 553, 560, 579, 584, 588, 591, 595, 596, 611, 614, 635, 640, 642, 644, 647], "inspect": [11, 14, 642, 645], "tensor": [11, 13, 14, 15, 16, 43, 44, 70, 105, 140, 148, 149, 150, 153, 157, 162, 163, 170, 171, 195, 197, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 219, 229, 261, 302, 305, 307, 340, 342, 352, 379, 390, 431, 444, 479, 500, 505, 507, 514, 516, 522, 523, 544, 548, 549, 555, 561, 578, 579, 581, 635, 638, 642, 645, 646, 647], "dict": [11, 13, 14, 44, 45, 116, 148, 149, 150, 153, 155, 156, 157, 162, 170, 171, 172, 177, 188, 192, 195, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 223, 225, 226, 228, 229, 232, 233, 243, 262, 268, 275, 276, 286, 305, 307, 312, 313, 314, 315, 317, 320, 323, 324, 325, 332, 335, 337, 340, 341, 342, 343, 344, 349, 352, 358, 361, 365, 366, 367, 368, 370, 371, 379, 386, 387, 389, 394, 422, 437, 440, 441, 459, 500, 505, 507, 514, 517, 518, 521, 522, 528, 529, 538, 539, 541, 548, 549, 555, 560, 586, 595, 635, 637, 638, 644, 645, 647], "configur": [11, 13, 14, 45, 118, 149, 155, 170, 171, 177, 178, 220, 225, 228, 229, 232, 233, 235, 246, 249, 262, 267, 275, 276, 289, 292, 303, 307, 308, 319, 320, 321, 323, 332, 337, 341, 345, 346, 352, 370, 371, 381, 422, 431, 440, 458, 461, 521, 533, 538, 540, 541, 547, 548, 555, 556, 559, 560, 579, 581, 596, 603, 617, 624, 629, 630, 631, 633, 635, 638, 641, 642, 644, 646, 647, 650], "mxnetqueri": 11, "mxnet": [12, 13, 16, 229, 239, 243, 246, 249, 253, 261, 282, 286, 289, 292, 296, 302, 308, 317, 345, 370, 371, 376, 422, 554, 558, 559, 560, 577, 578, 585, 588, 591, 592, 596, 597, 598, 637, 647, 649], "init": [12, 17, 42, 174, 187, 197, 199, 221, 579, 595, 647], "optyp": [13, 228, 229, 305, 560], "enum": 13, "type": [13, 16, 42, 43, 44, 45, 74, 96, 105, 116, 122, 132, 140, 148, 149, 155, 156, 157, 162, 170, 171, 172, 186, 188, 192, 193, 196, 200, 201, 202, 207, 216, 217, 218, 220, 223, 226, 228, 229, 242, 244, 246, 253, 261, 263, 268, 285, 287, 289, 296, 302, 307, 310, 311, 313, 317, 324, 331, 335, 340, 342, 344, 349, 355, 359, 361, 363, 364, 366, 370, 379, 381, 386, 387, 389, 390, 399, 426, 427, 434, 438, 440, 441, 444, 458, 461, 483, 500, 505, 507, 514, 517, 518, 521, 522, 523, 537, 548, 549, 559, 560, 579, 581, 584, 586, 588, 591, 596, 597, 617, 619, 624, 625, 629, 630, 638, 639, 641, 643, 646, 647, 648, 649], "isiter": 13, "obj": [13, 105, 197, 220, 243, 286, 303, 308, 319, 320, 321, 323, 332, 337, 341, 345, 371, 381, 422, 538, 541, 549], "bool": [13, 42, 43, 44, 141, 148, 149, 150, 153, 156, 162, 168, 170, 171, 184, 196, 202, 228, 229, 244, 246, 257, 261, 287, 289, 299, 302, 307, 311, 317, 340, 358, 364, 370, 386, 387, 394, 399, 437, 441, 447, 459, 500, 514, 517, 518, 521, 522, 523, 530, 533, 544, 548, 549, 578, 579, 595, 627, 637, 646], "check": [13, 44, 67, 68, 105, 148, 149, 170, 171, 220, 235, 246, 289, 305, 341, 476, 477, 500, 507, 517, 548, 549, 558, 581, 584, 592, 600, 602, 604, 611, 614, 615, 619, 622, 625, 626, 642], "whether": [13, 43, 44, 105, 116, 148, 149, 150, 153, 156, 162, 170, 171, 202, 228, 229, 242, 244, 257, 261, 285, 287, 299, 302, 311, 313, 317, 340, 364, 366, 370, 386, 387, 389, 399, 500, 507, 514, 517, 518, 521, 522, 523, 541, 544, 548, 549, 559, 579, 595, 638, 641, 644, 646], "object": [13, 42, 43, 44, 45, 74, 86, 105, 116, 132, 148, 149, 153, 155, 157, 160, 162, 168, 170, 177, 185, 195, 197, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 225, 226, 228, 229, 232, 233, 234, 244, 245, 246, 261, 262, 264, 275, 276, 277, 287, 288, 289, 302, 303, 308, 313, 321, 323, 326, 327, 329, 330, 331, 332, 337, 340, 341, 342, 343, 344, 345, 349, 362, 366, 370, 371, 379, 380, 416, 421, 422, 426, 440, 483, 495, 500, 502, 505, 507, 514, 515, 522, 537, 538, 541, 548, 549, 555, 556, 560, 566, 576, 578, 579, 587, 595, 596, 598, 634, 635, 637, 638, 646, 647, 648, 650], "i": [13, 43, 44, 45, 48, 49, 51, 54, 55, 60, 64, 70, 82, 85, 105, 132, 143, 148, 149, 150, 153, 156, 157, 160, 162, 164, 168, 170, 171, 176, 177, 179, 185, 188, 189, 195, 196, 200, 201, 207, 212, 213, 214, 215, 216, 217, 219, 220, 228, 229, 232, 233, 234, 242, 243, 244, 245, 246, 247, 248, 251, 253, 257, 261, 262, 264, 268, 270, 271, 275, 276, 277, 285, 286, 287, 288, 289, 290, 291, 294, 296, 299, 302, 310, 313, 315, 317, 319, 324, 332, 337, 341, 342, 346, 353, 363, 366, 368, 370, 371, 381, 390, 399, 405, 406, 410, 422, 427, 432, 440, 441, 463, 464, 469, 473, 479, 491, 494, 500, 502, 507, 514, 515, 517, 518, 521, 522, 523, 538, 544, 548, 549, 553, 554, 555, 556, 559, 560, 561, 562, 564, 568, 571, 574, 576, 577, 578, 579, 581, 582, 583, 584, 586, 587, 588, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 607, 609, 610, 611, 613, 614, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 629, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650], "iter": [13, 15, 105, 140, 148, 149, 153, 170, 171, 177, 201, 207, 214, 218, 228, 229, 232, 233, 237, 242, 246, 247, 264, 275, 276, 280, 285, 289, 290, 342, 344, 371, 383, 422, 444, 458, 461, 500, 502, 517, 522, 538, 541, 555, 556, 559, 576, 578, 579, 596, 635, 637, 638, 644, 645, 647, 649], "return": [13, 16, 44, 45, 54, 67, 68, 70, 74, 105, 116, 148, 149, 153, 155, 156, 157, 162, 168, 170, 171, 172, 177, 186, 188, 192, 193, 196, 197, 200, 202, 203, 207, 210, 216, 217, 218, 220, 223, 226, 232, 233, 246, 253, 257, 261, 262, 263, 268, 275, 276, 289, 296, 299, 302, 307, 310, 311, 313, 314, 315, 317, 323, 324, 331, 335, 340, 341, 342, 344, 349, 355, 359, 361, 363, 364, 366, 367, 368, 370, 371, 375, 379, 381, 386, 387, 389, 390, 394, 399, 416, 421, 422, 426, 434, 438, 440, 441, 458, 459, 461, 463, 476, 477, 479, 483, 500, 505, 507, 514, 517, 518, 521, 522, 530, 533, 537, 538, 541, 546, 548, 549, 555, 556, 560, 561, 578, 579, 584, 595, 598, 629, 630, 631, 633, 635, 638, 641, 644, 645, 647], "true": [13, 43, 44, 85, 113, 146, 148, 149, 150, 156, 162, 171, 177, 192, 196, 228, 229, 242, 244, 246, 247, 260, 261, 262, 285, 287, 289, 290, 301, 302, 307, 311, 317, 335, 358, 364, 370, 381, 386, 387, 389, 394, 422, 437, 441, 459, 494, 500, 502, 514, 517, 518, 521, 522, 523, 530, 533, 541, 544, 548, 549, 560, 578, 579, 581, 584, 588, 595, 596, 599, 602, 603, 618, 619, 620, 621, 627, 629, 637, 638, 639, 641, 644, 645, 646, 647, 649], "els": [13, 148, 153, 171, 229, 242, 285, 381, 500, 522, 546, 604, 641, 645], "fals": [13, 14, 15, 41, 42, 43, 44, 47, 48, 49, 71, 72, 89, 92, 99, 102, 103, 105, 113, 131, 136, 143, 146, 147, 148, 149, 150, 153, 154, 156, 161, 162, 168, 170, 171, 177, 186, 189, 222, 228, 229, 234, 236, 239, 240, 243, 244, 246, 257, 261, 262, 263, 264, 270, 277, 279, 282, 283, 286, 287, 289, 299, 302, 313, 317, 366, 370, 381, 387, 394, 399, 422, 441, 459, 480, 481, 500, 502, 514, 517, 518, 521, 522, 530, 541, 544, 548, 549, 559, 560, 578, 579, 588, 595, 596, 609, 613, 619, 627, 630, 631, 637, 638, 641, 644, 645, 646, 647, 649], "boolean": [13, 149], "ensure_list": 13, "x": [13, 55, 74, 149, 156, 201, 228, 229, 243, 261, 286, 302, 349, 426, 441, 464, 483, 518, 577, 581, 584, 597, 598, 624, 625, 629, 630, 632, 638, 639, 644, 645, 646, 648], "ensur": [13, 261, 302, 349, 426, 584, 638, 646], "list": [13, 42, 43, 44, 54, 105, 140, 148, 149, 153, 155, 156, 157, 166, 170, 177, 178, 193, 200, 201, 206, 211, 216, 220, 223, 228, 229, 232, 233, 237, 244, 257, 261, 262, 275, 276, 280, 287, 299, 302, 306, 307, 310, 311, 313, 314, 315, 317, 324, 332, 337, 340, 343, 358, 363, 364, 366, 367, 368, 370, 371, 379, 383, 384, 386, 387, 389, 390, 394, 399, 405, 406, 410, 422, 437, 441, 444, 459, 463, 500, 505, 518, 522, 529, 530, 538, 539, 549, 555, 558, 559, 579, 586, 588, 592, 594, 596, 599, 604, 606, 609, 610, 613, 621, 624, 626, 627, 633, 635, 637, 638, 640, 644, 645, 647], "input": [13, 15, 42, 43, 44, 45, 54, 60, 64, 67, 68, 70, 71, 72, 74, 82, 83, 85, 86, 105, 109, 110, 116, 122, 141, 148, 149, 150, 153, 155, 165, 167, 168, 169, 170, 171, 175, 200, 201, 220, 228, 229, 232, 233, 244, 245, 246, 248, 257, 260, 261, 266, 275, 276, 287, 288, 289, 291, 299, 301, 302, 305, 306, 307, 370, 371, 375, 379, 384, 390, 422, 447, 463, 469, 473, 476, 477, 479, 480, 481, 483, 491, 492, 494, 495, 497, 500, 502, 505, 520, 521, 522, 523, 537, 538, 544, 546, 548, 549, 556, 559, 560, 576, 577, 578, 579, 581, 582, 583, 584, 586, 588, 590, 595, 596, 597, 598, 599, 604, 635, 637, 638, 641, 644, 645, 646, 649], "check_mx_vers": 13, "version": [13, 54, 104, 149, 153, 165, 170, 200, 229, 306, 307, 362, 463, 520, 553, 555, 559, 588, 592, 593, 596, 609, 611, 613, 614, 636, 644, 647, 648], "str": [13, 42, 43, 44, 140, 149, 150, 155, 157, 162, 163, 166, 167, 168, 170, 171, 172, 178, 184, 186, 188, 197, 200, 223, 228, 229, 244, 245, 246, 253, 257, 261, 263, 267, 268, 287, 288, 289, 296, 299, 302, 306, 307, 310, 311, 313, 315, 317, 324, 335, 358, 361, 363, 364, 366, 368, 370, 383, 384, 386, 387, 389, 390, 392, 394, 399, 407, 415, 417, 420, 421, 437, 440, 441, 444, 459, 461, 507, 514, 516, 521, 522, 523, 528, 530, 537, 541, 544, 546, 549, 550, 578, 579, 595, 627, 637, 645, 646], "mx": 13, "__version__": [13, 160, 515], "combine_cap": 13, "current": [13, 70, 104, 167, 171, 195, 197, 200, 203, 207, 210, 228, 229, 319, 326, 327, 329, 330, 331, 340, 342, 349, 353, 426, 432, 479, 522, 549, 555, 556, 559, 561, 577, 584, 588, 596, 599, 603, 616, 624, 633, 635, 638, 641, 644, 647], "new": [13, 16, 44, 148, 149, 167, 177, 234, 246, 261, 262, 277, 289, 302, 341, 381, 390, 500, 502, 522, 523, 554, 558, 560, 584, 596, 597, 610, 616, 617, 618, 619, 625, 626, 629, 630, 635, 636, 638, 641, 642, 643, 646, 648, 649], "combin": [13, 170, 179, 228, 229, 232, 233, 257, 271, 275, 276, 299, 371, 422, 507, 538, 549, 555, 559, 591, 596, 634, 636, 638, 640, 641, 646, 647], "capabl": [13, 47, 359, 438, 560, 561, 576, 588, 596, 597, 607, 618, 623, 635, 637, 638, 647, 649], "contain": [13, 67, 68, 70, 74, 139, 148, 149, 157, 162, 170, 171, 177, 185, 197, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 220, 228, 229, 232, 233, 244, 245, 246, 275, 276, 287, 288, 289, 303, 307, 308, 313, 314, 315, 319, 332, 335, 337, 340, 341, 342, 343, 344, 345, 366, 367, 368, 371, 422, 476, 477, 479, 483, 499, 500, 514, 517, 538, 541, 548, 577, 579, 582, 591, 595, 617, 624, 629, 630, 631, 635, 641, 645, 647, 648], "make_nc_model": 13, "target": [13, 42, 43, 102, 149, 150, 153, 156, 170, 200, 218, 220, 229, 341, 344, 349, 426, 518, 544, 579, 584, 596, 635, 645, 646, 647, 649], "sym_model": 13, "ctx": 13, "input_desc": 13, "convert": [13, 43, 48, 49, 50, 53, 54, 55, 56, 57, 66, 74, 86, 99, 100, 102, 103, 104, 105, 131, 136, 140, 142, 150, 155, 170, 200, 228, 229, 244, 257, 260, 261, 287, 299, 301, 302, 306, 313, 319, 341, 359, 366, 438, 441, 444, 449, 462, 463, 464, 465, 466, 475, 483, 495, 555, 560, 596, 597, 601, 638, 640, 641, 644, 646, 647], "symbol": [13, 43, 155, 168, 170, 310, 363, 371, 422, 555, 598], "model": [13, 15, 16, 29, 41, 42, 43, 44, 45, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 116, 118, 140, 141, 142, 148, 149, 150, 153, 154, 155, 156, 157, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 175, 177, 179, 185, 192, 197, 198, 200, 207, 208, 209, 212, 214, 215, 216, 218, 220, 222, 228, 229, 232, 233, 240, 243, 244, 246, 261, 262, 265, 266, 275, 276, 283, 286, 287, 289, 302, 303, 305, 306, 307, 308, 309, 317, 318, 319, 320, 323, 326, 327, 329, 330, 331, 332, 337, 341, 342, 343, 344, 345, 346, 347, 349, 352, 353, 354, 355, 362, 370, 371, 381, 383, 384, 386, 387, 389, 390, 392, 398, 399, 415, 420, 421, 422, 423, 424, 426, 427, 429, 431, 432, 433, 434, 440, 441, 444, 447, 458, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 478, 480, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 500, 505, 507, 514, 516, 517, 518, 521, 522, 523, 528, 529, 533, 537, 538, 544, 546, 548, 549, 551, 554, 555, 556, 558, 559, 561, 566, 576, 577, 578, 579, 581, 582, 583, 584, 585, 590, 591, 593, 595, 597, 599, 604, 606, 607, 610, 616, 618, 623, 625, 626, 627, 628, 633, 634, 636, 638, 642, 643, 645, 646, 647, 648, 649], "an": [13, 67, 68, 70, 105, 141, 143, 148, 149, 153, 157, 160, 162, 170, 171, 176, 189, 207, 228, 229, 237, 242, 246, 261, 265, 270, 280, 285, 289, 302, 309, 310, 314, 315, 323, 324, 346, 362, 363, 367, 368, 371, 416, 421, 422, 441, 447, 476, 477, 479, 500, 514, 515, 522, 523, 538, 549, 551, 553, 555, 556, 558, 559, 561, 577, 578, 579, 580, 581, 586, 594, 595, 596, 597, 599, 603, 604, 607, 616, 619, 620, 621, 624, 627, 633, 635, 636, 638, 641, 643, 644, 645, 646, 647], "neural": [13, 157, 177, 185, 188, 202, 203, 204, 205, 216, 228, 229, 256, 257, 258, 261, 262, 265, 268, 271, 299, 300, 302, 304, 309, 316, 317, 319, 332, 337, 340, 343, 345, 346, 351, 357, 362, 369, 370, 371, 375, 400, 422, 429, 430, 436, 504, 546, 551, 554, 559, 560, 561, 576, 577, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 593, 594, 597, 598, 600, 601, 604, 606, 607, 609, 611, 613, 614, 615, 627, 633, 634, 636, 638, 641, 642, 644, 645, 646, 647, 649, 650], "compressor": [13, 177, 185, 188, 204, 205, 216, 228, 229, 256, 257, 258, 261, 262, 265, 268, 271, 299, 300, 302, 304, 309, 316, 317, 319, 340, 343, 345, 346, 351, 357, 362, 369, 370, 371, 375, 400, 422, 430, 436, 504, 546, 551, 554, 556, 559, 560, 561, 576, 577, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 593, 594, 597, 598, 599, 600, 604, 606, 607, 609, 611, 613, 614, 615, 618, 619, 620, 621, 623, 624, 631, 633, 634, 635, 636, 638, 641, 642, 644, 645, 646, 647, 648, 649, 650], "tupl": [13, 105, 148, 170, 193, 229, 232, 233, 257, 261, 275, 276, 299, 302, 307, 358, 371, 390, 422, 437, 500, 528, 538, 548, 560, 579, 595, 596, 638, 646], "symnet": 13, "arg": [13, 54, 105, 149, 170, 244, 245, 246, 287, 288, 289, 340, 349, 392, 426, 441, 463, 518, 522, 528, 544, 545, 579, 584, 596, 605, 635, 638, 641, 644, 645, 646], "aux": 13, "data": [13, 42, 43, 44, 56, 105, 140, 148, 149, 157, 162, 167, 170, 171, 175, 200, 228, 229, 232, 233, 262, 264, 275, 276, 307, 309, 349, 359, 361, 362, 371, 384, 390, 393, 399, 415, 420, 422, 426, 438, 440, 444, 458, 461, 465, 500, 503, 507, 514, 522, 538, 541, 546, 549, 558, 559, 577, 578, 579, 584, 588, 589, 592, 595, 596, 597, 618, 619, 621, 624, 629, 630, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648], "descript": [13, 132, 196, 441, 555, 560, 561, 578, 624, 628, 644], "ncmodel": 13, "fuse": [13, 58, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 91, 92, 93, 94, 96, 131, 136, 168, 170, 175, 467, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 555, 644, 645], "suppli": 13, "get_framework_nam": 13, "get": [13, 42, 43, 44, 45, 67, 68, 70, 104, 105, 148, 149, 156, 163, 167, 170, 177, 188, 189, 193, 195, 197, 198, 200, 203, 210, 217, 218, 219, 220, 226, 229, 237, 261, 262, 268, 270, 280, 302, 307, 340, 342, 344, 352, 359, 361, 370, 379, 387, 393, 399, 422, 431, 438, 440, 459, 476, 477, 479, 500, 505, 507, 516, 518, 522, 537, 541, 544, 546, 549, 560, 577, 587, 591, 592, 594, 596, 602, 619, 621, 629, 630, 636, 641, 644, 647, 648, 651], "name": [13, 43, 45, 54, 67, 68, 70, 104, 105, 110, 116, 140, 148, 149, 150, 155, 156, 157, 162, 163, 167, 168, 170, 172, 177, 178, 179, 189, 192, 193, 195, 200, 202, 207, 210, 211, 216, 217, 218, 219, 220, 223, 226, 228, 229, 244, 245, 246, 249, 253, 259, 261, 262, 266, 269, 270, 287, 288, 289, 292, 296, 302, 305, 306, 307, 312, 317, 335, 340, 342, 344, 359, 361, 365, 370, 375, 379, 381, 399, 422, 438, 440, 444, 463, 476, 477, 479, 497, 500, 505, 507, 514, 516, 518, 522, 537, 539, 541, 546, 549, 554, 555, 561, 579, 581, 584, 586, 588, 593, 595, 596, 598, 602, 609, 613, 617, 618, 624, 635, 638, 642, 643, 645, 647, 649, 650], "context": [13, 523, 549, 637, 641], "prepare_model_data": 13, "nc_model": [13, 332, 337], "data_x": 13, "prepar": [13, 44, 170, 390, 555, 558, 579, 584, 589, 618, 629, 630, 631, 635, 638], "dataload": [13, 15, 42, 44, 140, 141, 149, 154, 156, 157, 167, 170, 171, 177, 197, 198, 200, 216, 220, 222, 232, 233, 244, 255, 265, 275, 276, 287, 298, 303, 309, 332, 337, 346, 362, 383, 384, 386, 387, 415, 420, 422, 444, 447, 502, 517, 518, 522, 538, 541, 555, 558, 559, 560, 581, 582, 583, 584, 589, 590, 596, 597, 618, 619, 634, 635, 638, 639, 640, 641, 644, 645, 646, 648, 649], "need": [13, 42, 105, 109, 150, 167, 171, 177, 200, 216, 229, 232, 233, 234, 242, 243, 246, 253, 261, 264, 266, 267, 275, 276, 277, 285, 286, 289, 296, 302, 307, 346, 352, 370, 371, 381, 384, 422, 431, 502, 517, 538, 548, 549, 555, 559, 578, 579, 581, 582, 584, 591, 596, 599, 601, 602, 605, 609, 610, 611, 613, 614, 616, 617, 618, 619, 620, 621, 623, 627, 629, 635, 637, 638, 639, 640, 641, 642, 644, 646, 647, 649], "run": [13, 140, 148, 162, 171, 177, 207, 220, 228, 229, 232, 233, 243, 260, 262, 275, 276, 286, 301, 341, 342, 349, 371, 422, 426, 444, 500, 514, 518, 523, 538, 559, 576, 584, 587, 588, 596, 599, 601, 603, 604, 605, 607, 609, 610, 611, 613, 614, 616, 624, 625, 626, 627, 629, 630, 631, 636, 638, 641, 642, 643, 645, 647, 649], "loader": [13, 140, 232, 233, 275, 276, 371, 422, 444, 458, 461, 538, 544, 578, 638], "dataloaderwrap": 13, "prepare_model": 13, "create_data_exampl": 13, "creat": [13, 16, 105, 160, 228, 229, 234, 244, 246, 264, 277, 287, 289, 313, 323, 324, 359, 366, 416, 421, 438, 440, 441, 502, 515, 541, 553, 556, 559, 579, 598, 609, 611, 613, 614, 617, 629, 630, 631, 635, 638, 643, 645, 647, 648], "exampl": [13, 44, 149, 153, 157, 162, 170, 171, 177, 178, 179, 193, 200, 201, 216, 228, 229, 244, 245, 246, 257, 261, 287, 288, 289, 299, 302, 313, 314, 315, 317, 343, 366, 367, 368, 370, 371, 381, 386, 387, 389, 399, 422, 440, 441, 507, 514, 517, 521, 522, 537, 538, 548, 549, 553, 558, 560, 561, 566, 590, 591, 599, 602, 603, 604, 607, 624, 627, 640, 642, 646, 647, 648, 651], "prepare_dataload": 13, "io": [13, 162, 514, 622], "ndarray_to_devic": 13, "ndarrai": [13, 42, 43, 67, 68, 70, 261, 302, 476, 477, 479, 539, 587, 646], "devic": [13, 45, 79, 89, 90, 91, 92, 93, 94, 97, 107, 131, 136, 147, 149, 150, 156, 161, 162, 164, 170, 171, 197, 200, 201, 216, 220, 222, 228, 229, 488, 514, 518, 523, 544, 560, 578, 582, 596, 597, 599, 602, 607, 616, 635, 637, 639, 641], "is_model_quant": 13, "query_quantizable_nod": 13, "node": [13, 42, 43, 44, 50, 54, 55, 56, 57, 60, 62, 64, 67, 68, 70, 74, 77, 80, 82, 83, 84, 98, 102, 103, 105, 110, 132, 140, 148, 200, 305, 307, 379, 390, 399, 421, 444, 463, 464, 465, 466, 469, 471, 473, 476, 477, 479, 483, 486, 489, 491, 492, 493, 497, 500, 505, 559, 581, 584, 619, 623, 626, 629, 630, 631, 639, 645, 647, 650], "given": [13, 16, 43, 67, 68, 70, 104, 105, 116, 148, 149, 163, 170, 223, 261, 302, 313, 366, 422, 476, 477, 479, 500, 516, 522, 537, 556, 561, 635, 644, 646], "map": [13, 43, 105, 148, 162, 170, 229, 261, 302, 305, 307, 308, 312, 314, 315, 317, 332, 337, 342, 345, 365, 367, 368, 370, 500, 514, 579, 584, 595, 596, 609, 613, 621, 635, 638, 641], "quantize_sym_model": 13, "qconfig": [13, 150, 170, 548, 641, 645], "accord": [13, 122, 170, 177, 228, 229, 244, 245, 246, 261, 287, 288, 289, 302, 352, 429, 431, 541, 556, 559, 579, 584, 619, 624, 629, 630, 631, 635, 640, 644, 646, 647], "run_forward": 13, "b_filter": 13, "collector": [13, 157, 539], "pre_batch": 13, "post_batch": 13, "forward": [13, 149, 170, 220, 523, 560, 596, 618, 635, 637, 638, 641, 644, 645], "propag": [13, 100], "filter": [13, 244, 245, 246, 247, 248, 249, 251, 255, 287, 288, 289, 290, 291, 292, 294, 298, 309, 362, 502, 507, 549, 561, 579, 591, 635, 645], "which": [13, 42, 56, 83, 110, 149, 153, 156, 157, 162, 167, 171, 178, 179, 195, 200, 201, 203, 207, 208, 209, 211, 214, 215, 216, 218, 220, 228, 229, 244, 245, 246, 257, 262, 287, 288, 289, 299, 310, 315, 324, 326, 327, 329, 330, 331, 335, 340, 341, 342, 344, 349, 363, 368, 370, 375, 381, 384, 387, 399, 422, 426, 465, 492, 497, 507, 514, 517, 518, 537, 549, 553, 555, 556, 559, 560, 561, 577, 578, 579, 581, 582, 584, 587, 588, 591, 595, 596, 597, 598, 600, 604, 607, 610, 616, 617, 618, 621, 624, 629, 630, 631, 634, 635, 637, 638, 639, 640, 641, 642, 644, 645, 646, 647, 648, 649], "batch": [13, 149, 170, 234, 236, 237, 242, 243, 264, 277, 279, 280, 285, 286, 502, 522, 538, 578, 582, 583, 596, 634, 635, 638, 644, 646, 647, 650], "infer": [13, 43, 105, 140, 150, 170, 171, 200, 308, 345, 379, 381, 422, 444, 505, 517, 522, 523, 538, 559, 560, 577, 582, 583, 596, 597, 616, 633, 635, 636, 638, 641, 644, 645, 647], "collect": [13, 16, 43, 149, 170, 179, 259, 261, 264, 266, 267, 269, 302, 315, 317, 368, 370, 507, 539, 549, 560, 638, 645, 647], "inform": [13, 149, 157, 195, 197, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 229, 232, 233, 264, 266, 267, 275, 276, 340, 342, 343, 344, 346, 370, 383, 549, 553, 554, 557, 558, 559, 560, 561, 562, 564, 568, 571, 574, 577, 582, 588, 596, 598, 611, 614, 617, 618, 621, 622, 624, 625, 629, 630, 635, 640, 641, 642, 644, 645, 649, 650, 651], "dure": [13, 160, 162, 202, 206, 218, 228, 229, 340, 344, 381, 514, 515, 549, 560, 581, 596, 598, 623, 633, 634, 635, 638, 644, 645, 649], "call": [13, 42, 162, 167, 172, 200, 208, 209, 214, 313, 342, 366, 384, 514, 523, 555, 556, 559, 578, 590, 605, 607, 617, 635, 638, 644, 645, 646], "prior": [13, 88, 647], "after": [13, 78, 148, 150, 170, 198, 202, 207, 209, 214, 228, 229, 244, 257, 261, 264, 287, 299, 302, 342, 427, 441, 487, 500, 544, 549, 556, 560, 579, 581, 582, 583, 586, 591, 595, 596, 609, 610, 613, 617, 621, 633, 634, 635, 638, 640, 641, 643, 644, 645, 646, 647], "count": [13, 556, 579, 641], "int": [13, 16, 42, 43, 44, 105, 140, 148, 149, 150, 154, 166, 170, 171, 184, 198, 228, 229, 243, 244, 245, 257, 261, 286, 287, 288, 299, 302, 306, 307, 311, 313, 317, 324, 364, 366, 370, 383, 386, 387, 389, 390, 394, 399, 407, 416, 421, 440, 441, 444, 445, 449, 458, 461, 500, 517, 521, 522, 530, 544, 549, 578, 579, 595, 596, 627, 637, 641, 646], "make_symbol_block": 13, "gluon": [13, 371, 422, 598], "symbolblock": 13, "make_modul": 13, "parse_tune_config": 13, "tune_cfg": [13, 148, 155, 170, 500, 559, 561, 647], "quantizable_nod": 13, "strategi": [13, 170, 214, 228, 229, 230, 246, 273, 289, 309, 362, 558, 559, 560, 561, 566, 577, 578, 584, 591, 596, 604, 616, 621, 636, 637, 638, 640, 641, 642, 648, 649], "config": [13, 44, 115, 116, 118, 122, 170, 177, 178, 179, 184, 195, 197, 198, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 228, 232, 233, 244, 275, 276, 287, 326, 327, 329, 330, 331, 332, 337, 340, 341, 342, 343, 344, 359, 360, 362, 371, 386, 387, 389, 392, 416, 421, 438, 439, 440, 441, 445, 449, 458, 538, 541, 548, 549, 556, 558, 560, 561, 566, 576, 578, 581, 582, 583, 584, 586, 589, 591, 595, 596, 597, 598, 618, 619, 634, 635, 637, 638, 640, 641, 643, 645, 647], "tune": [13, 45, 149, 177, 178, 179, 228, 229, 232, 233, 244, 246, 275, 276, 287, 289, 308, 345, 347, 348, 349, 350, 352, 353, 354, 355, 358, 359, 360, 361, 371, 381, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 434, 437, 438, 439, 440, 529, 538, 549, 559, 560, 577, 578, 579, 581, 584, 591, 593, 596, 597, 616, 620, 623, 625, 626, 633, 635, 636, 640, 642, 643, 645, 649], "from": [13, 43, 45, 61, 67, 68, 70, 105, 148, 149, 150, 153, 162, 163, 167, 170, 171, 177, 179, 185, 186, 193, 195, 197, 203, 204, 205, 206, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 228, 229, 232, 233, 234, 237, 241, 244, 245, 246, 247, 248, 249, 251, 256, 257, 263, 264, 267, 275, 276, 277, 280, 284, 287, 288, 289, 290, 291, 292, 294, 299, 303, 305, 306, 307, 310, 313, 314, 315, 319, 324, 340, 341, 342, 344, 359, 361, 363, 366, 367, 368, 371, 379, 381, 386, 399, 422, 438, 440, 441, 449, 470, 476, 477, 479, 500, 502, 505, 507, 514, 516, 521, 522, 538, 541, 544, 548, 549, 553, 554, 555, 556, 559, 561, 576, 578, 579, 581, 582, 583, 584, 585, 586, 587, 589, 591, 594, 595, 597, 598, 599, 603, 604, 605, 607, 617, 619, 621, 622, 626, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648], "distribute_calib_tensor": 13, "calib_tensor": 13, "calib_cfg": 13, "tensor_to_nod": 13, "distribut": [13, 16, 143, 176, 228, 229, 234, 236, 237, 239, 240, 242, 243, 264, 277, 279, 280, 282, 283, 285, 286, 386, 502, 543, 558, 560, 578, 582, 592, 611, 614, 618, 621, 629, 636, 638, 641, 642, 644, 648, 650], "depend": [13, 232, 233, 262, 275, 276, 371, 422, 538, 554, 587, 588, 622, 637, 638, 647], "algorithm": [13, 44, 153, 156, 170, 178, 192, 225, 229, 310, 317, 325, 362, 363, 370, 399, 507, 537, 541, 543, 556, 559, 560, 561, 582, 583, 588, 591, 594, 605, 610, 635, 638, 645, 649], "set": [13, 43, 51, 96, 105, 115, 148, 149, 162, 167, 170, 177, 179, 184, 188, 220, 226, 228, 229, 232, 233, 234, 244, 246, 249, 261, 262, 267, 268, 275, 276, 277, 287, 289, 292, 302, 313, 319, 332, 337, 341, 346, 366, 370, 371, 379, 421, 422, 441, 449, 500, 502, 505, 514, 522, 537, 538, 546, 549, 553, 556, 560, 576, 578, 579, 582, 584, 586, 588, 590, 591, 592, 595, 596, 597, 599, 601, 603, 617, 618, 619, 620, 621, 622, 626, 629, 635, 637, 638, 641, 643, 644, 647, 649], "kl": [13, 16, 228, 229, 539, 543, 560, 561, 577, 588, 596, 647, 649], "minmax": [13, 16, 560, 561, 577, 588, 638, 649], "calib_model": 13, "qsym_model": 13, "calib_data": [13, 161], "calibdata": 13, "threshold": [13, 173, 196, 539, 543, 595], "amp_convert": 13, "amp_cfg": 13, "support": [13, 42, 43, 44, 97, 104, 149, 167, 175, 178, 186, 188, 197, 203, 210, 214, 215, 228, 229, 232, 233, 243, 244, 246, 253, 257, 261, 263, 264, 265, 268, 275, 276, 286, 287, 289, 296, 299, 302, 309, 317, 319, 324, 340, 342, 346, 353, 359, 362, 370, 371, 375, 381, 384, 386, 387, 389, 390, 399, 422, 432, 438, 441, 538, 541, 543, 544, 549, 551, 558, 560, 594, 596, 599, 604, 607, 610, 616, 623, 624, 627, 636, 640, 643, 647, 648], "amp": [13, 149, 599, 606, 625, 641], "wrap": [13, 105, 116, 149, 186, 224, 263, 313, 366, 523, 555, 584, 611, 614], "dataiterload": 13, "data_it": [13, 200], "collectorbas": 13, "calibcollector": 13, "include_tensors_kl": 13, "include_tensors_minmax": 13, "num_bin": [13, 16, 539], "8001": [13, 539, 624, 629, 630, 631], "tensorcollector": 13, "include_nod": 13, "qtensor_to_tensor": 13, "build": [13, 42, 44, 115, 172, 173, 175, 176, 320, 323, 374, 376, 378, 379, 380, 390, 398, 505, 559, 560, 561, 592, 598, 609, 611, 613, 614, 617, 636, 647], "up": [13, 100, 211, 261, 302, 341, 584, 585, 588, 591, 607, 611, 614, 616, 635, 636, 637, 638, 643, 646, 647, 649], "namecollector": 13, "cache_kl": 13, "cache_minmax": 13, "tensors_kl": 13, "tensors_minmax": 13, "onnxruntimeadaptor": 14, "rt": 14, "onnxrt_weightonlyadaptor": 14, "onnxrt_qlinearopsadaptor": [14, 559], "onnxrt_integeropsadaptor": 14, "onnxrt_qdqadaptor": 14, "onnxrtqueri": 14, "dynam": [14, 149, 162, 229, 234, 277, 307, 359, 438, 502, 514, 559, 578, 582, 586, 591, 596, 599, 604, 605, 606, 607, 610, 616, 636, 647, 650], "static": [14, 41, 42, 47, 167, 175, 200, 229, 307, 359, 384, 422, 438, 449, 458, 459, 533, 559, 560, 561, 581, 586, 591, 596, 599, 604, 605, 606, 607, 610, 616, 619, 627, 629, 630, 631, 639, 644, 647, 650], "format": [14, 18, 43, 54, 148, 150, 170, 228, 229, 244, 245, 246, 287, 288, 289, 307, 313, 319, 359, 366, 438, 441, 449, 463, 500, 544, 558, 560, 561, 579, 584, 586, 595, 596, 597, 598, 599, 621, 624, 636, 638, 641, 642], "onnxrtaug": 15, "dump_op_typ": 15, "black_nod": 15, "white_nod": 15, "cpuexecutionprovid": [15, 41, 42, 44, 383, 384, 386, 387, 389, 394, 597, 638], "reduce_rang": [15, 41, 42, 228, 229, 399, 561, 637], "kwarg": [15, 43, 105, 122, 123, 124, 125, 126, 127, 128, 129, 132, 133, 134, 135, 137, 138, 149, 163, 170, 171, 198, 228, 229, 246, 259, 261, 266, 269, 289, 302, 358, 360, 370, 371, 372, 374, 376, 378, 379, 380, 383, 392, 394, 398, 422, 437, 439, 441, 505, 516, 518, 521, 522, 528, 538, 544, 545, 548, 549, 578], "augment": 15, "dump": [15, 160, 170, 177, 307, 383, 507, 515, 549, 554, 621, 638, 642, 645], "calib_registri": 16, "calib_method": 16, "calibratorbas": 16, "minmaxcalibr": 16, "percentilecalibr": 16, "2048": [16, 149, 156, 171, 507, 518, 530, 549, 641], "percentil": [16, 44, 140, 171, 389, 390, 444, 459, 521, 522, 577], "99": [16, 179, 459, 650], "999": [16, 459, 649], "option": [16, 44, 105, 149, 150, 153, 162, 170, 171, 202, 228, 229, 232, 233, 244, 261, 275, 276, 287, 302, 306, 307, 313, 319, 340, 346, 359, 362, 366, 370, 371, 386, 387, 389, 390, 399, 422, 438, 440, 441, 507, 514, 517, 521, 522, 523, 538, 542, 544, 549, 560, 561, 578, 579, 588, 592, 596, 610, 624, 627, 629, 630, 631, 635, 638, 641, 643, 644, 646, 647, 649], "number": [16, 44, 67, 68, 105, 140, 149, 150, 170, 171, 178, 193, 196, 198, 204, 205, 228, 229, 242, 245, 257, 261, 285, 288, 299, 302, 314, 315, 317, 340, 349, 367, 368, 370, 386, 387, 389, 390, 416, 421, 426, 441, 444, 476, 477, 517, 522, 541, 549, 576, 578, 579, 584, 595, 624, 626, 635, 638, 641, 643, 644, 646, 647], "bin": [16, 162, 163, 507, 514, 516, 549, 587], "histogram": [16, 507, 539, 549, 618, 645], "valu": [16, 43, 44, 56, 67, 68, 70, 89, 90, 105, 143, 148, 149, 162, 170, 176, 177, 179, 193, 195, 200, 201, 211, 219, 220, 225, 226, 228, 229, 232, 233, 244, 247, 248, 257, 261, 262, 275, 276, 287, 290, 291, 299, 302, 313, 317, 341, 349, 352, 359, 366, 370, 371, 387, 399, 422, 426, 431, 438, 440, 441, 465, 476, 477, 479, 500, 502, 514, 523, 538, 539, 541, 549, 555, 560, 561, 577, 579, 581, 588, 595, 596, 597, 602, 619, 621, 627, 633, 635, 637, 638, 641, 642, 644, 646, 647, 649], "default": [16, 44, 97, 148, 149, 150, 153, 162, 170, 171, 178, 179, 196, 220, 226, 228, 229, 232, 233, 236, 244, 245, 246, 257, 261, 275, 276, 279, 287, 288, 289, 299, 302, 306, 307, 310, 319, 341, 361, 363, 370, 379, 386, 387, 389, 390, 394, 399, 440, 459, 500, 505, 507, 514, 517, 521, 522, 523, 530, 533, 541, 544, 549, 555, 559, 578, 579, 588, 591, 592, 595, 596, 597, 604, 607, 609, 613, 621, 624, 629, 630, 631, 633, 635, 637, 638, 640, 641, 643, 644, 646, 647, 649], "float": [16, 43, 44, 140, 141, 149, 153, 157, 171, 179, 196, 202, 207, 217, 220, 228, 229, 244, 257, 287, 299, 311, 313, 314, 315, 342, 364, 366, 367, 368, 387, 390, 394, 437, 441, 444, 447, 459, 521, 522, 530, 533, 546, 549, 579, 595, 637, 638, 644, 646], "A": [16, 55, 74, 75, 103, 116, 140, 141, 148, 149, 160, 170, 178, 179, 185, 192, 193, 195, 197, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 228, 229, 246, 261, 264, 266, 267, 289, 302, 303, 310, 313, 314, 315, 317, 320, 323, 324, 325, 332, 335, 337, 340, 341, 342, 343, 344, 349, 363, 366, 367, 368, 370, 371, 375, 379, 426, 444, 447, 464, 483, 484, 500, 504, 505, 507, 515, 522, 538, 549, 554, 560, 578, 579, 585, 588, 595, 596, 598, 609, 610, 613, 616, 624, 635, 636, 638, 641, 644, 646, 647, 649], "between": [16, 42, 143, 176, 213, 228, 229, 261, 302, 314, 317, 367, 370, 416, 421, 549, 555, 559, 560, 561, 577, 581, 582, 591, 595, 596, 607, 638, 641, 642, 643, 644, 646, 647], "0": [16, 43, 44, 54, 90, 105, 148, 149, 150, 153, 161, 162, 170, 171, 173, 175, 178, 179, 186, 193, 195, 196, 198, 220, 222, 224, 228, 229, 234, 236, 239, 240, 243, 244, 247, 248, 251, 257, 261, 263, 264, 277, 279, 282, 283, 286, 287, 290, 291, 294, 299, 302, 307, 308, 317, 324, 332, 337, 345, 370, 381, 386, 387, 389, 390, 394, 399, 422, 427, 441, 459, 463, 500, 502, 514, 521, 522, 530, 544, 555, 578, 579, 582, 584, 586, 587, 588, 592, 593, 595, 596, 597, 602, 604, 609, 613, 619, 629, 630, 635, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 649], "100": [16, 177, 178, 179, 193, 196, 228, 229, 246, 289, 394, 441, 458, 461, 576, 579, 584, 590, 596, 621, 637, 638, 646, 647, 649, 650], "klcalibr": 16, "128": [16, 44, 149, 154, 156, 170, 171, 222, 244, 247, 248, 261, 287, 290, 291, 302, 387, 394, 502, 517, 518, 522, 579, 596, 638, 641, 646, 650], "num_quantized_bin": 16, "histogramcollector": 16, "collctor": 16, "smooth_distribut": 16, "p": [16, 153, 617, 618, 641], "ep": [16, 176, 597], "0001": [16, 193, 228, 229, 582, 596, 637], "smooth": [16, 140, 141, 148, 167, 175, 228, 229, 358, 383, 392, 394, 444, 445, 447, 459, 500, 635, 647], "discret": [16, 193, 647], "mai": [16, 148, 160, 162, 326, 327, 329, 330, 331, 441, 500, 514, 515, 523, 553, 554, 560, 577, 581, 586, 587, 593, 597, 609, 613, 619, 622, 624, 636, 638, 641, 644, 647], "have": [16, 74, 83, 141, 148, 162, 197, 201, 203, 210, 242, 264, 285, 310, 313, 340, 342, 363, 366, 370, 422, 440, 441, 447, 483, 492, 500, 514, 553, 554, 560, 561, 578, 579, 581, 584, 588, 593, 595, 596, 597, 599, 616, 619, 622, 624, 629, 630, 631, 633, 635, 638, 639, 641, 644, 647, 648], "been": [16, 149, 162, 197, 203, 210, 310, 340, 342, 363, 507, 514, 556, 561, 582, 596, 597, 616, 641, 644], "normal": [16, 33, 261, 302, 315, 368, 596, 625, 633, 641, 644, 646], "1": [16, 42, 43, 44, 55, 74, 89, 105, 109, 113, 146, 148, 149, 150, 153, 162, 165, 167, 170, 171, 173, 175, 176, 177, 179, 186, 193, 195, 196, 208, 209, 211, 228, 229, 234, 236, 239, 240, 243, 244, 245, 247, 248, 251, 252, 257, 261, 262, 263, 264, 277, 279, 282, 283, 286, 287, 288, 290, 291, 294, 295, 299, 302, 308, 313, 314, 315, 317, 332, 337, 342, 345, 346, 366, 367, 368, 370, 381, 384, 386, 387, 389, 390, 399, 422, 440, 441, 445, 464, 483, 500, 502, 507, 514, 517, 520, 521, 522, 530, 541, 544, 549, 553, 555, 558, 559, 561, 577, 578, 579, 581, 582, 586, 588, 589, 592, 594, 595, 597, 600, 602, 618, 619, 626, 627, 629, 630, 631, 633, 634, 635, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649], "replac": [16, 149, 163, 167, 170, 171, 315, 368, 516, 517, 522, 584, 596, 607, 642], "zero": [16, 43, 44, 149, 150, 156, 171, 207, 220, 261, 302, 342, 387, 390, 399, 518, 522, 549, 558, 621, 635, 638, 641, 644, 646, 647], "multipli": [16, 228, 229, 641], "scale": [16, 43, 44, 100, 141, 143, 149, 156, 165, 167, 169, 170, 171, 175, 176, 257, 261, 299, 302, 386, 387, 390, 399, 447, 517, 518, 520, 521, 522, 638, 641, 643, 644, 646, 647], "factor": [16, 141, 153, 447, 641, 644, 650], "take": [16, 202, 229, 232, 233, 237, 261, 266, 275, 276, 280, 302, 340, 349, 370, 371, 422, 426, 538, 553, 555, 556, 578, 581, 582, 588, 596, 616, 635, 638, 640, 641, 646, 647, 649], "correspond": [16, 157, 200, 211, 228, 229, 244, 287, 310, 313, 317, 363, 366, 370, 523, 541, 549, 559, 588, 596, 635, 637, 638, 643, 647], "amount": [16, 644], "off": [16, 67, 68, 70, 476, 477, 479, 554, 641], "non": [16, 341, 549, 555, 581, 641, 647], "ref": [16, 148, 500], "http": [16, 156, 157, 195, 196, 204, 205, 214, 215, 216, 222, 244, 246, 287, 289, 310, 311, 313, 314, 315, 340, 342, 343, 363, 364, 366, 367, 368, 370, 393, 422, 518, 530, 555, 558, 579, 581, 589, 592, 593, 596, 605, 611, 614, 618, 620, 621, 622, 623, 624, 627, 629, 630, 631, 635, 642], "hanj": 16, "c": [16, 74, 246, 289, 483, 549, 579, 587, 592, 641, 647], "illinoi": 16, "edu": [16, 246, 289, 579], "cs412": 16, "bk3": 16, "diverg": [16, 539, 543, 561, 577, 582, 647], "pdf": [16, 196, 222], "github": [16, 157, 204, 205, 216, 244, 287, 310, 311, 314, 315, 340, 343, 363, 364, 367, 368, 370, 393, 422, 554, 558, 579, 581, 585, 592, 593, 596, 605, 611, 614, 618, 620, 621, 622, 623, 624, 627, 630, 631, 642], "com": [16, 157, 204, 205, 216, 244, 287, 310, 311, 314, 315, 340, 343, 363, 364, 367, 368, 370, 393, 422, 553, 558, 579, 581, 589, 592, 593, 596, 599, 605, 618, 620, 621, 623, 624, 627, 630, 631, 642, 643, 650], "apach": [16, 593], "incub": 16, "blob": [16, 157, 204, 205, 310, 311, 314, 315, 340, 363, 364, 367, 368, 370, 393, 422, 596, 605, 627, 630, 631], "master": [16, 204, 205, 216, 310, 311, 314, 315, 340, 343, 363, 364, 367, 368, 370, 422, 596, 647], "python": [16, 75, 148, 160, 162, 246, 265, 289, 309, 362, 393, 441, 484, 500, 507, 514, 515, 549, 551, 554, 555, 579, 581, 584, 587, 592, 596, 601, 607, 610, 616, 620, 621, 623, 624, 626, 629, 631, 635, 636, 646], "contrib": [16, 309, 362], "py": [16, 148, 157, 177, 207, 228, 229, 311, 313, 314, 315, 342, 364, 366, 367, 368, 393, 441, 500, 555, 559, 581, 584, 592, 596, 601, 603, 604, 605, 611, 614, 618, 620, 621, 623, 624, 626, 627, 629, 630, 631, 638, 642, 645], "microsoft": [16, 393, 558, 559], "onnxruntim": [16, 228, 229, 240, 246, 253, 283, 289, 296, 318, 393, 416, 559, 577, 578, 591, 592, 597, 619, 637], "main": [16, 156, 188, 193, 211, 216, 268, 343, 392, 393, 458, 461, 518, 528, 529, 533, 555, 578, 581, 584, 596, 603, 605, 617, 626, 635, 638, 641], "tool": [16, 148, 306, 393, 500, 549, 558, 559, 596, 609, 613, 619, 622, 623, 624, 635, 636, 638], "arrai": [16, 43, 44, 148, 162, 261, 302, 313, 324, 366, 390, 399, 500, 514, 549, 646], "small": [16, 67, 68, 69, 70, 429, 476, 477, 478, 479, 556, 621, 622, 635, 641, 647, 650], "probabl": [16, 228, 229, 543, 641], "activationoper": 18, "onnx_quant": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40], "onnx_nod": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 87, 101, 111], "removableactivationoper": 18, "remov": [18, 43, 51, 57, 60, 74, 80, 83, 84, 85, 96, 98, 140, 198, 211, 315, 368, 444, 466, 469, 483, 489, 492, 493, 494, 553, 596, 609, 613, 622, 629, 630, 635, 645], "qactivationoper": 18, "children": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 34, 35, 36, 38, 39, 163, 516], "initi": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 34, 35, 36, 38, 39, 42, 43, 44, 105, 116, 148, 153, 162, 186, 207, 232, 233, 241, 244, 263, 275, 276, 284, 287, 341, 342, 359, 390, 422, 438, 500, 514, 538, 556, 561, 579, 595, 615, 635, 638, 644, 647], "qoper": [18, 34, 228, 229, 586, 619], "float16activationoper": 18, "float16": [18, 21, 43, 149, 150, 523, 544, 579, 641], "argmaxoper": 19, "qargmaxoper": 19, "attentionoper": 20, "qattentionoper": 20, "qattent": 20, "binari": [21, 148, 317, 370, 500, 587, 595, 611, 614, 642], "binaryoper": 21, "binarydirect8bitoper": 21, "qbinaryoper": 21, "qbinari": 21, "float16binaryoper": 21, "concatoper": 22, "qconcatoper": 22, "qconcat": 22, "convoper": 23, "qconvoper": 23, "qlinearconv": 23, "direct8bit": 24, "direct8bitoper": 24, "qdirectoper": 24, "qdirect": 24, "embedlayernorm": 25, "embedlayernormalizationoper": 25, "qembedlayernormalizationoper": 25, "qembedlayernorm": 25, "gatheroper": 26, "qgatheroper": 26, "qgather": 26, "globalaveragepool": 27, "globalaveragepooloper": 27, "qglobalaveragepooloper": 27, "qlinearglobalaveragepool": 27, "gemmoper": 28, "qgemmoper": 28, "qgemm": 28, "lstmoper": 30, "matmuloper": 31, "qmatmuloper": 31, "qlinearmatmul": 31, "fusedmatmuloper": 31, "fusedmatmul": 31, "maxpooloper": 32, "qmaxpooloper": 32, "qmaxpool": 32, "batchnormalizationoper": 33, "batchnorm": [33, 62, 67, 121, 471, 476, 555, 644], "normalizationoper": 33, "op_registri": 34, "op_typ": [34, 140, 141, 148, 223, 360, 394, 439, 444, 447, 459, 500], "qop_registri": 34, "padoper": 35, "qpadoper": 35, "qpad": 35, "averagepool": 36, "pooloper": 36, "qpooloper": 36, "qlinearaveragepool": 36, "reduceoper": 37, "reduceminmaxoper": 37, "reducemin": 37, "reducemax": 37, "resizeoper": 38, "qresizeoper": 38, "qresiz": 38, "splitoper": 39, "qsplitoper": 39, "qsplit": 39, "unari": 40, "unaryoper": 40, "unarydirect8bitoper": 40, "q_config": [41, 170, 307, 559], "mode": [41, 42, 43, 45, 110, 162, 167, 253, 296, 313, 359, 366, 379, 384, 399, 438, 497, 505, 514, 533, 546, 548, 549, 559, 560, 581, 591, 609, 613, 621, 622, 638, 640, 641, 647], "quantization_param": 41, "op_types_to_quant": 41, "fallback_list": 41, "fp32": [41, 42, 44, 79, 131, 136, 143, 170, 171, 176, 228, 229, 232, 233, 275, 276, 306, 307, 317, 352, 359, 370, 386, 387, 389, 390, 394, 427, 431, 438, 458, 461, 488, 507, 517, 521, 522, 541, 544, 548, 549, 554, 558, 559, 561, 581, 588, 589, 595, 596, 597, 606, 618, 619, 620, 621, 637, 638, 640, 641, 642, 643, 644, 645, 647, 649, 650], "add_qdq_pair_to_weight": [41, 228, 229, 638], "optypes_to_exclude_output_qu": [41, 228, 229, 638], "dedicated_qdq_pair": [41, 228, 229, 638], "smoothquant": [42, 167, 170, 175, 384, 445, 558, 594, 636, 641, 648], "onnxrt": [42, 43, 44, 244, 246, 253, 261, 287, 289, 296, 302, 317, 370, 415, 547, 559, 581, 597, 618, 638, 650], "get_quant_dequant_output": 42, "input_data": [42, 578], "output_data": 42, "loss": [42, 179, 186, 228, 229, 263, 308, 317, 332, 337, 345, 370, 523, 538, 577, 581, 582, 583, 584, 585, 594, 595, 596, 597, 607, 619, 621, 634, 635, 636, 638, 641, 644, 647, 649], "output": [42, 43, 44, 51, 54, 59, 74, 98, 105, 110, 148, 149, 150, 170, 171, 189, 200, 201, 206, 220, 226, 228, 229, 232, 233, 266, 270, 275, 276, 306, 307, 310, 340, 363, 370, 371, 379, 390, 422, 463, 468, 483, 497, 500, 505, 507, 521, 522, 523, 538, 544, 545, 549, 555, 559, 560, 582, 583, 584, 586, 588, 590, 595, 596, 598, 607, 616, 617, 619, 624, 625, 629, 630, 631, 634, 635, 637, 638, 641, 642, 644, 645, 646, 647, 649], "numpi": [42, 43, 67, 68, 70, 105, 148, 261, 302, 313, 324, 366, 390, 476, 477, 479, 500, 587, 644, 646], "7": [42, 171, 177, 196, 228, 229, 381, 394, 399, 522, 561, 576, 587, 588, 596, 635, 638, 642, 644, 647, 650], "bit": [42, 44, 149, 154, 170, 171, 228, 229, 386, 387, 389, 390, 399, 440, 517, 521, 522, 530, 561, 577, 583, 597, 636, 638, 641, 644], "execut": [42, 43, 54, 156, 162, 177, 207, 208, 209, 228, 229, 342, 346, 348, 387, 421, 422, 423, 425, 463, 514, 518, 538, 541, 548, 549, 581, 582, 583, 596, 597, 601, 602, 609, 610, 616, 617, 618, 619, 623, 626, 634, 635, 638, 641, 643, 647, 650], "provid": [42, 43, 44, 102, 105, 110, 149, 200, 232, 233, 261, 275, 276, 302, 308, 313, 332, 337, 345, 346, 366, 371, 383, 384, 386, 387, 389, 390, 394, 422, 497, 538, 542, 544, 556, 558, 559, 560, 561, 576, 578, 581, 583, 584, 585, 591, 592, 594, 595, 596, 597, 598, 599, 603, 607, 610, 616, 617, 618, 624, 625, 635, 637, 638, 641, 644, 645, 647, 648, 649, 650], "make_sub_graph": 42, "opset": [42, 102, 104, 105, 229, 306, 307, 586], "ir_vers": 42, "thi": [42, 45, 86, 110, 132, 139, 143, 147, 149, 153, 157, 160, 162, 170, 171, 176, 179, 185, 189, 192, 198, 200, 202, 204, 205, 206, 207, 211, 212, 213, 214, 216, 217, 218, 224, 228, 229, 232, 233, 243, 244, 245, 246, 247, 248, 249, 251, 261, 264, 270, 271, 275, 276, 286, 287, 288, 289, 290, 291, 292, 294, 302, 310, 313, 314, 315, 317, 326, 327, 329, 330, 331, 332, 337, 340, 342, 344, 345, 346, 349, 352, 363, 366, 367, 368, 370, 371, 381, 422, 426, 431, 440, 441, 495, 497, 499, 502, 514, 515, 517, 523, 538, 548, 549, 553, 554, 555, 556, 559, 560, 561, 577, 578, 579, 582, 583, 584, 586, 587, 588, 591, 593, 594, 595, 596, 597, 598, 599, 601, 602, 604, 605, 607, 609, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 629, 630, 631, 635, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648], "quant_dequant_data": 42, "qtype": [42, 43, 399, 559], "3": [42, 44, 148, 149, 150, 162, 179, 196, 209, 229, 246, 261, 289, 302, 313, 366, 386, 387, 389, 390, 394, 441, 500, 514, 549, 555, 556, 558, 577, 578, 579, 582, 584, 586, 588, 589, 592, 595, 596, 597, 599, 603, 607, 609, 613, 618, 623, 624, 626, 627, 629, 633, 635, 637, 638, 641, 642, 643, 644, 646, 647, 650], "scheme": [42, 43, 44, 149, 154, 165, 170, 171, 386, 387, 389, 390, 399, 517, 520, 521, 522, 559, 560, 561, 578, 588, 607, 641, 647, 649], "sym": [42, 43, 44, 149, 150, 171, 399, 517, 521, 522, 560, 561, 588, 638, 641, 649], "dequant": [42, 43, 44, 51, 88, 91, 92, 93, 94, 96, 149, 157, 170, 171, 390, 507, 522, 549, 555, 560, 644, 645], "asym": [42, 43, 44, 149, 154, 165, 170, 171, 386, 387, 389, 390, 399, 517, 520, 521, 522, 561, 588, 641, 649], "ortsmoothqu": 42, "fake": [42, 44, 113, 165, 167, 171, 175, 384, 440, 517, 520, 521, 522, 596, 638, 641, 644], "channel": [42, 43, 44, 143, 150, 167, 171, 175, 176, 198, 201, 206, 228, 229, 257, 261, 299, 302, 340, 384, 387, 521, 522, 544, 558, 559, 561, 591, 592, 599, 601, 606, 621, 635, 641, 646, 650], "For": [42, 44, 149, 170, 171, 175, 196, 200, 201, 204, 205, 216, 229, 246, 261, 289, 302, 314, 315, 317, 340, 343, 367, 368, 370, 371, 384, 386, 387, 389, 422, 517, 521, 522, 553, 555, 557, 559, 561, 582, 583, 584, 586, 588, 591, 599, 601, 602, 604, 607, 618, 619, 624, 635, 640, 641, 644, 645, 647, 649, 650], "more": [42, 148, 149, 167, 175, 204, 205, 261, 302, 340, 384, 500, 523, 556, 557, 558, 560, 577, 579, 582, 584, 586, 589, 591, 592, 594, 596, 597, 599, 607, 611, 614, 619, 624, 633, 634, 635, 640, 641, 644, 647, 648, 650], "detail": [42, 153, 167, 175, 178, 200, 261, 302, 384, 549, 550, 553, 558, 560, 561, 577, 582, 588, 589, 590, 594, 595, 596, 597, 599, 607, 616, 624, 625, 635, 641, 642, 643, 644, 645, 647, 648], "pleas": [42, 149, 156, 157, 167, 175, 195, 204, 205, 206, 214, 215, 216, 228, 229, 244, 245, 246, 249, 287, 288, 289, 292, 340, 342, 343, 370, 384, 422, 441, 518, 555, 556, 557, 558, 559, 576, 577, 579, 583, 584, 586, 592, 594, 595, 597, 599, 600, 604, 607, 623, 624, 625, 635, 638, 640, 641, 642, 643, 644, 647, 648], "refer": [42, 149, 156, 157, 167, 175, 195, 204, 205, 206, 214, 215, 216, 220, 228, 229, 244, 287, 310, 311, 317, 340, 342, 343, 363, 364, 370, 384, 422, 441, 518, 555, 559, 560, 576, 578, 579, 581, 583, 584, 586, 590, 592, 593, 595, 596, 597, 599, 604, 607, 618, 619, 621, 623, 624, 625, 633, 637, 639, 642, 646, 647], "accur": [42, 156, 167, 175, 215, 384, 518, 530, 635, 641, 644], "effici": [42, 167, 175, 384, 556, 558, 577, 578, 582, 599, 624, 634, 635, 636, 641, 644, 647], "post": [42, 97, 98, 156, 167, 175, 214, 229, 232, 233, 275, 276, 384, 422, 518, 530, 553, 558, 559, 560, 581, 583, 584, 586, 591, 592, 599, 605, 616, 626, 635, 636, 639, 641, 644, 645, 647], "train": [42, 57, 80, 149, 156, 167, 175, 185, 208, 209, 212, 214, 215, 228, 229, 232, 233, 244, 246, 261, 271, 275, 276, 287, 289, 302, 303, 319, 342, 362, 384, 422, 466, 489, 518, 530, 541, 556, 558, 559, 560, 566, 579, 581, 582, 583, 586, 591, 597, 599, 605, 616, 621, 629, 634, 636, 639, 641, 643, 644, 647, 649], "larg": [42, 43, 167, 175, 215, 384, 558, 578, 582, 594, 596, 636, 639, 641, 644, 650], "languag": [42, 167, 175, 215, 310, 363, 384, 553, 558, 586, 594, 620, 636, 639, 641, 644], "2": [42, 43, 44, 54, 74, 105, 109, 149, 150, 162, 167, 171, 173, 175, 177, 179, 196, 202, 208, 209, 222, 228, 229, 245, 262, 288, 313, 315, 317, 342, 349, 366, 368, 370, 381, 384, 386, 387, 389, 390, 399, 426, 441, 463, 483, 514, 517, 521, 522, 549, 555, 559, 577, 578, 579, 581, 582, 588, 591, 592, 593, 594, 595, 597, 620, 626, 627, 629, 630, 631, 633, 635, 636, 638, 639, 641, 642, 643, 644, 646, 647, 648], "spiq": [42, 167, 175, 384, 644], "free": [42, 167, 175, 214, 232, 233, 275, 276, 384, 422, 553, 605, 610, 618, 626, 633, 643, 644], "per": [42, 43, 44, 167, 171, 175, 177, 228, 229, 262, 384, 387, 390, 522, 523, 543, 559, 561, 578, 624, 635, 640, 641, 650], "we": [42, 43, 67, 68, 70, 74, 86, 143, 150, 162, 167, 175, 176, 177, 179, 200, 204, 211, 228, 229, 243, 262, 264, 286, 310, 313, 363, 366, 384, 393, 399, 429, 476, 477, 479, 483, 495, 514, 553, 555, 559, 560, 561, 578, 581, 584, 586, 588, 594, 595, 596, 603, 604, 607, 611, 614, 616, 617, 619, 622, 629, 630, 631, 633, 634, 635, 637, 638, 639, 641, 642, 643, 644, 645, 647, 648], "onli": [42, 44, 54, 63, 70, 86, 109, 115, 143, 162, 167, 169, 171, 175, 176, 177, 188, 193, 197, 203, 210, 228, 229, 244, 262, 264, 268, 287, 307, 319, 340, 342, 353, 384, 390, 394, 422, 432, 440, 441, 463, 472, 479, 495, 514, 518, 523, 530, 549, 558, 559, 560, 561, 576, 577, 578, 581, 582, 584, 587, 588, 594, 596, 597, 604, 617, 635, 636, 637, 638, 639, 644, 645, 647, 648, 649], "inplac": [42, 167, 384, 521, 533], "mean": [42, 44, 149, 167, 171, 179, 202, 211, 228, 229, 257, 261, 299, 302, 315, 317, 340, 352, 368, 370, 384, 431, 521, 555, 560, 561, 578, 581, 584, 588, 595, 596, 602, 621, 635, 638, 639, 641, 644, 646, 647, 649, 650], "weight": [42, 43, 44, 60, 61, 122, 140, 141, 143, 148, 149, 150, 153, 154, 157, 167, 169, 170, 171, 176, 179, 195, 197, 201, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 217, 219, 228, 229, 307, 340, 342, 359, 370, 384, 386, 387, 389, 390, 394, 399, 422, 429, 438, 440, 444, 447, 469, 470, 500, 507, 517, 518, 522, 523, 530, 549, 550, 558, 559, 560, 561, 577, 581, 583, 588, 590, 594, 596, 618, 629, 633, 635, 636, 637, 638, 639, 644, 645, 647, 648, 649], "chang": [42, 96, 143, 149, 150, 167, 176, 208, 209, 211, 212, 214, 215, 218, 228, 229, 342, 344, 384, 429, 549, 554, 560, 578, 584, 587, 593, 596, 599, 609, 610, 613, 616, 622, 635, 645, 646, 647], "you": [42, 162, 167, 228, 229, 242, 244, 285, 287, 342, 370, 384, 422, 514, 523, 554, 555, 560, 578, 579, 581, 584, 592, 593, 595, 597, 599, 601, 602, 604, 609, 613, 616, 617, 618, 619, 620, 621, 622, 624, 635, 638, 641, 642, 643, 644, 645, 648], "can": [42, 43, 44, 143, 153, 157, 162, 167, 176, 179, 192, 200, 201, 202, 207, 215, 216, 218, 228, 229, 232, 233, 243, 246, 261, 262, 264, 275, 276, 286, 289, 302, 313, 315, 317, 340, 342, 344, 366, 368, 370, 371, 381, 384, 390, 399, 422, 514, 523, 538, 549, 555, 556, 558, 559, 560, 561, 576, 578, 579, 581, 582, 583, 584, 586, 588, 591, 592, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 607, 609, 610, 611, 613, 614, 616, 617, 619, 621, 622, 623, 624, 626, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650], "recov": [42, 167, 384, 548, 549, 559, 583], "helper": [43, 45, 110, 116, 148, 170, 244, 245, 246, 260, 287, 288, 289, 301, 305, 306, 307, 379, 399, 497, 500, 505, 547], "get_node_original_nam": 43, "origin": [43, 44, 140, 148, 149, 163, 167, 170, 196, 200, 212, 220, 222, 229, 244, 261, 262, 287, 302, 326, 327, 329, 330, 331, 341, 342, 361, 390, 399, 427, 440, 444, 500, 516, 522, 544, 549, 554, 579, 604, 635, 638, 646, 647, 649], "simple_progress_bar": [43, 399], "total": [43, 207, 261, 302, 317, 342, 370, 399, 579, 581, 635, 641, 646, 650], "progress": [43, 194, 197, 210, 246, 289, 399, 610, 616, 618, 635, 638], "bar": [43, 246, 289, 399, 616, 636], "case": [43, 70, 74, 153, 162, 171, 177, 179, 229, 243, 260, 261, 262, 286, 301, 302, 308, 332, 337, 345, 381, 399, 479, 483, 514, 517, 561, 578, 582, 583, 584, 588, 590, 595, 600, 604, 616, 617, 618, 621, 627, 630, 631, 633, 635, 636, 638, 641, 642, 644, 646, 648, 649, 650], "where": [43, 153, 162, 228, 229, 313, 317, 366, 370, 399, 440, 514, 549, 561, 577, 581, 582, 609, 613, 617, 644, 645], "tqdm": [43, 399, 596], "t": [43, 67, 68, 70, 143, 153, 162, 176, 202, 228, 229, 261, 264, 302, 315, 368, 399, 476, 477, 479, 514, 555, 559, 581, 582, 584, 596, 597, 617, 622, 635, 638, 641, 647, 649], "dtype_to_nam": 43, "dtype_map": 43, "dtype": [43, 44, 102, 105, 150, 228, 229, 247, 248, 257, 261, 290, 291, 299, 302, 390, 502, 521, 522, 523, 530, 544, 560, 561, 579, 581, 586, 588, 599, 621, 637, 638, 641, 644, 645, 646, 649], "its": [43, 60, 96, 148, 157, 200, 209, 212, 214, 220, 229, 240, 246, 261, 283, 289, 302, 305, 311, 312, 342, 349, 364, 365, 426, 469, 500, 553, 579, 582, 593, 595, 597, 607, 609, 613, 616, 617, 635, 641, 643, 646, 647], "string": [43, 45, 116, 148, 149, 156, 160, 162, 177, 186, 188, 192, 193, 200, 202, 207, 216, 217, 218, 220, 225, 228, 229, 246, 263, 268, 289, 303, 308, 310, 313, 319, 320, 321, 323, 324, 332, 337, 340, 341, 342, 343, 344, 345, 363, 366, 375, 379, 399, 500, 505, 507, 514, 515, 518, 541, 546, 549, 595, 646], "represent": [43, 160, 515, 553, 555, 577, 583, 635, 638], "quanttyp": [43, 440], "repres": [43, 202, 206, 207, 216, 217, 220, 246, 251, 289, 294, 313, 315, 317, 366, 368, 370, 386, 387, 389, 390, 553, 561, 577, 579, 586, 624, 635, 638, 639, 647], "make_quant_nod": 43, "make": [43, 105, 143, 176, 192, 202, 207, 216, 218, 242, 285, 340, 342, 344, 549, 553, 559, 560, 576, 578, 588, 595, 596, 604, 609, 613, 616, 618, 635, 638, 639, 640, 641, 643, 644, 647], "quantizelinear": 43, "make_dquant_nod": 43, "axi": [43, 229], "dequantizelinear": 43, "is_b_transpos": [43, 399], "inuput": [43, 399], "b": [43, 74, 149, 153, 244, 287, 399, 483, 549, 554, 577, 579, 595, 635, 641, 644, 647], "transpos": [43, 73, 150, 206, 257, 261, 302, 306, 340, 399, 482, 641, 646], "split_shared_bia": 43, "share": [43, 44, 82, 98, 109, 141, 149, 171, 390, 447, 491, 517, 521, 522, 587, 588, 641, 644, 647], "float_to_float16": 43, "float_to_bfloat16": 43, "bfloat16": [43, 523, 597, 599, 607, 640], "cast_tensor": 43, "is_large_model": 43, "tensorproto": [43, 105], "raw": [43, 177, 245, 249, 252, 288, 292, 295, 352, 431, 595, 620, 647], "remove_init_from_model_input": 43, "collate_pr": 43, "result": [43, 148, 157, 170, 179, 257, 261, 299, 302, 310, 313, 314, 315, 317, 363, 366, 367, 368, 370, 402, 422, 429, 500, 538, 548, 549, 553, 556, 558, 578, 581, 582, 584, 591, 593, 595, 596, 604, 605, 616, 617, 620, 624, 625, 626, 627, 633, 635, 636, 638, 641, 643, 644, 645, 646, 647, 648, 650], "quantize_data_with_scale_zero": 43, "zero_point": [43, 44, 390], "point": [43, 44, 149, 171, 257, 299, 314, 315, 324, 349, 367, 368, 387, 390, 399, 426, 522, 549, 595, 616, 621, 622, 638, 641, 644, 646, 647], "To": [43, 313, 366, 381, 399, 554, 560, 561, 579, 581, 584, 597, 600, 603, 609, 611, 613, 614, 618, 622, 635, 637, 640, 641, 642, 644, 647, 649], "pack": [43, 61, 399, 470], "comput": [43, 44, 105, 149, 153, 157, 170, 310, 311, 314, 315, 317, 363, 364, 367, 368, 370, 386, 387, 389, 390, 399, 523, 538, 549, 577, 578, 583, 586, 595, 596, 597, 599, 610, 619, 635, 636, 638, 641, 644, 647], "linear": [43, 149, 150, 156, 165, 169, 170, 171, 175, 198, 200, 201, 206, 211, 220, 223, 228, 229, 340, 399, 518, 520, 522, 555, 582, 586, 596, 635, 641, 644, 647], "transform": [43, 50, 143, 145, 146, 147, 149, 156, 166, 169, 214, 244, 245, 246, 247, 248, 249, 251, 253, 255, 287, 288, 289, 290, 291, 292, 294, 296, 298, 309, 362, 399, 502, 518, 530, 555, 556, 558, 577, 579, 582, 583, 584, 585, 589, 594, 596, 599, 604, 605, 606, 607, 619, 627, 630, 631, 635, 636, 640, 641, 644, 645, 647, 649, 650], "when": [43, 54, 64, 70, 148, 160, 162, 179, 201, 207, 212, 220, 228, 229, 244, 245, 253, 261, 287, 288, 296, 302, 311, 341, 342, 364, 399, 422, 463, 473, 479, 500, 514, 515, 523, 538, 553, 556, 560, 578, 579, 596, 607, 609, 610, 613, 617, 618, 621, 622, 623, 625, 629, 635, 638, 641, 644, 646, 647], "uint8": [43, 171, 257, 299, 313, 361, 366, 399, 440, 522, 559, 579, 588, 637, 638, 646, 649], "rmin": [43, 399, 638], "rmax": [43, 399, 638], "m": [43, 157, 171, 204, 205, 228, 229, 340, 399, 522, 554, 582, 592, 599, 601, 604, 607, 611, 614, 624, 635, 650], "max": [43, 104, 143, 149, 171, 176, 179, 193, 196, 228, 229, 261, 302, 314, 315, 349, 367, 368, 399, 426, 507, 522, 549, 558, 581, 592, 596, 619, 621, 635, 638, 641, 644, 646, 647], "ab": [43, 156, 171, 195, 214, 215, 342, 399, 518, 522, 530, 635, 638, 644], "np": [43, 261, 302, 349, 390, 426, 584, 626, 644, 646, 647], "calculate_scale_zp": 43, "quantize_rang": [43, 399], "calcul": [43, 60, 170, 195, 204, 220, 229, 247, 248, 290, 291, 314, 315, 340, 342, 352, 367, 368, 431, 469, 502, 539, 549, 577, 579, 595, 596, 607, 619, 633, 635, 638, 641, 643, 644, 647, 649], "quantize_data": [43, 399], "add": [43, 53, 64, 109, 119, 148, 188, 220, 228, 229, 244, 246, 268, 287, 289, 341, 359, 399, 438, 462, 473, 500, 549, 554, 555, 561, 578, 579, 584, 586, 588, 595, 596, 611, 614, 618, 619, 626, 629, 630, 643, 644, 645, 647, 648], "necessari": [43, 216, 399, 553, 556, 560, 598, 617, 635, 643, 647], "intermedi": [43, 157, 186, 228, 229, 263, 399, 555, 591, 638], "full": [43, 149, 150, 244, 245, 246, 287, 288, 289, 399, 544, 549, 558, 577, 579, 581, 587, 593, 617, 622, 635, 641, 642], "equat": [43, 315, 317, 368, 370, 399, 638, 644], "r": [43, 143, 176, 399, 581, 592, 617, 618, 620, 621, 623, 624, 638, 650], "": [43, 44, 105, 143, 148, 162, 176, 200, 201, 202, 206, 207, 208, 209, 212, 214, 215, 220, 223, 225, 226, 228, 229, 243, 246, 260, 261, 262, 264, 266, 286, 289, 301, 302, 315, 340, 342, 368, 370, 371, 375, 387, 399, 422, 500, 507, 514, 522, 523, 546, 549, 553, 554, 556, 560, 561, 581, 582, 584, 586, 588, 591, 596, 597, 604, 607, 609, 613, 616, 619, 621, 624, 634, 635, 636, 637, 638, 641, 642, 643, 644, 647, 648, 649, 650], "q": [43, 44, 107, 109, 131, 399, 641, 644], "z": [43, 399, 577, 582, 644], "real": [43, 247, 264, 290, 399, 502, 560, 577, 584, 618, 625, 636, 638], "quantize_data_per_channel": 43, "dequantize_data_with_scale_zero": 43, "tensor_valu": 43, "scale_valu": 43, "zo_valu": 43, "dequantize_data": 43, "valueinfo": 43, "tensor_nam": [43, 148, 162, 163, 500, 514, 516], "new_dtyp": 43, "cast": [43, 51, 640, 646], "info": [43, 170, 171, 204, 205, 220, 259, 264, 269, 340, 375, 507, 517, 544, 545, 549, 555, 581, 598, 626, 631], "quantizedvalu": 43, "new_quantized_nam": 43, "scale_nam": 43, "zero_point_nam": 43, "quantized_value_typ": 43, "quint8": 43, "linearli": 43, "quantizediniti": 43, "quantized_data": 43, "quantizationmod": 43, "quantizedvaluetyp": 43, "quantformat": 43, "quantize_nparrai": 43, "arr": [43, 507, 549], "low": [43, 149, 150, 232, 233, 247, 248, 275, 276, 290, 291, 308, 318, 345, 371, 502, 559, 560, 576, 577, 579, 584, 596, 597, 621, 636, 638, 641, 644, 647], "high": [43, 247, 248, 290, 291, 502, 579, 581, 592, 621, 636, 647], "attribute_to_kwarg": 43, "attribut": [43, 83, 104, 105, 148, 170, 200, 211, 225, 226, 229, 492, 500, 523, 549, 559, 578, 588, 590, 596, 637, 649], "make_nod": 43, "find_by_nam": [43, 399], "item_list": [43, 399], "find": [43, 67, 68, 70, 105, 148, 223, 317, 324, 349, 370, 399, 426, 476, 477, 479, 500, 549, 559, 581, 594, 602, 609, 613, 616, 617, 619, 621, 635, 641, 643, 644, 645, 647], "item": [43, 220, 226, 228, 229, 260, 301, 341, 359, 399, 438, 507, 577, 584, 635, 644, 647], "trt_env_setup": 43, "environ": [43, 177, 262, 553, 576, 609, 613, 616, 624, 627, 629, 630, 631, 647], "variabl": [43, 160, 177, 217, 228, 229, 246, 262, 289, 349, 426, 440, 515, 592, 635, 647], "tensorrt": [43, 577, 597, 638], "to_numpi": 43, "infer_shap": 43, "in_mp": 43, "int_max": 43, "31": [43, 650], "auto_merg": 43, "guess_output_rank": 43, "verbos": [43, 307, 349, 426], "base_dir": 43, "shape": [43, 44, 105, 148, 149, 202, 247, 248, 257, 261, 290, 291, 299, 302, 313, 366, 390, 500, 502, 558, 579, 588, 589, 596, 618, 619, 641, 644, 646], "weightonli": 44, "get_blob_s": 44, "group_siz": [44, 149, 154, 165, 170, 171, 386, 387, 389, 390, 440, 517, 520, 521, 522, 530, 641], "has_zp": 44, "blob_siz": 44, "how": [44, 149, 162, 171, 179, 185, 195, 202, 208, 209, 214, 215, 228, 229, 261, 302, 303, 340, 390, 514, 521, 522, 554, 555, 557, 559, 578, 579, 582, 583, 584, 590, 595, 596, 610, 611, 614, 615, 616, 618, 629, 630, 631, 635, 636, 638, 644, 646, 647, 648, 649], "mani": [44, 149, 171, 370, 390, 422, 521, 522, 578, 592, 641, 647, 649], "element": [44, 149, 171, 204, 205, 220, 242, 285, 313, 340, 366, 390, 521, 522, 549, 579, 591, 595, 635, 641, 644], "one": [44, 109, 110, 115, 149, 150, 162, 170, 171, 177, 202, 206, 211, 214, 215, 216, 218, 261, 271, 302, 310, 313, 317, 319, 340, 343, 344, 363, 366, 370, 390, 497, 514, 521, 522, 523, 556, 559, 577, 582, 583, 584, 588, 591, 592, 595, 596, 597, 599, 600, 604, 605, 607, 609, 610, 613, 616, 617, 618, 621, 622, 623, 624, 626, 633, 634, 635, 637, 638, 639, 641, 642, 644, 646, 647], "zp": [44, 149, 171, 390, 521, 522, 644], "make_matmul_weight_only_nod": [44, 390], "weight_shap": [44, 390], "num_bit": [44, 113, 149, 165, 170, 171, 386, 387, 389, 390, 520, 644], "k_block": [44, 390], "q_weight": [44, 390], "accuracy_level": [44, 386, 387, 389, 390, 394], "matmulfpq4": [44, 390], "accuraci": [44, 177, 179, 220, 228, 229, 232, 233, 275, 276, 303, 308, 317, 332, 337, 345, 370, 371, 381, 386, 387, 389, 390, 422, 427, 441, 523, 538, 546, 555, 558, 560, 561, 577, 578, 579, 581, 583, 584, 585, 586, 594, 595, 596, 607, 616, 618, 625, 626, 629, 630, 633, 634, 635, 636, 637, 641, 642, 643, 644, 645, 648, 649, 650], "level": [44, 200, 386, 387, 389, 390, 427, 441, 545, 553, 626, 644, 647], "unset": [44, 386, 387, 389, 390], "jbla": [44, 386, 387, 389, 390], "kernel": [44, 175, 228, 229, 386, 387, 389, 390, 559, 560, 647], "fp16": [44, 229, 359, 386, 387, 389, 390, 438, 638], "4": [44, 54, 149, 150, 154, 165, 170, 171, 177, 179, 196, 202, 211, 228, 229, 253, 256, 257, 261, 296, 299, 302, 310, 311, 313, 363, 364, 366, 386, 387, 389, 390, 394, 440, 441, 463, 517, 520, 521, 522, 530, 553, 559, 561, 576, 584, 585, 588, 591, 592, 595, 596, 604, 624, 626, 630, 635, 638, 641, 644, 646, 647, 650], "matmulnbit": [44, 390], "new_init": [44, 390], "matmul_weight_only_nod": [44, 390], "quant_tensor": [44, 390, 522], "32": [44, 149, 154, 171, 198, 386, 387, 389, 390, 394, 440, 517, 521, 522, 530, 584, 590, 641, 650], "ratio": [44, 143, 176, 202, 207, 220, 228, 229, 257, 261, 299, 302, 342, 389, 390, 579, 596, 619, 635, 646, 650], "group": [44, 149, 150, 153, 171, 217, 327, 386, 387, 389, 390, 522, 558, 591, 635, 641, 645, 646, 647, 650], "clip": [44, 171, 386, 389, 390, 517, 521, 522, 641, 644], "qdq_tensor": [44, 390], "quant": [44, 148, 149, 170, 171, 228, 229, 359, 383, 386, 387, 390, 392, 394, 438, 449, 459, 500, 517, 521, 522, 555, 594, 596, 638], "pad_tensor": [44, 390], "rowi": [44, 390], "so": [44, 105, 261, 302, 390, 440, 555, 559, 581, 587, 591, 597, 602, 604, 620, 621, 622, 638, 640, 641, 644, 645, 646, 648], "divis": [44, 390], "pade": [44, 390], "rtn_quantiz": [44, 171, 389, 521], "weight_config": [44, 149, 150, 154, 156, 169, 171, 386, 387, 389, 517, 518, 521], "round": [44, 143, 149, 171, 176, 389, 394, 521, 530, 558, 636, 638, 641, 644], "nearst": [44, 171, 389], "method": [44, 141, 143, 149, 160, 162, 170, 171, 192, 217, 228, 229, 237, 242, 243, 244, 246, 253, 261, 264, 280, 285, 286, 287, 289, 296, 302, 323, 324, 325, 359, 386, 387, 389, 438, 440, 447, 514, 515, 517, 521, 523, 541, 542, 544, 545, 555, 556, 558, 577, 578, 579, 581, 582, 583, 595, 596, 634, 635, 638, 640, 641, 644, 646, 647], "modelproto": [44, 305, 371, 384, 386, 387, 389, 390, 392, 399, 598], "onnxmodel": [44, 378, 383, 384, 386, 387, 389, 390, 398, 415], "fc2": [44, 170, 171, 386, 387, 389, 517, 521, 522], "rtn": [44, 170, 392, 394, 459, 528, 530, 639, 641], "get_weight_scal": 44, "apply_awq_scal": 44, "absorb_pair": 44, "output_dict": 44, "appli": [44, 113, 126, 127, 128, 131, 133, 137, 148, 149, 165, 169, 185, 211, 213, 271, 311, 364, 386, 387, 389, 392, 458, 500, 520, 528, 553, 560, 561, 596, 599, 601, 607, 616, 620, 621, 626, 634, 635, 638, 640, 643, 644, 647, 648, 649], "salient": [44, 171, 517, 635, 641], "apply_awq_clip": 44, "mse": [44, 170, 171, 228, 229, 309, 317, 351, 362, 370, 387, 394, 422, 430, 517, 549, 581, 595, 621, 637, 641, 642], "prepare_input": [44, 390], "n_sampl": [44, 149, 154, 170, 171, 517, 522], "sampl": [44, 77, 149, 170, 171, 228, 229, 237, 242, 244, 245, 246, 257, 261, 280, 285, 287, 288, 289, 299, 302, 317, 324, 349, 370, 426, 486, 517, 522, 556, 578, 579, 585, 591, 617, 638, 641, 644, 646, 647, 649, 650], "session": [44, 148, 243, 286, 379, 390, 500, 505, 596, 645], "awq_quant": [44, 171, 386, 517], "enable_auto_scal": [44, 171, 386, 394, 641], "enable_mse_search": [44, 171, 386, 394, 641], "awar": [44, 154, 157, 171, 185, 229, 271, 319, 340, 386, 429, 517, 538, 559, 560, 561, 577, 583, 584, 586, 591, 616, 626, 634, 636, 641, 647], "awq": [44, 171, 392, 394, 639, 641], "enabl": [44, 109, 149, 153, 157, 171, 207, 228, 229, 342, 517, 523, 560, 561, 584, 592, 597, 599, 601, 604, 605, 607, 618, 620, 621, 623, 626, 635, 636, 644, 647], "gptq": [44, 171, 392, 394, 530, 639, 641], "w": [44, 156, 261, 302, 518, 635, 644, 646], "h": [44, 228, 229, 261, 302, 584, 624, 625, 629, 630, 631, 646], "blocksiz": [44, 387, 394], "percdamp": [44, 387, 394, 530, 641], "01": [44, 149, 179, 228, 229, 386, 387, 394, 530, 596, 637, 641, 647, 649, 650], "actord": [44, 387, 394, 641], "perchannel": [44, 387, 394], "hessian": [44, 157, 387, 429, 641, 647], "matrix": [44, 370, 422, 558, 607, 648], "percent": 44, "averag": [44, 314, 315, 317, 367, 368, 370, 387, 595, 596, 641, 647, 650], "diagon": [44, 387, 641], "dampen": [44, 153], "rearrang": [44, 214, 387, 635, 641], "consid": [44, 148, 153, 317, 370, 500, 553, 577, 582, 617, 647], "diag": 44, "error": [44, 105, 149, 157, 162, 317, 352, 370, 387, 431, 514, 545, 581, 595, 600, 621, 622, 625, 641, 644, 647], "gptq_quantiz": [44, 171, 387, 518], "get_ops_recurs": 45, "prefix": [45, 148, 155, 162, 163, 168, 170, 177, 500, 514, 516, 522, 599, 604, 645], "graph_info": 45, "templateadaptor": 45, "tampl": 45, "dictionari": [45, 67, 68, 70, 148, 149, 155, 157, 162, 170, 192, 223, 225, 226, 228, 229, 260, 301, 313, 320, 323, 325, 366, 399, 476, 477, 479, 500, 507, 514, 537, 549], "yaml": [45, 220, 225, 226, 229, 232, 233, 244, 246, 262, 275, 276, 287, 289, 303, 308, 319, 320, 321, 323, 332, 337, 345, 346, 449, 548, 549, 559, 561, 590, 595, 596, 633, 637, 645, 646], "file": [45, 105, 148, 160, 162, 163, 170, 174, 189, 216, 220, 225, 228, 229, 232, 233, 244, 245, 246, 249, 260, 261, 267, 270, 275, 276, 287, 288, 289, 292, 301, 302, 303, 308, 313, 319, 320, 321, 323, 332, 337, 341, 343, 345, 346, 366, 371, 381, 405, 406, 410, 422, 500, 507, 514, 515, 516, 548, 549, 554, 556, 559, 560, 561, 584, 587, 590, 593, 595, 596, 598, 602, 611, 614, 615, 616, 617, 619, 620, 621, 622, 624, 625, 629, 630, 631, 633, 637, 638, 641, 645, 646], "pytorchadaptor": 45, "api": [45, 70, 75, 110, 153, 156, 272, 308, 313, 345, 358, 359, 366, 370, 422, 437, 438, 441, 479, 484, 497, 507, 518, 549, 555, 562, 564, 568, 571, 574, 581, 586, 591, 592, 596, 601, 605, 606, 607, 623, 624, 628, 642, 643, 647, 651], "pytorch_ipexadaptor": 45, "intel": [45, 188, 204, 205, 216, 265, 268, 304, 309, 316, 317, 340, 343, 351, 357, 362, 369, 370, 400, 422, 430, 436, 507, 551, 553, 554, 556, 557, 559, 560, 561, 577, 579, 580, 582, 583, 585, 586, 588, 589, 593, 594, 597, 598, 599, 604, 606, 607, 618, 619, 620, 621, 623, 624, 633, 634, 635, 636, 638, 640, 641, 642, 644, 645, 647, 648, 649], "extens": [45, 160, 162, 507, 514, 515, 549, 556, 558, 559, 588, 591, 592, 594, 596, 597, 598, 600, 605, 606, 607, 611, 614, 615, 619, 635, 636, 638, 641, 644, 647, 648, 649], "ipex": [45, 164, 170, 228, 229, 548, 591, 596, 597, 601, 605, 606, 644], "pytorch_fxadaptor": 45, "fx": [45, 170, 228, 353, 432, 591, 597, 605, 606, 620, 636, 638, 640], "graph": [45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 112, 113, 114, 117, 130, 132, 136, 139, 142, 143, 145, 146, 147, 148, 200, 243, 286, 308, 372, 379, 421, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 489, 490, 491, 492, 493, 494, 495, 497, 499, 500, 505, 555, 559, 579, 582, 584, 590, 598, 599, 618, 621, 638, 639, 640, 645], "pytorchweightonlyadaptor": 45, "pytorchqueri": 45, "cpu": [45, 91, 92, 93, 94, 149, 150, 156, 161, 162, 164, 170, 228, 229, 507, 514, 518, 523, 544, 549, 558, 560, 576, 577, 591, 596, 597, 599, 601, 607, 616, 624, 636, 637, 638, 639, 640, 641, 645], "querybackendcap": [46, 559, 560], "tensorflowadaptor": 47, "stock": [47, 605, 644], "spr": 47, "tensorflow_itexadaptor": 47, "itex": [47, 109, 228, 229, 306, 597, 638, 644], "tensorflowqueri": [47, 559], "performance_onli": [47, 48, 49, 107, 131, 136, 147, 228, 596], "itex_mod": [47, 48, 89, 107, 131, 136], "quant_mod": [47, 359, 438, 560, 561], "graphconvert": 48, "qt_config": 48, "recip": [48, 200, 228, 229, 308, 345, 558, 596, 639, 641, 644, 647], "int8_sequ": 48, "fp32_op": [48, 50, 107], "bf16_op": [48, 50, 107, 560, 640], "data_load": [48, 49, 559], "calib_func": [48, 154, 170, 171, 422, 517, 522, 640], "fake_qu": [48, 88, 107, 131, 136], "qdq_enabl": 48, "new_api": [48, 49, 71, 72, 77, 79, 92, 99, 131, 136, 143, 480, 481, 486, 488], "use_bf16": [48, 49, 228, 637], "without": [49, 90, 148, 196, 212, 261, 302, 342, 361, 440, 500, 553, 582, 584, 596, 607, 618, 621, 635, 636, 637, 647, 648], "graphconverterwithoutcalib": 49, "recover_config": 49, "rewrit": [50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 106, 107, 108, 109, 197, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 489, 490, 491, 492, 493, 494, 495], "bf16convert": [50, 640], "rerewrit": 51, "dequantizecastoptim": 51, "b16": 51, "dequantize_cast_optim": [52, 87, 111], "biasadd": [53, 59, 64, 66, 109, 462, 468, 473, 475, 588], "convertaddtobiasaddoptim": [53, 462], "conv2d": [53, 59, 60, 61, 65, 66, 71, 125, 135, 143, 156, 459, 462, 468, 469, 470, 474, 475, 480, 518, 560, 561, 581, 586, 588, 621, 644, 645, 647], "addv2": [53, 69, 462, 478, 588], "layout": [54, 463], "convertlayoutoptim": [54, 463], "convers": [54, 55, 229, 319, 463, 464, 554, 559, 560, 596, 597, 638, 640, 644], "optim": [54, 74, 75, 79, 80, 116, 118, 148, 149, 153, 187, 190, 191, 192, 194, 197, 200, 209, 214, 225, 228, 229, 265, 271, 308, 309, 325, 345, 349, 362, 426, 463, 483, 484, 488, 489, 500, 538, 539, 546, 549, 556, 558, 576, 581, 582, 583, 584, 588, 589, 591, 592, 594, 596, 598, 599, 601, 603, 604, 607, 610, 618, 621, 622, 623, 625, 627, 636, 637, 638, 640, 641, 643, 644, 645, 647, 649], "nchw": [54, 257, 463], "nhwc": [54, 257, 463], "It": [54, 162, 171, 179, 185, 189, 202, 232, 233, 270, 275, 276, 315, 317, 324, 340, 345, 352, 368, 370, 371, 422, 427, 431, 463, 514, 522, 538, 559, 560, 561, 577, 581, 582, 596, 602, 605, 610, 616, 617, 618, 619, 621, 622, 624, 635, 638, 641, 642, 643, 647, 649], "exist": [54, 177, 226, 262, 379, 463, 505, 507, 549, 586, 595, 603, 647], "abov": [54, 463, 559, 560, 561, 582, 618, 619, 621, 624, 635, 638, 644, 647], "graph_def": [54, 140, 141, 148, 306, 371, 379, 421, 422, 444, 447, 463, 500, 505], "leakyrelu": [55, 464, 644], "convertleakyreluoptim": [55, 464], "below": [55, 66, 74, 228, 229, 346, 370, 393, 422, 464, 475, 483, 554, 555, 558, 559, 560, 561, 578, 581, 582, 584, 590, 595, 599, 601, 609, 610, 613, 616, 619, 624, 633, 634, 635, 637, 638, 641, 643, 644, 645, 647, 648], "subgraph": [55, 66, 105, 168, 464, 475, 639, 647], "mul": [55, 65, 66, 69, 171, 175, 464, 474, 475, 478, 517, 586, 641, 644], "maximum": [55, 149, 179, 202, 207, 228, 229, 244, 261, 287, 302, 311, 342, 349, 364, 379, 426, 464, 505, 561, 577, 579, 581, 596, 635, 638, 644, 646], "note": [55, 160, 206, 313, 353, 366, 432, 464, 515, 556, 558, 560, 561, 578, 581, 584, 586, 588, 592, 594, 596, 601, 604, 609, 613, 616, 618, 622, 624, 626, 635, 638, 641, 644, 645, 647, 648, 649], "coeffici": [55, 149, 217, 464, 635], "less": [55, 148, 170, 228, 229, 464, 507, 522, 549, 576, 582, 596, 623, 635], "than": [55, 148, 244, 261, 287, 302, 464, 507, 523, 549, 556, 558, 576, 579, 590, 621, 629, 633, 634, 635, 638, 641, 643, 646, 647], "valid": [55, 67, 68, 105, 179, 207, 210, 220, 228, 229, 246, 289, 313, 341, 342, 366, 379, 464, 476, 477, 505, 556, 558, 559, 579, 581, 582, 585, 588, 591, 593, 596, 607, 621, 635, 638, 641, 642], "nan": [56, 465], "random": [56, 148, 149, 184, 192, 228, 229, 257, 261, 299, 302, 309, 325, 349, 351, 362, 426, 430, 465, 500, 507, 549, 556, 596, 635, 637, 646, 649], "convertnantorandom": [56, 465], "const": [56, 57, 63, 64, 67, 68, 70, 82, 98, 465, 466, 472, 473, 476, 477, 479, 491], "consist": [56, 63, 465, 472, 554, 555, 624, 644, 647], "placehold": [57, 242, 285, 466], "convertplaceholdertoconst": [57, 466], "dilat": [58, 467], "contract": [58, 467], "dilatedcontract": [58, 467], "spacetobatchnd": [58, 467], "batchtospacend": [58, 467], "pattern": [58, 59, 61, 78, 96, 107, 108, 109, 131, 136, 170, 192, 193, 194, 195, 197, 200, 201, 207, 208, 209, 210, 212, 214, 215, 217, 225, 228, 229, 246, 289, 309, 330, 331, 333, 338, 342, 359, 362, 438, 467, 468, 470, 487, 559, 579, 588, 591, 596, 617, 634, 637, 644, 647, 650], "inject": [59, 468, 596], "dummi": [59, 200, 247, 248, 290, 291, 317, 370, 468, 502, 558, 579, 589, 595, 596, 618], "injectdummybiasaddoptim": [59, 468], "fusion": [59, 61, 70, 78, 109, 126, 127, 128, 131, 132, 133, 137, 468, 470, 479, 487, 555, 559, 588], "expanddim": [60, 469], "expanddimsoptim": [60, 469], "next": [60, 237, 280, 441, 469, 556, 560, 561, 578, 637, 641, 647], "fetch": [61, 170, 174, 237, 280, 470, 560, 579, 629, 630, 631], "reshap": [61, 67, 68, 73, 470, 476, 477, 482, 644], "fetchweightfromreshapeoptim": [61, 470], "handl": [61, 148, 167, 175, 183, 470, 500, 545, 555, 557, 578, 624, 644], "fold": [62, 63, 170, 171, 307, 394, 459, 471, 472, 517, 522, 588, 641, 644], "foldbatchnormnodesoptim": [62, 471], "graphfoldconstantoptim": [63, 472], "sequenc": [63, 105, 149, 201, 204, 205, 228, 229, 244, 260, 261, 287, 301, 302, 311, 315, 340, 364, 368, 472, 559, 579, 588, 635, 641, 646], "self": [63, 170, 171, 200, 228, 229, 381, 472, 517, 522, 523, 559, 560, 578, 579, 591, 595, 618, 643, 645, 647], "supported_op_typ": [63, 472], "fusebiasaddandaddoptim": [64, 473], "second": [64, 162, 179, 201, 228, 229, 244, 287, 427, 473, 514, 549, 581, 596, 609, 613, 617, 629, 630, 641, 644, 647, 649], "columnwis": [65, 474], "fusecolumnwisemuloptim": [65, 474], "depthwiseconv2dn": [65, 71, 125, 135, 474, 480, 588], "math": [66, 475, 638], "fuseconvwithmathoptim": [66, 475], "elimin": [66, 475, 623], "sub": [66, 170, 177, 200, 262, 475, 556, 647], "realdiv": [66, 69, 475, 478], "decompos": [67, 68, 476, 477], "fusedecomposedbnoptim": [67, 476], "input_graph_def": [67, 68, 70, 476, 477, 479], "node_name_from_input": [67, 68, 70, 476, 477, 479], "node_nam": [67, 68, 70, 148, 379, 407, 476, 477, 479, 500, 505, 560], "strip": [67, 68, 70, 83, 84, 148, 476, 477, 479, 492, 493, 500, 645], "port": [67, 68, 70, 476, 477, 479, 618, 625], "other": [67, 68, 70, 149, 153, 160, 167, 175, 243, 286, 315, 368, 379, 476, 477, 479, 505, 515, 553, 555, 560, 561, 581, 588, 591, 593, 596, 598, 619, 633, 635, 638, 644, 646, 647, 650], "underli": [67, 68, 70, 162, 476, 477, 479, 514], "node_from_map": [67, 68, 70, 476, 477, 479], "node_map": [67, 68, 70, 476, 477, 479], "pull": [67, 68, 70, 476, 477, 479], "def": [67, 68, 70, 179, 232, 233, 275, 276, 399, 422, 441, 476, 477, 479, 507, 523, 537, 538, 555, 559, 578, 579, 582, 583, 584, 595, 596, 638, 644, 645, 647], "entri": [67, 68, 70, 157, 188, 268, 308, 346, 392, 458, 461, 476, 477, 479, 528, 529, 533, 549, 593], "index": [67, 68, 70, 105, 177, 220, 229, 237, 242, 246, 280, 285, 289, 324, 476, 477, 479, 549, 579, 595, 617, 621, 641, 644], "everi": [67, 68, 70, 202, 205, 207, 228, 229, 340, 342, 476, 477, 479, 559, 578, 604, 609, 613, 639, 641, 647], "identifi": [67, 68, 70, 162, 313, 366, 379, 476, 477, 479, 505, 514, 624, 635, 641], "want": [67, 68, 70, 200, 228, 229, 242, 244, 285, 287, 342, 427, 476, 477, 479, 523, 538, 555, 559, 578, 579, 584, 596, 604, 616, 617, 624, 633, 638, 641, 643, 645, 647], "nodedef": [67, 68, 70, 476, 477, 479], "rais": [67, 68, 70, 105, 160, 162, 170, 197, 203, 210, 220, 313, 340, 341, 342, 366, 371, 441, 476, 477, 479, 514, 515, 522, 558, 618, 635, 636], "valueerror": [67, 68, 70, 170, 313, 366, 441, 476, 477, 479, 522, 587], "If": [67, 68, 70, 74, 162, 171, 177, 228, 229, 232, 233, 246, 261, 275, 276, 289, 302, 341, 371, 422, 441, 476, 477, 479, 483, 514, 522, 523, 538, 554, 555, 560, 576, 578, 579, 584, 592, 593, 595, 596, 602, 610, 611, 614, 616, 622, 627, 633, 635, 638, 641, 643, 644, 645, 646, 647], "isn": [67, 68, 70, 476, 477, 479], "present": [67, 68, 70, 476, 477, 479, 581, 624, 636, 644], "values_from_const": [67, 68, 70, 476, 477, 479], "node_def": [67, 68, 70, 476, 477, 479], "extract": [67, 68, 70, 148, 200, 246, 289, 361, 440, 476, 477, 479, 500, 579], "ha": [67, 68, 70, 74, 149, 156, 162, 206, 207, 262, 310, 340, 342, 363, 441, 476, 477, 479, 483, 507, 514, 518, 554, 556, 559, 560, 561, 578, 586, 591, 596, 597, 602, 616, 621, 622, 624, 627, 635, 637, 638, 640, 643, 644, 647], "access": [67, 68, 70, 225, 226, 229, 476, 477, 479, 544, 549, 611, 614, 618], "valid_reshape_input": [67, 68, 476, 477], "reshape_in0_ndef": [67, 68, 476, 477], "reshape_in1_ndef": [67, 68, 476, 477], "ar": [67, 68, 105, 150, 162, 170, 202, 207, 208, 209, 214, 215, 228, 229, 244, 261, 287, 302, 313, 317, 324, 340, 341, 342, 346, 348, 349, 366, 370, 386, 387, 389, 423, 425, 426, 440, 441, 476, 477, 514, 523, 541, 548, 549, 553, 554, 555, 556, 559, 560, 578, 579, 581, 582, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 602, 604, 607, 610, 616, 618, 619, 621, 622, 623, 624, 627, 633, 634, 635, 636, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649], "bypass_reshap": [67, 68, 476, 477], "input_node_map": [67, 68, 476, 477], "input_nam": [67, 68, 102, 142, 229, 306, 307, 476, 477, 586], "get_const_dim_count": [67, 68, 476, 477], "dimens": [67, 68, 105, 149, 236, 261, 279, 302, 476, 477, 579, 582, 641, 646], "instancenorm": [68, 477, 644], "fusedecomposedinoptim": [68, 477], "gelu": [69, 478], "fusegeluoptim": [69, 478], "sqrt": [69, 478, 581], "erf": [69, 478], "layernorm": [70, 479, 644], "fuselayernormoptim": [70, 479], "remap": [70, 162, 479, 514], "smaller": [70, 261, 302, 479, 582, 596, 635, 646], "fusedbatcnormv3": [70, 479], "And": [70, 479, 554, 555, 576, 596, 602, 644], "further": [70, 229, 479, 553, 597, 598, 599, 601, 610, 616, 638], "restrict": [70, 162, 228, 229, 479, 514, 635, 643], "2d": [70, 479, 644], "3d": [70, 479, 636, 644], "kera": [70, 116, 188, 200, 220, 229, 246, 253, 268, 289, 296, 374, 379, 459, 461, 479, 505, 507, 560, 578, 584, 598, 606, 607], "fusepadwithconv2doptim": [71, 480], "excluded_op_nam": [71, 72, 225, 228, 229, 480, 481, 596, 635], "cfg": [71, 72, 170, 225, 359, 438, 480, 481, 541, 560, 561], "itex_qdq_mod": [71, 72, 480, 481], "conv3d": [71, 125, 480], "fusepadwithfp32conv2doptim": [72, 481], "fusetransposereshapeoptim": [73, 482], "cse": [74, 98, 483], "graphcseoptim": [74, 483], "introduc": [74, 483, 559, 560, 561, 588, 596, 638, 641, 642, 644, 648], "ident": [74, 80, 201, 483, 489, 553, 582], "three": [74, 220, 244, 287, 348, 423, 425, 483, 555, 559, 560, 577, 592, 597, 610, 624, 634, 638, 640, 643, 644, 645], "d": [74, 170, 483, 582, 590, 617, 619, 625, 635, 650], "those": [74, 162, 352, 431, 483, 514, 549, 581, 582, 583, 590, 596, 597, 634, 635, 638, 647], "child": [74, 156, 163, 483, 516, 518, 645], "b1": [74, 483], "c1c2": [74, 483], "d1": [74, 483, 549], "c1": [74, 483], "c2": [74, 483], "memori": [74, 149, 150, 170, 308, 332, 337, 345, 381, 483, 522, 549, 577, 578, 583, 596, 597, 599, 633, 635, 638, 639, 641, 644, 647, 650], "bound": [74, 177, 193, 261, 302, 313, 349, 366, 426, 483, 595, 646], "like": [74, 96, 98, 148, 149, 162, 200, 220, 229, 232, 233, 234, 246, 275, 276, 277, 289, 308, 317, 342, 345, 346, 370, 379, 422, 483, 500, 502, 505, 514, 538, 554, 555, 556, 559, 560, 581, 582, 583, 591, 604, 619, 621, 634, 635, 638, 641, 642, 644, 647], "relu": [74, 78, 109, 483, 487, 555, 588, 644, 645], "relu6": [74, 483, 588], "updat": [74, 153, 163, 170, 195, 196, 202, 220, 342, 370, 422, 483, 516, 546, 587, 594, 595, 596, 602, 607, 610, 626, 635, 641, 644, 647, 648], "graphdef": [74, 148, 379, 421, 483, 500, 505, 598], "grappler": [75, 484, 588], "grappleroptim": [75, 484], "input_output_nam": [75, 484], "opt_cfg": [75, 484], "wrapper": [75, 102, 103, 104, 105, 122, 140, 149, 155, 165, 169, 186, 197, 243, 261, 263, 264, 266, 267, 286, 302, 313, 317, 366, 370, 375, 379, 444, 484, 504, 505, 520, 640], "leverag": [75, 150, 484, 544, 556, 558, 582, 586, 599, 616, 634, 638, 641, 647], "built": [75, 188, 211, 230, 231, 235, 240, 244, 245, 250, 252, 254, 255, 257, 258, 261, 266, 268, 273, 274, 278, 281, 283, 287, 288, 293, 295, 297, 298, 299, 300, 302, 346, 370, 373, 381, 422, 484, 538, 556, 559, 579, 584, 596, 609, 613, 633, 638, 643, 646, 647, 649], "convert_add_to_biasadd": [76, 87, 111, 485, 496], "convert_layout": [76, 87, 111, 485, 496], "convert_leakyrelu": [76, 87, 111, 485, 496], "convert_nan_to_random": [76, 87, 111, 485, 496], "convert_placeholder_to_const": [76, 87, 111, 485, 496], "dilated_contract": [76, 87, 111, 485, 496], "dummy_biasadd": [76, 87, 111, 485, 496], "expanddims_optim": [76, 87, 111, 485, 496], "fetch_weight_from_reshap": [76, 87, 111, 485, 496], "fold_batch_norm": [76, 87, 111, 485, 496], "fold_const": [76, 87, 111, 485, 496], "fuse_biasadd_add": [76, 87, 111, 485, 496], "fuse_column_wise_mul": [76, 87, 111, 485, 496], "fuse_conv_with_math": [76, 87, 111, 485, 496], "fuse_decomposed_bn": [76, 87, 111, 485, 496], "fuse_decomposed_in": [76, 87, 111, 485, 496], "fuse_gelu": [76, 87, 111, 485, 496], "fuse_layer_norm": [76, 87, 111, 485, 496], "fuse_pad_with_conv": [76, 87, 111, 485, 496], "fuse_pad_with_fp32_conv": [76, 87, 111, 485, 496], "fuse_reshape_transpos": [76, 87, 111, 485, 496], "graph_cse_optim": [76, 87, 111, 485, 496], "grappler_pass": [76, 87, 111, 485, 496], "insert_print_nod": [76, 87, 111, 485, 496], "move_squeeze_after_relu": [76, 87, 111, 485, 496], "pre_optim": [76, 87, 111, 485, 496], "remove_training_nod": [76, 87, 111, 485, 496], "rename_batch_norm": [76, 87, 111, 485, 496], "split_shared_input": [76, 87, 111, 485, 496], "strip_equivalent_nod": [76, 87, 111, 148, 485, 496, 500], "strip_unused_nod": [76, 87, 111, 148, 485, 496, 500], "switch_optim": [76, 87, 111, 485, 496], "insert": [77, 105, 107, 109, 113, 146, 149, 167, 175, 486, 522, 555, 560, 578, 591, 596, 599, 635, 638, 640, 641, 644, 645], "print": [77, 156, 157, 200, 317, 370, 441, 486, 518, 549, 584, 595, 596, 618, 619, 635, 644, 647], "insertprintminmaxnod": [77, 486], "pre_node_nam": [77, 486], "post_node_nam": [77, 486], "pass": [77, 148, 149, 160, 162, 177, 370, 422, 486, 500, 507, 514, 515, 523, 548, 549, 554, 555, 559, 576, 579, 582, 583, 584, 590, 595, 596, 617, 624, 635, 637, 638, 640, 644, 649], "move": [78, 149, 162, 487, 514, 555, 622, 637, 641, 642], "squeez": [78, 487, 555], "movesqueezeafterreluoptim": [78, 487], "match": [78, 102, 162, 200, 313, 314, 366, 367, 487, 514, 582, 617, 641], "pre": [79, 116, 163, 200, 232, 233, 244, 275, 276, 287, 371, 422, 488, 516, 530, 538, 579, 582, 583, 596, 604, 621, 635, 636, 638, 641, 645, 647], "entranc": [79, 193, 235, 488], "preoptim": [79, 488], "removetrainingnodesoptim": [80, 489], "protected_nod": [80, 489], "types_to_splic": [80, 489], "checknumer": [80, 489], "stopgradi": [80, 489], "renam": [81, 490, 642], "fusedbatchnorm": [81, 490], "fusedbatchnormv2": [81, 490], "renamebatchnormoptim": [81, 490], "splitsharedinputoptim": [82, 491], "equival": [83, 169, 492, 558, 636, 641, 644], "stripequivalentnodesoptim": [83, 492], "output_node_nam": [83, 84, 131, 132, 136, 148, 492, 493, 500], "same": [83, 141, 148, 150, 171, 196, 214, 229, 244, 261, 287, 302, 313, 366, 447, 492, 500, 517, 523, 549, 559, 561, 576, 578, 579, 582, 584, 588, 596, 600, 604, 609, 613, 635, 637, 638, 641, 644, 645, 646, 647], "unus": [84, 148, 493, 500], "stripunusednodesoptim": [84, 493], "input_node_nam": [84, 131, 136, 148, 493, 500], "switch": [85, 494, 599, 645], "switchoptim": [85, 494], "condit": [85, 244, 245, 246, 261, 287, 288, 289, 302, 348, 423, 425, 494, 579, 593, 646, 647], "graphrewriterbas": [86, 495], "abstract": [86, 185, 193, 261, 302, 303, 308, 345, 495, 559, 561, 590], "freeze_fake_qu": [87, 95, 111], "freeze_valu": [87, 95, 111], "freeze_value_without_calib": [87, 95, 111], "fuse_conv_redundant_dequant": [87, 95, 111], "fuse_conv_requant": [87, 95, 111], "fuse_matmul_redundant_dequant": [87, 95, 111], "fuse_matmul_requant": [87, 95, 111], "meta_op_optim": [87, 95, 111], "post_hostconst_convert": [87, 95, 111], "post_quantized_op_cs": [87, 95, 111], "rnn_convert": [87, 95, 111], "scale_propag": [87, 95, 111], "onnx_graph": [87, 101, 111], "onnx_schema": [87, 101, 111], "tf2onnx_util": [87, 101, 111], "insert_qdq_pattern": [87, 106, 111], "merge_duplicated_qdq": [87, 106, 111], "share_qdq_y_pattern": [87, 106, 111], "freez": [88, 89, 90, 148, 500, 599, 635], "fakequ": 88, "freezefakequantopoptim": 88, "follow": [88, 110, 179, 201, 246, 289, 310, 313, 363, 366, 497, 553, 554, 555, 556, 559, 560, 561, 578, 579, 582, 583, 584, 588, 592, 593, 595, 596, 597, 598, 599, 600, 601, 609, 613, 618, 620, 621, 624, 629, 634, 635, 637, 638, 641, 644, 645, 647], "freezevaluetransform": 89, "max_min_data": [89, 90], "postfix": [89, 90], "tensor_data": [89, 507, 549, 550], "th": [89, 90], "gpu": [89, 90, 97, 149, 162, 228, 229, 514, 523, 558, 576, 591, 596, 597, 601, 607, 616, 637, 638, 639], "freezevaluewithoutcalibtransform": 90, "95": [90, 317, 370, 595, 650], "quantizedconv": [91, 92], "quantizeddeconv": 91, "redund": [91, 93], "fuseconvredundantdequantizetransform": 91, "_quantizedconv": 91, "_quantizeddeconv": 91, "successor": [91, 92, 93, 94], "requant": [92, 94, 645], "fuseconvrequantizetransform": 92, "quantizedmatmul": [93, 94], "fusematmulredundantdequantizetransform": 93, "_quantizedmatmul": [93, 94], "fusematmulrequantizedequantizetransform": 94, "quantizedmatmulwithbiasanddequant": 94, "fusematmulrequantizetransform": 94, "fusematmulrequantizedequantizenewapitransform": 94, "fusematmulrequantizenewapitransform": 94, "newapi": 94, "meta": [96, 594, 636, 650], "metainfochangingmemopoptim": 96, "metaop": 96, "With": [96, 381, 555, 559, 561, 578, 596, 604, 609, 613, 617, 623, 633, 635, 636, 643, 644, 647, 650], "better": [96, 228, 229, 232, 233, 275, 276, 324, 371, 422, 538, 583, 595, 597, 635, 636, 638, 641, 643, 644, 647], "perform": [96, 140, 149, 153, 177, 217, 228, 229, 244, 256, 257, 262, 287, 299, 308, 332, 337, 345, 352, 370, 381, 422, 427, 431, 444, 445, 523, 554, 555, 556, 559, 560, 576, 579, 580, 581, 583, 585, 586, 591, 592, 595, 596, 597, 598, 599, 601, 605, 607, 610, 616, 622, 633, 634, 635, 636, 637, 638, 639, 640, 641, 644, 645, 647, 649, 650], "hostconst": 97, "posthostconstconvert": 97, "just": [97, 234, 259, 261, 264, 266, 267, 269, 277, 302, 381, 502, 556, 596, 606, 610, 616, 624, 634, 638, 644, 646, 647], "postcseoptim": 98, "duplic": [98, 108, 349, 426], "quantizev2": 98, "decreas": [98, 621, 635], "size": [98, 149, 171, 204, 205, 236, 237, 243, 246, 252, 257, 261, 279, 280, 286, 289, 295, 299, 302, 340, 379, 381, 386, 387, 389, 505, 522, 549, 553, 560, 578, 579, 584, 587, 596, 616, 617, 633, 635, 638, 639, 641, 644, 646, 649, 650], "rnn": 99, "quantizedrnnconvert": 99, "calibration_data": [99, 107], "rnn_detail": 99, "scalepropagationtransform": 100, "direct": [100, 206, 340, 635], "export": [101, 229, 309, 313, 362, 366, 558, 589, 602, 617, 619, 645, 648], "onnxgraph": 102, "output_shap": 102, "extra_opset": 102, "output_nam": [102, 142, 229, 306, 307, 586], "is_subgraph": 102, "graph_nam": 102, "manipul": [102, 103], "onnxnod": 103, "skip_convers": 103, "schema": [104, 171, 522], "onnxopschema": 104, "domain": [104, 105, 228, 229, 635, 647], "since_vers": 104, "get_schema": 104, "max_inclusive_opset_vers": 104, "within": [104, 178, 208, 209, 214, 215, 223, 308, 313, 345, 366, 379, 416, 421, 505, 553, 555, 561, 577, 597, 609, 613, 616, 624, 635, 636, 644, 647], "get_max_supported_opset_vers": 104, "packag": [104, 559, 587, 592, 616, 617, 636, 642, 647], "set_nam": 105, "find_opset": 105, "assert_error": 105, "bool_val": 105, "error_msg": 105, "messag": [105, 146, 554, 624, 625, 629, 630, 631, 647], "map_numpy_to_onnx_dtyp": 105, "np_dtype": 105, "map_onnx_to_numpy_typ": 105, "onnx_typ": 105, "add_port_to_nam": 105, "nr": 105, "get_tensorflow_node_attr": 105, "pars": [105, 148, 170, 244, 245, 257, 261, 287, 288, 299, 302, 405, 406, 410, 500, 560, 561, 646], "get_tensorflow_tensor_shap": 105, "get_tensorflow_node_shape_attr": 105, "attr": [105, 148, 200, 500], "map_tensorflow_dtyp": 105, "get_tensorflow_tensor_data": 105, "convert_tensorflow_tensor_to_onnx": 105, "read_tensorflow_node_attr": 105, "read": [105, 148, 162, 249, 261, 292, 302, 341, 500, 514, 579, 640, 643], "infer_onnx_shape_dtyp": 105, "opset_vers": [105, 142, 229, 306, 307, 586], "input_shap": [105, 248, 291, 502, 579], "input_dtyp": 105, "sometim": [105, 555, 581, 638], "make_onnx_shap": 105, "seqtyp": 105, "tensor_dtyp": 105, "around": 105, "signifi": 105, "make_onnx_inputs_output": 105, "elem_typ": 105, "text": [105, 149, 153, 216, 260, 261, 301, 302, 310, 315, 343, 363, 368, 586, 593, 605, 627, 630, 631, 635, 636, 641, 644, 646, 650], "datatyp": [105, 170, 640, 647, 650], "save_protobuf": 105, "path": [105, 140, 148, 150, 163, 170, 200, 216, 220, 225, 244, 245, 246, 261, 287, 288, 289, 302, 303, 306, 307, 308, 319, 320, 321, 323, 332, 337, 341, 343, 345, 346, 359, 371, 379, 384, 386, 387, 389, 392, 399, 421, 422, 438, 444, 500, 505, 507, 516, 544, 546, 549, 555, 556, 559, 579, 581, 584, 590, 595, 596, 597, 598, 602, 605, 616, 619, 621, 624, 629, 630, 631, 634, 641, 646, 649], "as_text": 105, "save": [105, 148, 161, 162, 197, 220, 228, 229, 246, 289, 306, 307, 346, 379, 422, 500, 505, 507, 514, 538, 539, 544, 549, 555, 559, 590, 596, 597, 598, 600, 604, 609, 613, 619, 624, 629, 630, 631, 634, 638, 639, 641, 644], "protobuf": [105, 379, 505, 619], "is_onnx_domain": 105, "is_list_or_tupl": 105, "are_shapes_equ": 105, "src": [105, 617], "dest": 105, "equal": [105, 143, 148, 176, 441, 507, 549, 635, 641], "get_subgraphs_from_onnx": 105, "model_proto": 105, "over": [105, 162, 246, 289, 317, 370, 514, 560, 585, 589, 591, 595, 607, 616, 622, 626, 635, 637, 644, 647], "df": 105, "initialize_name_count": 105, "avoid": [105, 162, 170, 171, 244, 287, 514, 517, 522, 555, 645], "conflict": [105, 587], "counter": 105, "make_nam": 105, "get_index_from_strided_slice_of_shap": 105, "outputs_to_valu": 105, "stride": [105, 261, 302, 646], "slice": 105, "compute_const_folding_using_tf": 105, "g": [105, 149, 153, 162, 202, 228, 229, 514, 523, 554, 582, 585, 589, 599, 604, 635, 641, 642, 644, 647], "const_node_valu": 105, "graph_output": 105, "constant": [105, 307, 309, 349, 351, 357, 362, 426, 430, 436, 542, 578, 588, 619, 646], "tf": [105, 116, 141, 148, 200, 220, 243, 244, 245, 246, 261, 286, 287, 288, 289, 302, 377, 379, 447, 459, 500, 504, 505, 506, 507, 584, 592, 598, 636, 640, 646], "generategraphwithqdqpattern": 107, "op_wise_config": [107, 131, 136, 560], "quantized_nod": 107, "llm_weight_minmax": 107, "dq": [107, 109, 131, 644], "pair": [107, 228, 229, 560, 578, 596, 597, 642], "befor": [107, 109, 150, 156, 175, 192, 202, 207, 209, 214, 216, 218, 228, 229, 244, 287, 340, 342, 344, 518, 554, 561, 578, 579, 582, 583, 584, 587, 588, 592, 596, 611, 614, 620, 621, 638, 641, 643, 645, 647], "merg": [108, 236, 279, 359, 438, 611, 614, 645, 647], "mergeduplicatedqdqoptim": 108, "y": [109, 228, 229, 261, 302, 349, 426, 581, 587, 602, 644, 646], "shareqdqforitexypatternoptim": 109, "break": [109, 584, 596], "graphanalyz": [110, 497], "extend_engin": [110, 497], "analyz": [110, 200, 379, 497, 505, 643, 644, 645], "under": [110, 150, 228, 229, 246, 289, 399, 497, 507, 523, 537, 544, 548, 554, 556, 558, 579, 593, 595, 596, 599, 604, 605, 616, 624, 634, 635, 636, 639, 641, 645, 647], "singleton": [110, 497, 507, 549], "specifi": [110, 149, 162, 170, 177, 220, 228, 229, 232, 233, 261, 262, 275, 276, 302, 308, 313, 317, 319, 320, 323, 332, 337, 345, 346, 366, 370, 371, 422, 441, 497, 514, 538, 548, 549, 560, 561, 584, 588, 595, 596, 604, 618, 624, 628, 629, 630, 631, 633, 635, 637, 641, 646, 647, 649], "graphrewriterhelp": [110, 497], "encapsul": [110, 232, 233, 275, 276, 371, 422, 497, 538, 598], "quantize_lay": [111, 112, 114], "fake_quant": [111, 112, 114], "quantize_config": [111, 112, 114, 560], "quantize_help": [111, 112, 114], "quantize_wrapp": [111, 112, 114], "fuse_qdq_bn": [111, 112, 130], "fuse_qdq_concatv2": [111, 112, 130], "fuse_qdq_conv": [111, 112, 130], "fuse_qdq_deconv": [111, 112, 130], "fuse_qdq_in": [111, 112, 130], "fuse_qdq_matmul": [111, 112, 130], "fuse_qdq_pool": [111, 112, 130], "optimize_qdq": [111, 112, 130], "optimize_lay": [112, 114, 117], "quantize_layer_add": [112, 114, 117], "quantize_layer_bas": [112, 114, 117], "quantize_layer_bn": [112, 114, 117], "fakequantizebas": 113, "abc": [113, 315, 368, 559, 645, 647], "fakequant": 113, "per_channel": [113, 560, 561, 588, 638, 649], "8": [113, 149, 162, 171, 228, 229, 260, 301, 514, 522, 530, 555, 560, 577, 588, 592, 623, 624, 635, 636, 641, 644, 647, 650], "channel_axi": [113, 173, 176], "symmetr": [113, 149, 150, 386, 387, 389, 544, 561, 638, 641, 646, 647], "narrow_rang": 113, "quantizeconfig": [115, 116], "custom": [115, 149, 160, 170, 171, 177, 229, 346, 370, 381, 515, 517, 522, 548, 576, 582, 583, 599, 622, 623, 624, 628, 630, 631, 635, 636, 641, 643], "There": [115, 346, 348, 423, 425, 581, 582, 588, 591, 596, 599, 621, 623, 624, 641, 644, 647, 649], "instanc": [115, 116, 177, 196, 228, 229, 232, 233, 262, 275, 276, 314, 315, 317, 320, 323, 326, 327, 329, 330, 331, 349, 361, 367, 368, 370, 371, 422, 426, 440, 523, 538, 546, 549, 553, 554, 555, 559, 576, 596, 601, 607, 641, 647, 649, 650], "global": [115, 202, 228, 229, 326, 327, 329, 330, 331, 340, 440, 549, 555, 596, 635, 637, 647], "class": [116, 152, 160, 170, 197, 203, 210, 324, 371, 422, 515, 532, 555, 556, 560, 578, 579, 582, 595, 596, 607, 633, 634, 638, 642, 645, 647, 649], "init_quantize_config": 116, "quantize_recip": 116, "begin": [116, 153, 208, 209, 214, 342, 578, 582, 583, 596, 635, 647], "process": [116, 140, 149, 157, 177, 179, 202, 207, 208, 209, 216, 218, 220, 228, 229, 232, 233, 244, 245, 246, 257, 261, 262, 275, 276, 287, 288, 289, 299, 302, 340, 342, 344, 348, 349, 371, 422, 423, 425, 426, 444, 523, 538, 548, 549, 556, 559, 560, 561, 577, 578, 579, 582, 583, 584, 586, 596, 600, 621, 623, 624, 626, 634, 635, 638, 639, 641, 644, 645, 646, 649], "model_nam": [116, 228, 229], "special": [116, 162, 200, 381, 514, 555, 578, 595, 596, 633, 635, 641, 648], "decid": [116, 179, 228, 229, 311, 342, 364, 559, 560, 596, 638, 642, 647], "qat_clone_funct": 116, "leav": [116, 610], "quantizewrapp": [116, 122], "wrapped_lay": [116, 196], "config_quantizable_lay": 118, "quantizelayeradd": 119, "quantizelay": 120, "quantizelayerbas": 120, "quantizelayerbatchnorm": 121, "quantizewrapperbas": 122, "fusedbatchnormv3": [123, 133], "fusenodestartwithfusedbatchnormv3": [123, 133], "_quantizedfusedbatchnorm": 123, "concatv2": [124, 134, 147, 588], "fusenodestartwithconcatv2": [124, 134], "quantizedconcatv2": [124, 134], "fusenodestartwithconv2d": [125, 135], "conv2dbackpropinput": 126, "conv3dbackpropinputv2": 126, "fusenodestartwithdeconv2d": 126, "fusedinstancenorm": 127, "fusenodestartwithfusedinstancenorm": 127, "batchmatmul": 128, "batchmatmulv2": 128, "fusenodestartwithmatmul": [128, 137], "avgpool": [129, 138, 588], "fusenodestartwithpool": [129, 138], "optimizeqdqgraph": 131, "input_graph": [131, 136, 143, 417, 421, 559], "op_wise_sequ": [131, 136], "quantizegraph": 132, "quantizegraphbas": 132, "quantizenodebas": 132, "quantizegraphforintel": 136, "common": [139, 160, 162, 192, 229, 259, 309, 319, 323, 324, 325, 362, 394, 459, 461, 499, 514, 515, 529, 530, 533, 541, 553, 579, 583, 584, 586, 590, 592, 596, 638, 644], "herlper": [139, 499], "quantizegraphhelp": [139, 499], "sever": [139, 218, 261, 302, 344, 346, 499, 556, 581, 582, 583, 591, 596, 597, 609, 613, 624, 635, 637, 639, 644, 646, 647, 649], "staticmethod": [139, 499], "function": [139, 140, 160, 183, 208, 209, 214, 228, 229, 232, 233, 245, 275, 276, 288, 320, 323, 332, 337, 384, 444, 499, 515, 554, 555, 556, 559, 560, 561, 576, 578, 582, 583, 586, 590, 591, 592, 594, 595, 596, 597, 607, 617, 623, 624, 635, 638, 641, 642, 643, 644, 645, 647, 648], "smoothquantcalibr": [140, 444], "dataset": [140, 141, 149, 170, 216, 232, 233, 234, 236, 237, 239, 240, 241, 242, 243, 255, 264, 275, 276, 277, 279, 280, 282, 283, 284, 285, 286, 298, 309, 313, 314, 315, 317, 346, 362, 366, 367, 368, 370, 371, 422, 444, 447, 502, 522, 538, 541, 556, 558, 559, 560, 578, 584, 589, 595, 596, 604, 618, 619, 629, 635, 638, 641, 642, 644, 647, 649, 650], "outlier": [140, 444, 560, 577, 581, 621, 641, 644], "smoothquantcalibrationllm": [140, 444], "model_path": [140, 148, 171, 444, 500, 518, 530, 581, 629], "temp_path": [140, 444], "weight_name_map": [140, 444], "llm": [140, 141, 149, 156, 215, 444, 447, 518, 558, 635, 636, 639, 641, 644], "eval_func": [140, 232, 233, 275, 276, 346, 347, 349, 352, 353, 354, 355, 371, 422, 423, 424, 426, 427, 429, 431, 432, 433, 434, 441, 444, 538, 555, 578, 579, 581, 582, 583, 584, 596, 619, 638, 639, 640, 641, 647, 649], "temporari": [140, 170, 444, 549, 553], "store": [140, 193, 195, 197, 200, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 219, 228, 229, 246, 289, 335, 342, 444, 590], "median": [140, 444], "autotrack": [140, 148, 444, 500], "smoothquantscal": [141, 447], "alpha": [141, 161, 165, 175, 195, 217, 394, 447, 459, 520, 638, 647], "scales_per_op": [141, 394, 447, 459], "individu": [141, 202, 340, 416, 421, 447, 553, 624, 635, 644], "smoothquantscalerllm": [141, 447], "tensorflowqdqtoonnxqdqconvert": 142, "shape_overrid": 142, "inputs_as_nchw": [142, 306], "default_opset_vers": 142, "bia": [143, 228, 229, 641, 645], "correct": [143, 176, 220, 228, 229, 313, 314, 315, 317, 341, 366, 367, 368, 370, 553, 599], "biascorrect": 143, "fp32_graph": 143, "weight_empir": 143, "Will": [143, 582, 591], "our": [143, 170, 228, 229, 393, 556, 558, 586, 596, 617, 618, 621, 643, 648], "task": [143, 244, 251, 287, 294, 317, 370, 579, 582, 583, 586, 591, 595, 596, 619, 623, 626, 635, 639, 641, 644, 650], "close": [143, 176, 577, 625], "w_int8": [143, 176], "u": [143, 176, 599, 618, 623], "w_fp32": [143, 176], "varianc": [143, 176, 196, 581], "differ": [143, 153, 172, 176, 178, 186, 192, 211, 228, 229, 237, 246, 261, 263, 280, 289, 302, 308, 317, 323, 325, 334, 345, 370, 381, 543, 553, 555, 556, 560, 578, 579, 581, 582, 584, 585, 590, 591, 595, 596, 598, 609, 613, 618, 621, 624, 633, 635, 638, 641, 644, 645, 646, 647], "wise": [143, 159, 161, 163, 171, 176, 228, 229, 349, 352, 387, 426, 427, 431, 513, 516, 521, 558, 560, 591, 621, 635, 641, 644, 645, 647, 648, 649], "minim": [143, 153, 176, 349, 426, 560, 561, 577, 582, 585, 595, 596, 609, 613, 635, 638, 647], "scale_c": [143, 176], "shift": [143, 176, 257, 299, 617, 646], "notic": [143, 176, 262, 593, 597, 619, 642], "first": [143, 149, 162, 170, 176, 178, 201, 226, 228, 229, 244, 287, 313, 359, 366, 427, 438, 507, 514, 522, 549, 555, 556, 559, 560, 561, 579, 581, 592, 597, 601, 610, 611, 614, 617, 619, 620, 621, 637, 638, 640, 641, 643, 644, 645, 647, 649], "empir": [143, 176], "solut": [143, 176, 558, 559, 560, 587, 601, 605, 610, 636, 641, 642, 644, 647, 648], "don": [143, 176, 202, 228, 229, 555, 622, 635, 647], "min": [143, 149, 171, 176, 193, 229, 394, 507, 522, 549, 581, 619, 621, 635, 638, 641, 644, 646, 647], "graphtransform": 144, "graphtransformbas": 144, "input_pb": [144, 146, 147], "log": [146, 177, 179, 183, 200, 405, 406, 410, 545, 555, 607, 629, 630, 631, 643, 645, 647], "insertlog": 146, "node_name_list": 146, "show_nam": 146, "show_op": 146, "first_n": 146, "summar": [146, 582], "1024": [146, 246, 289, 602], "dump_fp32": 146, "rerang": 147, "rerangequantizedconcat": 147, "rerange_quant": 147, "version1_lt_version2": [148, 507, 549], "version1": [148, 507, 549], "version2": [148, 507, 549], "version1_gt_version2": [148, 507, 549], "greater": [148, 507, 549, 629, 635, 647], "version1_eq_version2": [148, 507, 549], "version1_gte_version2": [148, 507, 549], "version1_lte_version2": [148, 507, 549], "disable_random": [148, 500, 507], "seed": [148, 149, 184, 192, 228, 229, 325, 500, 507, 549, 596, 649], "disabl": [148, 228, 229, 500, 507, 553, 616, 621, 640, 641, 644], "read_graph": [148, 500], "in_graph": [148, 500], "in_graph_is_binari": [148, 500], "write_graph": [148, 500], "out_graph_def": [148, 500], "out_graph_fil": [148, 500], "write": [148, 253, 296, 500, 549, 584, 590, 596, 599, 645], "is_ckpt_format": [148, 500], "ckpt": [148, 371, 379, 422, 500, 505, 650], "folder": [148, 246, 251, 289, 294, 371, 422, 500, 548, 579, 604, 609, 613, 622, 629, 630, 631, 641, 645], "is_saved_model_format": [148, 500], "saved_model": [148, 319, 500, 639], "get_estimator_graph": 148, "estim": [148, 149, 317, 370, 379, 505, 647], "input_fn": [148, 379, 505], "get_tensor_by_nam": [148, 500], "try_cnt": [148, 500], "import": [148, 153, 177, 179, 193, 228, 229, 319, 371, 381, 422, 441, 500, 507, 538, 549, 555, 556, 558, 561, 576, 578, 579, 581, 582, 583, 584, 586, 589, 595, 596, 597, 598, 599, 603, 605, 618, 619, 627, 633, 634, 635, 637, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648], "scope": [148, 500, 554, 560, 596], "onc": [148, 162, 188, 218, 268, 344, 348, 423, 425, 500, 514, 560, 561, 578, 616, 622, 635, 636, 647, 650], "both": [148, 150, 179, 229, 500, 553, 556, 559, 583, 596, 600, 619, 621, 623, 635, 637, 638, 641, 644, 647], "compat": [148, 379, 500, 505, 554, 584, 598, 611, 614, 616, 635, 642], "v1": [148, 256, 257, 299, 314, 315, 317, 367, 368, 370, 379, 500, 505, 584, 586, 587, 595, 598, 620, 635, 642, 643, 644, 650], "suffix": [148, 500], "time": [148, 162, 179, 196, 228, 229, 261, 302, 317, 349, 370, 381, 426, 500, 507, 514, 549, 560, 578, 581, 584, 587, 596, 604, 606, 609, 613, 616, 617, 622, 625, 629, 630, 633, 635, 636, 638, 641, 643, 644, 645, 646, 647], "got": [148, 500, 560, 587, 645], "iterator_sess_run": [148, 500], "sess": [148, 379, 500, 505], "iter_op": [148, 500], "feed_dict": [148, 243, 286, 500], "output_tensor": [148, 379, 500, 505], "measur": [148, 262, 371, 500, 543, 556, 559, 576, 581, 582, 595, 596, 641, 645, 647, 650], "integr": [148, 186, 263, 500, 559, 596, 617, 618, 623, 641], "makeiter": [148, 500], "feed": [148, 243, 286, 500, 582, 635], "end": [148, 153, 207, 208, 209, 214, 228, 229, 244, 260, 261, 287, 301, 302, 342, 348, 423, 425, 500, 559, 560, 561, 582, 583, 588, 592, 596, 610, 626, 633, 635, 645, 646, 647], "predict": [148, 261, 266, 302, 310, 314, 315, 317, 363, 367, 368, 370, 422, 500, 556, 582, 595, 607, 641, 644, 645, 646], "pred": [148, 317, 370, 500, 595], "collate_tf_pr": [148, 500], "collat": [148, 170, 500], "get_input_output_node_nam": [148, 500], "fix_ref_type_of_graph_def": [148, 500], "fix": [148, 212, 214, 244, 287, 342, 500, 578, 579, 603, 635, 638, 641, 647], "strip_unused_lib": [148, 500], "offici": [148, 310, 314, 315, 363, 367, 368, 500, 553, 644], "r1": [148, 500], "15": [148, 500, 588, 592, 630], "branch": [148, 500, 554], "get_graph_def": [148, 500], "auto_input_output": [148, 500], "get_model_input_shap": [148, 500], "get_tensor_val_from_graph_nod": [148, 500], "graph_node_name_map": [148, 500], "kei": [148, 149, 157, 162, 163, 167, 200, 211, 220, 226, 228, 229, 324, 341, 379, 441, 500, 505, 507, 514, 516, 522, 539, 541, 549, 558, 560, 618, 619, 625, 636, 641, 645, 647], "val": [148, 220, 246, 249, 289, 292, 341, 500, 581, 596, 621], "tensor_v": [148, 500], "int8_node_name_revers": [148, 500], "revers": [148, 500, 619], "tf_diagnosis_help": [148, 500], "fp32_model": [148, 157, 170, 307, 500, 549, 559, 639, 641], "quan_model": [148, 500], "save_path": [148, 306, 307, 500, 559, 598], "diagnosi": [148, 228, 229, 500, 596, 619, 620, 621, 636, 642, 648], "generate_feed_dict": [148, 500], "input_tensor": [148, 196, 379, 500, 505], "get_weight_from_input_tensor": [148, 500], "input_tensor_nam": [148, 379, 500, 505], "associ": [148, 162, 313, 366, 500, 514], "search": [148, 156, 171, 192, 193, 200, 214, 225, 229, 232, 233, 275, 276, 308, 310, 320, 323, 324, 325, 345, 349, 363, 386, 426, 500, 518, 521, 522, 549, 558, 591, 595, 599, 600, 610, 635, 636, 641, 644, 645, 647, 648], "look": [148, 211, 500, 559, 561, 588, 595, 618, 619, 621, 644, 649], "sq_weight_tensor": [148, 500], "sq_weights_nod": [148, 500], "two": [148, 157, 162, 177, 201, 206, 213, 218, 246, 251, 262, 289, 294, 313, 340, 344, 346, 353, 366, 432, 500, 514, 549, 554, 555, 556, 578, 579, 582, 584, 586, 588, 596, 597, 623, 624, 626, 635, 638, 640, 641, 643, 644, 647, 649], "apply_inlin": [148, 500], "func": [148, 170, 500, 522, 549, 638, 649], "inlin": [148, 500, 599, 604, 607], "definit": [148, 152, 165, 237, 242, 280, 285, 500, 520, 532], "concret": [148, 500, 647], "new_graph_def": [148, 500], "construct_function_from_graph_def": [148, 500], "frozen_func": [148, 500], "rebuild": [148, 500, 600, 609, 613], "reconstruct": [148, 500, 636], "new_func": [148, 500], "parse_saved_model": [148, 500], "output_tensor_nam": [148, 379, 500, 505], "_saved_model": [148, 500], "load": [148, 160, 162, 163, 244, 260, 261, 287, 301, 302, 371, 379, 422, 500, 505, 507, 512, 513, 515, 516, 548, 549, 560, 578, 609, 613, 617, 619, 637, 638, 639, 644], "reconstruct_saved_model": [148, 500], "trackabl": [148, 500], "destin": [148, 305, 319, 500], "quant_weight_asym": 149, "v": [149, 153, 607, 616, 635, 647, 649], "min_scal": 149, "max_scal": 149, "asymmetr": [149, 561, 638, 641, 647], "e": [149, 162, 202, 228, 229, 514, 523, 553, 554, 582, 585, 589, 599, 604, 605, 609, 613, 635, 641, 644, 647], "perturb": 149, "minimum": [149, 202, 228, 229, 561, 577, 581, 596, 607, 635, 644, 647], "quant_weight_sym": 149, "quant_weight_actor": 149, "quant_weight": [149, 171], "hand": [149, 556], "issu": [149, 553, 554, 557, 558, 592, 619, 621, 638, 645], "quant_weight_w_scal": [149, 171, 522], "round_st": 149, "torch": [149, 150, 152, 153, 155, 156, 157, 158, 159, 162, 163, 165, 166, 167, 168, 170, 171, 175, 197, 200, 201, 203, 211, 225, 228, 229, 307, 371, 422, 544, 548, 555, 558, 561, 562, 582, 584, 586, 596, 597, 598, 599, 604, 607, 619, 638, 641, 644, 645], "straight": 149, "through": [149, 157, 232, 233, 275, 276, 370, 371, 422, 558, 576, 588, 590, 591, 595, 602, 623, 633, 634, 635, 637, 638, 641], "omniqu": 149, "saveinput": 149, "seqlen": 149, "256": [149, 251, 257, 294, 299, 530, 579, 584, 596, 646], "block_nam": 149, "cach": [149, 244, 287, 523, 587, 638, 641], "get_modul": [149, 163, 167, 516, 522], "nn": [149, 152, 156, 163, 165, 167, 170, 171, 200, 201, 211, 223, 228, 229, 307, 371, 422, 516, 517, 518, 520, 522, 523, 528, 529, 532, 533, 537, 544, 548, 555, 582, 596, 598, 641, 644, 645], "set_modul": [149, 167, 170, 522, 537], "new_modul": [149, 163, 167, 170, 516, 522, 537], "get_scale_shap": 149, "wrapper_block": 149, "enable_minmax_tun": 149, "conv1d": [149, 156, 223, 518, 561], "indic": [149, 162, 178, 179, 185, 196, 228, 229, 237, 242, 244, 280, 285, 287, 303, 313, 324, 366, 386, 387, 389, 514, 555, 578, 587, 619, 624, 645], "unwrapper_block": 149, "unwrap": 149, "wrapperlinear": 149, "wrappertransformerconv1d": 149, "sampling_input": 149, "input_id": [149, 244, 261, 287, 302, 596], "input_oth": 149, "length": [149, 211, 228, 229, 244, 261, 287, 302, 313, 366, 558, 579, 595, 636, 638, 641, 646], "id": [149, 177, 260, 262, 301, 310, 312, 313, 314, 315, 363, 365, 366, 367, 368, 595, 624, 625, 629, 630, 631, 643, 647], "current_input_id": 149, "current_input_oth": 149, "move_input_to_devic": 149, "check_is_cpu": 149, "otherwis": [149, 162, 246, 261, 289, 302, 514, 549, 553, 560, 579, 611, 614, 637, 641, 646], "block_forward": 149, "amp_dtyp": 149, "automat": [149, 198, 200, 201, 228, 229, 246, 249, 256, 257, 289, 292, 299, 308, 318, 345, 555, 558, 576, 579, 591, 596, 597, 599, 601, 604, 605, 607, 609, 610, 611, 613, 614, 616, 623, 626, 634, 635, 638, 644, 646, 647], "mix": [149, 155, 164, 228, 229, 347, 359, 371, 424, 438, 523, 558, 559, 566, 591, 599, 605, 606, 607, 648], "precis": [149, 155, 164, 228, 229, 232, 233, 275, 276, 308, 315, 317, 318, 345, 347, 359, 368, 370, 371, 381, 424, 427, 438, 523, 549, 558, 559, 560, 566, 576, 577, 583, 584, 588, 591, 599, 605, 606, 607, 636, 637, 638, 641, 644, 647, 648], "collect_round_v": 149, "collect_minmax_scal": 149, "get_batch_dim": 149, "posit": [149, 179, 196, 261, 302, 533, 553, 595, 599, 624, 629, 630, 631], "dim": [149, 261, 302, 644, 646], "wrappermultiblock": 149, "module_list": 149, "act": [149, 220, 242, 285, 553], "singl": [149, 195, 218, 228, 229, 237, 244, 261, 280, 287, 302, 313, 342, 344, 366, 370, 422, 555, 579, 581, 592, 622, 635, 639, 644], "get_block_nam": 149, "network": [149, 157, 195, 202, 203, 342, 429, 523, 556, 577, 582, 583, 586, 596, 618, 636, 638, 644, 647], "get_tokenizer_funct": 149, "token": [149, 244, 255, 258, 261, 287, 298, 300, 302, 309, 310, 311, 362, 363, 364, 544, 579, 595, 596, 618, 619, 641, 643, 644, 646, 647], "truncat": [149, 244, 261, 287, 302, 579, 646], "field": [149, 179, 228, 229, 246, 289, 313, 366, 555, 559, 561, 584, 596, 643, 647, 649], "get_dataload": 149, "data_nam": 149, "neelnanda": 149, "pile": 149, "10k": [149, 585, 589], "42": [149, 192, 229, 325, 650], "test": [149, 177, 228, 229, 261, 302, 554, 558, 581, 592, 624, 629, 650], "shuffl": [149, 234, 236, 239, 240, 243, 264, 277, 279, 282, 283, 286, 502, 578, 596, 638], "enable_full_rang": [149, 150, 154, 171, 522, 544, 639, 641], "cuda": [149, 162, 220, 514, 523, 597, 599, 601, 635, 638], "lr_schedul": [149, 596, 635], "dataset_nam": [149, 620], "dataset_split": 149, "use_quant_input": 149, "lr": [149, 153, 228, 229, 582, 584, 596], "005": [149, 641], "minmax_lr": 149, "low_gpu_mem_usag": 149, "200": [149, 260, 301, 555, 625, 647], "512": 149, "sampler": [149, 179, 234, 236, 238, 239, 240, 243, 264, 277, 279, 281, 282, 283, 286, 298, 309, 358, 437, 502, 578, 584], "rand": [149, 599, 644], "n_block": [149, 171, 517, 641], "gradient_accumulate_step": 149, "not_use_ms": 149, "dynamic_max_gap": 149, "data_typ": [149, 154, 171, 361, 440, 517], "signround": 149, "advanc": [149, 157, 228, 229, 553, 558, 560, 566, 594, 635, 638, 641, 649], "cheng": 149, "wenhua": 149, "et": [149, 153, 157, 577, 641, 644], "al": [149, 153, 157, 577, 641, 644], "via": [149, 308, 332, 337, 345, 553, 558, 584, 591, 596, 599, 616, 635, 636], "sign": [149, 196, 361, 440, 554, 558, 561, 577, 618, 636, 638, 641, 643], "gradient": [149, 153, 195, 326, 558, 591, 596, 635, 636, 650], "descent": [149, 153, 200, 558, 636], "arxiv": [149, 156, 195, 196, 214, 215, 222, 342, 518, 530, 558, 577, 635, 636, 641, 644], "preprint": [149, 577, 635, 641, 644], "2309": 149, "05516": 149, "2023": [149, 558, 631, 635, 641, 644, 650], "pytorch": [149, 186, 188, 189, 197, 200, 203, 206, 207, 210, 215, 216, 223, 228, 229, 243, 244, 246, 249, 253, 261, 263, 268, 270, 286, 287, 289, 292, 296, 302, 307, 308, 317, 318, 338, 340, 343, 345, 353, 362, 370, 371, 380, 422, 432, 542, 549, 554, 555, 556, 558, 559, 560, 561, 577, 578, 582, 583, 585, 588, 591, 592, 594, 596, 597, 598, 599, 601, 604, 605, 606, 607, 616, 618, 627, 630, 631, 635, 636, 637, 641, 642, 644, 647, 649], "empti": [149, 163, 179, 228, 229, 516, 602, 639], "layer1": [149, 200, 228, 229, 596, 635, 638], "layer_nam": [149, 224, 229, 635], "rang": [149, 150, 171, 247, 248, 261, 290, 291, 302, 386, 399, 441, 502, 517, 521, 522, 538, 544, 558, 559, 561, 577, 579, 581, 582, 583, 584, 596, 619, 621, 634, 635, 638, 641, 644, 646], "learn": [149, 153, 558, 559, 560, 578, 579, 586, 590, 591, 592, 596, 597, 599, 601, 604, 605, 607, 610, 611, 614, 616, 635, 636, 638, 644, 645, 647, 648], "rate": [149, 153, 596, 635, 638], "schedul": [149, 194, 197, 207, 208, 209, 214, 215, 217, 228, 229, 309, 338, 342, 362, 596, 623, 624, 626, 634], "futur": [149, 175, 232, 233, 264, 275, 276, 591, 594, 596, 607, 629, 630, 631, 648], "accumul": [149, 358, 437, 647], "step": [149, 153, 195, 206, 207, 208, 209, 213, 214, 218, 228, 229, 340, 342, 344, 538, 560, 561, 581, 582, 583, 584, 596, 611, 614, 616, 629, 630, 631, 634, 635, 637, 640, 641, 643, 644, 645, 647], "squar": [149, 317, 352, 370, 431, 581, 595, 621, 647], "gap": [149, 581, 598], "addit": [149, 170, 229, 538, 560, 561, 582, 610, 618, 624, 641, 642, 647], "keyword": [149, 162, 229, 514], "argument": [149, 162, 229, 441, 514, 533, 556, 581, 620, 621, 624, 627, 629, 630, 631, 641], "autooptround": 149, "adamw": [149, 188, 268], "autoadamround": 149, "export_compressed_model": [150, 518, 521, 530, 544, 641], "compression_dtyp": [150, 544, 641], "int32": [150, 171, 517, 521, 544, 579, 641], "compression_dim": [150, 544, 641], "scale_dtyp": [150, 544, 641], "float32": [150, 247, 248, 261, 290, 291, 302, 313, 366, 502, 544, 559, 576, 579, 596, 638, 641, 644, 646], "use_optimum_format": [150, 544, 641], "weightonlylinear": [150, 641], "json": [150, 170, 245, 261, 288, 302, 548, 579, 598, 617, 624, 625, 629, 630, 631, 641, 646], "compress": [150, 156, 309, 332, 337, 362, 381, 518, 538, 544, 551, 558, 566, 582, 591, 596, 616, 618, 633, 634, 635, 636, 638, 644, 648, 650], "comoress": [150, 544], "select": [150, 171, 217, 220, 229, 244, 287, 521, 522, 544, 555, 556, 577, 591, 592, 616, 635, 638, 641, 645, 647], "choos": [150, 171, 246, 289, 517, 521, 522, 544, 591, 604, 636, 642, 644, 647, 649], "popular": [150, 309, 362, 551, 558, 559, 560, 577, 582, 585, 586, 589, 594, 596, 635, 638, 641, 647, 648], "huggingfac": [150, 200, 211, 244, 287, 544, 579, 585, 589, 604, 605, 606, 607, 627, 628, 630, 631, 644, 650], "why": [150, 644, 645], "g_idx": 150, "instead": [150, 153, 225, 226, 229, 243, 286, 549, 602, 604, 607, 622, 635, 641], "record": [150, 157, 170, 186, 189, 244, 245, 246, 252, 263, 270, 287, 288, 289, 295, 522, 549, 579, 621, 641, 643, 645, 647], "order": [150, 161, 170, 196, 310, 311, 346, 349, 352, 361, 363, 364, 387, 426, 431, 440, 555, 581, 595, 619, 637, 641, 644, 645, 647], "packed_weight": 150, "qweight": 150, "5": [150, 161, 175, 179, 186, 196, 228, 229, 248, 257, 263, 291, 299, 317, 370, 394, 422, 459, 559, 579, 586, 588, 592, 595, 596, 621, 626, 629, 630, 635, 637, 638, 641, 644, 646, 647, 649, 650], "alwai": [150, 266, 313, 366, 370, 422, 581, 595, 596, 621, 641], "even": [150, 639, 641, 644], "modul": [152, 158, 159, 197, 203, 210, 322, 328, 338, 339, 513, 519, 531, 555, 578, 582, 591, 595, 596, 598, 635, 637, 640, 641, 645, 648], "sgd": [153, 188, 228, 229, 268, 582, 596, 637, 649], "param": [153, 170, 177, 188, 234, 262, 268, 277, 317, 349, 370, 426, 502, 549, 559, 598, 647], "requir": [153, 170, 171, 228, 229, 235, 346, 379, 421, 505, 517, 522, 523, 555, 559, 560, 576, 577, 578, 581, 583, 584, 588, 596, 597, 598, 600, 610, 616, 618, 623, 624, 627, 630, 631, 635, 638, 641, 642, 643, 644, 645, 647, 649], "momentum": [153, 195, 342, 591, 596, 635, 649], "weight_decai": [153, 193, 596, 649], "nesterov": [153, 596, 649], "maxim": [153, 596, 635, 647], "foreach": 153, "differenti": 153, "stochast": 153, "align": [153, 261, 302, 553, 641, 646], "rule": [153, 581, 599, 635], "110mm": 153, "4pt": 153, "textbf": 153, "gamma": 153, "theta_0": 153, "f": [153, 162, 197, 514, 582, 584, 638, 641, 644], "theta": 153, "lambda": [153, 162, 514, 639], "decai": 153, "hspace": 153, "13mm": 153, "mu": [153, 581], "tau": 153, "textit": 153, "ex": 153, "ldot": 153, "5mm": 153, "g_t": 153, "leftarrow": 153, "nabla_": 153, "f_t": 153, "theta_": 153, "neq": 153, "10mm": 153, "15mm": 153, "_t": 153, "_": [153, 232, 233, 275, 276, 422, 555, 556, 558, 559, 560, 577, 581, 582, 584, 586, 588, 596, 597, 598, 599, 605, 609, 611, 613, 614, 621, 624, 625, 633, 635, 638, 641, 642, 643, 644, 645, 647, 649], "g_": 153, "theta_t": 153, "bf": 153, "formula": [153, 635, 644], "On": [153, 638, 650], "deep": [153, 226, 507, 558, 559, 560, 578, 591, 592, 596, 597, 599, 601, 604, 605, 607, 610, 616, 636, 638, 647, 648, 650], "l2": [153, 229, 635], "penalti": [153, 310, 311, 363, 364, 595], "xdoctest": [153, 162, 514], "skip": [153, 162, 514, 645, 647], "9": [153, 195, 228, 229, 555, 592, 596, 635, 637, 644, 647, 649, 650], "zero_grad": [153, 584, 596, 635], "loss_fn": 153, "backward": [153, 523, 538, 582, 583, 584, 596, 634, 635, 638, 642], "subtli": 153, "sutskev": 153, "some": [153, 198, 200, 228, 229, 244, 287, 341, 560, 561, 579, 581, 586, 592, 595, 596, 618, 619, 620, 621, 624, 633, 635, 638, 640, 641, 644, 645, 647, 648, 650], "written": [153, 596], "v_": 153, "p_": 153, "denot": [153, 644], "veloc": 153, "respect": [153, 553, 588, 635, 644, 649], "contrast": [153, 202, 340, 646], "emploi": 153, "form": [153, 315, 368, 581, 582, 616], "analog": 153, "modifi": [153, 211, 246, 289, 421, 440, 555, 561, 584, 588, 620, 621, 635, 649], "d_p_list": 153, "momentum_buffer_list": 153, "has_sparse_grad": 153, "see": [153, 160, 196, 222, 261, 302, 310, 363, 515, 523, 553, 554, 555, 557, 593, 596, 609, 610, 613, 616, 617, 621, 622, 641, 644, 645, 647], "actawareweightqu": [154, 517], "example_input": [154, 164, 167, 169, 170, 171, 228, 229, 307, 517, 522, 533, 548, 586], "algo": [154, 449, 517, 541], "bf16modulewrapp": 155, "bf16modul": 155, "mixed_precision_model": 155, "bf16_symbolic_trac": 155, "fx_sub_module_list": 155, "trace": [155, 157, 168, 170, 200, 228, 229, 307, 429, 555, 606, 647], "_description_": 155, "is_leaf": [156, 518], "judg": [156, 518], "trace_gptq_target_block": [156, 518], "module_typ": [156, 518], "modulelist": [156, 518], "sequenti": [156, 242, 285, 346, 348, 423, 425, 518, 647], "stack": [156, 518], "structur": [156, 201, 212, 213, 228, 229, 342, 360, 439, 518, 549, 591, 615, 617, 620, 629, 635, 636, 638, 645, 648, 650], "critic": [156, 211, 518, 553], "gptq_related_block": [156, 518], "embed": [156, 170, 518, 577, 635], "transformers_pr": [156, 518], "todo": [156, 244, 247, 287, 290, 313, 359, 366, 438, 502, 518], "transformers_nam": [156, 518], "find_lay": [156, 223, 518], "find_layers_nam": [156, 518], "log_quantizable_layers_per_transform": [156, 518], "transformer_block": [156, 518], "maxq": [156, 518], "gptquantiz": [156, 518], "nsampl": [156, 171, 222, 518, 641], "use_max_length": [156, 171, 518, 641], "pad_max_length": [156, 171, 641], "layer_wis": [156, 171, 512, 548, 639], "pretrain": [156, 518, 544, 599, 605], "url": [156, 246, 289, 518, 554, 593, 627, 628, 635], "org": [156, 195, 196, 214, 215, 222, 313, 342, 366, 518, 530, 555, 581, 592, 611, 614, 635], "2210": [156, 518, 530, 641], "17323": [156, 518, 530, 641], "node_collector": 157, "hook": [157, 185, 189, 211, 270, 271, 332, 337, 541, 582, 583, 596, 635, 644, 645], "hessiantrac": 157, "q_model": [157, 161, 229, 319, 422, 458, 461, 555, 558, 578, 579, 581, 584, 586, 589, 590, 595, 596, 598, 618, 619, 638, 639, 640, 641], "criterion": [157, 179, 185, 187, 188, 194, 195, 202, 207, 208, 209, 211, 214, 215, 219, 228, 229, 265, 268, 309, 362, 582, 583, 596, 635, 638, 644, 647, 649], "yao": 157, "zhewei": 157, "pyhessian": 157, "len": [157, 229, 261, 302, 579, 584, 646], "2020": 157, "ieee": [157, 597, 644], "intern": [157, 242, 285, 359, 438, 578, 579, 595, 635], "confer": [157, 635, 644], "big": [157, 581, 641], "dong": 157, "zhen": 157, "hawq": [157, 429, 647], "v2": [157, 429, 578, 584, 586, 587, 592, 605, 642, 644, 647, 648, 650], "system": [157, 162, 177, 262, 514, 549, 576, 602, 635, 650], "33": [157, 650], "18518": 157, "18529": 157, "openvinotoolkit": 157, "nncf": 157, "develop": [157, 381, 554, 555, 592, 596, 597, 599, 605, 616, 622, 635, 636, 640, 643], "hessian_trac": 157, "compare_weight": 157, "float_dict": 157, "ani": [157, 162, 313, 315, 358, 366, 368, 416, 421, 437, 441, 514, 523, 533, 546, 549, 553, 558, 561, 584, 599, 604, 617, 618, 622, 623, 635, 643, 647], "quantized_dict": 157, "compar": [157, 317, 370, 549, 583, 595, 619, 635, 638, 641, 643, 645, 647], "being": [157, 313, 366, 561, 624], "wt_compare_dict": 157, "float_model": 157, "state_dict": [157, 584, 641, 645], "qmodel": 157, "compute_error": 157, "state": [157, 201, 523, 561, 602, 635], "weight_dict": 157, "hawq_top": 157, "enable_act": 157, "portabl": [160, 515], "serial": [160, 162, 514, 515], "copyreg": [160, 515], "mechan": [160, 195, 515, 635, 643, 648], "pickler": [160, 515], "pickletool": [160, 515], "comment": [160, 515, 553, 560, 579, 595, 596, 641, 646], "unpickl": [160, 162, 514, 515], "misc": [160, 515, 593], "format_vers": [160, 515], "compatible_format": [160, 515], "except": [160, 162, 441, 514, 515, 549, 622, 638, 639], "pickleerror": [160, 515], "pickl": [160, 162, 514, 515], "picklingerror": [160, 515], "unpicklingerror": [160, 515], "problem": [160, 244, 287, 317, 370, 515, 595, 597, 617], "secur": [160, 515, 558, 618, 636, 651], "violat": [160, 515], "also": [160, 201, 243, 246, 261, 286, 289, 302, 310, 363, 370, 381, 422, 515, 523, 554, 556, 559, 560, 561, 578, 581, 585, 589, 591, 595, 596, 599, 604, 609, 610, 613, 616, 617, 618, 621, 622, 633, 635, 636, 638, 640, 641, 644, 647], "includ": [160, 186, 195, 200, 202, 217, 219, 228, 229, 244, 246, 253, 261, 263, 287, 289, 296, 302, 308, 318, 340, 345, 441, 515, 523, 549, 553, 559, 560, 561, 578, 579, 581, 592, 593, 594, 595, 596, 599, 602, 605, 610, 622, 626, 629, 630, 631, 635, 638, 640, 641, 645, 647], "necessarili": [160, 515], "limit": [160, 193, 349, 426, 515, 549, 558, 581, 582, 594, 638, 641, 642, 645], "attributeerror": [160, 441, 515], "eoferror": [160, 515], "importerror": [160, 515, 587], "indexerror": [160, 515], "layerwisequ": 161, "pretrained_model_name_or_path": [161, 163, 516], "op_cfg": 161, "output_dir": [161, 544, 596, 604, 605, 620, 621, 627, 630, 631], "memomeri": 161, "file_lik": [162, 514], "map_loc": [162, 514], "pickle_modul": [162, 197, 514], "weights_onli": [162, 514], "pickle_load_arg": [162, 514], "facil": [162, 514], "treat": [162, 514, 578], "storag": [162, 514, 558, 589, 595, 618, 621, 641, 644], "thei": [162, 262, 441, 514, 553, 582, 588, 596, 604, 619, 622, 633], "deseri": [162, 514], "were": [162, 317, 370, 514, 602, 635], "fail": [162, 514, 555, 578, 586, 625], "becaus": [162, 179, 206, 211, 261, 302, 340, 514, 555, 621, 638, 644, 646, 647], "doesn": [162, 261, 302, 514, 559, 584, 596, 597, 617, 649], "certain": [162, 223, 514, 643], "howev": [162, 514, 622, 635, 641, 644], "altern": [162, 228, 229, 422, 514], "callabl": [162, 228, 229, 315, 368, 445, 458, 461, 514, 528, 533, 538, 578], "locat": [162, 172, 220, 261, 302, 514, 584, 602, 609, 613, 616, 624, 638, 642, 646, 649], "resid": [162, 514], "tag": [162, 379, 505, 514, 644, 645], "wa": [162, 179, 228, 229, 514, 559, 596, 621, 622, 625, 636, 647], "builtin": [162, 514, 584], "device_id": [162, 514], "either": [162, 229, 313, 366, 514, 600, 604, 624, 634, 637, 638], "final": [162, 200, 207, 220, 342, 514, 560, 596, 602, 633, 635, 638, 642, 647], "alreadi": [162, 177, 246, 260, 262, 289, 301, 514, 559, 579, 591, 611, 614, 618, 627, 647], "right": [162, 257, 299, 313, 366, 514, 553, 554, 555, 616, 622, 644, 646], "fall": [162, 170, 514], "back": [162, 170, 261, 267, 302, 514, 581, 616, 622], "behavior": [162, 514, 553, 559, 560, 561, 588, 598, 641, 645, 647, 649], "wasn": [162, 514], "appear": [162, 514, 553, 610, 616, 618], "ones": [162, 313, 366, 514, 635], "put": [162, 246, 289, 514, 579, 582], "user": [162, 177, 188, 200, 212, 220, 228, 229, 232, 233, 246, 249, 253, 261, 262, 268, 275, 276, 289, 292, 296, 302, 308, 332, 337, 343, 345, 346, 370, 371, 381, 422, 427, 440, 514, 538, 549, 555, 556, 558, 559, 560, 561, 566, 576, 578, 582, 583, 586, 588, 591, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 607, 610, 616, 623, 624, 625, 626, 629, 630, 631, 633, 634, 635, 636, 638, 639, 640, 642, 644, 645, 646, 647, 651], "register_packag": [162, 514], "readlin": [162, 514], "tell": [162, 370, 422, 514, 637], "seek": [162, 514, 641], "o": [162, 441, 514, 592, 601, 619], "pathlik": [162, 514], "metadata": [162, 514], "primit": [162, 514], "unless": [162, 514, 588], "implicitli": [162, 514], "known": [162, 264, 349, 426, 514, 596, 635, 638, 645, 647], "insecur": [162, 514, 618], "possibl": [162, 262, 514, 523, 581, 618, 634, 635, 639, 640, 647], "construct": [162, 244, 247, 248, 251, 259, 264, 266, 267, 269, 287, 290, 291, 294, 370, 375, 379, 440, 502, 504, 505, 514, 541, 553, 560, 561, 579, 584, 635, 647], "malici": [162, 514], "arbitrari": [162, 514, 596, 634], "code": [162, 200, 232, 233, 262, 275, 276, 319, 343, 346, 422, 514, 538, 555, 558, 559, 560, 561, 579, 582, 583, 584, 590, 591, 593, 595, 599, 601, 603, 604, 605, 607, 610, 616, 620, 621, 623, 624, 625, 633, 634, 635, 636, 637, 638, 643, 644, 645, 646], "never": [162, 514, 647], "could": [162, 167, 175, 202, 232, 233, 246, 275, 276, 289, 346, 371, 422, 514, 538, 553, 555, 583, 596, 634, 635, 638, 641, 644, 648], "come": [162, 514, 594, 647], "untrust": [162, 514], "unsaf": [162, 514], "tamper": [162, 514], "trust": [162, 514, 581, 618], "load_state_dict": [162, 514], "ram": [162, 514], "surg": [162, 514], "checkpoint": [162, 379, 505, 514, 548, 598], "By": [162, 200, 228, 229, 310, 363, 514, 560, 561, 595, 598, 609, 610, 613, 635, 636, 641, 647], "decod": [162, 256, 257, 299, 310, 363, 514, 595, 646], "byte": [162, 514], "utf": [162, 260, 301, 514], "unicodedecodeerror": [162, 514], "ascii": [162, 514], "codec": [162, 514], "0x": [162, 514], "incorrect": [162, 514], "extra": [162, 315, 368, 514, 596, 641], "encod": [162, 313, 366, 514, 619, 646], "latin1": [162, 514], "them": [162, 200, 244, 287, 514, 555, 561, 578, 581, 586, 588, 590, 619, 622, 634, 635, 641, 647], "keep": [162, 211, 220, 341, 427, 514, 555, 559, 615, 616, 642], "later": [162, 167, 175, 514, 623, 624, 645], "byte_arrai": [162, 514], "undefin": [162, 220, 341, 514], "filepath": [162, 514, 549], "pt": [162, 514, 548, 592, 598, 620, 636, 638, 640, 641], "onto": [162, 514], "loc": [162, 514], "bytesio": [162, 514], "open": [162, 265, 309, 362, 514, 541, 551, 553, 558, 586, 587, 596, 611, 614, 617, 618, 622, 623, 624, 636], "rb": [162, 514], "buffer": [162, 514], "get_children": [163, 516], "get_named_children": [163, 516], "dowload_hf_model": [163, 516], "repo_id": [163, 516], "cache_dir": [163, 516], "repo_typ": [163, 516], "revis": [163, 516], "download": [163, 246, 289, 516, 579, 581, 592, 621, 627, 642], "hug": [163, 516, 558, 623, 636], "face": [163, 516, 553, 558, 566, 599, 603, 623, 625, 636, 642, 650], "hf": [163, 516, 594, 644, 650], "hub": [163, 516, 558, 585, 589, 607], "load_empty_model": [163, 516, 639], "automodelforcausallm": [163, 516], "get_super_module_by_nam": [163, 516], "module_nam": [163, 195, 197, 207, 208, 209, 210, 212, 213, 214, 215, 217, 219, 342, 507, 516, 549], "father": [163, 200, 516], "update_modul": [163, 516], "load_layer_wise_quantized_model": [163, 516], "load_tensor_from_shard": [163, 516], "shard": [163, 516], "load_tensor": [163, 516], "ipex_mixed_precis": 164, "fakeaffinetensorquantfunct": [165, 520], "affin": [165, 520, 638], "teqlinearfakequ": [165, 520], "orig_lay": [165, 520], "mullinear": [165, 171, 517, 520], "input_scal": [165, 520], "detector": 166, "transformerbasedmodelblockpatterndetector": 166, "pattern_lst": 166, "block_pattern": 166, "detect": [166, 170, 200, 228, 229, 313, 317, 366, 370, 375, 554, 555, 599, 606, 607, 635, 647], "ffn": [166, 211], "torchsmoothqu": [167, 644], "q_func": [167, 232, 233, 275, 276, 347, 349, 352, 353, 354, 355, 423, 424, 426, 427, 429, 431, 432, 433, 434, 559, 560, 596, 647], "traced_model": [167, 168], "whose": [167, 175, 202, 341, 379, 505, 590, 644, 647], "absorb": [167, 170, 171, 175, 517, 522, 641], "trace_and_fuse_sub_graph": 168, "is_qat": 168, "tequant": 169, "absorb_to_lay": [169, 170, 171, 522], "extra_config": [169, 171], "trainabl": [169, 558, 636, 641], "move_input_devic": 170, "auto": [170, 178, 198, 200, 228, 229, 347, 362, 424, 430, 529, 549, 555, 577, 599, 602, 604, 606, 607, 635, 638, 641], "kind": [170, 596], "forward_wrapp": 170, "get_embedding_contigu": 170, "contigu": 170, "is_fused_modul": 170, "_propagate_qconfig_help": 170, "collate_torch_pr": 170, "collate_result": 170, "input2tupl": 170, "append_attr": 170, "fx_model": 170, "fx_white_list": 170, "append": [170, 346, 349, 426, 555, 583, 596, 634], "graphmodul": [170, 555, 640], "dir": [170, 244, 287, 544, 548, 579, 587, 590], "generate_activation_observ": 170, "smooth_quant_en": 170, "observ": [170, 561, 641, 643, 645, 647], "what": [170, 207, 242, 285, 370, 422, 538, 553, 636], "check_cfg_and_qconfig": 170, "op_infos_from_cfg": 170, "output_tensor_ids_op_nam": 170, "paser_cfg": 170, "ops_nam": 170, "get_quantizable_ops_from_cfg": 170, "input_tensor_ids_op_nam": 170, "update_sq_scal": 170, "ipex_config_path": 170, "smoothquant_scale_info": 170, "ipex_config": 170, "auto_copi": 170, "fetch_modul": [170, 522, 537], "op_nam": [170, 225, 228, 229, 360, 439, 522, 537, 549, 550, 560, 596, 635, 645], "simple_infer": 170, "get_example_input": [170, 522], "example_inp": [170, 522], "get_fallback_ord": 170, "confidence_batch": [170, 647], "fallback": [170, 229, 352, 353, 429, 431, 432, 586, 597, 619, 640, 647], "requantize_cfg": 170, "confid": 170, "ordered_op": 170, "get_mse_order_per_fp32": 170, "influenc": [170, 635], "last": [170, 195, 220, 228, 229, 578, 597, 599, 601, 606, 610, 638, 641, 644], "fallback_ord": 170, "get_mse_order_per_int8": 170, "get_torch_vers": 170, "match_datatype_pattern": 170, "calculate_quant_min_max": 170, "unsign": [170, 361, 440, 561, 641], "qmin": 170, "qmax": 170, "get_depth": 170, "depth": [170, 582, 640], "get_dict_at_depth": 170, "target_depth": 170, "nest": [170, 226, 507], "get_element_under_depth": 170, "ops_lst": 170, "get_op_type_by_nam": 170, "quantizable_op": 170, "collect_weight_info": 170, "fc": [170, 229, 635], "_type_": [170, 544], "get_module_input_output": [170, 522], "module_hook_config": [170, 522], "input_func": [170, 522], "output_func": [170, 522], "help": [170, 189, 270, 319, 522, 594, 598, 599, 605, 616, 624, 629, 630, 631, 641, 647, 648], "module_name_list": [170, 522], "fc1": [170, 171, 517, 522], "preprocess": [170, 228, 229, 244, 261, 287, 302, 440, 522, 541, 584, 646], "usag": [170, 178, 179, 243, 286, 313, 319, 346, 366, 399, 441, 507, 522, 537, 560, 579, 584, 585, 599, 607, 618, 624, 629, 630, 631, 633, 637, 641, 646], "input_valu": [170, 522], "output_valu": [170, 522], "total_valu": [170, 522], "get_absorb_lay": [170, 522], "supported_lay": [170, 522], "no_absorb_lay": [170, 522], "allow": [170, 349, 426, 522, 523, 582, 584, 595, 596, 597, 618, 623, 635, 637, 641, 644, 647, 649], "absorpt": [170, 522], "eg": [170, 226, 246, 289, 507, 522, 579, 637], "absorbed_1": [170, 522], "xx": [170, 522], "get_block_prefix": [170, 522], "block_list": [170, 522], "block_num": [170, 522], "block_prefix": [170, 522], "get_hidden_st": [170, 522], "calib": [170, 522, 560], "rest": [170, 522, 623, 624, 629, 630, 631], "part": [170, 198, 207, 340, 342, 522, 555, 592, 597, 611, 614, 624, 626, 635, 639, 644, 648], "total_block_kwarg": [170, 522], "total_block_arg": [170, 522], "quantize_4bit": [171, 522], "quantil": [171, 521, 522, 647], "nf4": [171, 521, 522, 558, 641], "return_int": [171, 517, 522, 641], "fp4": [171, 521, 522, 558, 641], "q_tensor": [171, 522], "qdq_weight_asym": [171, 522], "qdq_weight_sym": [171, 522], "full_rang": [171, 522], "amax": [171, 522], "qdq_weight_actor": [171, 522], "place": [171, 522, 583, 592, 629, 635, 645, 647], "search_clip": [171, 522], "best": [171, 179, 185, 261, 302, 303, 308, 345, 352, 386, 431, 522, 553, 556, 592, 599, 605, 616, 622, 633, 638, 641, 644, 646, 647], "num": [171, 521, 522, 549], "best_clip_ratio": [171, 522], "group_dim": [171, 521, 530, 641], "gptq_perm": 171, "perm": [171, 261, 302, 646], "absorb_lay": [171, 517], "absorb_dict": [171, 517], "absorbed_lay": [171, 517], "fc3": [171, 517], "oom": [171, 517], "teq_quant": 171, "algorithm_registri": 172, "algorithm_typ": 172, "registr": [172, 246, 253, 261, 289, 296, 302, 335], "algorithmschedul": 172, "conf": [172, 177, 185, 229, 232, 233, 262, 275, 276, 319, 326, 327, 329, 330, 331, 332, 337, 347, 349, 352, 353, 354, 355, 359, 371, 381, 422, 423, 424, 426, 427, 429, 431, 432, 433, 434, 438, 441, 538, 555, 556, 558, 561, 576, 582, 589, 590, 596, 597, 598, 618, 620, 621, 634, 638, 639, 640, 641, 643, 644, 647], "control": [172, 228, 229, 555, 596, 622, 635, 647], "phase": [172, 556, 596, 635, 638, 640, 647], "fastbiascorrect": [173, 176], "fast_bias_correct": [174, 228, 229, 362, 638], "weight_correct": [174, 228, 229, 362, 638], "weightcorrect": 176, "1e": [176, 644, 649], "05": [176, 229, 317, 370, 394, 595, 644, 650], "evalu": [177, 179, 185, 202, 228, 232, 233, 244, 262, 275, 276, 287, 303, 310, 313, 314, 315, 317, 319, 363, 366, 367, 368, 370, 371, 381, 422, 538, 541, 556, 559, 560, 579, 582, 583, 590, 591, 594, 595, 596, 597, 599, 605, 607, 610, 616, 633, 635, 638, 643, 644, 645, 647, 649], "set_env_var": [177, 262], "env_var": [177, 262], "overwrite_exist": [177, 262], "env": [177, 262, 587, 629, 630, 631], "set_all_env_var": [177, 262], "physic": [177, 262, 553, 576, 624], "core": [177, 228, 229, 262, 385, 554, 576, 593, 609, 613, 624, 650], "get_architectur": [177, 262], "architectur": [177, 262, 320, 323, 558, 576, 582, 596, 623, 635, 636, 641, 648], "get_threads_per_cor": [177, 262], "thread": [177, 228, 229, 262, 416, 421, 523, 578, 626], "get_thread": [177, 262], "get_physical_id": [177, 262], "socket": [177, 262, 549, 624, 626, 650], "get_core_id": [177, 262], "get_bounded_thread": [177, 262], "core_id": [177, 262], "bind": [177, 262], "run_inst": 177, "b_dataload": [177, 228, 229, 576, 596], "b_func": [177, 576], "benchmarkconfig": [177, 228, 229, 576, 581, 596], "goal": [177, 179, 303, 308, 332, 337, 345, 371, 422, 560, 578, 634, 638, 647], "prefer": [177, 308, 345, 422, 635, 641], "space": [177, 192, 193, 208, 209, 214, 215, 228, 229, 232, 233, 275, 276, 308, 315, 320, 323, 324, 325, 345, 349, 352, 359, 368, 371, 422, 426, 431, 438, 553, 554, 556, 559, 560, 561, 635, 638, 644, 649], "etc": [177, 185, 260, 301, 303, 308, 315, 332, 337, 345, 368, 371, 422, 548, 558, 582, 591, 618, 622, 635, 643, 647], "generate_prefix": 177, "core_list": 177, "command": [177, 262, 538, 581, 584, 599, 601, 604, 609, 613, 617, 618, 620, 621, 622, 624], "numactl": [177, 587, 602, 610], "call_on": 177, "cmd": 177, "log_fil": [177, 415, 420], "window": [177, 576, 592, 616, 617], "config_inst": 177, "raw_cmd": 177, "multi": [177, 198, 200, 211, 313, 366, 370, 422, 556, 578, 579, 591, 596, 633, 635, 638, 647], "trigger": [177, 207, 342], "summary_benchmark": 177, "summari": [177, 538, 581, 611, 614, 645, 650], "profil": [177, 229, 362], "benchmark_with_raw_cmd": 177, "fit_with_raw_cmd": 177, "cores_per_inst": [177, 228, 229, 576, 596, 637], "num_of_inst": [177, 228, 229, 576, 596, 637], "fit": [177, 202, 228, 229, 349, 371, 422, 426, 441, 538, 555, 558, 576, 578, 579, 581, 584, 589, 590, 595, 596, 597, 598, 618, 619, 635, 638, 639, 640, 641], "pb": [177, 228, 229, 371, 379, 422, 505, 558, 576, 584, 589, 596, 598, 618, 621, 629, 645, 650], "eval_dataload": [177, 228, 229, 232, 233, 275, 276, 346, 347, 349, 352, 353, 354, 355, 371, 422, 423, 424, 426, 427, 429, 431, 432, 433, 434, 538, 576, 590, 595, 596, 618, 638, 639, 647], "register_config": 178, "framework_nam": 178, "algo_nam": 178, "prioriti": [178, 627], "examplealgorithm": 178, "examplealgorithmconfig": 178, "larger": [178, 560, 635, 641, 644], "higher": [178, 228, 229, 232, 233, 275, 276, 324, 371, 422, 538, 555, 581, 582, 586, 595, 619, 635, 638, 643], "tri": [178, 229, 647], "stage": [178, 348, 353, 423, 425, 432, 582, 635, 645, 647], "baseconfig": [178, 459, 461, 533], "white_list": [178, 394, 459, 530], "op_name_or_module_typ": [178, 394, 459, 530], "default_white_list": [178, 394, 459, 530], "composableconfig": 178, "register_supported_configs_for_fwk": 178, "fwk_name": 178, "eval_acc": 179, "eval_perf": 179, "mold": 179, "user_eval_fns1": 179, "user_eval_fns2": 179, "eval_fn": [179, 529], "user_eval_fns3": 179, "user_eval_fns4": 179, "tuninglogg": 179, "unifi": [179, 308, 345, 559, 560, 561, 578, 590, 591, 595, 596, 598], "logger": [179, 182, 309, 338, 362, 507, 539, 542, 549], "assist": [179, 642], "team": [179, 315, 368, 553, 640], "retriev": [179, 242, 285, 635], "tuningconfig": [179, 529], "config_set": 179, "timeout": [179, 228, 229, 596, 637, 647, 649], "max_trial": [179, 228, 229, 596, 647], "tolerable_loss": [179, 228, 229, 596, 647], "earli": [179, 228, 229, 596, 638, 647, 649], "stop": [179, 228, 229, 596, 647, 648, 649], "exit": [179, 228, 229, 348, 423, 425, 596, 624, 629, 630, 631, 649], "much": [179, 185, 195, 228, 229, 261, 302, 303, 582, 610, 644, 646], "metric": [179, 185, 228, 229, 232, 233, 265, 275, 276, 303, 308, 309, 324, 332, 337, 345, 346, 362, 371, 422, 538, 541, 556, 559, 560, 579, 581, 584, 596, 597, 618, 638, 643, 644, 645, 647, 648, 649, 650], "accept": [179, 228, 229, 441, 553, 576, 578, 618, 641], "rel": [179, 196, 228, 229, 381, 596, 619, 637, 647, 649, 650], "neg": [179, 196], "tune_config": [179, 529, 560], "config1": 179, "config2": 179, "toler": [179, 621], "fp32_baselin": [179, 541, 559], "config1_metr": 179, "config2_metr": 179, "98": [179, 228, 229, 596, 635, 637, 650], "trial": [179, 647], "config3_metr": 179, "97": [179, 596, 650], "Not": [179, 358, 359, 437, 438, 507, 549, 556], "achiev": [179, 308, 345, 586, 594, 596, 619, 634, 635, 636, 638, 644, 645, 647], "config_metr": 179, "reach": [179, 202, 218, 228, 229, 344, 554, 578, 618, 635, 647], "10": [179, 192, 228, 229, 246, 289, 349, 426, 558, 576, 579, 586, 592, 596, 618, 619, 635, 637, 646, 647, 650], "config1_tuning_tim": 179, "config2_tuning_tim": 179, "config3_tuning_tim": 179, "6": [179, 196, 228, 229, 588, 638, 644, 647, 650], "due": [179, 561, 586, 635, 638, 644, 645], "third": [179, 313, 366, 554, 593], "forc": [179, 640], "set_random_se": [184, 228, 229, 549], "set_workspac": [184, 228, 229, 549], "workspac": [184, 228, 229, 548, 549, 598, 624, 629, 630, 631], "set_resume_from": [184, 228, 229, 549], "resume_from": [184, 228, 229, 549], "set_tensorboard": [184, 228, 229, 549], "tensorboard": [184, 228, 229, 541, 549, 559, 596, 619], "compon": [185, 303, 309, 346, 362, 555, 581, 584, 592, 593, 599, 616, 624, 634, 635], "quantizationawaretrainingcallback": 185, "pruningcallback": 185, "distillationcallback": 185, "basecallback": 185, "design": [185, 243, 266, 271, 286, 370, 427, 556, 558, 596, 604, 607, 635, 638, 648], "mainli": [185, 218, 271, 344, 558, 596, 635, 638], "prune": [185, 194, 195, 197, 198, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 228, 229, 271, 272, 309, 326, 327, 329, 330, 331, 335, 337, 338, 340, 341, 342, 344, 346, 362, 549, 558, 584, 585, 588, 589, 591, 634, 636, 648, 649], "distil": [185, 194, 228, 229, 263, 270, 271, 309, 362, 558, 585, 589, 591, 634, 648, 649], "In": [185, 204, 205, 206, 211, 212, 213, 217, 229, 243, 271, 286, 313, 340, 342, 366, 381, 523, 553, 555, 556, 558, 559, 560, 578, 579, 581, 582, 583, 584, 595, 596, 606, 609, 610, 613, 619, 620, 621, 622, 629, 630, 631, 633, 634, 635, 638, 640, 641, 643, 644, 645, 646, 647, 648], "adaptor": [185, 228, 229, 361, 440, 449, 541, 558, 561, 591, 639, 640, 642, 644, 645, 648], "deriv": [185, 195, 204, 205, 206, 212, 213, 214, 215, 216, 217, 218, 219, 303, 340, 342, 344], "pipelin": [185, 303, 320, 321, 346, 554, 583, 596, 634], "knowledg": [185, 186, 228, 229, 263, 303, 583, 585, 589, 591, 596, 598, 649], "transfer": [185, 251, 294, 303, 579, 582, 583, 596, 644], "teacher": [185, 228, 229, 303, 582, 583, 596, 650], "student": [185, 189, 228, 229, 244, 270, 287, 303, 579, 582, 583, 650], "distillation_conf": [185, 225, 303], "_epoch_ran": [185, 303], "integ": [185, 206, 207, 228, 229, 303, 313, 317, 324, 340, 342, 366, 370, 441, 559, 561, 577, 638, 641, 644, 647], "epoch": [185, 208, 209, 214, 303, 342, 538, 578, 582, 583, 584, 596, 634, 635, 649], "ran": [185, 303], "eval_frequ": [185, 303], "frequenc": [185, 207, 228, 229, 303, 342, 596, 635, 649], "term": [185, 208, 209, 214, 215, 217, 303, 554, 577, 582, 593, 595, 633, 634, 647], "best_scor": [185, 303], "best_model": [185, 303, 548, 641], "found": [185, 303, 558, 582, 594, 597, 604, 621, 625, 644, 647, 650], "critet": [186, 263], "tensorflowcrossentropyloss": [186, 263], "pytorchcrossentropyloss": [186, 263], "tensorflowsparsecategoricalcrossentropi": 186, "tensorflowknowledgedistillationloss": [186, 263], "pytorchknowledgedistillationloss": [186, 263, 596], "pytorchintermediatelayersknowledgedistillationloss": [186, 263], "tensorflowcriterion": [186, 263], "pytorchcriterion": [186, 263], "criterion_registri": [186, 263], "criterion_typ": [186, 263], "registry_criterion": [186, 263], "param_dict": [186, 188, 263, 268], "crossentropyloss": [186, 228, 229, 582, 596], "sparsecategoricalcrossentropyloss": 186, "knowledgedistillationframework": [186, 263], "student_model": [186, 229, 263, 596], "teacher_model": [186, 228, 229, 263, 582, 583, 596], "knowledgedistillationloss": [186, 263, 596, 649], "temperatur": [186, 228, 229, 263, 596, 649], "loss_typ": [186, 192, 228, 229, 263, 596, 649], "ce": [186, 228, 229, 263, 596, 649], "loss_weight": [186, 228, 229, 263, 596, 649], "pytorchknowledgedistillationlosswrapp": [186, 263], "tensorflowknowledgedistillationlosswrapp": 186, "tensorflowknowledgedistillationlossextern": [186, 263], "intermediatelayersknowledgedistillationloss": [186, 263], "layer_map": [186, 229, 263, 582], "add_origin_loss": [186, 229, 263], "pytorchintermediatelayersknowledgedistillationlosswrapp": [186, 263], "selfknowledgedistillationloss": [186, 263], "selfknowledg": [186, 263], "pytorchselfknowledgedistillationloss": 186, "pytorchselfknowledgedistillationlosswrapp": 186, "multipl": [188, 198, 230, 231, 235, 236, 244, 245, 247, 248, 249, 250, 251, 255, 258, 261, 268, 273, 274, 278, 279, 281, 287, 288, 290, 291, 292, 293, 294, 298, 300, 302, 318, 371, 372, 373, 375, 381, 523, 576, 579, 586, 596, 623, 626, 634, 635, 643, 644, 647], "tensorflowoptim": [188, 268], "pytorchoptim": [188, 268], "optimizer_registri": [188, 268], "optimizer_typ": [188, 268], "cross": [188, 268, 317, 370, 590, 647], "tensorflowsgd": [188, 268], "tensorflowadamw": [188, 268], "tensorflow_addon": [188, 268], "tensorflowadam": 188, "adam": [188, 649], "pytorchsgd": [188, 268], "record_output": [189, 270], "output_process": [189, 270], "get_activ": [189, 270], "hyper": [190, 649], "sa_optim": [190, 194], "simul": [191, 561], "anneal": 191, "register_search": 192, "searcher": [192, 200, 229, 325], "registri": [192, 193, 195, 202, 207, 216, 217, 218, 219, 340, 342, 344, 556], "sure": [192, 202, 207, 216, 218, 340, 342, 344, 576, 618], "search_spac": [192, 225, 229, 320, 323, 324, 325], "gridsearch": [192, 325], "grid": [192, 229, 325, 556, 635], "whole": [192, 325, 561, 618, 638, 650], "exhaust": [192, 229, 309, 325, 351, 362, 430, 637], "randomsearch": [192, 325], "randomli": [192, 261, 302, 325, 349, 426, 556, 644, 646, 647], "bayesianoptimizationsearch": [192, 325], "bayesian": [192, 229, 309, 325, 351, 362, 430, 556, 635, 637], "xgbsearcher": 192, "higher_is_bett": [192, 228, 229, 370, 422, 647, 649], "reg": [192, 194, 197, 208, 209, 214, 215, 229], "min_train_sampl": [192, 229], "xgboost": [192, 635], "searchspac": 193, "factori": [193, 377, 402, 404, 409, 412, 414, 419, 506], "actual": [193, 317, 370, 584], "interv": [193, 213, 635], "continu": [193, 205, 313, 340, 366, 556, 594, 596, 617, 635, 648], "learning_r": [193, 228, 229, 596, 637, 649], "001": [193, 246, 289, 579, 584, 644, 649], "num_train_epoch": [193, 596, 635], "20": [193, 261, 302, 621, 624, 629, 630, 631, 635, 646, 649, 650], "register_searchspac": 193, "pruner": [193, 194, 309, 326, 327, 328, 329, 330, 332, 337, 338, 340, 343, 362, 596, 635, 649], "basesearchspac": 193, "discretesearchspac": 193, "continuoussearchspac": 193, "hpo": [194, 232, 275, 635], "model_slim": [194, 197, 211], "auto_slim": [194, 197, 199], "pattern_analyz": [194, 197, 199], "weight_slim": [194, 197, 199, 211], "mha": [194, 197, 203, 210, 635], "ninm": [194, 197, 203], "nxm": [194, 197, 203, 213, 228, 229, 336, 340, 635], "basic": [194, 197, 200, 202, 210, 228, 229, 260, 301, 309, 320, 340, 351, 355, 358, 362, 430, 434, 437, 538, 591, 592, 596, 618, 637, 643], "block_mask": [194, 195, 197, 210], "pattern_lock": [194, 197, 210, 228, 229, 309, 328, 362], "retrain_fre": [194, 195, 197, 210, 635], "wanda": [194, 197], "criteria": [194, 197, 228, 229, 308, 332, 337, 340, 342, 345, 555, 616, 644], "tf_criteria": [194, 197], "callback": [194, 332, 337, 538, 541, 555, 596, 634, 635, 638], "register_criterion": [195, 219], "get_criterion": 195, "pruningcriterion": [195, 219], "about": [195, 219, 549, 553, 578, 596, 621, 622, 635, 640, 647, 648, 650], "score": [195, 202, 207, 211, 219, 228, 229, 310, 311, 313, 314, 315, 317, 342, 363, 364, 366, 367, 368, 370, 429, 541, 555, 595, 619, 633, 635, 643, 647], "magnitudecriterion": [195, 219], "magnitud": [195, 219, 228, 229, 309, 317, 328, 362, 370, 591, 635], "criterion_class": [195, 219], "determin": [195, 202, 207, 219, 228, 229, 543, 553, 555, 577, 635, 638], "gradientcriterion": 195, "absolut": [195, 228, 229, 317, 370, 595, 596, 635, 638, 647], "snipcriterion": 195, "snip": [195, 228, 229, 342, 591, 635, 650], "product": [195, 558, 591, 597, 599, 600, 616, 622, 636, 638, 643, 647], "shot": [195, 214, 215, 218, 271, 342, 344, 556, 591, 596, 635, 636, 641], "connect": [195, 342, 616, 618, 625, 635, 643], "sensit": [195, 326, 342, 591, 635], "1810": [195, 342], "02340": [195, 342], "snipmomentumcriterion": 195, "snip_momentum": [195, 228, 229, 596, 635], "preserv": [195, 577, 635, 641], "beta": 195, "blockmaskcriterion": 195, "retrainfreecriterion": 195, "return_reorder_indic": 196, "remain": [196, 604], "unchang": 196, "flip": [196, 257, 261, 299, 302, 646], "initial_metr": 196, "sparsity_ratio": [196, 222], "prune_n": [196, 222], "prune_m": [196, 222], "pow_of_var_regrow": 196, "max_cycle_tim": 196, "without_same_sign": 196, "update_threshold": 196, "power": [196, 582, 596, 610, 636], "cycl": [196, 556], "paper": [196, 222, 582, 635, 641, 644], "2310": 196, "08915": 196, "pickle_protocol": 197, "_use_new_zipfile_seri": 197, "prepare_prun": [197, 635], "loss_func": [197, 216], "assertionerror": [197, 203, 210, 220, 340, 341, 342, 371], "slim": [198, 199, 200, 313, 366, 377, 379, 505, 506, 598, 635], "round_multipli": 198, "spars": [198, 212, 342, 579, 636], "model_slim_ffn2": 198, "perman": [198, 553, 635], "obtain": [198, 200, 209, 214, 217, 220, 341, 523, 555, 560, 624, 635, 643, 644, 647], "acceler": [198, 582, 596, 599, 607, 616, 619, 623, 635, 636, 640, 641, 644, 647], "directli": [198, 228, 229, 243, 286, 313, 317, 341, 366, 370, 595, 596, 603, 635, 637, 638, 645], "sprase": 198, "model_slim_mha": 198, "parse_auto_slim_config": [198, 635], "ffn2_sparsiti": [198, 635], "mha_spars": [198, 635], "generate_ffn2_pruning_config": 198, "consecut": [198, 200, 201, 635], "generate_mha_pruning_config": 198, "head": [198, 200, 204, 211, 220, 635, 650], "get_attribut": 200, "get_common_modul": 200, "layer2": [200, 596, 635, 638], "nearest": [200, 261, 302, 394, 521, 530, 641, 646], "print_iter": 200, "recipesearch": 200, "root": [200, 244, 245, 246, 249, 287, 288, 289, 292, 317, 370, 579, 584, 595, 596, 649], "levelwis": 200, "wai": [200, 245, 246, 249, 288, 289, 292, 556, 561, 578, 579, 581, 595, 596, 599, 602, 617, 618, 622, 623, 624, 634, 635, 638, 641, 644, 647, 649], "bert": [200, 229, 240, 243, 244, 261, 283, 286, 287, 302, 558, 579, 582, 595, 597, 604, 627, 630, 631, 635, 646, 650], "recipe_sampl": 200, "bertattent": 200, "dens": [200, 218, 228, 229, 344, 619, 635, 650], "searching_result": 200, "jitbasicsearch": 200, "placeholder_shap": 200, "placeholder_dtyp": 200, "jit": [200, 228, 599, 601, 606, 644, 645], "script": [200, 310, 311, 314, 315, 363, 364, 367, 368, 523, 554, 584, 591, 599, 603, 606, 607, 610, 627, 629, 636], "static_graph": 200, "flatten_static_graph": 200, "target_lay": 200, "linear2linearsearch": 200, "target_op_lut": 200, "lookup": 200, "tabl": [200, 211, 549, 561, 581, 586, 619, 621, 650], "current_pattern": 200, "statu": [200, 546, 553, 578, 626, 629, 630, 631, 633, 635], "selfmhasearch": 200, "classifierheadsearch": 200, "classifi": [200, 220, 244, 287, 317, 370, 579, 582], "classifierheadsearchertf": 200, "squeezer": 201, "postcompressionutil": 201, "librari": [201, 265, 309, 362, 416, 551, 558, 592, 596, 597, 601, 610, 616, 636, 638], "relat": [201, 217, 303, 313, 332, 337, 340, 366, 440, 541, 561, 599, 623, 624, 635, 649], "linearcompress": 201, "root_linear": 201, "target_linear": 201, "while": [201, 212, 220, 342, 349, 426, 523, 559, 560, 579, 585, 591, 597, 599, 604, 616, 618, 635, 637, 638, 641, 644], "hidden": [201, 206, 340, 559], "layer_1": 201, "act_fn": 201, "layer_2": 201, "linearcompressioniter": 201, "linear_pattern": 201, "register_pattern": [202, 340], "basepattern": [202, 204, 206], "unit": [202, 340, 554, 624, 635], "4x1": [202, 228, 229, 336, 596, 635, 650], "is_glob": [202, 340], "local": [202, 228, 229, 340, 507, 523, 549, 609, 613, 618, 625, 626, 635, 643], "keep_mask_lay": 202, "invalid_lay": 202, "max_sparsity_ratio_per_op": [202, 207, 225, 228, 229, 596, 635], "sparsiti": [202, 204, 205, 207, 208, 209, 212, 214, 215, 218, 220, 228, 229, 342, 344, 549, 558, 579, 591, 596, 648, 650], "min_sparsity_ratio_per_op": [202, 225, 228, 229, 596, 635], "target_spars": [202, 225, 228, 229, 596, 635, 637, 649], "pytorchbasepattern": [202, 217], "kerasbasepattern": 202, "get_pattern": [203, 340], "patternmha": 204, "doc": [204, 205, 228, 229, 340, 358, 359, 370, 422, 437, 438, 441, 507, 549, 595, 596, 611, 614, 622], "md": [204, 205, 228, 229, 340, 370, 422], "n": [204, 205, 228, 229, 245, 261, 288, 302, 311, 340, 364, 441, 561, 579, 581, 582, 624, 635, 638, 644, 646], "pytorchpatternninm": 205, "out": [205, 228, 229, 244, 245, 246, 287, 288, 289, 308, 340, 345, 554, 555, 558, 579, 599, 604, 609, 610, 611, 613, 614, 616, 622, 635, 637, 638, 641], "pytorchpatternnxm": 206, "kept": [206, 340], "block_siz": [206, 340, 530, 641], "height": [206, 257, 261, 299, 302, 340, 584, 646, 649], "width": [206, 257, 261, 299, 302, 340, 577, 584, 635, 638, 646, 649], "vertic": [206, 261, 302, 340, 646], "keraspatternnxm": 206, "register_prun": [207, 216, 342], "baseprun": [207, 212, 214, 216], "current_sparsity_ratio": [207, 342], "global_step": [207, 342], "start_step": [207, 225, 228, 229, 342, 596, 635, 637], "end_step": [207, 225, 228, 229, 342, 596, 635, 637], "pruning_frequ": [207, 225, 228, 229, 596, 635], "target_sparsity_ratio": [207, 342], "show": [207, 549, 553, 582, 584, 596, 602, 617, 618, 619, 621, 624, 629, 630, 631, 644, 647, 648], "pytorchbaseprun": [207, 215], "kerasbaseprun": 207, "pytorchbasicprun": 208, "arrang": [208, 209, 214, 215, 245, 246, 249, 288, 289, 292, 579, 635], "proce": [208, 209, 214, 215], "regul": [208, 209, 214, 215], "kerasbasicprun": 208, "pytorchblockmaskprun": 209, "grad": [209, 214], "parse_valid_pruner_typ": 210, "get_prun": [210, 342], "pythonmultiheadattentionprun": 211, "mha_modul": 211, "partial": [211, 635, 638], "qkv": 211, "feedward": 211, "simultan": [211, 599, 623, 634, 637], "qkv_name": 211, "query_layer_nam": 211, "key_layer_nam": 211, "value_layer_nam": 211, "ffn_name": 211, "attention_ffn_nam": 211, "mha_nam": 211, "qkv_modul": 211, "ffn_modul": 211, "mha_compress": 211, "mhacompress": 211, "linear_lay": 211, "independ": [211, 416, 421, 561], "4x": [211, 556, 638], "subsequ": [211, 560, 599, 616], "head_mask": 211, "mha_head_s": 211, "similar": [211, 225, 596, 620, 637, 644, 647, 649], "mha_scor": 211, "lock": [212, 330, 331, 591, 634, 635], "pytorchpatternlockprun": 212, "parent": [212, 213, 218, 336, 342, 344, 645], "pytorchprogressiveprun": 213, "basicprun": [213, 216], "interpol": [213, 261, 302, 595, 635, 646], "fine": [213, 244, 287, 579, 602, 635, 636, 638], "grain": [213, 635, 636, 647], "improv": [213, 523, 554, 577, 596, 599, 616, 617, 619, 635, 636, 638, 640, 641, 647, 648, 650], "ad": [213, 244, 287, 310, 349, 363, 387, 426, 560, 561, 581, 597, 599, 604, 607, 611, 614, 624, 635, 641, 645], "retrain": [214, 583], "pytorchretrainfreeprun": 214, "pruner_class": [214, 215], "fast": [214, 228, 229, 558, 635, 636, 641], "retrainfreeprun": [214, 216], "effect": [214, 558, 559, 635, 636], "2204": 214, "09656": 214, "sparsegptprun": [215, 216], "most": [215, 228, 229, 317, 370, 581, 596, 597, 635, 638, 641, 644, 647, 650], "sparsegpt": [215, 216, 635], "massiv": [215, 635], "One": [215, 561, 579, 584, 591, 621, 635, 636, 647], "2301": [215, 635], "00774": [215, 635], "opt": [216, 558, 594, 604, 635, 644, 647, 650], "least": [216, 343, 554, 596, 635, 647], "templat": [216, 343, 596, 635], "tree": [216, 343, 359, 438, 624], "nlp": [216, 228, 229, 343, 604, 620, 635, 638], "huggingface_model": [216, 343, 620], "classif": [216, 244, 261, 287, 302, 317, 343, 370, 582, 586, 595, 605, 619, 627, 630, 631, 635, 636], "pytorch_prun": [216, 309, 362], "eager": [216, 343, 421, 584, 591, 638, 640, 645], "config_file_path": [216, 343], "pruner_info": [216, 343], "pruning_class": 216, "avail": [216, 228, 229, 375, 562, 564, 568, 571, 574, 585, 587, 589, 591, 609, 613, 618, 623, 624, 625, 629, 630, 631, 635, 647, 650], "regular": [217, 310, 341, 363], "register_reg": 217, "regulariz": 217, "get_reg_typ": 217, "get_reg": 217, "basereg": 217, "grouplasso": 217, "coeff": 217, "lasso": [217, 327, 591, 635], "reg_term": 217, "register_schedul": [218, 344], "get_schedul": [218, 344], "pruningschedul": 218, "gradual": [218, 344, 635], "oneshotschedul": [218, 344], "iterativeschedul": [218, 344], "get_tf_criterion": 219, "get_sparsity_ratio": 220, "elementwise_over_matmul_gemm_conv": 220, "elementwise_over_al": 220, "blockwise_over_matmul_gemm_conv": 220, "get_sparsity_ratio_tf": 220, "check_config": [220, 341], "prune_config": [220, 341], "everyth": [220, 341, 604], "reset_none_to_default": 220, "update_param": 220, "process_weight_config": 220, "global_config": [220, 326, 327, 329, 330, 331], "local_config": [220, 228, 229, 326, 327, 329, 330, 331], "default_config": 220, "pruners_info": 220, "process_yaml_config": 220, "check_key_valid": 220, "template_config": 220, "user_config": 220, "process_and_check_config": [220, 341], "process_config": [220, 341], "parse_last_linear": 220, "often": [220, 578, 582, 621, 634, 635], "might": [220, 555, 618, 647], "caus": [220, 560, 578, 600, 619, 621, 635, 641], "drop": [220, 313, 341, 366, 554, 596, 597, 610, 635, 641, 644, 650], "parse_last_linear_tf": 220, "parse_to_prun": [220, 341], "parse_to_prune_tf": 220, "generate_pruner_config": 220, "dotdict": [220, 225, 229, 381, 549], "get_lay": 220, "collect_layer_input": 220, "layer_idx": 220, "layer_input": 220, "previou": [220, 560, 561, 596, 635, 642, 644, 645, 647, 648, 650], "prune_wanda": 222, "use_vari": 222, "low_mem_usag": 222, "dsnot": 222, "sij": 222, "wij": 222, "xj": 222, "2306": [222, 641], "11695": 222, "recurs": [223, 549], "wrappedgpt": 224, "layer_id": 224, "gpt": [224, 558, 594, 620, 635, 644, 650], "prunerv2": 225, "pruning_typ": [225, 228, 229, 596, 635], "pruning_scop": [225, 228, 229, 596, 635], "sparsity_decay_typ": [225, 228, 229, 596, 635], "pruning_op_typ": [225, 228, 229, 596, 635], "reg_typ": 225, "criterion_reduce_typ": 225, "resume_from_pruned_checkpoint": 225, "cfg_fname": 225, "parser": 225, "quantization_conf": 225, "pruning_conf": 225, "graph_optimization_conf": [225, 308], "mixedprecision_conf": 225, "benchmark_conf": 225, "nasconfig": [225, 229, 321, 323, 556], "approach": [225, 228, 229, 320, 321, 323, 555, 556, 577, 579, 582, 591, 596, 604, 616, 619, 627, 629, 630, 631, 635, 636, 637, 639, 641, 647, 649], "search_algorithm": [225, 229, 309, 322, 362, 556], "na": [225, 229, 309, 362, 375, 591, 650], "procedur": [225, 556, 635, 647], "defaultconf": 225, "notat": [225, 226, 229, 549], "deep_get": [226, 381, 507], "dot": [226, 507, 597, 638], "person": [226, 507, 553, 636], "john": [226, 507], "deep_set": [226, 381], "sex": [226, 553], "male": 226, "pythonic_config": 227, "random_se": [228, 229, 349, 426, 596, 649], "1978": [228, 229], "default_workspac": [228, 229], "directori": [228, 229, 245, 246, 288, 289, 379, 505, 507, 544, 546, 548, 549, 579, 584, 587, 609, 611, 613, 614, 620, 622, 645], "histori": [228, 229, 548, 549, 616, 620, 647], "nc_workspac": [228, 229, 619, 620], "datetim": [228, 229], "now": [228, 229, 261, 302, 555, 556, 561, 579, 584, 607, 637, 646, 647], "strftime": [228, 229], "d_": [228, 229], "resum": [228, 229, 232, 233, 275, 276, 347, 353, 354, 355, 423, 424, 426, 427, 429, 431, 432, 433, 434], "flag": [228, 229, 311, 364, 581], "visual": [228, 229, 558, 607, 616, 643, 645, 647, 648], "displai": [228, 229, 358, 359, 437, 438, 507, 549, 616, 619], "2022": [228, 229, 558, 593, 635, 641, 644, 650], "workspace_path": [228, 229], "accuracycriterion": [228, 229, 596, 647], "accuracy_criterion": [228, 229, 381, 596, 620, 633, 637, 647, 649], "warmup": [228, 229, 576, 596, 637], "inter_num_of_thread": [228, 229, 416, 421, 596, 637], "intra_num_of_thread": [228, 229, 416, 421, 596, 637], "benchmark": [228, 229, 264, 309, 346, 362, 381, 549, 558, 566, 598, 599, 603, 607, 610, 616, 619, 647, 648, 649, 650], "onnxrt_trt_ep": [228, 229, 597, 638], "onnxrt_cuda_ep": [228, 229, 597, 638], "inter": [228, 229], "intra": [228, 229], "quantizationconfig": 228, "post_training_static_qu": [228, 579, 596, 637, 647], "calibration_sampling_s": [228, 229, 596, 621], "op_type_dict": [228, 229, 561, 637, 638, 641, 647], "op_name_dict": [228, 229, 581, 596, 619, 621, 638, 647], "strategy_kwarg": [228, 229, 643, 647], "quant_level": [228, 229, 619, 641, 644, 647], "posttrainingquantconfig": [228, 229, 422, 555, 558, 561, 578, 581, 586, 589, 595, 596, 598, 618, 619, 620, 621, 638, 639, 640, 641, 643, 644, 647], "quantizationawaretrainingconfig": [228, 229, 538, 555, 583, 586, 596, 638, 640, 647], "cv": [228, 229, 635], "object_detect": [228, 229, 313, 366], "recommendation_system": [228, 229], "explicitli": [228, 229, 590, 635], "overrid": [228, 229, 549], "quantiztaion": [228, 229], "smooth_quant_arg": [228, 229, 638, 644], "gemm_to_matmul": [228, 229, 638], "graph_optimization_level": [228, 229, 637, 638], "disable_al": [228, 229, 637], "enable_bas": [228, 229], "enable_extend": [228, 229], "enable_al": [228, 229], "first_conv_or_matmul_quant": [228, 229, 638], "last_conv_or_matmul_quant": [228, 229, 638], "pre_post_process_quant": [228, 229, 638], "postprocess": [228, 229, 255, 258, 261, 265, 302, 309, 362, 370, 422, 541, 559, 596, 645, 646], "dedic": [228, 229], "quant_format": [228, 229, 307, 586, 619], "constraint": [228, 229, 308, 345, 596, 635, 643, 647, 649], "conv1": [228, 229, 638, 649], "tuning_strategi": [228, 229], "guarante": [228, 229, 596], "models": [228, 229, 381, 596, 633, 637], "footprint": [228, 229, 308, 332, 337, 345, 381, 583, 596, 633, 635, 637, 639], "excluded_precis": [228, 229, 640], "exclud": [228, 229, 559, 577, 640], "conserv": [228, 229, 362, 430], "use_distributed_tun": 228, "weightpruningconfig": [228, 229, 596, 634, 635], "pruning_config": [228, 229, 596, 635], "exp": [228, 229, 596, 635], "link": [228, 229, 244, 287, 370, 393, 422, 577, 579, 586, 609, 613, 616, 641, 650], "90": [228, 229, 639, 649, 650], "magnitude_progress": [228, 229], "snip_progress": [228, 229], "snip_momentum_progress": [228, 229], "feasibl": [228, 229], "situat": [228, 229, 584, 635], "unstructur": [228, 229, 336, 591, 635, 650], "8x1": [228, 229], "channelx1": [228, 229, 635], "1xchannel": [228, 229, 635], "itrex": [228, 229, 644], "start": [228, 229, 261, 302, 313, 366, 427, 592, 621, 636, 646, 647, 648, 651], "togeth": [228, 229, 261, 302, 582, 592, 603, 636, 645, 646], "sort": [228, 229, 352, 387, 431, 581, 619, 641, 647], "sinc": [228, 229, 308, 310, 332, 337, 345, 363, 582, 586, 592, 595, 610, 616, 621, 634, 641, 642], "lead": [228, 229, 582, 596, 597, 621, 635, 641, 644], "increas": [228, 229, 387, 580, 591, 599, 616, 621, 641, 647], "cube": [228, 229, 635], "update_config": [228, 229], "knowledgedistillationlossconfig": [228, 229, 582, 583, 596, 634], "hyperparamet": [228, 229, 358, 643, 644, 647], "entropi": [228, 229, 577, 647], "groundtruth": [228, 229, 313, 366], "label": [228, 229, 232, 233, 244, 246, 247, 248, 249, 252, 257, 261, 266, 275, 276, 287, 289, 290, 291, 292, 295, 299, 302, 310, 312, 317, 363, 365, 370, 371, 422, 502, 538, 555, 578, 579, 581, 595, 596, 638, 646], "sum": [228, 229, 317, 370, 581, 582], "distillationconfig": [228, 229, 538, 582, 583, 596, 634], "prepare_compress": [228, 229, 538, 555, 582, 583, 596, 634, 635, 638], "criterion_conf": [228, 229], "d_conf": [228, 229, 583, 596, 634], "compression_manag": [228, 229, 538, 555, 582, 583, 596, 634, 635, 638], "featur": [228, 229, 244, 245, 257, 261, 287, 288, 299, 302, 554, 558, 576, 578, 580, 582, 596, 597, 598, 599, 603, 604, 607, 616, 618, 622, 635, 636, 642, 646], "distil_loss": [228, 229, 596], "ni_workload_nam": 229, "onnxrt_dnnl_ep": [229, 597, 638], "onnxrt_dml_ep": [229, 638], "tuningcriterion": [229, 596, 633, 643, 647], "tuning_criterion": [229, 596, 633, 643, 647], "npu": [229, 638], "xpu": [229, 523, 607, 638], "ptq": [229, 422, 555, 581, 584, 591, 596, 621, 638, 644, 645, 647], "meet": [229, 235, 346, 348, 423, 425, 555, 560, 633, 636, 637, 638, 641, 645, 647], "mse_v2": [229, 309, 351, 362, 430], "hawq_v2": [229, 362, 430], "docstr": [229, 441], "workload": [229, 546, 549, 618, 636], "insight": [229, 546, 558, 581, 636, 642, 647, 648], "copi": [229, 341, 549, 578, 622], "deepcopi": 229, "model_origin": [229, 422, 640], "qat_op_name_dict": 229, "low_memory_usag": 229, "hpoconfig": 229, "xgb": 229, "bo": 229, "intermediatelayersknowledgedistillationlossconfig": [229, 582], "relationship": [229, 618], "student_layer_nam": 229, "student_layer_output_process": 229, "teacher_layer_nam": 229, "teacher_layer_output_process": 229, "desir": [229, 257, 261, 299, 302, 560, 561, 635, 644, 646], "serv": [229, 379, 505, 523, 624, 629, 630, 631], "numer": [229, 317, 370, 387, 561, 597, 636, 638, 641], "abbrevi": 229, "l1": 229, "selfknowledgedistillationlossconfig": [229, 582, 596], "student1_layer_name1": 229, "teacher_layer_name1": 229, "student2_layer_name1": 229, "student1_layer_name2": 229, "teacher_layer_name2": 229, "student2_layer_name2": 229, "soft": 229, "hard": [229, 578, 581], "resblock": 229, "deepst": 229, "02": [229, 650], "mixedprecisionconfig": [229, 371, 441, 596, 597], "mixedprecis": [229, 318, 596], "won": [229, 638, 641], "work": [229, 308, 345, 523, 557, 560, 578, 582, 611, 614, 622, 640, 641, 642, 644, 645], "mix_precis": [229, 362, 441, 596, 597], "converted_model": [229, 371, 596, 597], "exportconfig": 229, "14": [229, 306, 307, 586, 592, 631, 650], "dynamic_ax": [229, 307, 586], "qlinear": [229, 246, 253, 289, 296, 317, 370, 559, 606], "ax": [229, 307], "onnxqlinear2qdqconfig": 229, "onnxqlinear2qdq": 229, "torch2onnxconfig": [229, 586], "torch2onnx": [229, 304, 309, 362], "qdq_op_fp32_bia": 229, "qdq_op_int32_bia": 229, "qdq_op_fp32_bias_qdq": 229, "resnet50": [229, 558, 581, 584, 586, 597, 599, 603, 635, 638, 643, 650], "int8_onnx_config": [229, 586], "randn": [229, 586], "224": [229, 257, 299, 558, 579, 584, 586, 589, 596, 599, 618, 646, 649], "batch_siz": [229, 234, 236, 239, 240, 242, 243, 244, 245, 264, 277, 279, 282, 283, 285, 286, 287, 288, 307, 502, 556, 578, 579, 584, 586, 590, 596, 599, 638], "tf2onnxconfig": [229, 586], "tf2onnx": [229, 304, 309, 362], "output_graph": 229, "dyna": [229, 309, 322, 362, 556, 591, 637], "sigopt": [230, 231, 273, 274, 309, 362, 636], "tpe": [230, 231, 273, 274, 309, 362], "sigopttunestrategi": [232, 275], "q_dataload": [232, 233, 275, 276, 347, 349, 352, 353, 354, 355, 423, 424, 426, 427, 429, 431, 432, 433, 434, 590, 647], "eval_metr": [232, 233, 371, 422, 423, 424, 426, 427, 429, 431, 432, 433, 434, 538, 595, 618, 638], "q_hook": [232, 233, 275, 276, 347, 349, 352, 353, 354, 355, 423, 424, 426, 427, 429, 431, 432, 433, 434], "mandatori": [232, 233, 275, 276, 422, 596, 649], "yield": [232, 233, 242, 264, 275, 276, 285, 349, 371, 422, 426, 441, 538, 578, 638, 647], "well": [232, 233, 275, 276, 371, 422, 538, 556, 558, 579, 635, 638, 642, 644, 649], "taken": [232, 233, 275, 276, 371, 422, 538, 638], "reserv": [232, 233, 275, 276], "abl": [232, 233, 275, 276, 371, 422, 538, 607, 616, 638], "tuner": [232, 233, 275, 276, 308, 345, 371, 422, 538, 638], "scalar": [232, 233, 275, 276, 371, 422, 538, 595, 638, 647], "pseudo": [232, 233, 275, 276, 422, 538, 641, 645], "someth": [232, 233, 246, 275, 276, 289, 422, 538], "fefin": [233, 276], "tpetunestrategi": [233, 276], "basedatalod": [234, 277, 502], "basedataload": [234, 239, 241, 277, 282, 284, 502], "last_batch": [234, 236, 239, 240, 243, 264, 277, 279, 282, 283, 286, 502, 578], "rollov": [234, 236, 239, 240, 243, 264, 277, 279, 282, 283, 286, 502, 578], "collate_fn": [234, 236, 237, 239, 240, 243, 264, 277, 279, 280, 282, 283, 286, 502, 578, 579], "batch_sampl": [234, 236, 239, 240, 243, 264, 277, 279, 282, 283, 286, 502, 578], "num_work": [234, 236, 239, 240, 243, 264, 277, 279, 282, 283, 286, 502, 578, 596, 638], "pin_memori": [234, 236, 239, 240, 243, 264, 277, 279, 282, 283, 286, 502, 578], "_generate_dataload": [234, 277, 502], "check_dataload": 235, "default_col": [236, 279], "outer": [236, 279], "defaultdataload": [236, 243, 279, 286], "style": [237, 251, 280, 294, 441, 554, 579, 590], "drop_last": [237, 242, 280, 285], "iterablefetch": [237, 280], "indexfetch": [237, 280], "base_dataload": [238, 281, 298, 309], "default_dataload": [238, 281, 298, 309], "fetcher": [238, 281, 298, 309], "mxnet_dataload": [238, 281, 298, 309], "onnxrt_dataload": [238, 281, 298, 309, 415], "pytorch_dataload": [238, 281, 298, 309], "tensorflow_dataload": [238, 281, 298, 309, 420], "mxnetdataload": [239, 282], "onnxrtbertdataload": [240, 283], "variant": [240, 283], "onnxrtdataload": [240, 283, 415], "pytorchdataload": [241, 284], "data_sourc": [242, 285, 541], "__iter__": [242, 246, 285, 289, 578, 579, 596], "matter": [242, 285, 640], "iterablesampl": [242, 285], "squential": [242, 285], "your": [242, 244, 285, 287, 523, 554, 578, 579, 581, 584, 593, 596, 599, 602, 603, 604, 609, 610, 611, 613, 614, 616, 618, 622, 624, 629, 630, 631, 635, 636, 643, 645, 647, 648], "clear": [242, 285, 559, 588, 595, 596], "iterabledataset": [242, 246, 285, 289], "try": [242, 285, 555, 581, 619, 635, 638, 644, 647], "indexdataset": [242, 285], "__getitem__": [242, 246, 261, 285, 289, 302, 578, 579, 596], "__len__": [242, 246, 285, 289, 579], "sequentialsampl": [242, 285], "batchsampl": [242, 285], "tfdatadataload": [243, 286], "tensorflow1": [243, 286], "coupl": [243, 286], "satisfi": [243, 286, 581, 592, 622], "tf1": [243, 286, 598], "although": [243, 286, 643], "tensorflowbertdataload": [243, 286], "tensorflowmodelzoobertdataload": [243, 286], "zoo": [243, 261, 286, 302, 558, 585, 589, 650], "tensorflowdataload": [243, 286, 420], "pytorchbertdataset": [244, 287], "model_typ": [244, 287, 549, 579], "tensordataset": [244, 287, 579], "repo": [244, 287, 552, 554, 579, 585, 609, 611, 613, 614, 651], "easi": [244, 287, 345, 586, 596, 619, 623, 636, 638, 641, 643], "squad": [244, 261, 287, 302, 314, 315, 317, 367, 368, 370, 579, 595, 635, 646, 650], "distilbert": [244, 287, 558, 579, 597, 636, 650], "xlnet": [244, 287, 579, 650], "xlm": [244, 287, 579, 650], "101": [244, 287, 317, 370, 595, 625, 644, 650], "2043": [244, 287], "2001": [244, 287], "onnxrtbertdataset": [244, 287], "data_dir": [244, 287, 579], "model_name_or_path": [244, 287, 579, 596, 604, 605, 620, 627, 630, 631, 639], "max_seq_length": [244, 261, 287, 302, 518, 579, 646], "do_lower_cas": [244, 260, 261, 287, 301, 302, 579, 646], "mrpc": [244, 287, 317, 370, 579, 595, 604, 627, 630, 631, 635, 647, 650], "dynamic_length": [244, 287, 579], "shortcut": [244, 287, 579], "longer": [244, 261, 287, 302, 579, 646], "shorter": [244, 261, 287, 302, 579, 646], "lowercas": [244, 287, 579], "choic": [244, 287, 559, 579, 595, 622, 644], "qqp": [244, 287, 579, 595, 650], "qnli": [244, 287, 579, 595, 650], "rte": [244, 287, 579, 595, 650], "st": [244, 287, 579, 595], "cola": [244, 287, 579, 595, 650], "mnli": [244, 287, 579, 595, 650], "wnli": [244, 287, 579, 595], "mobilebert": [244, 287, 579, 582, 650], "roberta": [244, 287, 579, 650], "uncas": [244, 261, 287, 302, 579, 646, 650], "load_and_cache_exampl": [244, 287], "convert_examples_to_featur": [244, 261, 287, 302], "max_length": [244, 287], "label_list": [244, 287, 317, 370], "output_mod": [244, 287], "pad_token": [244, 287], "pad_token_segment_id": [244, 287], "mask_padding_with_zero": [244, 287], "inputfeatur": [244, 261, 287, 302], "properti": [244, 287, 440, 593], "vocabulari": [244, 260, 261, 287, 301, 302, 646], "attention_mask": [244, 287, 596], "usual": [244, 287, 560, 581, 582, 621, 634, 635, 638, 639, 644], "NOT": [244, 287, 588], "token_type_id": [244, 287, 596], "segment": [244, 287, 311, 313, 364, 366, 554], "portion": [244, 287], "regress": [244, 287, 554, 581], "seq_length": [244, 287], "tensorflowbertdataset": [244, 287], "label_fil": [244, 261, 287, 302, 579, 646], "tfrecord": [244, 245, 246, 287, 288, 289, 579], "guid": [244, 287, 555, 558, 579, 582, 592, 599, 607, 616, 651], "parsedecodebert": [244, 287], "tensorflowmodelzoobertdataset": [244, 245, 287, 288], "num_cor": [244, 245, 249, 287, 288, 292, 579], "28": [244, 245, 249, 287, 288, 292, 579, 650], "coco": [245, 252, 256, 288, 295, 313, 317, 366, 370, 595, 635], "parsedecodecoco": [245, 288], "cocorecorddataset": [245, 288], "interleav": [245, 288, 579], "parallel": [245, 288, 416, 421, 523, 579, 596, 623, 626, 647], "cocoraw": [245, 288, 579], "img_dir": [245, 288, 579], "val2017": [245, 288, 579], "anno_dir": [245, 288, 579], "annot": [245, 288, 313, 366, 441, 560, 561, 579, 595, 635, 647], "instances_val2017": [245, 288, 579], "jpg": [245, 249, 251, 288, 292, 294, 558, 579], "imag": [245, 246, 249, 251, 257, 261, 288, 289, 292, 294, 299, 302, 313, 366, 579, 584, 586, 635, 637, 644, 645, 646, 650], "coconpi": [245, 288, 579], "npy_dir": [245, 288, 579], "npy": [245, 288, 579], "tensorflowdataset": [246, 289], "pytorchdataset": [246, 289], "mxnetdataset": [246, 289], "onnxrtqldataset": [246, 289], "onnxrtitdataset": [246, 289], "IT": [246, 253, 289, 296, 636], "pytorchmxnetwrapdataset": [246, 289], "datafunc": [246, 289], "pytorchmxnetwrapfunct": [246, 261, 289, 302], "framework_dataset": [246, 289], "convent": [246, 289, 313, 366, 582], "imageclassifi": [246, 289], "tensorflow_itex": [246, 249, 251, 253, 289, 292, 294, 296, 578, 637], "onnxrt_qdq": [246, 253, 289, 296, 637], "onnxrt_qlinearop": [246, 253, 261, 289, 296, 302, 637], "onnxrt_integerop": [246, 253, 261, 289, 296, 302, 637], "pytorch_ipex": [246, 253, 289, 296, 596, 637, 649], "pytorch_fx": [246, 253, 289, 296, 596, 637], "dataset_registri": [246, 289], "dataset_typ": [246, 289], "dataset_format": [246, 289], "data_format": [246, 257, 289, 299], "raw_imag": [246, 289], "overwrit": [246, 289, 609, 613], "download_url": [246, 289], "filenam": [246, 289, 507, 549, 579, 622], "md5": [246, 289], "address": [246, 289, 553, 597, 618, 621, 624, 636], "gen_bar_updat": [246, 289], "check_integr": [246, 289], "fpath": [246, 289], "checksum": [246, 289], "calculate_md5": [246, 289], "chunk_siz": [246, 289], "cifar10": [246, 289, 579], "cifar100": [246, 289, 579], "databas": [246, 289, 624], "www": [246, 289, 579, 650], "toronto": [246, 289, 579], "kriz": [246, 289, 579], "cifar": [246, 289, 579, 650], "tar": [246, 289, 579, 581, 611, 614], "gz": [246, 289, 579, 581, 611, 614], "manual": [246, 289, 579, 599, 605, 607, 610, 624, 629, 630, 631, 635], "subset": [246, 249, 289, 292, 579, 621], "internet": [246, 289, 579, 618], "again": [246, 289, 579, 619, 621, 640], "pytorchcifar10": [246, 289], "mxnetcifar10": [246, 289], "tensorflowcifar10": [246, 289], "pytorchcifar100": [246, 289], "mxnetcifar100": [246, 289], "tensorflowcifar100": [246, 289], "mnist": [246, 289, 579, 584], "nation": [246, 289, 553], "institut": [246, 289], "standard": [246, 261, 289, 302, 554, 560, 581, 586, 595, 646, 647], "technologi": [246, 289, 594, 596], "fashionmnist": [246, 289, 579], "npz": [246, 289, 579], "idx1": [246, 289, 579], "ubyt": [246, 289, 579], "idx3": [246, 289, 579], "t10k": [246, 289, 579], "pytorchmnist": [246, 289], "mxnetmnist": [246, 289], "tensorflowmnist": [246, 289], "pytorchfashionmnist": [246, 289], "mxnetfashionmnist": [246, 289], "tensorflowfashionmnist": [246, 289], "imagefold": [246, 289, 579, 584, 596], "expect": [246, 289, 553, 554, 587, 594, 616, 638, 641, 647], "subfold": [246, 289, 619], "belong": [246, 289, 375, 638], "class_1": [246, 289, 579], "xxx": [246, 289, 579, 596], "png": [246, 289, 579], "xxy": [246, 289, 579], "xxz": [246, 289, 579], "class_n": [246, 289, 579], "123": [246, 289, 579, 646], "nsdf3": [246, 289, 579], "asd932_": [246, 289, 579], "categori": [246, 289, 312, 365, 576, 579, 606], "mxnetimagefold": [246, 289], "tensorflowtfrecorddataset": [246, 289], "tensorflowimagerecord": [246, 289], "imagenet": [246, 249, 257, 289, 292, 299, 556, 581, 596, 605, 621, 635, 645, 646, 649, 650], "000": [246, 289, 558, 579], "099": [246, 289, 579], "tensorflowvocrecord": [246, 289], "pascal": [246, 289], "voc": [246, 289, 317, 370], "2012": [246, 289], "00000": [246, 289], "00004": [246, 289], "00001": [246, 289], "00003": [246, 289], "dummydataset": [247, 248, 290, 291, 502], "127": [247, 248, 290, 291, 502, 579, 638, 644, 650], "stand_norm": [247, 248, 290, 291, 502, 579], "dummy_v2": [248, 291, 502, 579], "sparse_dummy_v2": [248, 291, 579], "label_shap": [248, 291, 502, 579], "sparsedummydataset": [248, 291], "dense_shap": [248, 291, 579], "sparse_ratio": [248, 291, 579], "imagenetraw": [249, 292, 579], "data_path": [249, 292, 579], "image_list": [249, 292, 579], "img1": [249, 292, 579], "img2": [249, 292, 579], "imgx": [249, 292, 579], "val_map": [249, 292, 579], "txt": [249, 292, 579, 581, 592, 618, 620, 621, 623, 624], "pytorchimagenetraw": [249, 292], "mxnetimagenetraw": [249, 292], "tensorflowimagenetraw": [249, 292], "inteltensorflow": [249, 251, 292, 294, 592], "tensorflowimagenetdataset": [249, 292], "onnxrtimagenetdataset": [249, 292], "bert_dataset": [250, 255, 293, 298, 309, 362], "coco_dataset": [250, 255, 293, 298, 309, 362], "dummy_dataset": [250, 255, 293, 298, 309, 362], "dummy_dataset_v2": [250, 255, 293, 298, 309, 362], "imagenet_dataset": [250, 255, 293, 298, 309, 362], "style_transfer_dataset": [250, 255, 293, 298, 309, 362], "styletransferdataset": [251, 294], "content_fold": [251, 294, 579], "style_fold": [251, 294, 579], "crop_ratio": [251, 294, 579], "resize_shap": [251, 294, 579], "image_format": [251, 294, 579], "holder": [251, 294, 579], "labelbalancecocorecordfilt": [252, 295], "balanc": [252, 295, 641, 644], "labelbalancecocorawfilt": [252, 295], "tensorflowfilt": [253, 296], "onnxrtqlfilt": [253, 296], "onnxrtitfilt": [253, 296], "pytorchfilt": [253, 296], "mxnetfilt": [253, 296], "filter_registri": [253, 296], "filter_typ": [253, 296], "__call__": [253, 296], "coco_filt": [254, 255, 297, 298, 309, 362], "imagenet_transform": [255, 258, 298, 300, 309, 362], "parsedecodecocotransform": 256, "quantizedinput": [257, 299, 646], "labelshift": [257, 299, 646], "label_shift": [257, 299, 646], "parsedecodeimagenet": [257, 299, 646], "proto": [257, 261, 299, 302, 646], "parsedecodeimagenettransform": [257, 299], "tensorflowtransposelastchannel": 257, "tensorflowshiftrescal": 257, "rescal": [257, 261, 302, 646], "tensorflowresizecropimagenettransform": [257, 299], "random_crop": [257, 299, 646], "resize_sid": [257, 299, 646], "resize_method": [257, 299], "bilinear": [257, 261, 299, 302, 646], "random_flip_left_right": [257, 299, 646], "mean_valu": [257, 299, 646], "channels_last": [257, 299, 599], "subpixel": [257, 299], "rgb": [257, 299], "seri": [257, 299, 558, 592, 596, 646], "applic": [257, 299, 561, 586, 599, 616, 618, 624, 625, 629, 630, 636, 641, 644, 645, 646, 648], "crop": [257, 261, 299, 302, 579, 646], "left": [257, 261, 299, 302, 610, 616, 644, 646], "std": [257, 261, 299, 302, 596, 646], "bilinearimagenettransform": [257, 299], "central_fract": [257, 299, 646], "875": [257, 299, 646], "fraction": [257, 299, 646], "onnxbilinearimagenettransform": [257, 299], "onnxresizecropimagenettransform": [257, 299], "std_valu": [257, 299], "229": [257, 299, 596], "225": [257, 299, 596], "resizewithaspectratio": [257, 299], "87": [257, 299, 650], "inter_pol": [257, 299], "cv2": [257, 299], "inter_area": [257, 299], "aspect": [257, 261, 299, 302, 646], "postprocess_cl": [259, 269, 596], "user_postprocess": [259, 269], "convert_to_unicod": [260, 301], "unicod": [260, 301], "assum": [260, 301, 313, 324, 366, 559, 588, 616], "load_vocab": [260, 301], "vocab_fil": [260, 261, 301, 302, 646], "convert_by_vocab": [260, 301], "vocab": [260, 301], "whitespace_token": [260, 301], "whitespac": [260, 301, 315, 368], "clean": [260, 301, 596], "piec": [260, 301, 310, 363, 595, 641], "fulltoken": [260, 301], "tokenzi": [260, 301], "basictoken": [260, 301], "punctuat": [260, 301, 310, 315, 363, 368], "lower": [260, 261, 301, 302, 315, 368, 427, 583, 635, 636, 638, 644, 646, 647], "wordpiecetoken": [260, 301], "unk_token": [260, 301], "unk": [260, 301], "max_input_chars_per_word": [260, 301], "wordpiec": [260, 261, 301, 302, 646], "concat_gener": [261, 302], "inc": [261, 302, 553, 560, 599, 606, 616, 618, 623, 636, 637, 642, 647], "tensorflowtransform": [261, 302], "mxnettransform": [261, 302], "pytorchtransform": [261, 302], "onnxrtqltransform": [261, 302], "onnxrtittransform": [261, 302], "transform_registri": [261, 302], "transform_typ": [261, 302], "basetransform": [261, 302], "tensorflowwrapfunct": [261, 302], "transform_func": [261, 302], "pytorchmxnettransform": [261, 302], "get_torchvision_map": [261, 302], "torchvis": [261, 302, 585, 589, 599, 605, 619], "composetransform": [261, 302], "transform_list": [261, 302, 646], "compos": [261, 302, 541, 646], "croptoboundingbox": [261, 302, 646], "offset_height": [261, 302, 646], "offset_width": [261, 302, 646], "target_height": [261, 302, 646], "target_width": [261, 302, 646], "box": [261, 302, 313, 317, 366, 370, 555, 595, 599, 610, 616, 645, 646, 647], "coordin": [261, 302, 349, 426, 623, 646, 647], "top": [261, 302, 308, 317, 332, 337, 345, 370, 554, 595, 616, 619, 621, 646], "corner": [261, 302, 554, 559, 561, 646], "horizont": [261, 302, 646], "mxnetcroptoboundingbox": [261, 302], "onnxrtcroptoboundingbox": [261, 302], "tensorflowcroptoboundingbox": [261, 302], "resizewithratio": [261, 302, 646], "min_dim": [261, 302, 646], "800": [261, 302, 646], "max_dim": [261, 302, 646], "1365": [261, 302, 646], "constant_valu": [261, 302], "longest": [261, 302, 646], "side": [261, 302, 579, 610, 646], "exce": [261, 302, 641, 646], "tensorflowresizewithratio": [261, 302], "permut": [261, 302, 646], "tensorflowtranspos": [261, 302], "mxnettranspos": [261, 302], "pytorchtranspos": [261, 302], "randomverticalflip": [261, 302, 646], "tensorflowrandomverticalflip": [261, 302], "randomhorizontalflip": [261, 302, 596, 646], "tensorflowrandomhorizontalflip": [261, 302], "toarrai": [261, 302, 646], "pil": [261, 302, 646], "casttftransform": [261, 302], "castonnxtransform": [261, 302], "castpytorchtransform": [261, 302], "centercroptftransform": [261, 302], "center": [261, 302, 557, 558, 592, 646, 647], "paddedcentercroptransform": [261, 302], "crop_pad": [261, 302], "resizetftransform": [261, 302], "bicub": [261, 302, 646], "resizepytorchtransform": [261, 302], "randomcroptftransform": [261, 302], "randomresizedcroppytorchtransform": [261, 302], "08": [261, 302, 646, 650], "randomresizedcropmxnettransform": [261, 302], "randomresizedcroptftransform": [261, 302], "normalizetftransform": [261, 302], "deviat": [261, 302, 581, 646], "broadcast": [261, 302, 584, 646], "rescalekeraspretraintransform": [261, 302], "rescaletftransform": [261, 302], "rescaletransform": [261, 302], "alignimagechanneltransform": [261, 302], "must": [261, 302, 313, 366, 523, 554, 555, 560, 576, 578, 592, 638, 646], "pytorchalignimagechannel": [261, 302], "tondarraytransform": [261, 302], "resizemxnettransform": [261, 302], "resizetransform": [261, 302], "cropresizetftransform": [261, 302], "boundari": [261, 302, 646], "area": [261, 302, 313, 366, 595, 646], "pytorchcropresizetransform": [261, 302], "mxnetcropresizetransform": [261, 302], "cropresizetransform": [261, 302], "centercroptransform": [261, 302], "mxnetnormalizetransform": [261, 302], "pytorchnormalizetransform": [261, 302], "normalizetransform": [261, 302], "randomcroptransform": [261, 302], "randomresizedcroptransform": [261, 302], "get_final_text": [261, 302], "pred_text": [261, 302], "orig_text": [261, 302], "project": [261, 302, 552, 553, 554, 622, 636, 643, 647, 651], "squadexampl": [261, 302], "qas_id": [261, 302], "question_text": [261, 302], "doc_token": [261, 302], "orig_answer_text": [261, 302], "start_posit": [261, 302], "end_posit": [261, 302], "is_imposs": [261, 302], "simpl": [261, 302, 592, 596, 635, 643, 644, 647], "answer": [261, 302, 314, 315, 367, 368, 553, 621, 635, 646, 650], "unique_id": [261, 302], "example_index": [261, 302], "doc_span_index": [261, 302], "token_to_orig_map": [261, 302], "token_is_max_context": [261, 302], "input_mask": [261, 302, 596], "segment_id": [261, 302, 596], "read_squad_exampl": [261, 302], "input_fil": [261, 302], "doc_strid": [261, 302, 646], "max_query_length": [261, 302, 646], "output_fn": [261, 302], "inputbatch": [261, 302], "collecttransform": [261, 302], "10833": [261, 302], "tfsquadv1posttransform": [261, 302], "n_best_siz": [261, 302, 646], "384": [261, 302, 646], "64": [261, 302, 556, 641, 644, 646, 650], "max_answer_length": [261, 302, 646], "30": [261, 302, 585, 589, 591, 646, 650], "nbest_predict": [261, 302, 646], "question": [261, 302, 314, 315, 367, 368, 553, 554, 558, 559, 592, 599, 623, 635, 644, 646, 650], "anoth": [261, 302, 310, 319, 363, 549, 581, 582, 609, 613, 646, 647], "long": [261, 302, 587, 641, 646], "document": [261, 302, 441, 560, 561, 566, 584, 594, 597, 601, 611, 614, 615, 622, 623, 625, 635, 642, 646, 648], "chunk": [261, 302, 646], "tfmodelzoocollecttransform": [261, 302], "tfsquadv1modelzooposttransform": [261, 302], "squadv1": [261, 302, 646], "parsedecodevoctransform": [261, 302], "conf_fname_or_obj": [262, 271, 303, 308, 318, 319, 320, 321, 323, 332, 337, 345], "unnecessari": [262, 596], "setter": 264, "calib_dataload": [264, 346, 422, 445, 458, 461, 555, 558, 578, 579, 581, 589, 590, 595, 596, 618, 619, 638, 639, 640, 641], "reason": [264, 553, 560, 578, 621, 641, 645, 647], "know": [264, 584, 642], "metric_cl": [266, 370, 422, 596], "user_metr": [266, 370, 422], "recommend": [266, 370, 523, 559, 579, 588, 607, 610, 615, 617, 635, 637, 647], "set_backend": 267, "tensorflowimagefold": 289, "qlinear2qdq": [304, 309, 362], "qlinearop": [305, 581, 591, 607, 638, 650], "check_model": 305, "onnx_qlinear_to_qdq": 305, "input_name_to_nod": 305, "tf_to_fp32_onnx": 306, "tf_to_int8_onnx": 306, "int8_model": [306, 307, 559], "get_node_map": 307, "fp32_onnx_path": 307, "module_node_map": 307, "get_quantizable_onnx_op": 307, "quantize_nod": 307, "dynamic_quant_export": 307, "pt_fp32_model": 307, "pt_int8_model": 307, "weight_typ": 307, "s8": 307, "static_quant_export": 307, "_quantiz": [307, 390], "torch_to_fp32_onnx": 307, "do_constant_fold": 307, "torch_to_int8_onnx": 307, "across": [308, 318, 345, 371, 580, 596, 623, 626, 635, 639, 644, 647], "variou": [308, 318, 345, 371, 561, 591, 599, 626, 635, 637, 639], "dl": [308, 318, 332, 337, 345, 371, 581, 590, 603, 616, 636, 650], "bring": [308, 345, 610, 623, 644], "vari": [308, 332, 337, 345, 621, 635, 644, 650], "roc": [308, 317, 332, 337, 345, 370], "flexibl": [308, 332, 337, 345, 558, 582, 623, 635, 641], "techniqu": [309, 362, 551, 558, 591, 596, 599, 618, 634, 635, 636, 637, 638, 648, 649, 650], "bleu": [309, 311, 316, 362, 364, 369, 595, 635], "bleu_util": [309, 316, 362, 369], "coco_label_map": [309, 316, 362, 369], "coco_tool": [309, 316, 362, 369], "evaluate_squad": [309, 316, 362, 369], "f1": [309, 314, 316, 317, 362, 367, 369, 370, 584, 595, 596, 619, 643, 650], "basic_na": [309, 322, 362], "nas_util": [309, 322, 362], "pruner_legaci": [309, 362], "gradient_sensit": [309, 328, 362], "group_lasso": [309, 328, 362], "pruning_recip": [309, 362], "tile_pattern": [309, 333, 334], "prune_util": [309, 338, 362], "tuning_sampl": [309, 351, 357, 362, 430, 436], "tuning_spac": [309, 351, 357, 358, 360, 362, 430, 436, 437, 439], "tuning_struct": [309, 351, 357, 358, 359, 362, 430, 436, 437, 438], "auto_mixed_precis": [309, 351, 362, 430], "graph_optim": [309, 362], "mixed_precis": [309, 362, 371, 596], "model_convers": [309, 362], "pruning_v2": [309, 362], "unicoderegex": [310, 363], "hoc": [310, 363], "hack": [310, 363], "recogn": [310, 363, 647], "nondigit_punct_r": [310, 363], "compil": [310, 363, 596], "express": [310, 363, 553], "preced": [310, 363, 644, 647], "digit": [310, 363, 549, 636], "punct_nondigit_r": [310, 363], "symbol_r": [310, 363], "bleu_token": [310, 363], "mose": [310, 363], "smt": [310, 363], "mosesdecod": [310, 363], "mteval": [310, 363], "v14": [310, 363], "pl": [310, 363], "l954": [310, 363], "l983": [310, 363], "bilingu": [310, 363], "understudi": [310, 363], "qualiti": [310, 363], "machin": [310, 363, 586, 592, 602, 616, 618, 624, 636, 644, 645], "translat": [310, 311, 363, 364, 635, 647], "natur": [310, 363, 586], "approxim": [310, 311, 363, 364, 560, 595, 641], "glue": [310, 317, 363, 370, 579, 595, 596, 605], "word": [310, 363, 595, 635, 641, 650], "ngram": [310, 363, 595], "breviti": [310, 311, 363, 364, 595], "doe": [310, 363, 440, 578, 579, 595, 596, 641, 642, 646], "beam": [310, 363, 595], "tensor2tensor": [311, 364], "bleu_hook": [311, 364], "compute_bleu": [311, 364], "reference_corpu": [311, 364], "translation_corpu": [311, 364], "max_ord": [311, 364], "use_bp": [311, 364], "against": [311, 364], "gram": [311, 364], "bleu_scor": [311, 364], "parti": [313, 366, 554, 593, 638], "pycocotool": [313, 366, 587, 592], "noth": [313, 366, 647], "thu": [313, 366, 523, 596, 635, 638], "cannot": [313, 366, 555, 587, 641, 645], "jonathanhuang": [313, 366], "image_id": [313, 366, 595], "invok": [313, 366, 523, 560], "groundtruth_dict": [313, 366], "exportgroundtruthtococo": [313, 366], "groundtruth_boxes_list": [313, 366], "groundtruth_classes_list": [313, 366], "max_num_class": [313, 366], "output_path": [313, 366], "detections_list": [313, 366], "exportdetectionstococo": [313, 366], "detection_boxes_list": [313, 366], "detection_scores_list": [313, 366], "detection_classes_list": [313, 366], "cocowrapp": [313, 366], "loadannot": [313, 366], "cocoevalwrapp": [313, 366], "agnostic_mod": [313, 366], "computemetr": [313, 366], "detection_typ": [313, 366], "bbox": [313, 366, 555, 595], "hold": [313, 349, 366, 426, 579], "iou_typ": [313, 366], "iou_thr": [313, 317, 366, 370, 595], "map_point": [313, 317, 366, 370, 595], "cocoev": [313, 366], "mscoco": [313, 366], "Then": [313, 366, 560, 581, 609, 611, 613, 614, 621, 644, 647], "exportsingleimagegroundtruthtococo": [313, 366], "next_annotation_id": [313, 366], "category_id_set": [313, 366], "groundtruth_box": [313, 366], "groundtruth_class": [313, 366], "groundtruth_mask": [313, 366], "groundtruth_is_crowd": [313, 366], "ingest": [313, 366], "here": [313, 366, 441, 560, 579, 584, 585, 586, 588, 589, 594, 595, 604, 611, 614, 616, 619, 622, 624, 638, 642, 643, 644, 650], "exportsingleimagedetectionstococo": [313, 366], "uniqu": [313, 346, 366, 638], "assign": [313, 366, 549, 584, 637, 647], "num_gt_box": [313, 366], "num_detect": [313, 317, 366, 370, 595, 596, 649], "image_height": [313, 366], "image_width": [313, 366], "detection_mask": [313, 366], "crowd": [313, 366], "insid": [313, 366, 523, 582, 583, 617, 635, 639, 647], "exportsingleimagedetectionboxestococo": [313, 366], "detection_box": [313, 366, 596, 649], "detection_scor": [313, 366, 596, 649], "detection_class": [313, 366, 596, 649], "exporsingleimagedetectionboxestococo": [313, 366], "exportsingleimagedetectionmaskstococo": [313, 366], "allenai": [314, 315, 367, 368], "bi": [314, 315, 367, 368], "att": [314, 315, 367, 368], "flow": [314, 315, 367, 368, 555, 556, 596], "f1_score": [314, 315, 367, 368], "ground_truth": [314, 315, 367, 368], "ground": [314, 315, 367, 368], "truth": [314, 315, 367, 368], "metric_max_over_ground_truth": [314, 315, 367, 368], "metric_fn": [314, 315, 367, 368], "exact_match_scor": [314, 367], "exact": [314, 367], "articl": [314, 315, 367, 368], "paragraph": [314, 315, 367, 368], "qa": [314, 315, 367, 368, 558], "normalize_answ": [315, 368], "newlin": [315, 368, 549], "tab": [315, 368, 616, 645], "harmon": [315, 317, 368, 370], "recal": [315, 317, 368, 370], "answer_start": [315, 368], "177": [315, 368, 650], "denver": [315, 368], "bronco": [315, 368], "nfl": [315, 368], "afc": [315, 368], "super": [315, 368, 556], "bowl": [315, 368], "50": [315, 368, 556, 560, 621, 635, 644, 650], "56be4db0acb8001400a502ec": [315, 368], "percentag": [315, 368, 387, 577, 641, 649], "tensorflowmetr": [317, 370], "maintain": [317, 370, 523, 553, 554, 598, 599, 611, 614, 618, 623, 624, 635, 641, 642], "pytorchmetr": [317, 370], "mxnetmetr": [317, 370], "onnxrtqlmetr": [317, 370], "onnxrtitmetr": [317, 370], "metric_registri": [317, 370], "metric_typ": [317, 370], "decorator_metr": [317, 370], "basemetr": [317, 370, 422], "single_output": [317, 370], "hvd": [317, 370, 584], "wrappytorchmetr": [317, 370], "wrapmxnetmetr": [317, 370], "wraponnxrtmetr": [317, 370], "proport": [317, 370], "pred_list": [317, 370], "pytorchloss": [317, 370], "mae": [317, 370, 595], "compare_label": [317, 370, 422, 595], "rmse": [317, 370, 595, 647], "tensorflowtopk": [317, 370], "k": [317, 370, 422, 595, 618, 635], "among": [317, 370, 610, 644], "outcom": [317, 370], "num_correct": [317, 370], "num_sampl": [317, 370], "generaltopk": [317, 370], "cocomapv2": [317, 370, 595], "anno_path": [317, 370, 595], "map_kei": [317, 370], "detectionboxes_precis": [317, 370], "output_index_map": [317, 370, 595], "tensorflowmap": [317, 370], "tensorflowcocomap": [317, 370], "tensorflowvocmap": [317, 370], "squadf1": [317, 370, 595], "miou": [317, 370], "num_class": [317, 370], "21": [317, 370, 604, 605, 627, 630, 631, 636, 644, 650], "iou": [317, 370], "intersect": [317, 370, 559, 595], "union": [317, 370, 386, 387, 389, 399, 538, 595, 627], "onnxrtglu": [317, 370], "dlrm": [317, 370], "modelconvers": 319, "typic": [319, 346, 556, 558, 583, 585, 589, 621, 635, 650], "basicna": 320, "model_build": [320, 323], "conf_fnam": 320, "nasbas": [323, 556], "nas_registri": 324, "nas_method": 324, "create_search_space_pool": 324, "idx": [324, 579], "enumer": [324, 538, 559, 582, 583, 584, 596, 634, 635, 645], "find_pareto_front": 324, "pareto": [324, 556], "front": [324, 556], "n_point": 324, "n_metric": 324, "n_pareto_point": 324, "gradientsensitivityprun": 326, "pytorchmodel": [326, 327, 329, 330, 331, 380], "overwritten": [326, 327, 329, 330, 331, 604], "grouplassoprun": 327, "legaci": 328, "basicmagnitudeprun": 329, "patternlockprun": [330, 342], "pruner_registri": 331, "clase": 331, "pruningconf": [332, 337], "tfpruningcallback": [332, 337], "input_model": [332, 337, 598, 619, 620, 621, 645], "pure": [332, 337, 635], "pattern_registri": 335, "pattern_typ": 335, "patternbas": 335, "mask_shap": [335, 336], "is_contigu": 335, "tile": 336, "tilepatternbas": 336, "tilepattern_1x1": 336, "1x1": [336, 582, 596, 635], "tilepattern_2x2": 336, "2x2": [336, 644], "tilepattern_1x16": 336, "1x16": 336, "tilepattern_4x1": 336, "tilepattern_1x2": 336, "1x2": [336, 644], "patternnxm": 340, "patternninm": 340, "reset_non_value_to_default": 341, "parse_not_to_prun": 341, "update_frequency_on_step": [342, 637], "max_sparsity_ratio_per_lay": [342, 637], "magnitudeprun": 342, "snipprun": 342, "snipmomentumprun": 342, "moreoev": 342, "quantconf": 345, "separ": [346, 553, 590, 593, 624, 626, 634, 637], "opt_model": [346, 596], "fulli": [346, 596, 624, 638, 644], "train_func": [346, 538, 584, 596, 638], "automixedprecisiontunestrategi": [347, 424], "basictunestrategi": [348, 425], "polici": [348, 352, 423, 425, 431, 553, 558, 649, 651], "bayesiantunestrategi": [349, 426], "acq_max": [349, 426], "ac": [349, 426], "gp": [349, 426], "y_max": [349, 426], "n_warmup": [349, 426], "10000": [349, 426, 635], "n_iter": [349, 426], "acquisit": [349, 426], "gaussian": [349, 426, 647], "relev": [349, 426, 560, 561, 621, 635], "acq": [349, 426], "randomst": [349, 426], "scipi": [349, 426], "x_max": [349, 426], "targetspac": [349, 426], "pbound": [349, 426], "9527": [349, 426, 596, 649], "bayesianoptim": [349, 426], "exhaustivetunestrategi": [350, 428], "msetunestrategi": [352, 431], "mse_v2tunestrategi": [353, 432], "revert": [353, 361, 432, 440, 647], "randomtunestrategi": [354, 433], "strategy_registri": [355, 434, 647], "tunestrategi": [355, 434, 647], "tuningsamplerregistri": 358, "tuningsampl": [358, 437], "tuningord": [358, 437], "tuningspac": [358, 359, 437, 438], "tuning_order_lst": [358, 437], "initial_op_tuning_cfg": [358, 437], "modelwisetuningsampl": [358, 437], "tuning_items_prior": [358, 437], "op_dtype_dict": [358, 437], "optuningconfig": [358, 359, 360, 437, 438, 439], "optypewisetuningsampl": [358, 437], "opwisetuningsampl": [358, 437], "fallbacktuningsampl": [358, 437], "op_dtyp": [358, 437], "skip_first": [358, 437], "smoothquantsampl": [358, 437], "tuningitem": [359, 438], "item_typ": [359, 438], "pattern_to_intern": [359, 438], "default_dtyp": [359, 438], "pattern_to_path": [359, 438], "quant_mode_from_pattern": [359, 438], "internal_pattern": [359, 438], "initial_tuning_cfg_with_quant_mod": [359, 438], "op_name_typ": [359, 438], "step1": [359, 438], "step2": [359, 438], "complet": [359, 438, 559, 560, 635, 638, 647, 649, 650], "step3": [359, 438], "step4": [359, 438], "step5": [359, 438], "op_quant_mod": [360, 439], "ordereddefaultdict": [361, 440], "extract_data_typ": [361, 440], "reverted_data_typ": [361, 440], "signed_flag": [361, 440], "get_adaptor_nam": [361, 440], "experiment": [362, 556, 579, 583, 584, 586, 592, 596, 635, 637, 638, 642, 646], "base_model": [362, 373], "keras_model": [362, 373], "mxnet_model": [362, 373], "nets_factori": [362, 373, 503], "onnx_model": [362, 373, 383, 384, 386, 387, 389, 397, 415, 619], "tensorflow_model": [362, 373, 420, 621], "torch_model": [362, 373], "collect_layer_histogram": [362, 542], "create_obj_from_config": [362, 542], "kl_diverg": [362, 542], "load_huggingfac": [362, 542, 596], "neural_insights_util": [362, 542], "weights_detail": [362, 542], "sub_class": [370, 422], "register_customer_metr": 370, "topk": [370, 422, 584, 595, 596, 618, 638], "frozen": [371, 379, 422, 505, 598], "savedmodel": [371, 379, 422, 505, 650], "onnx_ml_pb2": [371, 598], "hybirdblock": [371, 422], "basemodel": [372, 458, 461, 505], "plai": [372, 505, 636, 641, 644], "role": [372, 505, 641, 644], "kerasmodel": [374, 505], "get_model_fwk_nam": 375, "fwk": 375, "mxnetmodel": 376, "net": [377, 506], "tfslimnetsfactori": [377, 506], "get_model_typ": [379, 505], "validate_graph_nod": [379, 505], "validate_and_inference_input_output": [379, 505], "graph_sess": [379, 505], "graph_def_sess": [379, 505], "frozen_pb_sess": [379, 505], "load_saved_model": [379, 505], "saved_model_tag": [379, 505], "signatur": [379, 505], "metagraphdef": [379, 505], "keras_sess": [379, 505], "slim_sess": [379, 505], "checkpoint_sess": [379, 505], "estimator_sess": [379, 505], "saved_model_sess": [379, 505], "tensorflowbasemodel": [379, 420, 505], "tensorflowsavedmodelmodel": [379, 505], "tensorflowllmmodel": [379, 505], "exceed": [379, 505], "2gb": [379, 505], "tensorflowqatmodel": [379, 505], "tensorflowcheckpointmodel": [379, 505], "tensorflowmodel": [379, 505], "pytorchbasemodel": 380, "pytorchfxmodel": 380, "ipexmodel": 380, "driven": [381, 558, 596, 616, 633, 645], "objective_registri": 381, "objective_custom_registri": 381, "obj_cl": 381, "eural_compressor": 381, "objective_cl": 381, "user_object": 381, "__class__": 381, "__name__": 381, "objective_cfg": 381, "usr_cfg": 381, "user_obj_cfg": 381, "easili": [381, 559, 600, 604, 616, 633, 644], "peak": [381, 633], "multiobject": 381, "metric_criterion": 381, "metric_weight": 381, "obj_criterion": 381, "obj_weight": 381, "is_measur": 381, "calibrationdataread": [383, 384, 386, 387, 390, 392, 393], "pathlib": [384, 386, 387, 389, 392], "weight_dtyp": [386, 387, 389, 394, 459], "weight_bit": [386, 387, 389, 394, 560], "weight_group_s": [386, 387, 389, 394], "weight_sym": [386, 387, 389, 394, 459], "91": [386, 641, 644, 650], "apply_awq_on_model": 386, "quant_config": [386, 387, 389, 392, 399, 449, 458, 461, 507, 533, 537], "calibration_data_read": [386, 387, 392], "nnx": 386, "stabil": [387, 641], "apply_gptq_on_model": 387, "apply_rtn_on_model": 389, "nodeproto": 390, "data_read": 390, "reader": 390, "smooth_quant_entri": 392, "smoohquantconfig": [392, 394], "rtn_quantize_entri": 392, "rtnconfig": [392, 394, 399, 528, 530, 537], "gptq_quantize_entri": 392, "gptqconfig": [392, 394, 530], "awq_quantize_entri": 392, "awqconfig": [392, 394], "l139": 393, "act_dtyp": [394, 459], "get_default_rtn_config": [394, 530], "get_default_gptq_config": [394, 530], "get_default_awq_config": 394, "fusedconv": 394, "calib_it": 394, "auto_alpha_arg": [394, 459, 644], "alpha_min": [394, 644], "alpha_max": [394, 644], "alpha_step": [394, 644], "attn_method": 394, "get_default_sq_config": [394, 459], "register_algo": [399, 507, 537], "algos_map": [399, 507, 537], "example_algo": [399, 507, 537], "get_qrange_for_qtyp": 399, "parserfactori": 401, "onnxrtparserfactori": 403, "onnxprofilingpars": 405, "respons": [405, 406, 410, 629, 630, 631, 638], "profilingpars": 406, "profilingresult": 407, "total_execution_tim": 407, "accelerator_execution_tim": 407, "cpu_execution_tim": 407, "op_run": 407, "op_defin": 407, "tensorflowparserfactori": 408, "tensorflowprofilingpars": 410, "profilerfactori": [411, 413, 418], "create_onnx_config": 416, "ort": 416, "sessionopt": 416, "delete_assign": 421, "create_tf_config": 421, "tf_modul": 421, "configproto": 421, "set_eager_execut": 421, "entir": [422, 538, 555, 560, 561, 577, 623, 635], "autotunestrategi": 423, "conservativetunestrategi": 427, "o0": [427, 647], "who": [427, 553], "hawq_v2tunestrategi": 429, "made": [429, 559, 638, 642, 647], "impact": [429, 635, 642, 647], "tunestrategymeta": 434, "metaclass": 434, "lowerbitssampl": 437, "blockfallbacktuningsampl": 437, "op_block_lst": 437, "target_dtyp": 437, "alpha_list": 437, "weightonlyquantsampl": 437, "quantopt": 440, "quant_typ": 440, "quant_opt": 440, "preprocess_user_cfg": 440, "op_user_cfg": 440, "op_user_cfg_modifi": 440, "build_slave_faker_model": 440, "slave": [440, 647], "virtual": [440, 636], "classregist": 440, "fun": 441, "attribute1": 441, "module_debug_level1": 441, "debug": [441, 545, 581, 609, 613, 617, 647, 648], "function1": 441, "param1": 441, "param2": 441, "parameter1": 441, "parameter2": 441, "function2": 441, "pep": 441, "484": [441, 650], "output_model": [441, 596, 619, 621, 645], "function3": 441, "section": [441, 561, 581, 582, 583, 616, 619, 622, 635, 637, 641, 649], "restructuredtext": 441, "liter": 441, "generator1": 441, "example_gener": 441, "exampleclass": 441, "param3": 441, "public": [441, 553, 611, 614], "attr1": 441, "attr2": 441, "attr5": 441, "api_doc_exampl": 442, "smoothquantconfig": [445, 459], "calib_iter": [445, 449, 458, 461, 560], "scaler": 446, "kerasconfigconvert": 449, "staticquantconfig": [449, 458, 459, 507], "static_quantize_entri": 458, "weight_granular": 459, "per_tensor": [459, 560, 561, 588, 638, 649], "act_sym": 459, "act_granular": 459, "base_config": [459, 461, 533], "get_all_registered_config": 459, "get_default_static_quant_config": 459, "record_max_info": 459, "weight_clip": 459, "default_sq_alpha_arg": 459, "quantize_model": 461, "dummydatasetv2": 502, "itex_instal": 507, "instal": [507, 584, 587, 589, 599, 601, 604, 607, 611, 614, 616, 617, 619, 620, 621, 651], "dump_elapsed_tim": [507, 549, 559], "customized_msg": [507, 549], "elaps": [507, 549], "combine_histogram": [507, 549], "old_hist": [507, 549], "old": [507, 549, 596, 642], "get_all_fp32_data": [507, 549], "get_tensor_histogram": [507, 549], "scale_info": [507, 549], "dequantize_weight": [507, 549], "weight_tensor": [507, 549], "min_filter_tensor": [507, 549], "max_filter_tensor": [507, 549], "dump_data_to_loc": [507, 549], "pkl": [507, 549, 620], "load_data_from_pkl": [507, 549], "cpuinfo": [507, 549], "statist": [507, 549, 550], "header": [507, 549, 587], "field_nam": [507, 549], "output_handl": [507, 549], "printer": [507, 549], "captureoutputtofil": [507, 549], "tmp_file_path": [507, 549], "stream": [507, 549, 650], "sy": [507, 549, 602], "stderr": [507, 549], "captur": [507, 549], "lazyimport": [507, 549], "lazi": [507, 549], "till": [507, 549, 647], "use_full_rang": [517, 521, 530], "use_auto_scal": 517, "use_mse_search": [517, 521, 530], "use_layer_wis": [518, 530], "run_fn": [518, 529, 533], "run_arg": [518, 529, 533], "device_typ": 523, "_dtype": 523, "cache_en": 523, "manag": [523, 538, 541, 596, 599, 600, 610], "region": [523, 644], "chosen": [523, 560, 577], "enter": [523, 610, 616, 624], "half": [523, 597, 607], "hpu": 523, "float8_e4m3fn": 523, "autocastmodel": 523, "affect": [523, 644], "dataparallel": 523, "distributeddataparallel": 523, "torch_dtyp": [523, 561], "rtn_entri": 528, "configs_map": 528, "base_tun": 529, "use_sym": 530, "use_double_qu": 530, "double_quant_dtyp": 530, "double_quant_bit": 530, "double_quant_use_sym": 530, "double_quant_group_s": 530, "act_ord": 530, "static_group": [530, 641], "loop": [538, 555, 556, 560, 561, 588, 626, 643, 647], "compressionmanag": 538, "deal": 538, "pruningconfig": 538, "orchestr": [538, 558, 591, 648], "on_train_begin": [538, 555, 582, 583, 596, 634, 635, 638], "train_loop": [538, 596, 634], "on_epoch_begin": [538, 541, 582, 583, 596, 634], "on_step_begin": [538, 541, 582, 583, 596, 634, 635], "on_after_compute_loss": [538, 582, 583, 596, 634], "on_before_optimizer_step": [538, 582, 583, 596, 634, 635], "on_step_end": [538, 541, 582, 583, 596, 634], "on_epoch_end": [538, 541, 582, 583, 596, 634], "on_train_end": [538, 582, 583, 596, 634, 635, 638], "path_to_sav": 538, "top1": [538, 595, 618, 635, 638, 650], "callbacks_list": 538, "layerhistogramcollector": 539, "layer_tensor": 539, "include_lay": 539, "get_func_from_config": 541, "func_dict": 541, "get_preprocess": 541, "get_metr": 541, "get_postprocess": 541, "get_algorithm": 541, "create_dataset": 541, "cfg_preprocess": 541, "cfg_filter": 541, "create_dataload": 541, "dataloader_cfg": 541, "create_eval_func": 541, "postprocess_cfg": 541, "baselin": [541, 643, 644, 645], "create_train_func": 541, "train_cfg": 541, "Their": 541, "auxiliari": 542, "optimizedmodel": 544, "from_pretrain": [544, 596], "save_for_huggingface_upstream": [544, 596], "saved_dir": [544, 641], "msg": [545, 625, 629, 630], "fatal": 545, "warn": 545, "alia": [545, 549, 601, 606], "register_neural_insights_workload": 546, "workload_loc": [546, 549], "workload_mod": 546, "workload_nam": 546, "uuid": 546, "update_neural_insights_workload": 546, "workload_uuid": 546, "update_neural_insights_workload_accuracy_data": 546, "baseline_accuraci": 546, "optimized_accuraci": 546, "get_model_path": 546, "is_int8_model": 548, "load_weight_onli": 548, "checkpoint_dir": 548, "history_cfg": 548, "best_configur": 548, "best_model_weight": 548, "snapshot": [548, 620], "recover_model_from_json": 548, "json_file_path": 548, "cfg_from_fil": 549, "yaml_fil": [549, 579, 584], "time_limit": 549, "get_siz": 549, "seen": [549, 559], "compute_spars": 549, "fault_tolerant_fil": 549, "equal_dict": 549, "d2": 549, "compare_kei": 549, "ignore_kei": 549, "ignor": [549, 577, 579, 641, 644, 647], "get_tuning_histori": 549, "tuning_history_path": 549, "offlin": [549, 553, 596, 638, 644], "str2arrai": 549, "global_st": 549, "show_memory_info": 549, "hint": 549, "dump_class_attr": 549, "compare_object": 549, "obj1": 549, "obj2": 549, "ignore_attr": 549, "comparison": [549, 641, 642, 645], "alias_param": 549, "param_nam": 549, "param_alia": 549, "alias": 549, "print_tabl": 549, "column_map": 549, "table_entri": 549, "titl": [549, 593, 617, 647], "insert_newlin": 549, "prettyt": 549, "column": [549, 641, 644], "handler": [549, 647], "row": [549, 581, 619, 644], "decim": 549, "get_tensors_info": 549, "get_weights_detail": 549, "weightdetail": 549, "dump_tabl": 549, "file_typ": 549, "csv": [549, 556, 619, 620], "dump_table_to_csv": 549, "get_number_of_socket": 549, "platform": [549, 558, 591, 599, 607, 626, 636, 638], "opentri": 549, "activation_min": 549, "activation_max": 549, "print_op_list": 549, "get_op_list": 549, "minmax_file_path": 549, "input_model_tensor": 549, "optimized_model_tensor": 549, "activation_min_max": 549, "calculate_ms": 549, "mse_metric_gap": 549, "fp32_tensor": 549, "dequantize_tensor": 549, "euclidean": [549, 582], "distanc": [549, 582], "check_key_exist": 549, "weightsdetail": 550, "input_tensor_data": 550, "optimized_tensor_data": 550, "weightsstatist": 550, "welcom": [552, 553, 554, 558, 618, 625, 651], "interest": [553, 558, 618, 645], "foster": 553, "particip": [553, 626], "commun": [553, 618], "harass": 553, "experi": [553, 599, 621, 643, 644, 647], "everyon": 553, "regardless": 553, "ag": 553, "bodi": 553, "ethnic": 553, "characterist": 553, "gender": 553, "educ": 553, "socio": 553, "econom": 553, "race": 553, "religion": 553, "sexual": 553, "orient": 553, "contribut": [553, 558, 635], "inclus": 553, "Being": 553, "viewpoint": 553, "gracefulli": 553, "focus": [553, 559], "empathi": 553, "toward": [553, 582], "member": [553, 559], "unaccept": 553, "imageri": 553, "unwelcom": 553, "troll": 553, "insult": 553, "derogatori": 553, "polit": 553, "attack": 553, "privat": 553, "publish": [553, 593, 594, 597, 617, 644], "electron": 553, "explicit": 553, "permiss": 553, "inappropri": 553, "profession": 553, "clarifi": 553, "appropri": [553, 577, 644], "fair": 553, "action": [553, 611, 614], "edit": 553, "reject": 553, "commit": [553, 554], "wiki": 553, "ban": 553, "temporarili": 553, "deem": 553, "threaten": 553, "offens": 553, "harm": 553, "mail": 553, "social": [553, 636], "media": [553, 636], "account": [553, 643, 647], "appoint": 553, "onlin": [553, 643], "event": [553, 645], "abus": 553, "report": [553, 554, 558, 626, 643], "contact": [553, 642, 643], "complaint": 553, "review": [553, 554, 558, 636], "investig": [553, 621], "circumst": [553, 637], "oblig": [553, 622], "confidenti": [553, 618], "regard": [553, 640], "incid": 553, "good": [553, 638, 647], "faith": 553, "repercuss": 553, "leadership": 553, "faq": [553, 558], "page": [553, 554, 618, 621, 622], "send": [554, 560], "view": [554, 558, 585, 607, 616, 622, 642], "star": 554, "repositori": [554, 611, 614], "button": [554, 591, 610, 616], "fork": [554, 611, 614], "clone": [554, 581, 592, 609, 613, 618, 620, 621, 623, 624], "pc": 554, "git": [554, 581, 587, 592, 618, 620, 621, 623, 624], "modif": [554, 559, 588, 604, 623], "checkout": 554, "my": 554, "push": [554, 635, 641, 644], "cover": [554, 586, 590, 636], "would": [554, 596, 620, 635, 638, 644], "adopt": [554, 599, 635, 636, 644], "certif": [554, 618], "agre": 554, "pr": [554, 578, 595, 611, 614, 642], "At": [554, 560, 622, 626, 647], "approv": 554, "solv": [554, 638, 642], "licens": 554, "azur": [554, 558, 636], "devop": 554, "ci": 554, "cloud": [554, 558, 626, 636], "deploi": [554, 582, 596, 622, 626, 641, 647], "e16": 554, "v5": 554, "scan": [554, 558], "pylint": 554, "bandit": 554, "copyright": [554, 593], "docstyl": 554, "spellcheck": 554, "dco": 554, "pytest": 554, "No": [554, 587, 596, 624, 625, 636], "failur": [554, 555], "fault": 554, "coverag": 554, "runtim": [554, 558, 559, 560, 562, 578, 581, 585, 588, 591, 597, 601, 606, 607, 637, 641, 642, 647], "submit": [554, 623, 626, 636], "bug": [554, 558], "intend": 554, "safe": 554, "collabor": [554, 558, 601, 607], "adher": 554, "toolkit": [555, 592, 599, 607, 636, 648], "tracer": 555, "resolv": [555, 557], "floatfunct": 555, "cat": [555, 586, 602, 629, 630, 631], "done": [555, 582, 583, 600, 616, 625, 629, 630, 635, 638], "10004": [555, 556, 559, 578, 582, 583, 584, 588, 591, 597, 634, 637, 639, 641, 649], "neural_compressor": [555, 556, 558, 561, 576, 578, 579, 581, 582, 583, 584, 586, 589, 590, 595, 596, 597, 598, 618, 619, 633, 634, 635, 637, 638, 639, 640, 642, 643, 644, 646, 647, 649], "eval": [555, 578, 581, 599, 638, 645], "conduct": [555, 596, 604, 616, 647, 648], "imper": 555, "therefor": [555, 596, 619, 621, 635, 638, 639, 642, 644], "lot": [555, 621, 644], "As": [555, 560, 578, 582, 595, 596, 610, 621, 635, 641, 647], "successfulli": [555, 584, 625, 629, 630, 631, 636], "suggest": [555, 643], "traceabl": 555, "proxi": 555, "tutori": [555, 607, 636, 648], "prototyp": 555, "html": [555, 558, 560, 577, 584, 591, 611, 614, 617, 619, 625, 629, 638], "highlight": 555, "untrac": 555, "ssd": [555, 586, 650], "resnet34": [555, 650], "r34": 555, "bboxes_labels_scor": 555, "prob": 555, "45": [555, 650], "max_output": 555, "zip": [555, 625, 629, 630], "dbox": 555, "dlabel": 555, "dscore": 555, "decode_singl": 555, "autom": [556, 599, 616, 617, 636, 644], "artifici": 556, "ann": 556, "par": [556, 626], "outperform": 556, "propos": [556, 559, 582, 597, 641, 644], "potenti": [556, 581], "lie": [556, 577], "predictor": 556, "shown": [556, 578, 581, 582, 595, 596, 610, 619, 621, 633, 634, 635, 639, 644, 647], "figur": [556, 609, 610, 613, 639], "popul": 556, "inner": 556, "evolutionari": 556, "until": [556, 560, 647], "conclud": 556, "met": [556, 588, 638, 645], "yet": [556, 611, 614, 617, 624, 638], "simplest": [556, 577, 602], "launcher": [556, 558, 582, 583, 607, 648], "agent": 556, "nsga2": 556, "supernet": 556, "ofa_mbv3_d234_e346_k357_w1": 556, "acc": [556, 626, 635, 645, 650], "mac": [556, 617], "num_ev": 556, "250": [556, 635], "results_csv_path": 556, "search_result": 556, "dataset_path": 556, "ilsvrc2012": 556, "aim": [556, 558, 594, 599, 635, 644, 647, 648], "mobilenetv3": 556, "lt": [556, 579, 650], "wmt": 556, "en": 556, "de": 556, "guidelin": [557, 558], "mainstream": [558, 648], "workflow": [558, 560, 561, 581, 582, 586, 592, 597, 611, 614, 618, 645, 648], "particular": [558, 635, 641], "wide": [558, 585, 597, 635, 638, 650], "hardwar": [558, 559, 582, 591, 596, 616, 635, 636, 637], "xeon": [558, 592, 593, 594, 597, 636, 638, 640, 650], "scalabl": [558, 592, 594, 597, 636, 638, 640], "processor": [558, 594, 597, 624, 636, 638, 640], "flex": [558, 592], "amd": [558, 592, 650], "arm": [558, 591, 592, 650], "nvidia": [558, 577, 591, 592, 650], "llama2": 558, "falcon": [558, 594, 635, 644, 650], "j": [558, 594, 620, 635, 644, 650], "bloom": [558, 635, 644, 650], "broad": [558, 591, 605, 648], "stabl": [558, 592, 635, 636], "diffus": [558, 636], "vision": [558, 586, 603, 644], "coder": [558, 591, 600, 601, 604, 607, 610, 623, 627, 636], "marketplac": [558, 617, 636], "googl": [558, 597, 636], "amazon": [558, 599, 607], "web": [558, 618, 624, 629, 630, 631, 645], "servic": [558, 616, 623, 636], "softwar": [558, 593, 635, 636, 642], "alibaba": [558, 606, 613, 614, 636], "tencent": [558, 636], "taco": [558, 636], "oliv": [558, 636], "ai": [558, 599, 636, 640, 648], "ecosystem": [558, 636], "lightn": [558, 606], "pip": [558, 581, 584, 587, 589, 592, 601, 604, 609, 611, 613, 614, 618, 619, 620, 621, 642], "wget": [558, 581, 587, 589, 618, 621], "googleapi": [558, 589, 618, 621], "v1_6": [558, 589, 618, 621], "mobilenet_v1_1": [558, 589, 618, 629], "0_224_frozen": [558, 589, 618, 629], "overview": [558, 647], "jupyterlab": [558, 599, 605, 607, 609, 613, 648], "studio": [558, 607, 616, 626, 648], "topic": 558, "int4": [558, 594, 638, 650], "fp8": [558, 636], "innov": [558, 607, 636], "blog": [558, 636], "oct": [558, 636], "emnlp": [558, 636], "teq": [558, 636, 639, 641], "sep": [558, 636], "neurip": [558, 636], "quala": [558, 636], "minilm": [558, 636, 650], "releas": [558, 592, 605, 607, 609, 613, 615, 627, 630, 631, 651], "legal": [558, 651], "request": [558, 624, 625, 626, 629, 630, 631, 638], "ask": [558, 592], "email": 558, "research": [558, 593, 644, 650], "idea": [558, 618, 635, 644, 647], "discord": 558, "join": [558, 619, 624, 629, 630], "technic": 558, "discuss": 558, "wechat": [558, 636], "img": 558, "bridg": [559, 560, 591], "vanilla": [559, 560, 591], "abcadaptor": 559, "__init__": [559, 578, 579, 595, 647], "query_fw_cap": [559, 561], "query_fused_pattern": 559, "he": 559, "besid": [559, 582, 621, 641], "describ": [559, 561, 581, 588, 618, 645], "past": [559, 641], "mainten": 559, "difficult": [559, 644], "abil": [559, 560, 579, 588, 644], "fragment": 559, "scenario": [559, 576, 582, 596, 635, 641], "granular": [559, 560, 561, 588, 591, 602, 638, 644, 649], "semant": [559, 588], "mla": [559, 597, 638], "becom": [559, 586, 635, 641], "explor": 559, "inspect_tensor": 559, "op_list": [559, 645], "iteration_list": 559, "inspect_typ": 559, "save_to_disk": 559, "quantization_cfg": 559, "set_tensor": 559, "tensor_dict": 559, "diagnosis_help": 559, "fw": 560, "outlin": [560, 561], "instruct": [560, 561, 582, 592, 597, 611, 614, 618, 619, 620, 621, 635, 636, 637, 638, 644, 650], "extend": [560, 561], "accommod": [560, 561], "incorpor": [560, 561, 583, 635, 647], "give": [560, 616, 647], "diagram": [560, 561, 581, 647], "illustr": [560, 561, 583, 647], "sequencediagram": [560, 561, 626], "autonumb": [560, 561], "query_framework_cap": 560, "opwis": 560, "optypewis": 560, "travers": [560, 561, 641, 647], "\u2776": 560, "\u2777": 560, "\u2778": 560, "\u2779": 560, "\u277a": 560, "\u277b": 560, "\u277c": 560, "These": [560, 591, 619], "chapter": 560, "node_op": 560, "confirm": 560, "int8_conv_config": 560, "optype_wise_": 560, "tuning_cfg_to_fw": 560, "Its": [560, 577, 635], "dispatch": [560, 591, 623, 626], "is_perchannel": 560, "is_asymmetr": 560, "convert_bf16": 560, "somewhat": 560, "distort": 560, "line": [560, 584, 591, 599, 604, 605, 624, 645], "explain": [561, 581, 644], "let": [561, 588, 604, 635, 637, 649], "overal": [561, 624, 649], "drive": 561, "uint4": 561, "kullback": [561, 582], "leibler": [561, 582], "pytorch_cpu": 561, "1_11_capabl": 561, "cap_s8_1_11": 561, "cap_s8_1_11_conv1d": 561, "per_channel_symmetr": 561, "addition": [561, 584, 635, 647], "per_tensor_symmetr": 561, "nativ": 561, "with_arg": 561, "qscheme": 561, "quant_min": 561, "quant_max": 561, "linux": [576, 587, 592, 610, 616], "x86_64": 576, "aarch64": 576, "prove": [577, 641, 644], "benefici": 577, "uniform": [577, 641], "\u03b2": 577, "\u03b1": 577, "fundament": [577, 596], "primari": [577, 647], "focu": [577, 647], "essenti": [577, 587], "remaind": 577, "enhanc": [577, 599, 635, 636, 640], "resolut": 577, "extrem": 577, "still": [577, 596, 622, 636, 638, 640], "retain": 577, "noteworthi": 577, "vanhouck": 577, "vincent": 577, "andrew": 577, "senior": 577, "mark": 577, "mao": 577, "speed": [577, 596, 607, 635, 636, 638, 647], "2011": 577, "szymon": 577, "migacz": 577, "2017": 577, "mckinstri": 577, "jeffrei": 577, "l": [577, 582, 645, 647], "discov": [577, 645], "1809": 577, "04191": 577, "2018": 577, "encount": 578, "consum": 578, "previous": 578, "lack": [578, 587], "faster": [578, 580, 586, 636, 647, 650], "Of": 578, "evenli": 578, "divid": [578, 626, 644, 647], "discard": 578, "throw": 578, "awai": 578, "draw": [578, 643, 647], "subprocess": 578, "pin": [578, 609, 613], "reshuffl": 578, "manner": [578, 582, 598], "newdataload": 578, "customis": [578, 579, 595], "ensp": [579, 646], "imagerecord": [579, 584, 649], "image_nam": 579, "cocorecord": 579, "gt": [579, 644, 646], "int64": 579, "offer": 579, "style_transf": 579, "content": [579, 624, 625, 629, 630, 631], "tfrecorddataset": 579, "labelbal": 579, "300": [579, 635, 650], "16": [579, 592, 629, 641, 650], "helloworld": [579, 597, 646], "aid": 580, "deploy": [580, 599, 616, 636, 639, 644], "infrastructur": 580, "diagnos": 581, "gui": [581, 591, 621, 635], "termin": [581, 609, 610, 613, 619], "repeat": [581, 647], "durat": [581, 625, 629, 630, 643], "cd": [581, 584, 592, 618, 620, 621, 623, 624, 629, 630, 631], "setup": [581, 588, 592, 611, 614, 618, 620, 621, 623, 624, 635], "ilsvr2012": 581, "caff": 581, "berkeleyvis": 581, "caffe_ilsvrc12": 581, "xvzf": 581, "image_recognit": [581, 621, 645], "resnet50_torchvis": 581, "ptq_static": [581, 620], "resnet50_v1": [581, 584, 596], "dataset_loc": [581, 621, 629, 645], "label_path": 581, "quantiti": 581, "vec": 581, "frac": [581, 644], "sigma": 581, "var": 581, "happen": 581, "dispers": [581, 619], "v0": [581, 621, 644, 645], "cg": [581, 621, 645], "conv0": [581, 621, 645], "expens": [582, 596, 647], "mobil": [582, 596, 650], "produc": 582, "logit": 582, "softmax": 582, "kd": 582, "patient": 582, "compact": [582, 596, 602, 635], "agnost": 582, "resourc": [582, 623, 626, 647], "convolut": [582, 636], "ia": 582, "attach": [582, 596, 644], "shallow": 582, "deepest": 582, "deeper": 582, "10006": [582, 583], "student_output": [582, 583], "student_loss": [582, 583], "training_func_for_nc": [582, 583], "distil_loss_conf": 582, "accordingli": [582, 607, 644], "promis": [583, 596, 635], "huge": [583, 621, 635, 639], "heavi": 583, "light": 583, "booster": 583, "degrad": [583, 635, 647], "novel": [583, 599, 610, 616], "comb": 583, "distillation_criterion": [583, 596, 634], "q_conf": 583, "horovod": 584, "program": [584, 593, 599, 616], "enable_eager_execut": 584, "yaml_file_path": 584, "pre_process": 584, "simpli": [584, 598, 599, 601, 604, 616, 624], "evaluation_result": 584, "evaluation_time_cost": 584, "partit": [584, 635], "distributedsampl": 584, "train_sampl": 584, "train_dataset": [584, 638], "num_replica": 584, "rank": 584, "train_load": 584, "train_kwarg": 584, "adadelta": 584, "distributedoptim": 584, "named_paramet": 584, "broadcast_paramet": 584, "root_rank": 584, "broadcast_optimizer_st": 584, "set_epoch": 584, "batch_idx": 584, "nll_loss": 584, "log_interv": 584, "0f": 584, "tloss": 584, "6f": 584, "dry_run": 584, "test_func": 584, "host": [584, 624, 626, 629, 630, 631], "num_of_process": 584, "002": 584, "ssh": [584, 616], "prompt": 584, "readm": [584, 629], "exactli": [584, 600], "recognit": [584, 586, 635, 645], "resizecropimagenet": [584, 646], "realiz": [584, 633, 640, 643], "tow": 584, "node1": [584, 629, 630], "node2": [584, 629, 630], "TO": [584, 601, 621], "your_node1_nam": 584, "your_node2_nam": 584, "resnet50_fp32_pretrained_model": 584, "nc_resnet50_v1": 584, "resnet": [584, 650], "varieti": [585, 637, 647], "demonstr": [585, 599, 629, 630, 631, 645], "speedup": [585, 591, 638], "2x": [585, 591], "vnni": [585, 591, 637, 638], "exchang": 586, "hope": 586, "inc_model": [586, 598], "fp32_onnx_config": 586, "verifi": [586, 594], "vgg16": [586, 650], "mobilenet": [586, 643, 650], "rcnn": 586, "torchscript": [586, 639, 644], "unsupport": [586, 596, 635], "add_relu": 586, "conv1d_relu": 586, "conv2d_relu": 586, "group_norm": 586, "hardswish": 586, "instance_norm": 586, "layer_norm": 586, "leaky_relu": 586, "sigmoid": 586, "toolchain": [587, 636], "bare": 587, "metal": 587, "sudo": [587, 602], "apt": [587, 592, 602, 610], "python3": 587, "dev": [587, 609, 613], "distutil": 587, "libgl1": 587, "mesa": 587, "glx": 587, "libglib2": 587, "ln": 587, "sf": 587, "usr": 587, "incompat": 587, "88": [587, 643, 650], "80": [587, 639, 645, 650], "pyobject": 587, "reinstal": 587, "libgl": 587, "yum": [587, 592], "opencv": [587, 592, 610], "conda": [587, 592, 602, 610, 629, 630, 631, 642], "13": [587, 592, 618, 642, 644], "pend": [587, 625], "sqlalchemi": 587, "27": [587, 650], "alemb": 587, "forg": [587, 592], "quick": [588, 597, 635, 648, 649], "friendli": [588, 596, 636, 644, 648, 649], "dive": [588, 648], "purpos": [588, 597, 616, 618, 637, 638], "syntax": 588, "go": [588, 611, 614, 622, 637, 641, 646], "up1": 588, "up2": 588, "valid_mixed_precis": 588, "addn": 588, "grappler_optim": 588, "constfold": 588, "arithmet": 588, "debug_stripp": 588, "major": [590, 621, 638, 644], "concept": [590, 643, 648], "rather": [590, 641], "custom_metr": 590, "refin": [590, 635], "420": 591, "geomean": 591, "snippet": 591, "upload": [591, 611, 614], "click": [591, 599, 600, 607, 610, 616, 621, 636, 645], "qintegerop": [591, 638], "plan": 591, "oneapi": [592, 636, 648], "analyt": [592, 636, 648], "success": [592, 618], "11": [592, 595, 597, 618, 644, 647, 650], "frequent": 592, "pypi": [592, 611, 614], "nightli": 592, "headless": [592, 610], "fastai": 592, "esri": 592, "consolid": 592, "latest": [592, 636, 642], "eas": [592, 601, 636], "along": [592, 635, 641], "streamlin": [592, 623, 636], "scienc": 592, "websit": 592, "anaconda": [592, 623, 624], "suit": [592, 617, 645], "formerli": 592, "skylak": 592, "cascad": 592, "lake": [592, 597, 636], "cooper": [592, 597, 636], "ic": [592, 636], "sapphir": [592, 594], "rapid": [592, 594], "hbm": 592, "arctic": 592, "sound": 592, "pont": 592, "vecchio": 592, "cento": [592, 650], "ubuntu": 592, "22": [592, 650], "04": [592, 650], "maco": 592, "ventura": 592, "fortensorflow": 592, "forpytorch": 592, "12": [592, 618, 650], "tf_enable_onednn_opt": 592, "onednn": [592, 597, 638], "newer": 592, "subject": 593, "accompani": [593, 647], "wish": 593, "bibtex": 593, "author": 593, "feng": 593, "tian": 593, "hanwen": 593, "haihao": [593, 635], "shen": [593, 635], "suyu": 593, "chen": 593, "howpublish": 593, "year": 593, "logo": 593, "atom": 593, "phi": 593, "pentium": 593, "vtune": 593, "corpor": 593, "subsidiari": 593, "brand": 593, "claim": 593, "sq": [594, 644], "woq": 594, "4th": [594, 636, 638], "gen": [594, 597, 636, 638, 640], "codenam": [594, 597], "quickli": [594, 647, 648], "eleutherai": [594, 620, 644, 650], "6b": [594, 620, 644, 650], "facebook": [594, 622, 644, 650], "3b": [594, 644], "30b": [594, 644, 650], "llama": [594, 635, 636, 639, 641, 644, 650], "7b": [594, 644, 650], "13b": [594, 644, 650], "70b": [594, 650], "tiiuae": [594, 644, 650], "40b": 594, "soon": 594, "popularli": 595, "industri": [595, 636], "label_map": 595, "decis": 595, "ap": 595, "curv": 595, "turn": [595, 610, 639], "target_boxes_num": 595, "str_label": 595, "int_label": 595, "inturn": 595, "cocomap": 595, "vocmap": 595, "categor": 595, "multiclass": 595, "multilabel": 595, "newmetr": 595, "reset": 595, "reflect": [595, 646], "new_metr": 595, "deliv": [596, 636, 642], "conveni": [596, 623], "upgrad": 596, "veri": [596, 617, 621, 638, 641, 647, 648], "comprehens": [596, 648], "resort": 596, "automodelforsequenceclassif": 596, "autotoken": 596, "val_dataset": [596, 638], "val_dataload": [596, 638], "worker": [596, 626, 629, 630, 631, 638], "ping_memori": [596, 638], "formul": 596, "effort": 596, "onnxrt_integ": [596, 649], "onnxrt_qlinear": [596, 649], "image_tensor": [596, 649], "post_training_dynamic_qu": [596, 637, 647], "1000": [596, 625, 649], "2000": 596, "sampling_s": [596, 649], "model_wis": [596, 649], "op_dict": 596, "op_wis": [596, 645, 649], "sigopt_api_token": [596, 643, 647], "sigopt_project_id": [596, 643, 647], "sigopt_experiment_nam": [596, 643, 647], "demo": 596, "600": 596, "training_arg": 596, "emul": [596, 638], "trainer": [596, 607], "briefli": [596, 644], "pruning_func": 596, "train_dataload": [596, 635, 638], "n_gpu": 596, "gradient_accumulation_step": 596, "clip_grad_norm_": 596, "max_grad_norm": 596, "start_epoch": [596, 637, 649], "end_epoch": [596, 637, 649], "newli": [596, 635], "on_after_optimizer_step": [596, 635], "layer3": [596, 635], "0004": 596, "randomresizedcrop": [596, 646], "totensor": [596, 646], "485": 596, "456": [596, 650], "406": [596, 650], "nepoch": 596, "cnt": 596, "loss_sum": 596, "iter_bar": 596, "desc": 596, "teacher_logit": 596, "train_fun": 596, "training_func": 596, "recent": [596, 597], "growth": [596, 597, 635], "complex": [596, 597, 635], "significantli": [596, 597, 619, 621, 635, 647], "bandwidth": [596, 597, 641], "exit_polici": [596, 649], "determinist": 596, "meaning": [596, 634], "reli": [596, 644], "prune_conf": 596, "quantization_aware_training_conf": 596, "aforement": 596, "inset": 596, "p_conf": [596, 634], "ssd_mobilenet_v1": 596, "benchmarkconf": 596, "sixteen": 597, "launch": [597, 617, 622], "3rd": [597, 636, 638, 640], "boost": [597, 600, 616, 635, 636], "x86": 597, "avx512": [597, 638], "vcvtne2ps2bf16": 597, "vcvtneps2bf16": 597, "vdpbf16p": 597, "fbgemm": [597, 638], "tensorrtexecutionprovid": [597, 638], "cudaexecutionprovid": [597, 638], "dnnlexecutionprovid": [597, 638], "avx512_bf16": 597, "plu": 597, "resnet18": [597, 601, 650], "persist": 598, "brought": [598, 600, 607, 638], "tf2": 598, "h5": 598, "hybridblock": 598, "0000": 598, "saved_result": [598, 620, 641], "simplifi": [599, 610, 616, 635, 636], "acquir": 599, "analysi": [599, 616, 635, 643], "heurist": [599, 616], "great": 599, "facilit": 599, "autocast": 599, "my_model": 599, "no_grad": 599, "memory_format": 599, "112": 599, "plugin": [599, 617], "aw": [599, 607, 626, 636, 650], "sagemak": [599, 607], "neural_cod": [599, 601, 603, 604, 605, 607], "bench": 599, "superbench": 599, "enjoi": [600, 604, 607], "reload": [600, 617, 619, 622], "modern": [601, 641], "democrat": [601, 636], "programm": [601, 607, 616], "nano_bf16_channels_last": 601, "nano_bf16_ipex_channels_last": 601, "nano_bf16_ipex": 601, "nano_bf16": 601, "nano_fp32_channels_last": 601, "nano_fp32_ipex_channels_last": 601, "nano_fp32_ipex": 601, "nano_gpu_to_cpu": 601, "nano_int8": 601, "nano_jit_bf16_channels_last": 601, "nano_jit_bf16_ipex_channels_last": 601, "nano_jit_bf16_ipex": 601, "nano_jit_bf16": 601, "nano_jit_fp32_channels_last": 601, "nano_jit_fp32_ipex_channels_last": 601, "nano_jit_fp32_ipex": 601, "nano_jit_fp32": 601, "nano_onnxruntime_fp32": 601, "nano_onnxruntime_int8_qlinear": 601, "openvino": 601, "nano_openvino_fp32": 601, "nano_openvino_int8": 601, "bc": [602, 610], "conda_prefix": 602, "echo": 602, "tradit": [602, 635], "libjemalloc": 602, "libiomp5": 602, "home": 602, "lib": 602, "ld_preload": 602, "malloc_conf": 602, "oversize_threshold": 602, "background_thread": 602, "metadata_thp": 602, "dirty_decay_m": 602, "9000000000": 602, "muzzy_decay_m": 602, "kmp_affin": 602, "kmp_blocktim": 602, "dnnl_primitive_cache_capac": 602, "governor": 602, "cpufreq": 602, "scaling_governor": 602, "powersav": 602, "tee": 602, "pytorch_jit_script": [603, 606], "pytorch_channels_last": [603, 606], "run_bench": 603, "patch": [603, 616], "patch_path": 603, "your_patch_path": 603, "sweep": 603, "sweep_object": 603, "bench_config": 603, "bench_featur": 603, "sai": 604, "run_glu": [604, 605, 627, 630, 631], "requisit": 604, "task_nam": [604, 605, 627, 630, 631], "do_ev": [604, 605, 620, 627, 630, 631], "itself": [604, 635], "run_glue_optim": 604, "static_ipex": 604, "auto_qu": 605, "v4": [605, 627, 630, 631, 650], "albert": [605, 650], "sst2": 605, "alexnet": [605, 650], "pytorch_amp": 606, "optimize_for_infer": 606, "pytorch_jit_trac": 606, "pytorch_jit_script_ofi": 606, "pytorch_jit_trace_ofi": 606, "torchdynamo": 606, "pytorch_torchdynamo_jit_script": 606, "pytorch_torchdynamo_jit_trac": 606, "pytorch_torchdynamo_jit_script_ofi": 606, "pytorch_torchdynamo_jit_trace_ofi": 606, "pytorch_inc_bf16": 606, "pytorch_inc_static_quant_fx": 606, "pytorch_inc_static_quant_ipex": 606, "pytorch_inc_static_quant_ipex_xpu": 606, "pytorch_inc_dynamic_qu": 606, "pytorch_ipex_fp32": 606, "pytorch_ipex_bf16": 606, "pytorch_ipex_int8_static_qu": 606, "pytorch_ipex_int8_dynamic_qu": 606, "blade": 606, "disc": 606, "pytorch_aliblad": 606, "pytorch_lightning_bf16_cpu": 606, "tensorflow_amp": 606, "keras_amp": 606, "tensorflow_inc": 606, "keras_inc": 606, "onnx_inc_static_quant_qlinear": 606, "onnx_inc_static_quant_qdq": 606, "onnx_inc_dynamic_qu": 606, "optimum": [606, 607, 619, 641], "pytorch_inc_huggingface_optimum_stat": 606, "pytorch_inc_huggingface_optimum_dynam": 606, "intel_extension_for_transform": 606, "bigdl": [606, 607], "nano": [606, 607], "nano_": 606, "inc_auto": 606, "delight": 607, "announc": 607, "500": [607, 625, 650], "jupyt": [607, 609, 610, 613], "isa": 607, "adjust": [607, 638, 644], "delta": 607, "acc_delta": 607, "int8_acc": 607, "fp32_acc": 607, "ext": [609, 611, 613, 614, 615], "lab": [609, 610, 611, 613, 614], "nodej": [609, 613], "jlpm": [609, 613], "yarn": [609, 613], "npm": [609, 610, 613], "lieu": [609, 613], "labextens": [609, 610, 613], "typescript": [609, 613], "watch": [609, 613, 622], "immedi": [609, 613, 635], "refresh": [609, 613], "browser": [609, 613, 618, 622], "wait": [609, 613, 616, 626], "rebuilt": [609, 613], "easier": [609, 613, 616, 618, 636], "symlink": [609, 613], "down": 610, "finish": [610, 626], "blank": 610, "cell": 610, "gain": [610, 634, 636], "mkl": 610, "jemalloc": 610, "pip3": 610, "pyproject": [611, 614], "toml": [611, 614], "twine": [611, 614], "whl": [611, 614], "dist": [611, 614], "sdist": [611, 614], "bdist_wheel": [611, 614], "deprec": [611, 614, 642, 646], "frontend": [611, 614, 624, 631], "login": [611, 614, 643], "cut": [611, 614], "admin_github_token": [611, 614], "pypi_token": [611, 614], "npm_token": [611, 614], "secret": [611, 614], "panel": [611, 614, 616], "draft": [611, 614], "changelog": [611, 614, 615], "pkg": [611, 614], "bot": [611, 614], "pick": [611, 614, 617], "feedstock": [611, 614], "hatch": 614, "notabl": 615, "vscode": [615, 617], "daili": 616, "advantag": [616, 635, 637, 647], "remot": 616, "server": [616, 618, 621, 624, 629, 630, 631], "re": [616, 622, 641], "market": 616, "uninstal": 616, "fill": [616, 643, 646, 647], "upper": 616, "sidebar": 616, "hover": 616, "track": [616, 643], "argpars": 616, "pop": [616, 626], "diff": 616, "manifest": 617, "declar": 617, "palett": 617, "registercommand": 617, "amodio": 617, "tsl": 617, "matcher": 617, "dbaeumer": 617, "eslint": [617, 622], "press": 617, "f5": 617, "ctrl": 617, "hello": 617, "world": 617, "breakpoint": 617, "consol": [617, 622], "relaunch": 617, "toolbar": 617, "node_modul": 617, "viewlet": 617, "dropdown": 617, "runner": [617, 622], "startup": 617, "bundl": 617, "neural_insight": [618, 620, 621], "tl": 618, "ui": 618, "5000": 618, "338174d13706855fc6924cec7b3a8ae8": 618, "listen": 618, "firewal": 618, "8080": 618, "cert": 618, "path_to_cert": 618, "crt": 618, "path_to_private_kei": 618, "encrypt": 618, "expos": 618, "forfeit": 618, "client": [618, 624, 631], "extern": 618, "threat": 618, "diagnost": 618, "skill": 618, "feel": [618, 622], "layoutlmv3": [619, 650], "seqev": 619, "sentencepiec": 619, "timm": 619, "fvcore": 619, "pillow": 619, "einop": 619, "textdist": 619, "setuptool": 619, "cli": 619, "hypjudi": 619, "finetun": [619, 635, 641, 650], "funsd": [619, 650], "calib_dataset": 619, "incdataset": 619, "eval_dataset": 619, "poor": [619, 645], "9049": 619, "2989": 619, "66": [619, 650], "9631": 619, "glob": 619, "panda": 619, "pd": 619, "set_opt": 619, "max_row": 619, "max_column": 619, "getmtim": 619, "activations_t": 619, "weights_tabl": [619, 620], "read_csv": 619, "nweight": 619, "descend": 619, "sorted_data": 619, "sort_valu": 619, "ascend": 619, "evid": 619, "tip": 619, "8981": 619, "7502": 619, "run_clm": 620, "wikitext": [620, 650], "dataset_config_nam": 620, "do_train": 620, "inspect_sav": 620, "inspect_result": 620, "quan": 620, "model_summari": 620, "incept": [621, 650], "v3": [621, 650], "inception_v3": [621, 645], "inceptionv3_fp32_pretrained_model": [621, 645], "bash": [621, 645], "prepare_dataset": 621, "sh": [621, 645], "raw_dir": 621, "img_raw": 621, "delet": [621, 635], "run_tun": 621, "nc_inception_v3": 621, "highest": [621, 627, 647], "satisfactori": 621, "webpag": 621, "spike": 621, "bottom": 621, "chart": [621, 638, 643, 645], "concentr": 621, "But": 621, "bigger": 621, "bootstrap": 622, "localhost": [622, 624, 629, 630], "3000": 622, "lint": 622, "interact": [622, 643], "correctli": 622, "hash": [622, 625], "readi": [622, 635], "aren": 622, "transit": 622, "webpack": 622, "babel": 622, "tweak": 622, "ever": 622, "curat": 622, "suitabl": 622, "middl": [622, 644], "shouldn": 622, "understand": [622, 638, 645, 648], "wouldn": 622, "couldn": 622, "troubleshoot": 622, "effortlessli": 623, "grpc": [623, 624, 628, 629, 630, 632], "queue": 623, "seamlessli": [623, 635, 647], "mpi": [623, 624, 647], "neural_solut": [623, 624, 629, 630, 631], "task_monitor_port": [624, 629, 630, 631], "22222": [624, 629, 630, 631], "result_monitor_port": [624, 629, 630, 631], "33333": [624, 629, 630, 631], "restful_api_port": [624, 629, 630, 631], "hostfil": [624, 626, 629, 630, 631], "grpc_api_port": [624, 629, 630, 631], "api_typ": [624, 629, 630, 631], "conda_env": [624, 629, 630, 631], "upload_path": [624, 629, 630, 631], "8000": [624, 629, 630, 631], "monitor": [624, 629, 630, 631], "3333": [624, 629, 630, 631], "2222": [624, 629, 630, 631], "ns_workspac": [624, 629, 630, 631], "hf_model": [624, 628, 630, 631], "curl": [624, 625, 629, 630], "task_id": [624, 629, 630, 631], "usernam": 624, "db": [624, 626], "serve_log": [624, 629, 630, 631], "frontend_grpc": 624, "task_log": 624, "task_bdf0bd1b2cc14bc19bce12d4f9b333c7": 624, "task_workspac": 624, "bdf0bd1b2cc14bc19bce12d4f9b333c7": 624, "aliv": 624, "properli": 624, "commonli": [624, 635], "hostnam": 624, "breakdown": 624, "ip": 624, "hous": 624, "host1": [624, 629, 630], "host2": [624, 629, 630], "query_id": 624, "oaa": 625, "host_ip": 625, "task_request": [625, 629, 630, 631], "tuning_info": [625, 629], "optimization_result": [625, 629], "result_path": [625, 629, 630], "closur": 625, "404": [625, 635, 650], "health": 625, "healthi": 625, "quantized_model": [625, 629, 630], "400": [625, 650], "alloc": 626, "incom": 626, "taskmonitor": 626, "cluster": [626, 629, 630, 647], "tasklaunch": 626, "resultmonitor": 626, "receiv": [626, 643], "p1": 626, "notif": 626, "p2": 626, "p3": 626, "mpirun": [626, 647], "perf": 626, "p4": 626, "four": [626, 645, 650], "classdiagram": 626, "taskdb": 626, "get_statu": 626, "update_statu": 626, "task_collect": 626, "append_task": 626, "get_all_pending_task": 626, "update_task_statu": 626, "task_db": 626, "wait_new_task": 626, "schedule_task": 626, "dispatch_task": 626, "launch_task": 626, "query_task_statu": 626, "node_list": 626, "reserve_resourc": 626, "get_node_statu": 626, "gcp": [626, 636], "script_url": [627, 629, 630, 631], "archiv": 627, "tf_example1": [628, 629, 630], "hf_models_grpc": [628, 631], "00173": 629, "01024": 629, "task_request_distribut": 629, "custom_models_optim": 629, "7602cd63d4c849e7a686a8165a77f69d": [629, 630], "151": [629, 650], "8617": 629, "17": [629, 650], "8213": [629, 650], "number_of_socket": [629, 630], "number_of_thread": [629, 630], "cdf419910f9b4d2a8320d0e420ac1d0a": 630, "optimized_result": 630, "58": [630, 650], "3162": 630, "6488": [630, 650], "06": [631, 649, 650], "34": [631, 650], "55": [631, 650], "d3e10a49326449fb9d0d62f2bfc1cb43": 631, "fastapi": 632, "multi_object": 633, "benefit": 634, "instanti": 634, "neuron": 635, "art": 635, "grown": 635, "unpreced": 635, "increasingli": 635, "crucial": 635, "stand": [635, 647], "shrink": 635, "contextu": 635, "scene": 635, "haven": 635, "color": [635, 639], "lowest": [635, 647], "emsp": 635, "downstream": 635, "prone": 635, "co": 635, "discourag": 635, "penal": 635, "parameter": 635, "lightweight": 635, "perceptron": 635, "mlp": 635, "valuabl": [635, 645], "basi": 635, "billion": 635, "dolli": [635, 644, 650], "mpt": [635, 644, 650], "lm": [635, 650], "lamini": [635, 644], "worth": 635, "mention": [635, 641], "tend": 635, "exemplifi": 635, "complement": 635, "fortieth": 635, "miss": [635, 638], "pruner2": 635, "few": [635, 636, 644, 647], "lm_head": 635, "yourself": 635, "uncertain": 635, "auto_config": 635, "quit": 635, "straightforward": [635, 641, 644], "carri": 635, "pruning_pattern": 635, "pruning_start": 635, "pruning_end": 635, "sparse_gpt": 635, "embed_out": 635, "card": 635, "hesit": 635, "causal": 635, "clm": 635, "sst": [635, 650], "25": [635, 650], "63": [635, 650], "24": [635, 647, 650], "35": [635, 650], "flan": 635, "t5": [635, 650], "english": 635, "romanian": 635, "381": 635, "yolov5": 635, "75": [635, 650], "2x1": [635, 650], "801": 635, "7895": 635, "signific": [635, 636, 639, 644], "reduct": [635, 639, 649], "namhoon": 635, "lee": 635, "thalaiyasingam": 635, "ajanthan": 635, "philip": 635, "torr": 635, "2019": 635, "zafrir": 635, "ofir": 635, "ariel": 635, "larei": 635, "boudoukh": 635, "mosh": 635, "wasserblat": 635, "2111": 635, "05754": 635, "2021": 635, "kwon": 635, "kim": 635, "mahonei": 635, "hassoun": 635, "keutzer": 635, "gholami": 635, "pp": 635, "24101": 635, "24116": 635, "frantar": [635, 641], "alistarh": 635, "medium": 636, "aug": 636, "juli": 636, "onnxcommunitymeetup2023": 636, "chatbot": 636, "june": 636, "msft": 636, "netflix": 636, "apr": 636, "mlperf": [636, 650], "5x": 636, "\u96c6\u6210\u82f1\u7279\u5c14": 636, "\u817e\u8baf\u4e91taco": 636, "kit\u4e3aai\u5e94\u7528\u5e26\u6765\u9ad8\u6548\u5f02\u6784\u52a0\u901f\u670d\u52a1": 636, "mar": 636, "heterogen": 636, "jan": 636, "busi": 636, "amx": 636, "journei": 636, "dec": 636, "mleffici": 636, "deepen": 636, "foundat": 636, "intellig": 636, "vmware": 636, "applianc": 636, "bitnami": 636, "nov": 636, "sota": 636, "plug": 636, "twitter": 636, "linkedin": 636, "zone": 636, "land": 636, "pat": 636, "keynot": 636, "intelon": 636, "chines": 636, "purif": 636, "sacrif": 636, "jun": 636, "partner": 636, "feb": 636, "joint": 636, "bilibili": 636, "gestalt": 636, "ml": 636, "doubl": 636, "abound": 636, "lpot": [636, 642], "nextplatform": 636, "cern": 636, "gan": 636, "3dgan": 636, "iml": 636, "workshop": 636, "asplo": 636, "18": [636, 650], "highli": [636, 641], "intelcaff": 636, "aris": 637, "henc": 637, "onnxrt_qoper": 637, "quant_aware_train": 637, "weight_compress": [637, 649], "initial_spars": [637, 649], "prune_typ": [637, 649], "basic_magnitud": [637, 649], "update_frequ": 637, "prune_domain": 637, "tile_pattern_1x1": 637, "invent": 638, "cost": [638, 641], "theoret": [638, 641], "zeropoint": 638, "255": [638, 644], "overflow": 638, "unseen": 638, "enough": 638, "peopl": 638, "mimic": 638, "fact": 638, "ultim": 638, "pain": 638, "lossi": 638, "philosophi": 638, "neither": 638, "nor": 638, "val_load": 638, "avg": 638, "themselv": 638, "dmlexecutionprovid": 638, "meanwhil": 639, "substanti": 639, "pose": 639, "challeng": 639, "greatli": [639, 641], "constrain": 639, "grei": 639, "blue": 639, "rectangl": 639, "w8a8": [639, 641], "10005": 639, "rtn_arg": [639, 641], "ouput_dir": 639, "fp32_model_path": 639, "int8_model_path": 639, "ON": 640, "postposttrainingquantconfig": 640, "bf16wrapper": 640, "retrac": 640, "preval": 641, "grow": 641, "demand": 641, "trade": 641, "bottleneck": 641, "roughli": 641, "speak": 641, "capac": [641, 643], "flop": 641, "famou": 641, "approx": 641, "bmm": 641, "100x": 641, "excel": 641, "stai": [641, 644], "quantif": [641, 644], "think": 641, "intuit": [641, 644], "uniformli": 641, "qlora": 641, "invers": 641, "restor": 641, "protect": 641, "inspir": 641, "c_": 641, "normalfloat": 641, "e2m1": 641, "bnb": 641, "805": 641, "awq_arg": 641, "gptq_arg": 641, "mitig": 641, "date": 641, "sym_full_rang": 641, "qweight_config_path": 641, "gptq_config_path": 641, "gptq_config": 641, "use_full_length": 641, "compressed_model": 641, "omit": 641, "rtn_g32asym": 641, "gptq_g32asym": 641, "gptq_g32asym_disable_last_matmul": 641, "gptq_g128asym": 641, "awq_g32asym": 641, "xiao": [641, 644], "guangxuan": [641, 644], "2211": [641, 644], "10438": [641, 644], "wei": [641, 644], "xiui": [641, 644], "suppress": [641, 644], "2209": [641, 644], "13325": [641, 644], "lin": 641, "ji": 641, "00978": 641, "elia": 641, "dettmer": 641, "tim": 641, "2305": 641, "14314": 641, "site": 642, "sed": 642, "your_script": 642, "backbon": 643, "sigopt_experiment_id": 643, "nc": [643, 647], "suffici": 643, "ordinari": 643, "latenc": [643, 647], "8266": 643, "8372": 643, "2132": 643, "83": [643, 644, 650], "7495": 643, "8299": 643, "8294": 643, "85": [643, 644, 650], "0837": 643, "8291": 643, "4469": 643, "gigant": 644, "systemat": 644, "migrat": [644, 648], "difficulti": 644, "mathemat": 644, "allevi": 644, "coarsest": 644, "finer": [644, 647], "matric": 644, "similarli": 644, "finest": 644, "consumpt": 644, "suppos": 644, "6839": 644, "4741": 644, "7451": 644, "9301": 644, "1742": 644, "6835": 644, "q_min": 644, "q_max": 644, "q_x": 644, "clamp_": 644, "round_": 644, "w_q": 644, "00296431384049356": 644, "59": [644, 650], "172": [644, 650], "192": 644, "w_dq": 644, "2220": 644, "1510": 644, "2420": 644, "2570": 644, "0500": 644, "1890": 644, "mseloss": 644, "1983354538679123": 644, "6848": 644, "4743": 644, "7440": 644, "9308": 644, "1749": 644, "385297635664756e": 644, "07": [644, 649, 650], "quantize_per_channel": 644, "x_tmp": 644, "detach": 644, "keepdim": 644, "dequantize_per_channel": 644, "0029": [644, 650], "0036": 644, "162": [644, 650], "48": [644, 650], "72": [644, 650], "93": [644, 650], "207": 644, "139": [644, 650], "6837": 644, "4734": 644, "1751": 644, "6821": 644, "637690492221736e": 644, "6376e": 644, "3852e": 644, "cdot": 644, "quantize_per_tensor_absmax": 644, "n_bit": 644, "div_": 644, "0806": 644, "7589": 644, "6038": 644, "3815": 644, "5040": 644, "7174": 644, "5444": 644, "5826": 644, "7772": 644, "5555": 644, "3740": 644, "3253": 644, "0698": 644, "1381": 644, "5972": [644, 650], "0086": 644, "0737": 644, "8298": 644, "6883": 644, "2991": 644, "1601": 644, "6506": 644, "8246": 644, "3924": 644, "3845": 644, "8768": 644, "w_scale": 644, "x_q": 644, "x_scale": 644, "84": [644, 650], "120": 644, "0059755356051027775": 644, "89": [644, 650], "119": 644, "57": [644, 650], "006533813662827015": 644, "y_q": 644, "17509": 644, "7608": 644, "4055": 644, "16599": 644, "21020": 644, "10016": 644, "9860": 644, "22444": 644, "y_dq": 644, "6836": 644, "2970": 644, "1583": 644, "6481": 644, "8207": 644, "3911": 644, "3850": 644, "8763": 644, "though": 644, "simplic": 644, "fp1": 644, "fp2": 644, "subsect": [644, 649], "x1": [644, 647], "x2": [644, 647], "herebi": 644, "optdecoderlay": 644, "blockwis": 644, "overhead": 644, "hardtanh": 644, "t5norm": 644, "llamanorm": 644, "groupnorm": 644, "lambada": 644, "openai": [644, 650], "sweet": 644, "spot": 644, "bigscienc": [644, 650], "560m": 644, "354": 644, "3542": 644, "1b7": 644, "4634": 644, "4936": 644, "518": 644, "5185": 644, "7b1": [644, 650], "5764": [644, 650], "5977": 644, "bloomz": [644, 650], "3947": 644, "3930": 644, "4828": 644, "4906": 644, "5018": 644, "4980": 644, "5593": [644, 650], "5552": 644, "125m": 644, "379": 644, "3757": 644, "350m": 644, "4516": 644, "4533": 644, "5789": 644, "5742": 644, "6365": 644, "6404": 644, "6769": [644, 650], "6804": [644, 650], "6872": 644, "6814": 644, "7149": 644, "7128": 644, "66b": 644, "7398": 644, "7326": 644, "7361": [644, 650], "7357": 644, "7627": [644, 650], "7590": 644, "7759": [644, 650], "7840": 644, "65b": 644, "7908": 644, "7957": 644, "7392": [644, 650], "7335": [644, 650], "chat": [644, 650], "7058": [644, 650], "6994": 644, "7677": [644, 650], "7615": [644, 650], "6831": [644, 650], "mbzuai": 644, "124m": 644, "3804": 644, "3887": 644, "774m": 644, "5048": 644, "5057": 644, "5b": 644, "5443": [644, 650], "5436": 644, "mosaicml": [644, 650], "655": [644, 650], "6499": 644, "stabilityai": 644, "stablelm": 644, "4172": 644, "4149": 644, "togethercomput": 644, "redpajama": 644, "incit": 644, "6542": 644, "6735": 644, "6718": 644, "6740": [644, 650], "6569": 644, "6621": 644, "7143": 644, "7221": 644, "6895": 644, "6953": [644, 650], "databrick": [644, 650], "6866": [644, 650], "6297": 644, "6247": 644, "6437": [644, 650], "6392": 644, "7332": 644, "7632": 644, "asterisk": 644, "consider": 644, "arang": 644, "tolist": 644, "default_alpha": 644, "step_siz": 644, "shared_criterion": 644, "do_blockwis": 644, "jason": 644, "emerg": 644, "transact": 644, "yvinec": 644, "edouard": 644, "proceed": 644, "cvf": 644, "winter": 644, "instrument": 645, "writer": 645, "_pre_eval_hook": 645, "_post_eval_hook": 645, "submodul": 645, "whitelist": 645, "_recordingobserv": 645, "output_tensors_dict": 645, "current_it": 645, "get_tensor_valu": 645, "_observer_forward_hook": 645, "activation_post_process": 645, "_add_observer_": 645, "named_children": 645, "leaf": 645, "add_modul": 645, "register_forward_hook": 645, "dump_tim": 645, "summarywrit": 645, "_acc": 645, "tune_": 645, "add_graph": 645, "get_observer_dict": 645, "observer_dict": 645, "is_quant": 645, "add_histogram": 645, "shell": 645, "bind_al": 645, "logdir_spec": 645, "tune_0_acc0": 645, "tune_1": 645, "tune_1_acc0": 645, "79": [645, 650], "baseline_acc_0": 645, "776": 645, "tune_1_acc_0": 645, "095": 645, "runs_v3": 645, "run_tuning_dump_tensor": 645, "inceptionv3": 645, "run_quant": 645, "topologi": 645, "nc_inceptionv3": 645, "inceptionv3_dump_tensor": 645, "eightbit": 645, "disappear": 645, "centercrop": 646, "randomcrop": 646, "cropres": 646, "decodeimag": 646, "jpeg": 646, "encodejp": 646, "alignimagechannel": 646, "68": [646, 650], "116": 646, "78": [646, 650], "103": 646, "94": [646, 650], "017": 646, "bilinearimagenet": [646, 649], "topilimag": 646, "padding_mod": 646, "border": 646, "pixel": 646, "edg": 646, "colorjitt": 646, "bright": 646, "satur": 646, "hue": 646, "jitter": 646, "tondarrai": 646, "o1": 647, "human": 647, "aggress": 647, "classic": 647, "flowchart": 647, "htmllabel": 647, "td": 647, "classdef": 647, "itemstyl": 647, "cce5ff": 647, "stroke": 647, "99ccff": 647, "s1": 647, "s2": 647, "s3": 647, "s4": 647, "s5": 647, "s6": 647, "s7": 647, "nbsp": 647, "subgraphstyl": 647, "ffffff": 647, "attempt": 647, "post_training_auto_qu": 647, "increment": 647, "ii": 647, "spent": 647, "hawq_v2_loss": 647, "model_loss": 647, "black": 647, "compli": 647, "posterior": 647, "short": 647, "loglevel": 647, "endlessli": 647, "perspect": 647, "smbo": 647, "appl": 647, "surrog": 647, "densiti": 647, "parzen": 647, "greatest": 647, "hour": 647, "dai": 647, "next_tune_cfg": 647, "overridden": 647, "replic": 647, "replica": 647, "fed": 647, "synchron": 647, "number_of_process": 647, "run_cmd": 647, "abctunestrategi": 647, "familiar": 648, "notebook": 648, "introduct": 648, "organ": 649, "logic": 649, "mobilenet_v1": 649, "40": [649, 650], "beta_1": 649, "beta_2": 649, "epsilon": 649, "sparsecategoricalcrossentropi": 649, "sum_over_batch_s": 649, "from_logit": 649, "54": [649, 650], "19": [649, 650], "09": 650, "1x": 650, "platinum": 650, "8480": 650, "8ghz": 650, "56": 650, "ht": 650, "turbo": 650, "256gb": 650, "16x16gb": 650, "ddr5": 650, "4800": 650, "mt": 650, "bio": 650, "3a14": 650, "tel2p1": 650, "microcod": 650, "0x2b0001b0": 650, "gcc": 650, "20210514": 650, "red": 650, "hat": 650, "visit": 650, "1s4c14ins1bsthroughput": 650, "sec": 650, "74": 650, "2914": 650, "621": 650, "69x": 650, "76": 650, "23": 650, "46": 650, "2160": 650, "545": 650, "47": 650, "96x": 650, "resnet101": 650, "77": 650, "37": 650, "1508": 650, "428": 650, "53x": 650, "70": 650, "44": 650, "69": 650, "3290": 650, "1229": 650, "68x": 650, "38": 650, "73": 650, "2404": 650, "1048": 650, "49": 650, "29x": 650, "71": 650, "1669": 650, "33x": 650, "1073": 650, "245": 650, "38x": 650, "374": 650, "52": 650, "18x": 650, "96": 650, "5478": 650, "1756": 650, "12x": 650, "4133": 650, "1748": 650, "36x": 650, "1534": 650, "236": 650, "62": 650, "49x": 650, "vgg19": 650, "1377": 650, "197": 650, "resnetv2": 650, "39": 650, "1125": 650, "656": 650, "71x": 650, "709": 650, "367": 650, "00": 650, "93x": 650, "152": 650, "03": 650, "497": 650, "265": 650, "87x": 650, "densenet": 650, "121": 650, "557": 650, "67": 650, "61": 650, "22x": 650, "161": 650, "29": 650, "353": 650, "235": 650, "50x": 650, "169": 650, "65": 650, "41": 650, "435": 650, "385": 650, "13x": 650, "efficientnet": 650, "b0": 650, "786": 650, "723": 650, "09x": 650, "130": 650, "23x": 650, "1291": 650, "683": 650, "89x": 650, "61x": 650, "1295": 650, "453": 650, "85x": 650, "242": 650, "31x": 650, "cnn": 650, "80x": 650, "43": 650, "81x": 650, "166": 650, "07x": 650, "16x": 650, "26": 650, "173": 650, "yolov3": 650, "82": 650, "230": 650, "92": 650, "36": 650, "37x": 650, "58x": 650, "86": 650, "416": 650, "35x": 650, "88x": 650, "51": 650, "17x": 650, "75552": 650, "50803": 650, "1s56c1ins1bsthroughput": 650, "60": 650, "64x": 650, "1673": 650, "653": 650, "56x": 650, "1170": 650, "329": 650, "55x": 650, "977": 650, "335": 650, "91x": 650, "resnest50": 650, "81": 650, "10x": 650, "resnext101_32x8d": 650, "562": 650, "109": 650, "efficientnet_b0": 650, "696": 650, "667": 650, "04x": 650, "efficientnet_b3": 650, "508": 650, "397": 650, "28x": 650, "efficientnet_b7": 650, "234": 650, "149": 650, "57x": 650, "peleenet": 650, "858": 650, "588": 650, "46x": 650, "se_resnext50_32x4d": 650, "739": 650, "283": 650, "yolo": 650, "141": 650, "99x": 650, "174": 650, "camembert": 650, "395": 650, "171": 650, "30x": 650, "53": 650, "795": 650, "341": 650, "744": 650, "343": 650, "163": 650, "funnel": 650, "182": 650, "65x": 650, "399": 650, "21x": 650, "407": 650, "412": 650, "stsb": 650, "413": 650, "39x": 650, "409": 650, "75x": 650, "401": 650, "70x": 650, "76x": 650, "reform": 650, "crime": 650, "punish": 650, "446": 650, "398": 650, "lvwerra": 650, "pegasu": 650, "samsum": 650, "102": 650, "770": 650, "450": 650, "14x": 650, "whisper": 650, "25x": 650, "abeja": 650, "neox": 650, "japanes": 650, "90x": 650, "1646": 650, "657": 650, "1098": 650, "322": 650, "41x": 650, "568": 650, "19x": 650, "1383": 650, "761": 650, "82x": 650, "32x": 650, "5701": 650, "1593": 650, "2090": 650, "685": 650, "05x": 650, "resnext101_32x16d_wsl": 650, "556": 650, "01x": 650, "86x": 650, "558": 650, "11x": 650, "lambada_openai": 650, "hellaswag": 650, "winogrand": 650, "piqa": 650, "word_perplex": 650, "4954": 650, "6409": 650, "7541": 650, "6434": 650, "8816": 650, "gptqw4g128asym": 650, "679": 650, "4895": 650, "6433": 650, "7476": 650, "6399": 650, "9945": 650, "0999": 650, "gptqw4g32asym": 650, "6829": 650, "4923": 650, "6401": 650, "7486": 650, "6410": 650, "9963": 650, "0141": 650, "gptqw4g128sym": 650, "4907": 650, "6361": 650, "7443": 650, "6390": 650, "9932": 650, "1498": 650, "gptqw4g32sym": 650, "6911": 650, "4899": 650, "6448": 650, "7497": 650, "6439": 650, "0008": 650, "0927": 650, "5049": 650, "6543": 650, "7628": 650, "6497": 650, "2862": 650, "4984": 650, "6535": 650, "7568": 650, "6473": 650, "9962": 650, "4193": 650, "6885": 650, "4973": 650, "753": 650, "6455": 650, "9935": 650, "4607": 650, "decapoda": 650, "5642": 650, "6709": 650, "7835": 650, "6887": 650, "4202": 650, "7244": 650, "5603": 650, "6614": 650, "6824": 650, "9909": 650, "5881": 650, "5911": 650, "7009": 650, "7878": 650, "7106": 650, "212": 650, "7518": 650, "5843": 650, "6961": 650, "7911": 650, "4319": 650, "7572": 650, "5898": 650, "7056": 650, "7894": 650, "7105": 650, "9998": 650, "3429": 650, "7596": 650, "5841": 650, "6977": 650, "7905": 650, "7080": 650, "4916": 650, "6266": 650, "7277": 650, "8096": 650, "7350": 650, "2384": 650, "778": 650, "624": 650, "7269": 650, "8047": 650, "7334": 650, "9979": 650, "4237": 650, "7706": 650, "6239": 650, "7285": 650, "8058": 650, "7322": 650, "4697": 650, "7836": 650, "6195": 650, "7337": 650, "9983": 650, "5604": 650, "5732": 650, "648": 650, "7715": 650, "6746": 650, "7107": 650, "6982": 650, "5637": 650, "6527": 650, "7704": 650, "6713": 650, "9950": 650, "9702": 650, "5682": 650, "6575": 650, "7758": 650, "6742": 650, "9994": 650, "9317": 650, "567": 650, "6902": 650, "7353": 650, "6622": 650, "7829": 650, "6862": 650, "9942": 650, "9635": 650, "7246": 650, "5617": 650, "6756": 650, "7797": 650, "6854": 650, "9931": 650, "2799": 650, "7312": 650, "6059": 650, "7103": 650, "7077": 650, "2213": 650, "7273": 650, "6018": 650, "7088": 650, "7742": 650, "7030": 650, "9934": 650, "2538": 650, "083": 650, "7283": 650, "6053": 650, "7024": 650, "7764": 650, "7031": 650, "1889": 650, "727": 650, "5997": 650, "7018": 650, "9916": 650, "2504": 650, "7122": 650, "8984": 650, "5933": 650, "689": 650, "7851": 650, "7075": 650, "1556": 650, "448": 650, "7675": 650, "5934": 650, "7856": 650, "7111": 650, "9984": 650, "1514": 650, "927": 650, "7566": 650, "5899": 650, "7032": 650, "9953": 650, "1374": 650, "728": 650, "4628": 650, "6456": 650, "6029": 650, "6438": 650, "5799": 650, "4542": 650, "6004": 650, "9957": 650, "0626": 650, "4789": 650, "6134": 650, "7432": 650, "5525": 650, "4731": 650, "6504": 650, "7617": 650, "6094": 650, "7828": 650, "5098": 650, "7622": 650, "6505": 650, "3242": 650, "6878": 650, "5058": 650, "6393": 650, "7633": 650, "6491": 650, "9978": 650, "5514": 650, "6864": 650, "5084": 650, "6519": 650, "6509": 650, "0006": 650, "4728": 650, "6876": 650, "5045": 650, "6474": 650, "9952": 650, "6379": 650, "5282": 650, "614": 650, "7448": 650, "6312": 650, "6377": 650, "5228": 650, "5991": 650, "6261": 650, "9919": 650, "4096": 650, "neo": 650, "6224": 650, "4271": 650, "577": 650, "722": 650, "5871": 650, "9359": 650, "6123": 650, "4227": 650, "5738": 650, "7203": 650, "5823": 650, "9917": 650, "3377": 650, "615": 650, "4259": 650, "5714": 650, "7247": 650, "9951": 650, "2083": 650, "6154": 650, "4208": 650, "5777": 650, "7198": 650, "5834": 650, "9937": 650, "3121": 650, "20b": 650, "7233": 650, "5359": 650, "7753": 650, "195": 650, "7186": 650, "5328": 650, "7699": 650, "6687": 650, "9922": 650, "3463": 650, "7268": 650, "533": 650, "659": 650, "6726": 650, "2897": 650, "5718": 650, "6859": 650, "7927": 650, "6890": 650, "9324": 650, "7006": 650, "5655": 650, "6803": 650, "7965": 650, "6857": 650, "1515": 650, "5752": 650, "6748": 650, "7845": 650, "6724": 650, "5951": 650, "6472": 650, "5716": 650, "6685": 650, "784": 650, "6678": 650, "8539": 650, "6918": 650, "5819": 650, "678": 650, "6861": 650, "8863": 650, "5765": 650, "6827": 650, "7873": 650, "6832": 650, "9958": 650, "1451": 650, "storywrit": 650, "693": 650, "5477": 650, "663": 650, "6719": 650, "9125": 650, "6661": 650, "7813": 650, "6693": 650, "9961": 650, "1137": 650, "rw": 650, "6604": 650, "5419": 650, "6598": 650, "6594": 650, "7616": 650, "6484": 650, "5369": 650, "7807": 650, "6559": 650, "9947": 650, "9411": 650, "6571": 650, "5398": 650, "6582": 650, "6579": 650, "8809": 650, "652": 650, "535": 650, "7682": 650, "6532": 650, "9906": 650, "0048": 650, "5177": 650, "6669": 650, "7824": 650, "5053": 650, "6301": 650, "5142": 650, "6654": 650, "6483": 650, "9933": 650, "8146": 650, "517": 650, "9941": 650, "1566": 650, "724": 650, "1567": 650, "716": 650, "1414": 650, "718": 650, "97x": 650, "1459": 650, "721": 650, "02x": 650, "1582": 650, "752": 650, "7139": 650, "4289": 650, "66x": 650, "4080": 650, "7236": 650, "4299": 650, "6842": 650, "4496": 650, "52x": 650, "591": 650, "178": 650, "183": 650, "590": 650, "179": 650, "42x": 650, "5703": 650, "2578": 650, "5610": 650, "2603": 650, "shufflenet": 650, "6689": 650, "3690": 650, "5692": 650, "3758": 650, "51x": 650, "googlenet": 650, "1792": 650, "1111": 650, "1821": 650, "1104": 650, "squeezenet": 650, "9472": 650, "5582": 650, "9861": 650, "5566": 650, "77x": 650, "caffenet": 650, "3348": 650, "1141": 650, "3509": 650, "1142": 650, "2426": 650, "987": 650, "2208": 650, "1016": 650, "zfnet": 650, "930": 650, "532": 650, "919": 650, "417": 650, "1880": 650, "1159": 650, "62x": 650, "1798": 650, "1151": 650, "2890": 650, "1380": 650, "2548": 650, "1362": 650, "507": 650, "94x": 650, "1286": 650, "904": 650, "1121": 650, "856": 650, "829": 650, "1044": 650, "790": 650, "849": 650, "627": 650, "79x": 650, "yolov4": 650, "duc": 650, "tini": 650, "1119": 650, "ultra": 650, "8537": 650, "1934": 650, "emot": 650, "ferplu": 650, "3568": 650, "arcfac": 650, "494": 650, "244": 650, "226": 650, "392": 650, "223": 650, "integerop": 650, "473": 650, "548": 650, "964": 650, "540": 650, "394": 650, "602": 650, "487": 650, "222": 650, "20x": 650, "189": 650, "146": 650, "125": 650, "bidaf": 650, "2757": 650, "2277": 650, "gpt2": 650, "360": 650, "213": 650, "490": 650, "304": 650, "214": 650, "347": 650, "272": 650, "216": 650, "26x": 650, "489": 650, "27x": 650, "l12": 650, "h384": 650, "1054": 650, "585": 650, "1072": 650, "890": 650, "746": 650, "268": 650, "211": 650, "l6": 650, "1958": 650, "1130": 650, "73x": 650, "electra": 650, "discrimin": 650, "1797": 650, "1077": 650, "67x": 650, "1930": 650, "1139": 650, "mini": 650, "5510": 650, "3334": 650, "5627": 650, "3365": 650, "108": 650, "110": 650, "bart": 650, "15x": 650, "deberta": 650, "168": 650, "145": 650, "spanbert": 650, "63x": 650, "multilingu": 650, "113": 650, "159": 650, "40x": 650, "distilgpt2": 650, "layoutlm": 650, "layoutlmv2": 650, "codebert": 650, "47x": 650, "fcn": 650, "perplex": 650, "2788": 650, "7002": 650, "4124": 650, "9921": 650, "3950": 650, "5711": 650, "9892": 650, "9163": 650, "7240": 650, "9902": 650, "0438": 650, "7634": 650, "1186": 650, "9944": 650, "1276": 650, "7543": 650, "6181": 650, "rtnw4g32asym": 650, "6496": 650, "9967": 650, "7964": 650, "6612": 650, "rtnw4g32sym": 650, "7941": 650, "7243": 650, "9971": 650, "taskdataset": 650, "accuracyspars": 650, "ratiospars": 650, "commentsbalancedor": 650, "unbalanc": 650, "answeringsquad": 650, "87f1": 650, "momentumunbalanc": 650, "momentumbalanc": 650, "90f1": 650, "59f1": 650, "23f1": 650, "classificationmrpc": 650, "52f1": 650, "26f1": 650, "classificationsst": 650, "61accuraci": 650, "recognitionimagenet": 650, "95top1": 650, "v5s6": 650, "detectioncoco": 650, "ap0": 650, "6ap0": 650, "393": 650, "584": 650, "34f1": 650, "lassounbalanc": 650, "classificationmnli": 650, "mm": 650, "allbalanc": 650, "32accuraci": 650, "sensitivitybalanc": 650, "classificationqqp": 650, "classificationqnli": 650, "54accuraci": 650, "em": 650, "mobilenetv2": 650, "wideresnet40": 650, "9522": 650, "8178": 650, "0213": 650, "8235": 650, "027": 650, "5494": 650, "7153": 650, "5540": 650, "0046": 650, "5523": 650, "vgg": 650, "bn": 650, "7022": 650, "7415": 650, "7025": 650, "0003": 650, "6739": 650, "7399": 650, "6845": 650, "0106": 650, "blendcnn": 650, "7034": 650, "8382": 650, "bilstm": 650, "8314": 650, "9403": 650, "9048": 650, "0734": 650, "7323": 650, "8256": 650, "8084": 650, "8814": 650, "7442": 650, "8371": 650, "0119": 650, "0115": 650, "tinybert": 650, "8018": 650, "8044": 650, "8363": 650, "8411": 650, "8025": 650, "8074": 650, "0007": 650, "0030": 650, "8626": 650, "9091": 650, "8782": 650, "8684": 650, "8259": 650, "0058": 650, "distilroberta": 650, "6057": 650, "6187": 650, "0130": 650, "c6i": 650, "2xlarg": 650, "c6a": 650, "c6g": 650, "a100cuda": 650, "executionprovid": 650}, "objects": {"": [[0, 0, 0, "-", "block_mask"], [362, 0, 0, "-", "neural_compressor"]], "neural_compressor": [[2, 0, 0, "-", "adaptor"], [174, 0, 0, "-", "algorithm"], [177, 0, 0, "-", "benchmark"], [180, 0, 0, "-", "common"], [194, 0, 0, "-", "compression"], [227, 0, 0, "-", "conf"], [229, 0, 0, "-", "config"], [230, 0, 0, "-", "contrib"], [255, 0, 0, "-", "data"], [309, 0, 0, "-", "experimental"], [369, 0, 0, "-", "metric"], [371, 0, 0, "-", "mix_precision"], [373, 0, 0, "-", "model"], [381, 0, 0, "-", "objective"], [391, 0, 0, "-", "onnxrt"], [400, 0, 0, "-", "profiling"], [422, 0, 0, "-", "quantization"], [430, 0, 0, "-", "strategy"], [442, 0, 0, "-", "template"], [457, 0, 0, "-", "tensorflow"], [527, 0, 0, "-", "torch"], [538, 0, 0, "-", "training"], [542, 0, 0, "-", "utils"], [551, 0, 0, "-", "version"]], "neural_compressor.adaptor": [[1, 0, 0, "-", "adaptor"], [3, 0, 0, "-", "keras"], [7, 0, 0, "-", "keras_utils"], [11, 0, 0, "-", "mxnet"], [12, 0, 0, "-", "mxnet_utils"], [14, 0, 0, "-", "onnxrt"], [17, 0, 0, "-", "ox_utils"], [45, 0, 0, "-", "pytorch"], [46, 0, 0, "-", "query"], [47, 0, 0, "-", "tensorflow"], [111, 0, 0, "-", "tf_utils"], [158, 0, 0, "-", "torch_utils"]], "neural_compressor.adaptor.adaptor": [[1, 1, 1, "", "Adaptor"], [1, 2, 1, "", "adaptor_registry"]], "neural_compressor.adaptor.keras": [[3, 1, 1, "", "KerasAdaptor"], [3, 1, 1, "", "KerasQuery"]], "neural_compressor.adaptor.keras_utils": [[4, 0, 0, "-", "conv2d"], [5, 0, 0, "-", "dense"], [6, 0, 0, "-", "depthwise_conv2d"], [8, 0, 0, "-", "pool2d"], [9, 0, 0, "-", "quantizer"], [10, 0, 0, "-", "separable_conv2d"]], "neural_compressor.adaptor.mxnet": [[11, 1, 1, "", "MXNetQuery"], [11, 1, 1, "", "MxNetAdaptor"]], "neural_compressor.adaptor.mxnet_utils": [[13, 0, 0, "-", "util"]], "neural_compressor.adaptor.mxnet_utils.util": [[13, 1, 1, "", "CalibCollector"], [13, 1, 1, "", "CalibData"], [13, 1, 1, "", "CollectorBase"], [13, 1, 1, "", "DataIterLoader"], [13, 1, 1, "", "DataLoaderWrap"], [13, 1, 1, "", "NameCollector"], [13, 1, 1, "", "OpType"], [13, 1, 1, "", "TensorCollector"], [13, 2, 1, "", "amp_convert"], [13, 2, 1, "", "calib_model"], [13, 2, 1, "", "check_mx_version"], [13, 2, 1, "", "combine_capabilities"], [13, 2, 1, "", "create_data_example"], [13, 2, 1, "", "distribute_calib_tensors"], [13, 2, 1, "", "ensure_list"], [13, 2, 1, "", "fuse"], [13, 2, 1, "", "get_framework_name"], [13, 2, 1, "", "is_model_quantized"], [13, 2, 1, "", "isiterable"], [13, 2, 1, "", "make_module"], [13, 2, 1, "", "make_nc_model"], [13, 2, 1, "", "make_symbol_block"], [13, 2, 1, "", "ndarray_to_device"], [13, 2, 1, "", "parse_tune_config"], [13, 2, 1, "", "prepare_dataloader"], [13, 2, 1, "", "prepare_model"], [13, 2, 1, "", "prepare_model_data"], [13, 2, 1, "", "quantize_sym_model"], [13, 2, 1, "", "query_quantizable_nodes"], [13, 2, 1, "", "run_forward"]], "neural_compressor.adaptor.onnxrt": [[14, 1, 1, "", "ONNXRTQuery"], [14, 1, 1, "", "ONNXRT_IntegerOpsAdaptor"], [14, 1, 1, "", "ONNXRT_QDQAdaptor"], [14, 1, 1, "", "ONNXRT_QLinearOpsAdaptor"], [14, 1, 1, "", "ONNXRT_WeightOnlyAdaptor"], [14, 1, 1, "", "ONNXRUNTIMEAdaptor"]], "neural_compressor.adaptor.ox_utils": [[15, 0, 0, "-", "calibration"], [16, 0, 0, "-", "calibrator"], [29, 0, 0, "-", "operators"], [41, 0, 0, "-", "quantizer"], [42, 0, 0, "-", "smooth_quant"], [43, 0, 0, "-", "util"], [44, 0, 0, "-", "weight_only"]], "neural_compressor.adaptor.ox_utils.calibration": [[15, 1, 1, "", "ONNXRTAugment"]], "neural_compressor.adaptor.ox_utils.calibrator": [[16, 1, 1, "", "CalibratorBase"], [16, 1, 1, "", "HistogramCollector"], [16, 1, 1, "", "KLCalibrator"], [16, 1, 1, "", "MinMaxCalibrator"], [16, 1, 1, "", "PercentileCalibrator"], [16, 2, 1, "", "calib_registry"], [16, 2, 1, "", "smooth_distribution"]], "neural_compressor.adaptor.ox_utils.operators": [[18, 0, 0, "-", "activation"], [19, 0, 0, "-", "argmax"], [20, 0, 0, "-", "attention"], [21, 0, 0, "-", "binary_op"], [22, 0, 0, "-", "concat"], [23, 0, 0, "-", "conv"], [24, 0, 0, "-", "direct_q8"], [25, 0, 0, "-", "embed_layernorm"], [26, 0, 0, "-", "gather"], [27, 0, 0, "-", "gavgpool"], [28, 0, 0, "-", "gemm"], [30, 0, 0, "-", "lstm"], [31, 0, 0, "-", "matmul"], [32, 0, 0, "-", "maxpool"], [33, 0, 0, "-", "norm"], [34, 0, 0, "-", "ops"], [35, 0, 0, "-", "pad"], [36, 0, 0, "-", "pooling"], [37, 0, 0, "-", "reduce"], [38, 0, 0, "-", "resize"], [39, 0, 0, "-", "split"], [40, 0, 0, "-", "unary_op"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[18, 1, 1, "", "ActivationOperator"], [18, 1, 1, "", "Float16ActivationOperator"], [18, 1, 1, "", "QActivationOperator"], [18, 1, 1, "", "RemovableActivationOperator"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[19, 1, 1, "", "ArgMaxOperator"], [19, 1, 1, "", "QArgMaxOperator"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[20, 1, 1, "", "AttentionOperator"], [20, 1, 1, "", "QAttentionOperator"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[21, 1, 1, "", "BinaryDirect8BitOperator"], [21, 1, 1, "", "BinaryOperator"], [21, 1, 1, "", "Float16BinaryOperator"], [21, 1, 1, "", "QBinaryOperator"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[22, 1, 1, "", "ConcatOperator"], [22, 1, 1, "", "QConcatOperator"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[23, 1, 1, "", "ConvOperator"], [23, 1, 1, "", "QConvOperator"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[24, 1, 1, "", "Direct8BitOperator"], [24, 1, 1, "", "QDirectOperator"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[25, 1, 1, "", "EmbedLayerNormalizationOperator"], [25, 1, 1, "", "QEmbedLayerNormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[26, 1, 1, "", "GatherOperator"], [26, 1, 1, "", "QGatherOperator"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[27, 1, 1, "", "GlobalAveragePoolOperator"], [27, 1, 1, "", "QGlobalAveragePoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[28, 1, 1, "", "GemmOperator"], [28, 1, 1, "", "QGemmOperator"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[30, 1, 1, "", "LSTMOperator"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[31, 1, 1, "", "FusedMatMulOperator"], [31, 1, 1, "", "MatMulOperator"], [31, 1, 1, "", "QMatMulOperator"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[32, 1, 1, "", "MaxPoolOperator"], [32, 1, 1, "", "QMaxPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.norm": [[33, 1, 1, "", "BatchNormalizationOperator"], [33, 1, 1, "", "NormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[34, 1, 1, "", "Operator"], [34, 1, 1, "", "QOperator"], [34, 2, 1, "", "op_registry"], [34, 2, 1, "", "qop_registry"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[35, 1, 1, "", "PadOperator"], [35, 1, 1, "", "QPadOperator"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[36, 1, 1, "", "PoolOperator"], [36, 1, 1, "", "QPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.reduce": [[37, 1, 1, "", "ReduceMinMaxOperator"], [37, 1, 1, "", "ReduceOperator"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[38, 1, 1, "", "QResizeOperator"], [38, 1, 1, "", "ResizeOperator"]], "neural_compressor.adaptor.ox_utils.operators.split": [[39, 1, 1, "", "QSplitOperator"], [39, 1, 1, "", "SplitOperator"]], "neural_compressor.adaptor.ox_utils.operators.unary_op": [[40, 1, 1, "", "UnaryDirect8BitOperator"], [40, 1, 1, "", "UnaryOperator"]], "neural_compressor.adaptor.ox_utils.quantizer": [[41, 1, 1, "", "Quantizer"]], "neural_compressor.adaptor.ox_utils.smooth_quant": [[42, 1, 1, "", "ORTSmoothQuant"], [42, 2, 1, "", "get_quant_dequant_output"], [42, 2, 1, "", "make_sub_graph"], [42, 2, 1, "", "quant_dequant_data"]], "neural_compressor.adaptor.ox_utils.util": [[43, 1, 1, "", "QuantFormat"], [43, 1, 1, "", "QuantType"], [43, 1, 1, "", "QuantizationMode"], [43, 1, 1, "", "QuantizedInitializer"], [43, 1, 1, "", "QuantizedValue"], [43, 1, 1, "", "QuantizedValueType"], [43, 1, 1, "", "ValueInfo"], [43, 2, 1, "", "attribute_to_kwarg"], [43, 2, 1, "", "calculate_scale_zp"], [43, 2, 1, "", "cast_tensor"], [43, 2, 1, "", "collate_preds"], [43, 2, 1, "", "dequantize_data"], [43, 2, 1, "", "dequantize_data_with_scale_zero"], [43, 2, 1, "", "dtype_to_name"], [43, 2, 1, "", "find_by_name"], [43, 2, 1, "", "float_to_bfloat16"], [43, 2, 1, "", "float_to_float16"], [43, 2, 1, "", "get_node_original_name"], [43, 2, 1, "", "infer_shapes"], [43, 2, 1, "", "is_B_transposed"], [43, 2, 1, "", "make_dquant_node"], [43, 2, 1, "", "make_quant_node"], [43, 2, 1, "", "quantize_data"], [43, 2, 1, "", "quantize_data_per_channel"], [43, 2, 1, "", "quantize_data_with_scale_zero"], [43, 2, 1, "", "quantize_nparray"], [43, 2, 1, "", "remove_init_from_model_input"], [43, 2, 1, "", "simple_progress_bar"], [43, 2, 1, "", "split_shared_bias"], [43, 2, 1, "", "to_numpy"], [43, 2, 1, "", "trt_env_setup"]], "neural_compressor.adaptor.ox_utils.weight_only": [[44, 2, 1, "", "apply_awq_clip"], [44, 2, 1, "", "apply_awq_scale"], [44, 2, 1, "", "awq_quantize"], [44, 2, 1, "", "get_blob_size"], [44, 2, 1, "", "get_weight_scale"], [44, 2, 1, "", "gptq"], [44, 2, 1, "", "gptq_quantize"], [44, 2, 1, "", "make_matmul_weight_only_node"], [44, 2, 1, "", "pad_tensor"], [44, 2, 1, "", "prepare_inputs"], [44, 2, 1, "", "qdq_tensor"], [44, 2, 1, "", "quant_tensor"], [44, 2, 1, "", "rtn_quantize"]], "neural_compressor.adaptor.pytorch": [[45, 1, 1, "", "PyTorchAdaptor"], [45, 1, 1, "", "PyTorchQuery"], [45, 1, 1, "", "PyTorchWeightOnlyAdaptor"], [45, 1, 1, "", "PyTorch_FXAdaptor"], [45, 1, 1, "", "PyTorch_IPEXAdaptor"], [45, 1, 1, "", "TemplateAdaptor"], [45, 2, 1, "", "get_ops_recursively"]], "neural_compressor.adaptor.query": [[46, 1, 1, "", "QueryBackendCapability"]], "neural_compressor.adaptor.tensorflow": [[47, 1, 1, "", "TensorFlowAdaptor"], [47, 1, 1, "", "TensorflowQuery"], [47, 1, 1, "", "Tensorflow_ITEXAdaptor"]], "neural_compressor.adaptor.tf_utils": [[48, 0, 0, "-", "graph_converter"], [49, 0, 0, "-", "graph_converter_without_calib"], [87, 0, 0, "-", "graph_rewriter"], [110, 0, 0, "-", "graph_util"], [112, 0, 0, "-", "quantize_graph"], [139, 0, 0, "-", "quantize_graph_common"], [140, 0, 0, "-", "smooth_quant_calibration"], [141, 0, 0, "-", "smooth_quant_scaler"], [142, 0, 0, "-", "tf2onnx_converter"], [145, 0, 0, "-", "transform_graph"], [148, 0, 0, "-", "util"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[48, 1, 1, "", "GraphConverter"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[49, 1, 1, "", "GraphConverterWithoutCalib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[52, 0, 0, "-", "bf16"], [76, 0, 0, "-", "generic"], [86, 0, 0, "-", "graph_base"], [95, 0, 0, "-", "int8"], [101, 0, 0, "-", "onnx"], [106, 0, 0, "-", "qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[50, 0, 0, "-", "bf16_convert"], [51, 0, 0, "-", "dequantize_cast_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[50, 1, 1, "", "BF16Convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer": [[51, 1, 1, "", "DequantizeCastOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[53, 0, 0, "-", "convert_add_to_biasadd"], [54, 0, 0, "-", "convert_layout"], [55, 0, 0, "-", "convert_leakyrelu"], [56, 0, 0, "-", "convert_nan_to_random"], [57, 0, 0, "-", "convert_placeholder_to_const"], [58, 0, 0, "-", "dilated_contraction"], [59, 0, 0, "-", "dummy_biasadd"], [60, 0, 0, "-", "expanddims_optimizer"], [61, 0, 0, "-", "fetch_weight_from_reshape"], [62, 0, 0, "-", "fold_batch_norm"], [63, 0, 0, "-", "fold_constant"], [64, 0, 0, "-", "fuse_biasadd_add"], [65, 0, 0, "-", "fuse_column_wise_mul"], [66, 0, 0, "-", "fuse_conv_with_math"], [67, 0, 0, "-", "fuse_decomposed_bn"], [68, 0, 0, "-", "fuse_decomposed_in"], [69, 0, 0, "-", "fuse_gelu"], [70, 0, 0, "-", "fuse_layer_norm"], [71, 0, 0, "-", "fuse_pad_with_conv"], [72, 0, 0, "-", "fuse_pad_with_fp32_conv"], [73, 0, 0, "-", "fuse_reshape_transpose"], [74, 0, 0, "-", "graph_cse_optimizer"], [75, 0, 0, "-", "grappler_pass"], [77, 0, 0, "-", "insert_print_node"], [78, 0, 0, "-", "move_squeeze_after_relu"], [79, 0, 0, "-", "pre_optimize"], [80, 0, 0, "-", "remove_training_nodes"], [81, 0, 0, "-", "rename_batch_norm"], [82, 0, 0, "-", "split_shared_input"], [83, 0, 0, "-", "strip_equivalent_nodes"], [84, 0, 0, "-", "strip_unused_nodes"], [85, 0, 0, "-", "switch_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[53, 1, 1, "", "ConvertAddToBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[54, 1, 1, "", "ConvertLayoutOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[55, 1, 1, "", "ConvertLeakyReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[56, 1, 1, "", "ConvertNanToRandom"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[57, 1, 1, "", "ConvertPlaceholderToConst"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[58, 1, 1, "", "DilatedContraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[59, 1, 1, "", "InjectDummyBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[60, 1, 1, "", "ExpandDimsOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[61, 1, 1, "", "FetchWeightFromReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[62, 1, 1, "", "FoldBatchNormNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[63, 1, 1, "", "GraphFoldConstantOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[64, 1, 1, "", "FuseBiasAddAndAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[65, 1, 1, "", "FuseColumnWiseMulOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[66, 1, 1, "", "FuseConvWithMathOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[67, 1, 1, "", "FuseDecomposedBNOptimizer"], [67, 2, 1, "", "bypass_reshape"], [67, 2, 1, "", "get_const_dim_count"], [67, 2, 1, "", "node_from_map"], [67, 2, 1, "", "node_name_from_input"], [67, 2, 1, "", "valid_reshape_inputs"], [67, 2, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[68, 1, 1, "", "FuseDecomposedINOptimizer"], [68, 2, 1, "", "bypass_reshape"], [68, 2, 1, "", "get_const_dim_count"], [68, 2, 1, "", "node_from_map"], [68, 2, 1, "", "node_name_from_input"], [68, 2, 1, "", "valid_reshape_inputs"], [68, 2, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[69, 1, 1, "", "FuseGeluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[70, 1, 1, "", "FuseLayerNormOptimizer"], [70, 2, 1, "", "node_from_map"], [70, 2, 1, "", "node_name_from_input"], [70, 2, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[71, 1, 1, "", "FusePadWithConv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[72, 1, 1, "", "FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[73, 1, 1, "", "FuseTransposeReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[74, 1, 1, "", "GraphCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[75, 1, 1, "", "GrapplerOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[77, 1, 1, "", "InsertPrintMinMaxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[78, 1, 1, "", "MoveSqueezeAfterReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[79, 1, 1, "", "PreOptimization"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[80, 1, 1, "", "RemoveTrainingNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[81, 1, 1, "", "RenameBatchNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[82, 1, 1, "", "SplitSharedInputOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[83, 1, 1, "", "StripEquivalentNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[84, 1, 1, "", "StripUnusedNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[85, 1, 1, "", "SwitchOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[86, 1, 1, "", "GraphRewriterBase"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[88, 0, 0, "-", "freeze_fake_quant"], [89, 0, 0, "-", "freeze_value"], [90, 0, 0, "-", "freeze_value_without_calib"], [91, 0, 0, "-", "fuse_conv_redundant_dequantize"], [92, 0, 0, "-", "fuse_conv_requantize"], [93, 0, 0, "-", "fuse_matmul_redundant_dequantize"], [94, 0, 0, "-", "fuse_matmul_requantize"], [96, 0, 0, "-", "meta_op_optimizer"], [97, 0, 0, "-", "post_hostconst_converter"], [98, 0, 0, "-", "post_quantized_op_cse"], [99, 0, 0, "-", "rnn_convert"], [100, 0, 0, "-", "scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[88, 1, 1, "", "FreezeFakeQuantOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[89, 1, 1, "", "FreezeValueTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[90, 1, 1, "", "FreezeValueWithoutCalibTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[91, 1, 1, "", "FuseConvRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[92, 1, 1, "", "FuseConvRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[93, 1, 1, "", "FuseMatMulRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[94, 1, 1, "", "FuseMatMulRequantizeDequantizeNewAPITransformer"], [94, 1, 1, "", "FuseMatMulRequantizeDequantizeTransformer"], [94, 1, 1, "", "FuseMatMulRequantizeNewAPITransformer"], [94, 1, 1, "", "FuseMatMulRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[96, 1, 1, "", "MetaInfoChangingMemOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[97, 1, 1, "", "PostHostConstConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[98, 1, 1, "", "PostCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[99, 1, 1, "", "QuantizedRNNConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[100, 1, 1, "", "ScaleProPagationTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[102, 0, 0, "-", "onnx_graph"], [103, 0, 0, "-", "onnx_node"], [104, 0, 0, "-", "onnx_schema"], [105, 0, 0, "-", "tf2onnx_utils"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[102, 1, 1, "", "OnnxGraph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[103, 1, 1, "", "OnnxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[104, 1, 1, "", "OnnxOpSchema"], [104, 2, 1, "", "get_max_supported_opset_version"], [104, 2, 1, "", "get_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[105, 1, 1, "", "SeqType"], [105, 2, 1, "", "add_port_to_name"], [105, 2, 1, "", "are_shapes_equal"], [105, 2, 1, "", "assert_error"], [105, 2, 1, "", "compute_const_folding_using_tf"], [105, 2, 1, "", "convert_tensorflow_tensor_to_onnx"], [105, 2, 1, "", "find_opset"], [105, 2, 1, "", "get_index_from_strided_slice_of_shape"], [105, 2, 1, "", "get_subgraphs_from_onnx"], [105, 2, 1, "", "get_tensorflow_node_attr"], [105, 2, 1, "", "get_tensorflow_node_shape_attr"], [105, 2, 1, "", "get_tensorflow_tensor_data"], [105, 2, 1, "", "get_tensorflow_tensor_shape"], [105, 2, 1, "", "infer_onnx_shape_dtype"], [105, 2, 1, "", "initialize_name_counter"], [105, 2, 1, "", "is_list_or_tuple"], [105, 2, 1, "", "is_onnx_domain"], [105, 2, 1, "", "make_onnx_inputs_outputs"], [105, 2, 1, "", "make_onnx_shape"], [105, 2, 1, "", "map_numpy_to_onnx_dtype"], [105, 2, 1, "", "map_onnx_to_numpy_type"], [105, 2, 1, "", "map_tensorflow_dtype"], [105, 2, 1, "", "read_tensorflow_node_attrs"], [105, 2, 1, "", "save_protobuf"], [105, 2, 1, "", "set_name"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[107, 0, 0, "-", "insert_qdq_pattern"], [108, 0, 0, "-", "merge_duplicated_qdq"], [109, 0, 0, "-", "share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[107, 1, 1, "", "GenerateGraphWithQDQPattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[108, 1, 1, "", "MergeDuplicatedQDQOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[109, 1, 1, "", "ShareQDQForItexYPatternOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_util": [[110, 1, 1, "", "GraphAnalyzer"], [110, 1, 1, "", "GraphRewriterHelper"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[114, 0, 0, "-", "qat"], [130, 0, 0, "-", "qdq"], [132, 0, 0, "-", "quantize_graph_base"], [133, 0, 0, "-", "quantize_graph_bn"], [134, 0, 0, "-", "quantize_graph_concatv2"], [135, 0, 0, "-", "quantize_graph_conv"], [136, 0, 0, "-", "quantize_graph_for_intel_cpu"], [137, 0, 0, "-", "quantize_graph_matmul"], [138, 0, 0, "-", "quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[113, 0, 0, "-", "fake_quantize"], [115, 0, 0, "-", "quantize_config"], [116, 0, 0, "-", "quantize_helper"], [117, 0, 0, "-", "quantize_layers"], [122, 0, 0, "-", "quantize_wrapper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[113, 1, 1, "", "FakeQuantize"], [113, 1, 1, "", "FakeQuantizeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[115, 1, 1, "", "QuantizeConfig"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[116, 2, 1, "", "init_quantize_config"], [116, 2, 1, "", "qat_clone_function"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[118, 0, 0, "-", "optimize_layer"], [119, 0, 0, "-", "quantize_layer_add"], [120, 0, 0, "-", "quantize_layer_base"], [121, 0, 0, "-", "quantize_layer_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[118, 2, 1, "", "config_quantizable_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[119, 1, 1, "", "QuantizeLayerAdd"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[120, 1, 1, "", "QuantizeLayerBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[121, 1, 1, "", "QuantizeLayerBatchNormalization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[122, 1, 1, "", "QuantizeWrapper"], [122, 1, 1, "", "QuantizeWrapperBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[123, 0, 0, "-", "fuse_qdq_bn"], [124, 0, 0, "-", "fuse_qdq_concatv2"], [125, 0, 0, "-", "fuse_qdq_conv"], [126, 0, 0, "-", "fuse_qdq_deconv"], [127, 0, 0, "-", "fuse_qdq_in"], [128, 0, 0, "-", "fuse_qdq_matmul"], [129, 0, 0, "-", "fuse_qdq_pooling"], [131, 0, 0, "-", "optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[123, 1, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[124, 1, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[125, 1, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[126, 1, 1, "", "FuseNodeStartWithDeconv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[127, 1, 1, "", "FuseNodeStartWithFusedInstanceNorm"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[128, 1, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[129, 1, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[131, 1, 1, "", "OptimizeQDQGraph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[132, 1, 1, "", "QuantizeGraphBase"], [132, 1, 1, "", "QuantizeNodeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[133, 1, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[134, 1, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[135, 1, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[136, 1, 1, "", "QuantizeGraphForIntel"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[137, 1, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[138, 1, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[139, 1, 1, "", "QuantizeGraphHelper"]], "neural_compressor.adaptor.tf_utils.smooth_quant_calibration": [[140, 1, 1, "", "SmoothQuantCalibration"], [140, 1, 1, "", "SmoothQuantCalibrationLLM"]], "neural_compressor.adaptor.tf_utils.smooth_quant_scaler": [[141, 1, 1, "", "SmoothQuantScaler"], [141, 1, 1, "", "SmoothQuantScalerLLM"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[142, 1, 1, "", "TensorflowQDQToOnnxQDQConverter"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[143, 0, 0, "-", "bias_correction"], [144, 0, 0, "-", "graph_transform_base"], [146, 0, 0, "-", "insert_logging"], [147, 0, 0, "-", "rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[143, 1, 1, "", "BiasCorrection"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[144, 1, 1, "", "GraphTransformBase"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[146, 1, 1, "", "InsertLogging"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[147, 1, 1, "", "RerangeQuantizedConcat"]], "neural_compressor.adaptor.tf_utils.util": [[148, 2, 1, "", "apply_inlining"], [148, 2, 1, "", "collate_tf_preds"], [148, 2, 1, "", "construct_function_from_graph_def"], [148, 2, 1, "", "disable_random"], [148, 2, 1, "", "fix_ref_type_of_graph_def"], [148, 2, 1, "", "generate_feed_dict"], [148, 2, 1, "", "get_estimator_graph"], [148, 2, 1, "", "get_graph_def"], [148, 2, 1, "", "get_input_output_node_names"], [148, 2, 1, "", "get_model_input_shape"], [148, 2, 1, "", "get_tensor_by_name"], [148, 2, 1, "", "get_tensor_val_from_graph_node"], [148, 2, 1, "", "get_weight_from_input_tensor"], [148, 2, 1, "", "int8_node_name_reverse"], [148, 2, 1, "", "is_ckpt_format"], [148, 2, 1, "", "is_saved_model_format"], [148, 2, 1, "", "iterator_sess_run"], [148, 2, 1, "", "parse_saved_model"], [148, 2, 1, "", "read_graph"], [148, 2, 1, "", "reconstruct_saved_model"], [148, 2, 1, "", "strip_equivalent_nodes"], [148, 2, 1, "", "strip_unused_nodes"], [148, 2, 1, "", "tf_diagnosis_helper"], [148, 2, 1, "", "version1_eq_version2"], [148, 2, 1, "", "version1_gt_version2"], [148, 2, 1, "", "version1_gte_version2"], [148, 2, 1, "", "version1_lt_version2"], [148, 2, 1, "", "version1_lte_version2"], [148, 2, 1, "", "write_graph"]], "neural_compressor.adaptor.torch_utils": [[151, 0, 0, "-", "autoround"], [154, 0, 0, "-", "awq"], [155, 0, 0, "-", "bf16_convert"], [156, 0, 0, "-", "gptq"], [157, 0, 0, "-", "hawq_metric"], [159, 0, 0, "-", "layer_wise_quant"], [164, 0, 0, "-", "mixed_precision"], [165, 0, 0, "-", "model_wrapper"], [166, 0, 0, "-", "pattern_detector"], [167, 0, 0, "-", "smooth_quant"], [168, 0, 0, "-", "symbolic_trace"], [169, 0, 0, "-", "teq"], [170, 0, 0, "-", "util"], [171, 0, 0, "-", "weight_only"]], "neural_compressor.adaptor.torch_utils.autoround": [[149, 0, 0, "-", "autoround"], [150, 0, 0, "-", "export"], [152, 0, 0, "-", "model_wrapper"], [153, 0, 0, "-", "sign_sgd"]], "neural_compressor.adaptor.torch_utils.autoround.autoround": [[149, 1, 1, "", "AutoAdamRound"], [149, 1, 1, "", "AutoOPTRound"], [149, 1, 1, "", "AutoRound"], [149, 1, 1, "", "SaveInputs"], [149, 1, 1, "", "WrapperMultiblock"], [149, 2, 1, "", "block_forward"], [149, 2, 1, "", "check_is_cpu"], [149, 2, 1, "", "collect_minmax_scale"], [149, 2, 1, "", "collect_round_v"], [149, 2, 1, "", "get_batch_dim"], [149, 2, 1, "", "get_block_names"], [149, 2, 1, "", "get_dataloader"], [149, 2, 1, "", "get_module"], [149, 2, 1, "", "get_scale_shape"], [149, 2, 1, "", "get_tokenizer_function"], [149, 2, 1, "", "move_input_to_device"], [149, 2, 1, "", "quant_weight"], [149, 2, 1, "", "quant_weight_actor"], [149, 2, 1, "", "quant_weight_asym"], [149, 2, 1, "", "quant_weight_sym"], [149, 2, 1, "", "quant_weight_w_scale"], [149, 2, 1, "", "round_ste"], [149, 2, 1, "", "sampling_inputs"], [149, 2, 1, "", "set_module"], [149, 2, 1, "", "unwrapper_block"], [149, 2, 1, "", "wrapper_block"]], "neural_compressor.adaptor.torch_utils.autoround.export": [[150, 2, 1, "", "export_compressed_model"]], "neural_compressor.adaptor.torch_utils.autoround.sign_sgd": [[153, 1, 1, "", "SGD"], [153, 2, 1, "", "sgd"]], "neural_compressor.adaptor.torch_utils.awq": [[154, 1, 1, "", "ActAwareWeightQuant"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[155, 1, 1, "", "BF16ModuleWrapper"], [155, 2, 1, "", "Convert"], [155, 2, 1, "", "bf16_symbolic_trace"]], "neural_compressor.adaptor.torch_utils.gptq": [[156, 1, 1, "", "GPTQ"], [156, 1, 1, "", "GPTQuantizer"], [156, 2, 1, "", "find_layers"], [156, 2, 1, "", "find_layers_name"], [156, 2, 1, "", "is_leaf"], [156, 2, 1, "", "log_quantizable_layers_per_transformer"], [156, 2, 1, "", "quantize"], [156, 2, 1, "", "trace_gptq_target_blocks"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[157, 1, 1, "", "HessianTrace"], [157, 1, 1, "", "Node_collector"], [157, 2, 1, "", "compare_weights"], [157, 2, 1, "", "hawq_top"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant": [[160, 0, 0, "-", "modified_pickle"], [161, 0, 0, "-", "quantize"], [162, 0, 0, "-", "torch_load"], [163, 0, 0, "-", "utils"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle": [[160, 3, 1, "", "PickleError"], [160, 3, 1, "", "PicklingError"], [160, 3, 1, "", "UnpicklingError"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize": [[161, 1, 1, "", "LayerWiseQuant"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load": [[162, 2, 1, "", "load"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils": [[163, 2, 1, "", "dowload_hf_model"], [163, 2, 1, "", "get_children"], [163, 2, 1, "", "get_module"], [163, 2, 1, "", "get_named_children"], [163, 2, 1, "", "get_super_module_by_name"], [163, 2, 1, "", "load_empty_model"], [163, 2, 1, "", "load_layer_wise_quantized_model"], [163, 2, 1, "", "load_tensor"], [163, 2, 1, "", "load_tensor_from_shard"], [163, 2, 1, "", "update_module"]], "neural_compressor.adaptor.torch_utils.mixed_precision": [[164, 2, 1, "", "ipex_mixed_precision"]], "neural_compressor.adaptor.torch_utils.model_wrapper": [[165, 1, 1, "", "FakeAffineTensorQuantFunction"], [165, 1, 1, "", "MulLinear"], [165, 1, 1, "", "TEQLinearFakeQuant"]], "neural_compressor.adaptor.torch_utils.pattern_detector": [[166, 1, 1, "", "TransformerBasedModelBlockPatternDetector"]], "neural_compressor.adaptor.torch_utils.smooth_quant": [[167, 1, 1, "", "TorchSmoothQuant"], [167, 2, 1, "", "get_module"], [167, 2, 1, "", "set_module"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[168, 2, 1, "", "symbolic_trace"], [168, 2, 1, "", "trace_and_fuse_sub_graph"]], "neural_compressor.adaptor.torch_utils.teq": [[169, 1, 1, "", "TEQuantizer"]], "neural_compressor.adaptor.torch_utils.util": [[170, 2, 1, "", "append_attr"], [170, 2, 1, "", "auto_copy"], [170, 2, 1, "", "calculate_quant_min_max"], [170, 2, 1, "", "calibration"], [170, 2, 1, "", "check_cfg_and_qconfig"], [170, 2, 1, "", "collate_torch_preds"], [170, 2, 1, "", "collect_weight_info"], [170, 2, 1, "", "fetch_module"], [170, 2, 1, "", "forward_wrapper"], [170, 2, 1, "", "generate_activation_observer"], [170, 2, 1, "", "get_absorb_layers"], [170, 2, 1, "", "get_block_prefix"], [170, 2, 1, "", "get_depth"], [170, 2, 1, "", "get_dict_at_depth"], [170, 2, 1, "", "get_element_under_depth"], [170, 2, 1, "", "get_embedding_contiguous"], [170, 2, 1, "", "get_example_input"], [170, 2, 1, "", "get_fallback_order"], [170, 2, 1, "", "get_hidden_states"], [170, 2, 1, "", "get_module_input_output"], [170, 2, 1, "", "get_mse_order_per_fp32"], [170, 2, 1, "", "get_mse_order_per_int8"], [170, 2, 1, "", "get_op_type_by_name"], [170, 2, 1, "", "get_quantizable_ops_from_cfgs"], [170, 2, 1, "", "get_torch_version"], [170, 2, 1, "", "input2tuple"], [170, 2, 1, "", "is_fused_module"], [170, 2, 1, "", "match_datatype_pattern"], [170, 2, 1, "", "move_input_device"], [170, 2, 1, "", "paser_cfgs"], [170, 2, 1, "", "set_module"], [170, 2, 1, "", "simple_inference"], [170, 2, 1, "", "update_sq_scale"]], "neural_compressor.adaptor.torch_utils.weight_only": [[171, 2, 1, "", "awq_quantize"], [171, 2, 1, "", "gptq_quantize"], [171, 2, 1, "", "qdq_weight_actor"], [171, 2, 1, "", "qdq_weight_asym"], [171, 2, 1, "", "qdq_weight_sym"], [171, 2, 1, "", "quant_weight"], [171, 2, 1, "", "quant_weight_w_scale"], [171, 2, 1, "", "quantize_4bit"], [171, 2, 1, "", "rtn_quantize"], [171, 2, 1, "", "search_clip"], [171, 2, 1, "", "teq_quantize"]], "neural_compressor.algorithm": [[172, 0, 0, "-", "algorithm"], [173, 0, 0, "-", "fast_bias_correction"], [175, 0, 0, "-", "smooth_quant"], [176, 0, 0, "-", "weight_correction"]], "neural_compressor.algorithm.algorithm": [[172, 1, 1, "", "ALGORITHMS"], [172, 1, 1, "", "Algorithm"], [172, 1, 1, "", "AlgorithmScheduler"], [172, 2, 1, "", "algorithm_registry"]], "neural_compressor.algorithm.fast_bias_correction": [[173, 1, 1, "", "FastBiasCorrection"]], "neural_compressor.algorithm.smooth_quant": [[175, 1, 1, "", "SmoothQuant"]], "neural_compressor.algorithm.weight_correction": [[176, 1, 1, "", "WeightCorrection"]], "neural_compressor.benchmark": [[177, 2, 1, "", "benchmark_with_raw_cmd"], [177, 2, 1, "", "call_one"], [177, 2, 1, "", "config_instance"], [177, 2, 1, "", "fit"], [177, 2, 1, "", "generate_prefix"], [177, 2, 1, "", "get_architecture"], [177, 2, 1, "", "get_bounded_threads"], [177, 2, 1, "", "get_core_ids"], [177, 2, 1, "", "get_physical_ids"], [177, 2, 1, "", "get_threads"], [177, 2, 1, "", "get_threads_per_core"], [177, 2, 1, "", "profile"], [177, 2, 1, "", "run_instance"], [177, 2, 1, "", "set_all_env_var"], [177, 2, 1, "", "set_env_var"], [177, 2, 1, "", "summary_benchmark"]], "neural_compressor.common": [[178, 0, 0, "-", "base_config"], [179, 0, 0, "-", "base_tuning"], [182, 0, 0, "-", "utils"]], "neural_compressor.common.base_config": [[178, 1, 1, "", "BaseConfig"], [178, 1, 1, "", "ComposableConfig"], [178, 2, 1, "", "register_config"], [178, 2, 1, "", "register_supported_configs_for_fwk"]], "neural_compressor.common.base_tuning": [[179, 1, 1, "", "Evaluator"], [179, 1, 1, "", "TuningConfig"], [179, 1, 1, "", "TuningLogger"]], "neural_compressor.common.utils": [[181, 0, 0, "-", "constants"], [183, 0, 0, "-", "logger"], [184, 0, 0, "-", "utility"]], "neural_compressor.common.utils.logger": [[183, 1, 1, "", "Logger"]], "neural_compressor.common.utils.utility": [[184, 2, 1, "", "set_random_seed"], [184, 2, 1, "", "set_resume_from"], [184, 2, 1, "", "set_tensorboard"], [184, 2, 1, "", "set_workspace"]], "neural_compressor.compression": [[185, 0, 0, "-", "callbacks"], [187, 0, 0, "-", "distillation"], [190, 0, 0, "-", "hpo"], [197, 0, 0, "-", "pruner"]], "neural_compressor.compression.callbacks": [[185, 1, 1, "", "BaseCallbacks"], [185, 1, 1, "", "DistillationCallbacks"], [185, 1, 1, "", "PruningCallbacks"], [185, 1, 1, "", "QuantizationAwareTrainingCallbacks"]], "neural_compressor.compression.callbacks.DistillationCallbacks": [[185, 4, 1, "", "_epoch_ran"], [185, 4, 1, "", "best_model"], [185, 4, 1, "", "best_score"], [185, 4, 1, "", "eval_frequency"]], "neural_compressor.compression.distillation": [[186, 0, 0, "-", "criterions"], [188, 0, 0, "-", "optimizers"], [189, 0, 0, "-", "utility"]], "neural_compressor.compression.distillation.criterions": [[186, 1, 1, "", "Criterions"], [186, 1, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [186, 1, 1, "", "KnowledgeDistillationFramework"], [186, 1, 1, "", "KnowledgeDistillationLoss"], [186, 1, 1, "", "PyTorchCriterions"], [186, 1, 1, "", "PyTorchCrossEntropyLoss"], [186, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLoss"], [186, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"], [186, 1, 1, "", "PyTorchKnowledgeDistillationLoss"], [186, 1, 1, "", "PyTorchKnowledgeDistillationLossWrapper"], [186, 1, 1, "", "PyTorchSelfKnowledgeDistillationLoss"], [186, 1, 1, "", "PyTorchSelfKnowledgeDistillationLossWrapper"], [186, 1, 1, "", "SelfKnowledgeDistillationLoss"], [186, 1, 1, "", "TensorFlowCrossEntropyLoss"], [186, 1, 1, "", "TensorFlowSparseCategoricalCrossentropy"], [186, 1, 1, "", "TensorflowCriterions"], [186, 1, 1, "", "TensorflowKnowledgeDistillationLoss"], [186, 1, 1, "", "TensorflowKnowledgeDistillationLossExternal"], [186, 1, 1, "", "TensorflowKnowledgeDistillationLossWrapper"], [186, 2, 1, "", "criterion_registry"]], "neural_compressor.compression.distillation.optimizers": [[188, 1, 1, "", "Optimizers"], [188, 1, 1, "", "PyTorchOptimizers"], [188, 1, 1, "", "PyTorchSGD"], [188, 1, 1, "", "TensorFlowAdam"], [188, 1, 1, "", "TensorFlowAdamW"], [188, 1, 1, "", "TensorFlowSGD"], [188, 1, 1, "", "TensorflowOptimizers"], [188, 2, 1, "", "optimizer_registry"]], "neural_compressor.compression.distillation.utility": [[189, 2, 1, "", "get_activation"], [189, 2, 1, "", "record_output"]], "neural_compressor.compression.hpo": [[191, 0, 0, "-", "sa_optimizer"], [192, 0, 0, "-", "search_algorithms"], [193, 0, 0, "-", "search_space"]], "neural_compressor.compression.hpo.search_algorithms": [[192, 1, 1, "", "BayesianOptimizationSearcher"], [192, 1, 1, "", "GridSearcher"], [192, 1, 1, "", "RandomSearcher"], [192, 1, 1, "", "Searcher"], [192, 1, 1, "", "XgbSearcher"], [192, 2, 1, "", "register_searcher"]], "neural_compressor.compression.hpo.search_space": [[193, 1, 1, "", "BaseSearchSpace"], [193, 1, 1, "", "ContinuousSearchSpace"], [193, 1, 1, "", "DiscreteSearchSpace"], [193, 1, 1, "", "SearchSpace"], [193, 2, 1, "", "register_searchspace"]], "neural_compressor.compression.pruner": [[195, 0, 0, "-", "criteria"], [196, 0, 0, "-", "dsnot"], [199, 0, 0, "-", "model_slim"], [203, 0, 0, "-", "patterns"], [197, 2, 1, "", "prepare_pruning"], [210, 0, 0, "-", "pruners"], [216, 0, 0, "-", "pruning"], [217, 0, 0, "-", "regs"], [197, 2, 1, "", "save"], [218, 0, 0, "-", "schedulers"], [219, 0, 0, "-", "tf_criteria"], [220, 0, 0, "-", "utils"], [221, 0, 0, "-", "wanda"]], "neural_compressor.compression.pruner.criteria": [[195, 1, 1, "", "BlockMaskCriterion"], [195, 1, 1, "", "GradientCriterion"], [195, 1, 1, "", "MagnitudeCriterion"], [195, 1, 1, "", "PruningCriterion"], [195, 1, 1, "", "RetrainFreeCriterion"], [195, 1, 1, "", "SnipCriterion"], [195, 1, 1, "", "SnipMomentumCriterion"], [195, 2, 1, "", "get_criterion"], [195, 2, 1, "", "register_criterion"]], "neural_compressor.compression.pruner.criteria.BlockMaskCriterion": [[195, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.GradientCriterion": [[195, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.MagnitudeCriterion": [[195, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.PruningCriterion": [[195, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.RetrainFreeCriterion": [[195, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.SnipCriterion": [[195, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion": [[195, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.dsnot": [[196, 2, 1, "", "DSnoT"], [196, 2, 1, "", "return_reorder_indice"]], "neural_compressor.compression.pruner.model_slim": [[198, 0, 0, "-", "auto_slim"], [200, 0, 0, "-", "pattern_analyzer"], [201, 0, 0, "-", "weight_slim"]], "neural_compressor.compression.pruner.model_slim.auto_slim": [[198, 2, 1, "", "generate_ffn2_pruning_config"], [198, 2, 1, "", "generate_mha_pruning_config"], [198, 2, 1, "", "model_slim"], [198, 2, 1, "", "model_slim_ffn2"], [198, 2, 1, "", "model_slim_mha"], [198, 2, 1, "", "parse_auto_slim_config"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[200, 1, 1, "", "ClassifierHeadSearcher"], [200, 1, 1, "", "ClassifierHeadSearcherTF"], [200, 1, 1, "", "JitBasicSearcher"], [200, 1, 1, "", "Linear2LinearSearcher"], [200, 1, 1, "", "RecipeSearcher"], [200, 1, 1, "", "SelfMHASearcher"], [200, 2, 1, "", "get_attributes"], [200, 2, 1, "", "get_common_module"], [200, 2, 1, "", "print_iterables"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher": [[200, 4, 1, "", "device"], [200, 4, 1, "", "flatten_static_graph"], [200, 4, 1, "", "model"], [200, 4, 1, "", "static_graph"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF": [[200, 4, 1, "", "device"], [200, 4, 1, "", "flatten_static_graph"], [200, 4, 1, "", "model"], [200, 4, 1, "", "static_graph"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher": [[200, 4, 1, "", "device"], [200, 4, 1, "", "flatten_static_graph"], [200, 4, 1, "", "model"], [200, 4, 1, "", "searching_results"], [200, 4, 1, "", "static_graph"], [200, 4, 1, "", "target_layers"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher": [[200, 4, 1, "", "current_pattern"], [200, 4, 1, "", "device"], [200, 4, 1, "", "flatten_static_graph"], [200, 4, 1, "", "model"], [200, 4, 1, "", "searching_results"], [200, 4, 1, "", "static_graph"], [200, 4, 1, "", "target_layers"], [200, 4, 1, "", "target_op_lut"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher": [[200, 4, 1, "", "model"], [200, 4, 1, "", "recipe"], [200, 4, 1, "", "searching_results"], [200, 4, 1, "", "targets"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher": [[200, 4, 1, "", "device"], [200, 4, 1, "", "flatten_static_graph"], [200, 4, 1, "", "model"], [200, 4, 1, "", "static_graph"]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[201, 1, 1, "", "LinearCompression"], [201, 1, 1, "", "LinearCompressionIterator"], [201, 1, 1, "", "PostCompressionUtils"]], "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression": [[201, 4, 1, "", "device"], [201, 4, 1, "", "layer_1"], [201, 4, 1, "", "layer_2"]], "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator": [[201, 4, 1, "", "linear_patterns"]], "neural_compressor.compression.pruner.patterns": [[202, 0, 0, "-", "base"], [203, 2, 1, "", "get_pattern"], [204, 0, 0, "-", "mha"], [205, 0, 0, "-", "ninm"], [206, 0, 0, "-", "nxm"]], "neural_compressor.compression.pruner.patterns.base": [[202, 1, 1, "", "BasePattern"], [202, 1, 1, "", "KerasBasePattern"], [202, 1, 1, "", "PytorchBasePattern"], [202, 2, 1, "", "register_pattern"]], "neural_compressor.compression.pruner.patterns.base.BasePattern": [[202, 4, 1, "", "config"], [202, 4, 1, "", "invalid_layers"], [202, 4, 1, "", "is_global"], [202, 4, 1, "", "keep_mask_layers"], [202, 4, 1, "", "max_sparsity_ratio_per_op"], [202, 4, 1, "", "min_sparsity_ratio_per_op"], [202, 4, 1, "", "modules"], [202, 4, 1, "", "pattern"], [202, 4, 1, "", "target_sparsity"]], "neural_compressor.compression.pruner.patterns.base.KerasBasePattern": [[202, 4, 1, "", "config"], [202, 4, 1, "", "invalid_layers"], [202, 4, 1, "", "is_global"], [202, 4, 1, "", "keep_mask_layers"], [202, 4, 1, "", "max_sparsity_ratio_per_op"], [202, 4, 1, "", "min_sparsity_ratio_per_op"], [202, 4, 1, "", "modules"], [202, 4, 1, "", "pattern"], [202, 4, 1, "", "target_sparsity"]], "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern": [[202, 4, 1, "", "config"], [202, 4, 1, "", "invalid_layers"], [202, 4, 1, "", "is_global"], [202, 4, 1, "", "keep_mask_layers"], [202, 4, 1, "", "max_sparsity_ratio_per_op"], [202, 4, 1, "", "min_sparsity_ratio_per_op"], [202, 4, 1, "", "modules"], [202, 4, 1, "", "pattern"], [202, 4, 1, "", "target_sparsity"]], "neural_compressor.compression.pruner.patterns.mha": [[204, 1, 1, "", "PatternMHA"]], "neural_compressor.compression.pruner.patterns.mha.PatternMHA": [[204, 4, 1, "", "M"], [204, 4, 1, "", "N"]], "neural_compressor.compression.pruner.patterns.ninm": [[205, 1, 1, "", "PytorchPatternNInM"]], "neural_compressor.compression.pruner.patterns.ninm.PytorchPatternNInM": [[205, 4, 1, "", "M"], [205, 4, 1, "", "N"]], "neural_compressor.compression.pruner.patterns.nxm": [[206, 1, 1, "", "KerasPatternNxM"], [206, 1, 1, "", "PytorchPatternNxM"]], "neural_compressor.compression.pruner.patterns.nxm.KerasPatternNxM": [[206, 4, 1, "", "block_size"]], "neural_compressor.compression.pruner.patterns.nxm.PytorchPatternNxM": [[206, 4, 1, "", "block_size"]], "neural_compressor.compression.pruner.pruners": [[207, 0, 0, "-", "base"], [208, 0, 0, "-", "basic"], [209, 0, 0, "-", "block_mask"], [210, 2, 1, "", "get_pruner"], [211, 0, 0, "-", "mha"], [210, 2, 1, "", "parse_valid_pruner_types"], [212, 0, 0, "-", "pattern_lock"], [213, 0, 0, "-", "progressive"], [214, 0, 0, "-", "retrain_free"], [215, 0, 0, "-", "sparse_gpt"]], "neural_compressor.compression.pruner.pruners.base": [[207, 1, 1, "", "BasePruner"], [207, 1, 1, "", "KerasBasePruner"], [207, 1, 1, "", "PytorchBasePruner"], [207, 2, 1, "", "register_pruner"]], "neural_compressor.compression.pruner.pruners.base.BasePruner": [[207, 4, 1, "", "config"], [207, 4, 1, "", "current_sparsity_ratio"], [207, 4, 1, "", "end_step"], [207, 4, 1, "", "global_step"], [207, 4, 1, "", "masks"], [207, 4, 1, "", "max_sparsity_ratio_per_op"], [207, 4, 1, "", "modules"], [207, 4, 1, "", "pattern"], [207, 4, 1, "", "pruning_frequency"], [207, 4, 1, "", "scheduler"], [207, 4, 1, "", "scores"], [207, 4, 1, "", "start_step"], [207, 4, 1, "", "target_sparsity_ratio"]], "neural_compressor.compression.pruner.pruners.base.KerasBasePruner": [[207, 4, 1, "", "config"], [207, 4, 1, "", "current_sparsity_ratio"], [207, 4, 1, "", "end_step"], [207, 4, 1, "", "global_step"], [207, 4, 1, "", "masks"], [207, 4, 1, "", "max_sparsity_ratio_per_op"], [207, 4, 1, "", "modules"], [207, 4, 1, "", "pattern"], [207, 4, 1, "", "pruning_frequency"], [207, 4, 1, "", "scheduler"], [207, 4, 1, "", "scores"], [207, 4, 1, "", "start_step"], [207, 4, 1, "", "target_sparsity_ratio"]], "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner": [[207, 4, 1, "", "config"], [207, 4, 1, "", "current_sparsity_ratio"], [207, 4, 1, "", "end_step"], [207, 4, 1, "", "global_step"], [207, 4, 1, "", "masks"], [207, 4, 1, "", "max_sparsity_ratio_per_op"], [207, 4, 1, "", "modules"], [207, 4, 1, "", "pattern"], [207, 4, 1, "", "pruning_frequency"], [207, 4, 1, "", "scheduler"], [207, 4, 1, "", "scores"], [207, 4, 1, "", "start_step"], [207, 4, 1, "", "target_sparsity_ratio"]], "neural_compressor.compression.pruner.pruners.basic": [[208, 1, 1, "", "KerasBasicPruner"], [208, 1, 1, "", "PytorchBasicPruner"]], "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner": [[208, 4, 1, "", "criterion"], [208, 4, 1, "", "pattern"], [208, 4, 1, "", "reg"], [208, 4, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner": [[208, 4, 1, "", "criterion"], [208, 4, 1, "", "pattern"], [208, 4, 1, "", "reg"], [208, 4, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.block_mask": [[209, 1, 1, "", "PytorchBlockMaskPruner"]], "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner": [[209, 4, 1, "", "criterion"], [209, 4, 1, "", "pattern"], [209, 4, 1, "", "reg"], [209, 4, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.mha": [[211, 1, 1, "", "PythonMultiheadAttentionPruner"]], "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner": [[211, 4, 1, "", "head_masks"], [211, 4, 1, "", "linear_layers"], [211, 4, 1, "", "mha_compressions"], [211, 4, 1, "", "mha_scores"]], "neural_compressor.compression.pruner.pruners.pattern_lock": [[212, 1, 1, "", "PytorchPatternLockPruner"]], "neural_compressor.compression.pruner.pruners.progressive": [[213, 1, 1, "", "PytorchProgressivePruner"]], "neural_compressor.compression.pruner.pruners.retrain_free": [[214, 1, 1, "", "PytorchRetrainFreePruner"]], "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner": [[214, 4, 1, "", "criterion"], [214, 4, 1, "", "pattern"], [214, 4, 1, "", "reg"], [214, 4, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.sparse_gpt": [[215, 1, 1, "", "SparseGPTPruner"]], "neural_compressor.compression.pruner.pruners.sparse_gpt.SparseGPTPruner": [[215, 4, 1, "", "criterion"], [215, 4, 1, "", "pattern"], [215, 4, 1, "", "reg"], [215, 4, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruning": [[216, 1, 1, "", "BasePruning"], [216, 1, 1, "", "BasicPruning"], [216, 1, 1, "", "RetrainFreePruning"], [216, 1, 1, "", "SparseGPTPruning"], [216, 2, 1, "", "register_pruning"]], "neural_compressor.compression.pruner.pruning.BasePruning": [[216, 4, 1, "", "config_file_path"], [216, 4, 1, "", "model"], [216, 4, 1, "", "pruner_info"], [216, 4, 1, "", "pruners"]], "neural_compressor.compression.pruner.pruning.BasicPruning": [[216, 4, 1, "", "config_file_path"], [216, 4, 1, "", "model"], [216, 4, 1, "", "pruner_info"], [216, 4, 1, "", "pruners"]], "neural_compressor.compression.pruner.pruning.RetrainFreePruning": [[216, 4, 1, "", "config_file_path"], [216, 4, 1, "", "model"], [216, 4, 1, "", "pruner_info"], [216, 4, 1, "", "pruners"]], "neural_compressor.compression.pruner.regs": [[217, 1, 1, "", "BaseReg"], [217, 1, 1, "", "GroupLasso"], [217, 2, 1, "", "get_reg"], [217, 2, 1, "", "get_reg_type"], [217, 2, 1, "", "register_reg"]], "neural_compressor.compression.pruner.regs.GroupLasso": [[217, 4, 1, "", "alpha"], [217, 4, 1, "", "reg_terms"]], "neural_compressor.compression.pruner.schedulers": [[218, 1, 1, "", "IterativeScheduler"], [218, 1, 1, "", "OneshotScheduler"], [218, 1, 1, "", "PruningScheduler"], [218, 2, 1, "", "get_scheduler"], [218, 2, 1, "", "register_scheduler"]], "neural_compressor.compression.pruner.schedulers.PruningScheduler": [[218, 4, 1, "", "config"]], "neural_compressor.compression.pruner.tf_criteria": [[219, 1, 1, "", "MagnitudeCriterion"], [219, 1, 1, "", "PruningCriterion"], [219, 2, 1, "", "get_tf_criterion"], [219, 2, 1, "", "register_criterion"]], "neural_compressor.compression.pruner.tf_criteria.MagnitudeCriterion": [[219, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.tf_criteria.PruningCriterion": [[219, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.utils": [[220, 2, 1, "", "check_config"], [220, 2, 1, "", "check_key_validity"], [220, 2, 1, "", "collect_layer_inputs"], [220, 2, 1, "", "generate_pruner_config"], [220, 2, 1, "", "get_layers"], [220, 2, 1, "", "get_sparsity_ratio"], [220, 2, 1, "", "get_sparsity_ratio_tf"], [220, 2, 1, "", "parse_last_linear"], [220, 2, 1, "", "parse_last_linear_tf"], [220, 2, 1, "", "parse_to_prune"], [220, 2, 1, "", "parse_to_prune_tf"], [220, 2, 1, "", "process_and_check_config"], [220, 2, 1, "", "process_config"], [220, 2, 1, "", "process_weight_config"], [220, 2, 1, "", "process_yaml_config"], [220, 2, 1, "", "reset_none_to_default"], [220, 2, 1, "", "update_params"]], "neural_compressor.compression.pruner.wanda": [[222, 0, 0, "-", "prune"], [223, 0, 0, "-", "utils"], [224, 0, 0, "-", "wrapper"]], "neural_compressor.compression.pruner.wanda.prune": [[222, 2, 1, "", "prune_wanda"]], "neural_compressor.compression.pruner.wanda.utils": [[223, 2, 1, "", "find_layers"]], "neural_compressor.compression.pruner.wanda.wrapper": [[224, 1, 1, "", "WrappedGPT"]], "neural_compressor.conf": [[225, 0, 0, "-", "config"], [226, 0, 0, "-", "dotdict"], [228, 0, 0, "-", "pythonic_config"]], "neural_compressor.conf.config": [[225, 1, 1, "", "Benchmark_Conf"], [225, 1, 1, "", "Conf"], [225, 1, 1, "", "DefaultConf"], [225, 1, 1, "", "Distillation_Conf"], [225, 1, 1, "", "Graph_Optimization_Conf"], [225, 1, 1, "", "MixedPrecision_Conf"], [225, 1, 1, "", "NASConfig"], [225, 1, 1, "", "PrunerV2"], [225, 1, 1, "", "Pruning_Conf"], [225, 1, 1, "", "Quantization_Conf"]], "neural_compressor.conf.dotdict": [[226, 1, 1, "", "DotDict"], [226, 2, 1, "", "deep_get"], [226, 2, 1, "", "deep_set"]], "neural_compressor.conf.pythonic_config": [[228, 1, 1, "", "AccuracyCriterion"], [228, 1, 1, "", "BenchmarkConfig"], [228, 1, 1, "", "DistillationConfig"], [228, 1, 1, "", "KnowledgeDistillationLossConfig"], [228, 1, 1, "", "Options"], [228, 1, 1, "", "QuantizationConfig"], [228, 1, 1, "", "WeightPruningConfig"]], "neural_compressor.config": [[229, 1, 1, "", "AccuracyCriterion"], [229, 1, 1, "", "BenchmarkConfig"], [229, 1, 1, "", "DistillationConfig"], [229, 1, 1, "", "DotDict"], [229, 1, 1, "", "ExportConfig"], [229, 1, 1, "", "HPOConfig"], [229, 1, 1, "", "IntermediateLayersKnowledgeDistillationLossConfig"], [229, 1, 1, "", "Keras"], [229, 1, 1, "", "KnowledgeDistillationLossConfig"], [229, 1, 1, "", "MXNet"], [229, 1, 1, "", "MixedPrecisionConfig"], [229, 1, 1, "", "NASConfig"], [229, 1, 1, "", "ONNX"], [229, 1, 1, "", "ONNXQlinear2QDQConfig"], [229, 1, 1, "", "Options"], [229, 1, 1, "", "PostTrainingQuantConfig"], [229, 1, 1, "", "PyTorch"], [229, 1, 1, "", "QuantizationAwareTrainingConfig"], [229, 1, 1, "", "SelfKnowledgeDistillationLossConfig"], [229, 1, 1, "", "TF2ONNXConfig"], [229, 1, 1, "", "TensorFlow"], [229, 1, 1, "", "Torch2ONNXConfig"], [229, 1, 1, "", "TuningCriterion"], [229, 1, 1, "", "WeightPruningConfig"]], "neural_compressor.contrib": [[231, 0, 0, "-", "strategy"]], "neural_compressor.contrib.strategy": [[232, 0, 0, "-", "sigopt"], [233, 0, 0, "-", "tpe"]], "neural_compressor.contrib.strategy.sigopt": [[232, 1, 1, "", "SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.tpe": [[233, 1, 1, "", "TpeTuneStrategy"]], "neural_compressor.data": [[238, 0, 0, "-", "dataloaders"], [250, 0, 0, "-", "datasets"], [254, 0, 0, "-", "filters"], [258, 0, 0, "-", "transforms"]], "neural_compressor.data.dataloaders": [[234, 0, 0, "-", "base_dataloader"], [235, 0, 0, "-", "dataloader"], [236, 0, 0, "-", "default_dataloader"], [237, 0, 0, "-", "fetcher"], [239, 0, 0, "-", "mxnet_dataloader"], [240, 0, 0, "-", "onnxrt_dataloader"], [241, 0, 0, "-", "pytorch_dataloader"], [242, 0, 0, "-", "sampler"], [243, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.data.dataloaders.base_dataloader": [[234, 1, 1, "", "BaseDataLoader"]], "neural_compressor.data.dataloaders.dataloader": [[235, 1, 1, "", "DataLoader"], [235, 2, 1, "", "check_dataloader"]], "neural_compressor.data.dataloaders.default_dataloader": [[236, 1, 1, "", "DefaultDataLoader"], [236, 2, 1, "", "default_collate"]], "neural_compressor.data.dataloaders.fetcher": [[237, 1, 1, "", "Fetcher"], [237, 1, 1, "", "IndexFetcher"], [237, 1, 1, "", "IterableFetcher"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[239, 1, 1, "", "MXNetDataLoader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[240, 1, 1, "", "ONNXRTBertDataLoader"], [240, 1, 1, "", "ONNXRTDataLoader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[241, 1, 1, "", "PyTorchDataLoader"]], "neural_compressor.data.dataloaders.sampler": [[242, 1, 1, "", "BatchSampler"], [242, 1, 1, "", "IterableSampler"], [242, 1, 1, "", "Sampler"], [242, 1, 1, "", "SequentialSampler"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[243, 1, 1, "", "TFDataDataLoader"], [243, 1, 1, "", "TensorflowBertDataLoader"], [243, 1, 1, "", "TensorflowDataLoader"], [243, 1, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.data.datasets": [[244, 0, 0, "-", "bert_dataset"], [245, 0, 0, "-", "coco_dataset"], [246, 0, 0, "-", "dataset"], [247, 0, 0, "-", "dummy_dataset"], [248, 0, 0, "-", "dummy_dataset_v2"], [249, 0, 0, "-", "imagenet_dataset"], [251, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.data.datasets.bert_dataset": [[244, 1, 1, "", "InputFeatures"], [244, 1, 1, "", "ONNXRTBertDataset"], [244, 1, 1, "", "ParseDecodeBert"], [244, 1, 1, "", "PytorchBertDataset"], [244, 1, 1, "", "TensorflowBertDataset"], [244, 1, 1, "", "TensorflowModelZooBertDataset"], [244, 2, 1, "", "convert_examples_to_features"], [244, 2, 1, "", "load_and_cache_examples"]], "neural_compressor.data.datasets.coco_dataset": [[245, 1, 1, "", "COCONpy"], [245, 1, 1, "", "COCORaw"], [245, 1, 1, "", "COCORecordDataset"], [245, 1, 1, "", "ParseDecodeCoco"]], "neural_compressor.data.datasets.dataset": [[246, 1, 1, "", "CIFAR10"], [246, 1, 1, "", "CIFAR100"], [246, 1, 1, "", "Dataset"], [246, 1, 1, "", "Datasets"], [246, 1, 1, "", "FashionMNIST"], [246, 1, 1, "", "ImageFolder"], [246, 1, 1, "", "IterableDataset"], [246, 1, 1, "", "MNIST"], [246, 1, 1, "", "MXNetCIFAR10"], [246, 1, 1, "", "MXNetCIFAR100"], [246, 1, 1, "", "MXNetDatasets"], [246, 1, 1, "", "MXNetFashionMNIST"], [246, 1, 1, "", "MXNetImageFolder"], [246, 1, 1, "", "MXNetMNIST"], [246, 1, 1, "", "ONNXRTITDatasets"], [246, 1, 1, "", "ONNXRTQLDatasets"], [246, 1, 1, "", "PyTorchDatasets"], [246, 1, 1, "", "PytorchCIFAR10"], [246, 1, 1, "", "PytorchCIFAR100"], [246, 1, 1, "", "PytorchFashionMNIST"], [246, 1, 1, "", "PytorchMNIST"], [246, 1, 1, "", "PytorchMxnetWrapDataset"], [246, 1, 1, "", "PytorchMxnetWrapFunction"], [246, 1, 1, "", "Tensorflow"], [246, 1, 1, "", "TensorflowCIFAR10"], [246, 1, 1, "", "TensorflowCIFAR100"], [246, 1, 1, "", "TensorflowDatasets"], [246, 1, 1, "", "TensorflowFashionMNIST"], [246, 1, 1, "", "TensorflowImageRecord"], [246, 1, 1, "", "TensorflowMNIST"], [246, 1, 1, "", "TensorflowTFRecordDataset"], [246, 1, 1, "", "TensorflowVOCRecord"], [246, 2, 1, "", "calculate_md5"], [246, 2, 1, "", "check_integrity"], [246, 2, 1, "", "dataset_registry"], [246, 2, 1, "", "download_url"], [246, 5, 1, "", "framework_datasets"], [246, 2, 1, "", "gen_bar_updater"]], "neural_compressor.data.datasets.dummy_dataset": [[247, 1, 1, "", "DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[248, 1, 1, "", "DummyDataset"], [248, 1, 1, "", "SparseDummyDataset"]], "neural_compressor.data.datasets.imagenet_dataset": [[249, 1, 1, "", "ImagenetRaw"], [249, 1, 1, "", "MXNetImagenetRaw"], [249, 1, 1, "", "ONNXRTImagenetDataset"], [249, 1, 1, "", "PytorchImagenetRaw"], [249, 1, 1, "", "TensorflowImagenetDataset"], [249, 1, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.data.datasets.style_transfer_dataset": [[251, 1, 1, "", "StyleTransferDataset"]], "neural_compressor.data.filters": [[252, 0, 0, "-", "coco_filter"], [253, 0, 0, "-", "filter"]], "neural_compressor.data.filters.coco_filter": [[252, 1, 1, "", "LabelBalanceCOCORawFilter"], [252, 1, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.filter": [[253, 1, 1, "", "FILTERS"], [253, 1, 1, "", "Filter"], [253, 1, 1, "", "MXNetFilters"], [253, 1, 1, "", "ONNXRTITFilters"], [253, 1, 1, "", "ONNXRTQLFilters"], [253, 1, 1, "", "PyTorchFilters"], [253, 1, 1, "", "TensorflowFilters"], [253, 2, 1, "", "filter_registry"]], "neural_compressor.data.transforms": [[256, 0, 0, "-", "coco_transform"], [257, 0, 0, "-", "imagenet_transform"], [259, 0, 0, "-", "postprocess"], [260, 0, 0, "-", "tokenization"], [261, 0, 0, "-", "transform"]], "neural_compressor.data.transforms.coco_transform": [[256, 1, 1, "", "ParseDecodeCocoTransform"]], "neural_compressor.data.transforms.imagenet_transform": [[257, 1, 1, "", "BilinearImagenetTransform"], [257, 1, 1, "", "LabelShift"], [257, 1, 1, "", "ONNXResizeCropImagenetTransform"], [257, 1, 1, "", "OnnxBilinearImagenetTransform"], [257, 1, 1, "", "ParseDecodeImagenet"], [257, 1, 1, "", "ParseDecodeImagenetTransform"], [257, 1, 1, "", "QuantizedInput"], [257, 1, 1, "", "ResizeWithAspectRatio"], [257, 1, 1, "", "TensorflowResizeCropImagenetTransform"], [257, 1, 1, "", "TensorflowShiftRescale"], [257, 1, 1, "", "TensorflowTransposeLastChannel"]], "neural_compressor.data.transforms.postprocess": [[259, 1, 1, "", "Postprocess"]], "neural_compressor.data.transforms.tokenization": [[260, 1, 1, "", "BasicTokenizer"], [260, 1, 1, "", "FullTokenizer"], [260, 1, 1, "", "WordpieceTokenizer"], [260, 2, 1, "", "convert_by_vocab"], [260, 2, 1, "", "convert_to_unicode"], [260, 2, 1, "", "load_vocab"], [260, 2, 1, "", "whitespace_tokenize"]], "neural_compressor.data.transforms.transform": [[261, 1, 1, "", "AlignImageChannelTransform"], [261, 1, 1, "", "BaseTransform"], [261, 1, 1, "", "CastONNXTransform"], [261, 1, 1, "", "CastPyTorchTransform"], [261, 1, 1, "", "CastTFTransform"], [261, 1, 1, "", "CenterCropTFTransform"], [261, 1, 1, "", "CenterCropTransform"], [261, 1, 1, "", "CollectTransform"], [261, 1, 1, "", "ComposeTransform"], [261, 1, 1, "", "CropResizeTFTransform"], [261, 1, 1, "", "CropResizeTransform"], [261, 1, 1, "", "CropToBoundingBox"], [261, 1, 1, "", "InputFeatures"], [261, 1, 1, "", "MXNetCropResizeTransform"], [261, 1, 1, "", "MXNetCropToBoundingBox"], [261, 1, 1, "", "MXNetNormalizeTransform"], [261, 1, 1, "", "MXNetTransforms"], [261, 1, 1, "", "MXNetTranspose"], [261, 1, 1, "", "NormalizeTFTransform"], [261, 1, 1, "", "NormalizeTransform"], [261, 1, 1, "", "ONNXRTCropToBoundingBox"], [261, 1, 1, "", "ONNXRTITTransforms"], [261, 1, 1, "", "ONNXRTQLTransforms"], [261, 1, 1, "", "PaddedCenterCropTransform"], [261, 1, 1, "", "ParseDecodeVocTransform"], [261, 1, 1, "", "PyTorchAlignImageChannel"], [261, 1, 1, "", "PyTorchCropResizeTransform"], [261, 1, 1, "", "PyTorchNormalizeTransform"], [261, 1, 1, "", "PyTorchTransforms"], [261, 1, 1, "", "PyTorchTranspose"], [261, 1, 1, "", "PytorchMxnetTransform"], [261, 1, 1, "", "PytorchMxnetWrapFunction"], [261, 1, 1, "", "RandomCropTFTransform"], [261, 1, 1, "", "RandomCropTransform"], [261, 1, 1, "", "RandomHorizontalFlip"], [261, 1, 1, "", "RandomResizedCropMXNetTransform"], [261, 1, 1, "", "RandomResizedCropPytorchTransform"], [261, 1, 1, "", "RandomResizedCropTFTransform"], [261, 1, 1, "", "RandomResizedCropTransform"], [261, 1, 1, "", "RandomVerticalFlip"], [261, 1, 1, "", "RescaleKerasPretrainTransform"], [261, 1, 1, "", "RescaleTFTransform"], [261, 1, 1, "", "RescaleTransform"], [261, 1, 1, "", "ResizeMXNetTransform"], [261, 1, 1, "", "ResizePytorchTransform"], [261, 1, 1, "", "ResizeTFTransform"], [261, 1, 1, "", "ResizeTransform"], [261, 1, 1, "", "ResizeWithRatio"], [261, 1, 1, "", "SquadExample"], [261, 1, 1, "", "TFModelZooCollectTransform"], [261, 1, 1, "", "TFSquadV1ModelZooPostTransform"], [261, 1, 1, "", "TFSquadV1PostTransform"], [261, 1, 1, "", "TRANSFORMS"], [261, 1, 1, "", "TensorflowCropToBoundingBox"], [261, 1, 1, "", "TensorflowRandomHorizontalFlip"], [261, 1, 1, "", "TensorflowRandomVerticalFlip"], [261, 1, 1, "", "TensorflowResizeWithRatio"], [261, 1, 1, "", "TensorflowTransform"], [261, 1, 1, "", "TensorflowTransforms"], [261, 1, 1, "", "TensorflowTranspose"], [261, 1, 1, "", "TensorflowWrapFunction"], [261, 1, 1, "", "ToArray"], [261, 1, 1, "", "ToNDArrayTransform"], [261, 1, 1, "", "Transforms"], [261, 1, 1, "", "Transpose"], [261, 2, 1, "", "convert_examples_to_features"], [261, 2, 1, "", "get_final_text"], [261, 2, 1, "", "get_torchvision_map"], [261, 2, 1, "", "read_squad_examples"], [261, 2, 1, "", "transform_registry"]], "neural_compressor.experimental": [[262, 0, 0, "-", "benchmark"], [265, 0, 0, "-", "common"], [271, 0, 0, "-", "component"], [272, 0, 0, "-", "compression"], [273, 0, 0, "-", "contrib"], [298, 0, 0, "-", "data"], [303, 0, 0, "-", "distillation"], [304, 0, 0, "-", "export"], [308, 0, 0, "-", "graph_optimization"], [316, 0, 0, "-", "metric"], [318, 0, 0, "-", "mixed_precision"], [319, 0, 0, "-", "model_conversion"], [322, 0, 0, "-", "nas"], [328, 0, 0, "-", "pruner_legacy"], [332, 0, 0, "-", "pruning"], [333, 0, 0, "-", "pruning_recipes"], [337, 0, 0, "-", "pruning_v2"], [338, 0, 0, "-", "pytorch_pruner"], [345, 0, 0, "-", "quantization"], [346, 0, 0, "-", "scheduler"], [351, 0, 0, "-", "strategy"]], "neural_compressor.experimental.benchmark": [[262, 1, 1, "", "Benchmark"], [262, 2, 1, "", "get_architecture"], [262, 2, 1, "", "get_bounded_threads"], [262, 2, 1, "", "get_core_ids"], [262, 2, 1, "", "get_physical_ids"], [262, 2, 1, "", "get_threads"], [262, 2, 1, "", "get_threads_per_core"], [262, 2, 1, "", "set_all_env_var"], [262, 2, 1, "", "set_env_var"]], "neural_compressor.experimental.common": [[263, 0, 0, "-", "criterion"], [264, 0, 0, "-", "dataloader"], [266, 0, 0, "-", "metric"], [267, 0, 0, "-", "model"], [268, 0, 0, "-", "optimizer"], [269, 0, 0, "-", "postprocess"], [270, 0, 0, "-", "torch_utils"]], "neural_compressor.experimental.common.criterion": [[263, 1, 1, "", "Criterions"], [263, 1, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [263, 1, 1, "", "KnowledgeDistillationFramework"], [263, 1, 1, "", "KnowledgeDistillationLoss"], [263, 1, 1, "", "PyTorchCriterions"], [263, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLoss"], [263, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"], [263, 1, 1, "", "PyTorchKnowledgeDistillationLoss"], [263, 1, 1, "", "PyTorchKnowledgeDistillationLossWrapper"], [263, 1, 1, "", "SelfKnowledgeDistillationLoss"], [263, 1, 1, "", "TensorflowCriterions"], [263, 1, 1, "", "TensorflowKnowledgeDistillationLossExternal"], [263, 2, 1, "", "criterion_registry"]], "neural_compressor.experimental.common.dataloader": [[264, 1, 1, "", "DataLoader"]], "neural_compressor.experimental.common.metric": [[266, 1, 1, "", "Metric"]], "neural_compressor.experimental.common.model": [[267, 1, 1, "", "Model"], [267, 2, 1, "", "set_backend"]], "neural_compressor.experimental.common.optimizer": [[268, 1, 1, "", "Optimizers"], [268, 1, 1, "", "PyTorchOptimizers"], [268, 1, 1, "", "PyTorchSGD"], [268, 1, 1, "", "TensorFlowAdamW"], [268, 1, 1, "", "TensorFlowSGD"], [268, 1, 1, "", "TensorflowOptimizers"], [268, 2, 1, "", "optimizer_registry"]], "neural_compressor.experimental.common.postprocess": [[269, 1, 1, "", "Postprocess"]], "neural_compressor.experimental.common.torch_utils": [[270, 2, 1, "", "get_activation"], [270, 2, 1, "", "record_output"]], "neural_compressor.experimental.component": [[271, 1, 1, "", "Component"]], "neural_compressor.experimental.contrib": [[274, 0, 0, "-", "strategy"]], "neural_compressor.experimental.contrib.strategy": [[275, 0, 0, "-", "sigopt"], [276, 0, 0, "-", "tpe"]], "neural_compressor.experimental.contrib.strategy.sigopt": [[275, 1, 1, "", "SigOptTuneStrategy"]], "neural_compressor.experimental.contrib.strategy.tpe": [[276, 1, 1, "", "TpeTuneStrategy"]], "neural_compressor.experimental.data": [[281, 0, 0, "-", "dataloaders"], [293, 0, 0, "-", "datasets"], [297, 0, 0, "-", "filters"], [300, 0, 0, "-", "transforms"]], "neural_compressor.experimental.data.dataloaders": [[277, 0, 0, "-", "base_dataloader"], [278, 0, 0, "-", "dataloader"], [279, 0, 0, "-", "default_dataloader"], [280, 0, 0, "-", "fetcher"], [282, 0, 0, "-", "mxnet_dataloader"], [283, 0, 0, "-", "onnxrt_dataloader"], [284, 0, 0, "-", "pytorch_dataloader"], [285, 0, 0, "-", "sampler"], [286, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[277, 1, 1, "", "BaseDataLoader"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[279, 1, 1, "", "DefaultDataLoader"], [279, 2, 1, "", "default_collate"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[280, 1, 1, "", "Fetcher"], [280, 1, 1, "", "IndexFetcher"], [280, 1, 1, "", "IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[282, 1, 1, "", "MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[283, 1, 1, "", "ONNXRTBertDataLoader"], [283, 1, 1, "", "ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[284, 1, 1, "", "PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[285, 1, 1, "", "BatchSampler"], [285, 1, 1, "", "IterableSampler"], [285, 1, 1, "", "Sampler"], [285, 1, 1, "", "SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[286, 1, 1, "", "TFDataDataLoader"], [286, 1, 1, "", "TensorflowBertDataLoader"], [286, 1, 1, "", "TensorflowDataLoader"], [286, 1, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.experimental.data.datasets": [[287, 0, 0, "-", "bert_dataset"], [288, 0, 0, "-", "coco_dataset"], [289, 0, 0, "-", "dataset"], [290, 0, 0, "-", "dummy_dataset"], [291, 0, 0, "-", "dummy_dataset_v2"], [292, 0, 0, "-", "imagenet_dataset"], [294, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[287, 1, 1, "", "InputFeatures"], [287, 1, 1, "", "ONNXRTBertDataset"], [287, 1, 1, "", "ParseDecodeBert"], [287, 1, 1, "", "PytorchBertDataset"], [287, 1, 1, "", "TensorflowBertDataset"], [287, 1, 1, "", "TensorflowModelZooBertDataset"], [287, 2, 1, "", "convert_examples_to_features"], [287, 2, 1, "", "load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[288, 1, 1, "", "COCONpy"], [288, 1, 1, "", "COCORaw"], [288, 1, 1, "", "COCORecordDataset"], [288, 1, 1, "", "ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.dataset": [[289, 1, 1, "", "CIFAR10"], [289, 1, 1, "", "CIFAR100"], [289, 1, 1, "", "Dataset"], [289, 1, 1, "", "Datasets"], [289, 1, 1, "", "FashionMNIST"], [289, 1, 1, "", "ImageFolder"], [289, 1, 1, "", "IterableDataset"], [289, 1, 1, "", "MNIST"], [289, 1, 1, "", "MXNetCIFAR10"], [289, 1, 1, "", "MXNetCIFAR100"], [289, 1, 1, "", "MXNetDatasets"], [289, 1, 1, "", "MXNetFashionMNIST"], [289, 1, 1, "", "MXNetImageFolder"], [289, 1, 1, "", "MXNetMNIST"], [289, 1, 1, "", "ONNXRTITDatasets"], [289, 1, 1, "", "ONNXRTQLDatasets"], [289, 1, 1, "", "PyTorchDatasets"], [289, 1, 1, "", "PytorchCIFAR10"], [289, 1, 1, "", "PytorchCIFAR100"], [289, 1, 1, "", "PytorchFashionMNIST"], [289, 1, 1, "", "PytorchMNIST"], [289, 1, 1, "", "PytorchMxnetWrapDataset"], [289, 1, 1, "", "PytorchMxnetWrapFunction"], [289, 1, 1, "", "TensorflowCIFAR10"], [289, 1, 1, "", "TensorflowCIFAR100"], [289, 1, 1, "", "TensorflowDatasets"], [289, 1, 1, "", "TensorflowFashionMNIST"], [289, 1, 1, "", "TensorflowImageFolder"], [289, 1, 1, "", "TensorflowImageRecord"], [289, 1, 1, "", "TensorflowMNIST"], [289, 1, 1, "", "TensorflowTFRecordDataset"], [289, 1, 1, "", "TensorflowVOCRecord"], [289, 2, 1, "", "calculate_md5"], [289, 2, 1, "", "check_integrity"], [289, 2, 1, "", "dataset_registry"], [289, 2, 1, "", "download_url"], [289, 5, 1, "", "framework_datasets"], [289, 2, 1, "", "gen_bar_updater"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[290, 1, 1, "", "DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[291, 1, 1, "", "DummyDataset"], [291, 1, 1, "", "SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[292, 1, 1, "", "ImagenetRaw"], [292, 1, 1, "", "MXNetImagenetRaw"], [292, 1, 1, "", "ONNXRTImagenetDataset"], [292, 1, 1, "", "PytorchImagenetRaw"], [292, 1, 1, "", "TensorflowImagenetDataset"], [292, 1, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[294, 1, 1, "", "StyleTransferDataset"]], "neural_compressor.experimental.data.filters": [[295, 0, 0, "-", "coco_filter"], [296, 0, 0, "-", "filter"]], "neural_compressor.experimental.data.filters.coco_filter": [[295, 1, 1, "", "LabelBalanceCOCORawFilter"], [295, 1, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.filter": [[296, 1, 1, "", "FILTERS"], [296, 1, 1, "", "Filter"], [296, 1, 1, "", "MXNetFilters"], [296, 1, 1, "", "ONNXRTITFilters"], [296, 1, 1, "", "ONNXRTQLFilters"], [296, 1, 1, "", "PyTorchFilters"], [296, 1, 1, "", "TensorflowFilters"], [296, 2, 1, "", "filter_registry"]], "neural_compressor.experimental.data.transforms": [[299, 0, 0, "-", "imagenet_transform"], [301, 0, 0, "-", "tokenization"], [302, 0, 0, "-", "transform"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[299, 1, 1, "", "BilinearImagenetTransform"], [299, 1, 1, "", "LabelShift"], [299, 1, 1, "", "ONNXResizeCropImagenetTransform"], [299, 1, 1, "", "OnnxBilinearImagenetTransform"], [299, 1, 1, "", "ParseDecodeImagenet"], [299, 1, 1, "", "ParseDecodeImagenetTransform"], [299, 1, 1, "", "QuantizedInput"], [299, 1, 1, "", "ResizeWithAspectRatio"], [299, 1, 1, "", "TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.tokenization": [[301, 1, 1, "", "BasicTokenizer"], [301, 1, 1, "", "FullTokenizer"], [301, 1, 1, "", "WordpieceTokenizer"], [301, 2, 1, "", "convert_by_vocab"], [301, 2, 1, "", "convert_to_unicode"], [301, 2, 1, "", "load_vocab"], [301, 2, 1, "", "whitespace_tokenize"]], "neural_compressor.experimental.data.transforms.transform": [[302, 1, 1, "", "AlignImageChannelTransform"], [302, 1, 1, "", "BaseTransform"], [302, 1, 1, "", "CastONNXTransform"], [302, 1, 1, "", "CastPyTorchTransform"], [302, 1, 1, "", "CastTFTransform"], [302, 1, 1, "", "CenterCropTFTransform"], [302, 1, 1, "", "CenterCropTransform"], [302, 1, 1, "", "CollectTransform"], [302, 1, 1, "", "ComposeTransform"], [302, 1, 1, "", "CropResizeTFTransform"], [302, 1, 1, "", "CropResizeTransform"], [302, 1, 1, "", "CropToBoundingBox"], [302, 1, 1, "", "InputFeatures"], [302, 1, 1, "", "MXNetCropResizeTransform"], [302, 1, 1, "", "MXNetCropToBoundingBox"], [302, 1, 1, "", "MXNetNormalizeTransform"], [302, 1, 1, "", "MXNetTransforms"], [302, 1, 1, "", "MXNetTranspose"], [302, 1, 1, "", "NormalizeTFTransform"], [302, 1, 1, "", "NormalizeTransform"], [302, 1, 1, "", "ONNXRTCropToBoundingBox"], [302, 1, 1, "", "ONNXRTITTransforms"], [302, 1, 1, "", "ONNXRTQLTransforms"], [302, 1, 1, "", "PaddedCenterCropTransform"], [302, 1, 1, "", "ParseDecodeVocTransform"], [302, 1, 1, "", "PyTorchAlignImageChannel"], [302, 1, 1, "", "PyTorchCropResizeTransform"], [302, 1, 1, "", "PyTorchNormalizeTransform"], [302, 1, 1, "", "PyTorchTransforms"], [302, 1, 1, "", "PyTorchTranspose"], [302, 1, 1, "", "PytorchMxnetTransform"], [302, 1, 1, "", "PytorchMxnetWrapFunction"], [302, 1, 1, "", "RandomCropTFTransform"], [302, 1, 1, "", "RandomCropTransform"], [302, 1, 1, "", "RandomHorizontalFlip"], [302, 1, 1, "", "RandomResizedCropMXNetTransform"], [302, 1, 1, "", "RandomResizedCropPytorchTransform"], [302, 1, 1, "", "RandomResizedCropTFTransform"], [302, 1, 1, "", "RandomResizedCropTransform"], [302, 1, 1, "", "RandomVerticalFlip"], [302, 1, 1, "", "RescaleKerasPretrainTransform"], [302, 1, 1, "", "RescaleTFTransform"], [302, 1, 1, "", "RescaleTransform"], [302, 1, 1, "", "ResizeMXNetTransform"], [302, 1, 1, "", "ResizePytorchTransform"], [302, 1, 1, "", "ResizeTFTransform"], [302, 1, 1, "", "ResizeTransform"], [302, 1, 1, "", "ResizeWithRatio"], [302, 1, 1, "", "SquadExample"], [302, 1, 1, "", "TFModelZooCollectTransform"], [302, 1, 1, "", "TFSquadV1ModelZooPostTransform"], [302, 1, 1, "", "TFSquadV1PostTransform"], [302, 1, 1, "", "TRANSFORMS"], [302, 1, 1, "", "TensorflowCropToBoundingBox"], [302, 1, 1, "", "TensorflowRandomHorizontalFlip"], [302, 1, 1, "", "TensorflowRandomVerticalFlip"], [302, 1, 1, "", "TensorflowResizeWithRatio"], [302, 1, 1, "", "TensorflowTransform"], [302, 1, 1, "", "TensorflowTransforms"], [302, 1, 1, "", "TensorflowTranspose"], [302, 1, 1, "", "TensorflowWrapFunction"], [302, 1, 1, "", "ToArray"], [302, 1, 1, "", "ToNDArrayTransform"], [302, 1, 1, "", "Transforms"], [302, 1, 1, "", "Transpose"], [302, 2, 1, "", "convert_examples_to_features"], [302, 2, 1, "", "get_final_text"], [302, 2, 1, "", "get_torchvision_map"], [302, 2, 1, "", "read_squad_examples"], [302, 2, 1, "", "transform_registry"]], "neural_compressor.experimental.distillation": [[303, 1, 1, "", "Distillation"]], "neural_compressor.experimental.distillation.Distillation": [[303, 4, 1, "", "_epoch_ran"], [303, 4, 1, "", "best_model"], [303, 4, 1, "", "best_score"], [303, 4, 1, "", "eval_frequency"]], "neural_compressor.experimental.export": [[305, 0, 0, "-", "qlinear2qdq"], [306, 0, 0, "-", "tf2onnx"], [307, 0, 0, "-", "torch2onnx"]], "neural_compressor.experimental.export.qlinear2qdq": [[305, 2, 1, "", "check_model"], [305, 2, 1, "", "onnx_qlinear_to_qdq"]], "neural_compressor.experimental.export.tf2onnx": [[306, 2, 1, "", "tf_to_fp32_onnx"], [306, 2, 1, "", "tf_to_int8_onnx"]], "neural_compressor.experimental.export.torch2onnx": [[307, 2, 1, "", "dynamic_quant_export"], [307, 2, 1, "", "get_node_mapping"], [307, 2, 1, "", "get_quantizable_onnx_ops"], [307, 2, 1, "", "static_quant_export"], [307, 2, 1, "", "torch_to_fp32_onnx"], [307, 2, 1, "", "torch_to_int8_onnx"]], "neural_compressor.experimental.graph_optimization": [[308, 1, 1, "", "Graph_Optimization"]], "neural_compressor.experimental.metric": [[310, 0, 0, "-", "bleu"], [311, 0, 0, "-", "bleu_util"], [312, 0, 0, "-", "coco_label_map"], [313, 0, 0, "-", "coco_tools"], [314, 0, 0, "-", "evaluate_squad"], [315, 0, 0, "-", "f1"], [317, 0, 0, "-", "metric"]], "neural_compressor.experimental.metric.bleu": [[310, 1, 1, "", "BLEU"], [310, 1, 1, "", "UnicodeRegex"], [310, 2, 1, "", "bleu_tokenize"]], "neural_compressor.experimental.metric.bleu.BLEU": [[310, 4, 1, "", "labels"], [310, 4, 1, "", "predictions"]], "neural_compressor.experimental.metric.bleu.UnicodeRegex": [[310, 4, 1, "", "nondigit_punct_re"], [310, 4, 1, "", "punct_nondigit_re"], [310, 4, 1, "", "symbol_re"]], "neural_compressor.experimental.metric.bleu_util": [[311, 2, 1, "", "compute_bleu"]], "neural_compressor.experimental.metric.coco_tools": [[313, 1, 1, "", "COCOEvalWrapper"], [313, 1, 1, "", "COCOWrapper"], [313, 2, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [313, 2, 1, "", "ExportSingleImageDetectionMasksToCoco"], [313, 2, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.experimental.metric.coco_tools.COCOWrapper": [[313, 4, 1, "", "dataset"], [313, 4, 1, "", "detection_type"]], "neural_compressor.experimental.metric.evaluate_squad": [[314, 2, 1, "", "evaluate"], [314, 2, 1, "", "exact_match_score"], [314, 2, 1, "", "f1_score"], [314, 2, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[315, 2, 1, "", "evaluate"], [315, 2, 1, "", "f1_score"], [315, 2, 1, "", "metric_max_over_ground_truths"], [315, 2, 1, "", "normalize_answer"]], "neural_compressor.experimental.metric.metric": [[317, 1, 1, "", "Accuracy"], [317, 1, 1, "", "BaseMetric"], [317, 1, 1, "", "COCOmAPv2"], [317, 1, 1, "", "F1"], [317, 1, 1, "", "GeneralTopK"], [317, 1, 1, "", "Loss"], [317, 1, 1, "", "MAE"], [317, 1, 1, "", "METRICS"], [317, 1, 1, "", "MSE"], [317, 1, 1, "", "MXNetMetrics"], [317, 1, 1, "", "ONNXRTGLUE"], [317, 1, 1, "", "ONNXRTITMetrics"], [317, 1, 1, "", "ONNXRTQLMetrics"], [317, 1, 1, "", "PyTorchLoss"], [317, 1, 1, "", "PyTorchMetrics"], [317, 1, 1, "", "RMSE"], [317, 1, 1, "", "ROC"], [317, 1, 1, "", "SquadF1"], [317, 1, 1, "", "TensorflowCOCOMAP"], [317, 1, 1, "", "TensorflowMAP"], [317, 1, 1, "", "TensorflowMetrics"], [317, 1, 1, "", "TensorflowTopK"], [317, 1, 1, "", "TensorflowVOCMAP"], [317, 1, 1, "", "WrapMXNetMetric"], [317, 1, 1, "", "WrapONNXRTMetric"], [317, 1, 1, "", "WrapPyTorchMetric"], [317, 1, 1, "", "mIOU"], [317, 2, 1, "", "metric_registry"]], "neural_compressor.experimental.metric.metric.Accuracy": [[317, 4, 1, "", "label_list"], [317, 4, 1, "", "pred_list"], [317, 4, 1, "", "sample"]], "neural_compressor.experimental.metric.metric.GeneralTopK": [[317, 4, 1, "", "k"], [317, 4, 1, "", "num_correct"], [317, 4, 1, "", "num_sample"]], "neural_compressor.experimental.metric.metric.Loss": [[317, 4, 1, "", "sample"], [317, 4, 1, "", "sum"]], "neural_compressor.experimental.metric.metric.MAE": [[317, 4, 1, "", "compare_label"], [317, 4, 1, "", "label_list"], [317, 4, 1, "", "pred_list"]], "neural_compressor.experimental.metric.metric.METRICS": [[317, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.MSE": [[317, 4, 1, "", "compare_label"], [317, 4, 1, "", "label_list"], [317, 4, 1, "", "pred_list"]], "neural_compressor.experimental.metric.metric.MXNetMetrics": [[317, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTITMetrics": [[317, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics": [[317, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.PyTorchMetrics": [[317, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.RMSE": [[317, 4, 1, "", "mse"]], "neural_compressor.experimental.metric.metric.TensorflowMetrics": [[317, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.TensorflowTopK": [[317, 4, 1, "", "k"], [317, 4, 1, "", "num_correct"], [317, 4, 1, "", "num_sample"]], "neural_compressor.experimental.mixed_precision": [[318, 1, 1, "", "MixedPrecision"]], "neural_compressor.experimental.model_conversion": [[319, 1, 1, "", "ModelConversion"]], "neural_compressor.experimental.nas": [[320, 0, 0, "-", "basic_nas"], [321, 0, 0, "-", "dynas"], [323, 0, 0, "-", "nas"], [324, 0, 0, "-", "nas_utils"], [325, 0, 0, "-", "search_algorithms"]], "neural_compressor.experimental.nas.basic_nas": [[320, 1, 1, "", "BasicNAS"]], "neural_compressor.experimental.nas.dynas": [[321, 1, 1, "", "DyNAS"]], "neural_compressor.experimental.nas.nas": [[323, 1, 1, "", "NAS"], [323, 1, 1, "", "NASBase"]], "neural_compressor.experimental.nas.nas_utils": [[324, 2, 1, "", "create_search_space_pool"], [324, 2, 1, "", "find_pareto_front"], [324, 2, 1, "", "nas_registry"]], "neural_compressor.experimental.nas.search_algorithms": [[325, 1, 1, "", "BayesianOptimizationSearcher"], [325, 1, 1, "", "GridSearcher"], [325, 1, 1, "", "RandomSearcher"], [325, 1, 1, "", "Searcher"]], "neural_compressor.experimental.pruner_legacy": [[326, 0, 0, "-", "gradient_sensitivity"], [327, 0, 0, "-", "group_lasso"], [329, 0, 0, "-", "magnitude"], [330, 0, 0, "-", "pattern_lock"], [331, 0, 0, "-", "pruner"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[326, 1, 1, "", "GradientSensitivityPruner"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[327, 1, 1, "", "GroupLassoPruner"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[329, 1, 1, "", "BasicMagnitudePruner"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[330, 1, 1, "", "PatternLockPruner"]], "neural_compressor.experimental.pruner_legacy.pruner": [[331, 1, 1, "", "Pruner"], [331, 2, 1, "", "pruner_registry"]], "neural_compressor.experimental.pruning": [[332, 1, 1, "", "Pruning"], [332, 1, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning.Pruning": [[332, 4, 1, "", "conf"], [332, 4, 1, "", "pruners"]], "neural_compressor.experimental.pruning_recipes": [[334, 0, 0, "-", "patterns"]], "neural_compressor.experimental.pruning_recipes.patterns": [[335, 0, 0, "-", "pattern"], [336, 0, 0, "-", "tile_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[335, 1, 1, "", "PATTERNS"], [335, 1, 1, "", "PatternBase"], [335, 2, 1, "", "pattern_registry"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS": [[335, 4, 1, "", "patterns"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[336, 1, 1, "", "TilePatternBase"], [336, 1, 1, "", "TilePattern_1x1"], [336, 1, 1, "", "TilePattern_1x16"], [336, 1, 1, "", "TilePattern_1x2"], [336, 1, 1, "", "TilePattern_2x2"], [336, 1, 1, "", "TilePattern_4x1"]], "neural_compressor.experimental.pruning_v2": [[337, 1, 1, "", "Pruning"], [337, 1, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning_v2.Pruning": [[337, 4, 1, "", "conf"], [337, 4, 1, "", "pruners"]], "neural_compressor.experimental.pytorch_pruner": [[339, 0, 0, "-", "logger"], [340, 0, 0, "-", "patterns"], [341, 0, 0, "-", "prune_utils"], [342, 0, 0, "-", "pruner"], [343, 0, 0, "-", "pruning"], [344, 0, 0, "-", "scheduler"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[340, 1, 1, "", "Pattern"], [340, 1, 1, "", "PatternNInM"], [340, 1, 1, "", "PatternNxM"], [340, 2, 1, "", "get_pattern"], [340, 2, 1, "", "register_pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.Pattern": [[340, 4, 1, "", "is_global"], [340, 4, 1, "", "pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM": [[340, 4, 1, "", "M"], [340, 4, 1, "", "N"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM": [[340, 4, 1, "", "block_size"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[341, 2, 1, "", "check_config"], [341, 2, 1, "", "parse_not_to_prune"], [341, 2, 1, "", "parse_to_prune"], [341, 2, 1, "", "process_and_check_config"], [341, 2, 1, "", "process_config"], [341, 2, 1, "", "reset_non_value_to_default"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[342, 1, 1, "", "MagnitudePruner"], [342, 1, 1, "", "PatternLockPruner"], [342, 1, 1, "", "Pruner"], [342, 1, 1, "", "SnipMomentumPruner"], [342, 1, 1, "", "SnipPruner"], [342, 2, 1, "", "get_pruner"], [342, 2, 1, "", "register_pruners"]], "neural_compressor.experimental.pytorch_pruner.pruner.Pruner": [[342, 4, 1, "", "config"], [342, 4, 1, "", "current_sparsity_ratio"], [342, 4, 1, "", "end_step"], [342, 4, 1, "", "global_step"], [342, 4, 1, "", "masks"], [342, 4, 1, "", "max_sparsity_ratio_per_layer"], [342, 4, 1, "", "modules"], [342, 4, 1, "", "pattern"], [342, 4, 1, "", "scheduler"], [342, 4, 1, "", "scores"], [342, 4, 1, "", "start_step"], [342, 4, 1, "", "target_sparsity_ratio"], [342, 4, 1, "", "update_frequency_on_step"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[343, 1, 1, "", "Pruning"]], "neural_compressor.experimental.pytorch_pruner.pruning.Pruning": [[343, 4, 1, "", "config_file_path"], [343, 4, 1, "", "model"], [343, 4, 1, "", "pruner_info"], [343, 4, 1, "", "pruners"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[344, 1, 1, "", "IterativeScheduler"], [344, 1, 1, "", "OneshotScheduler"], [344, 1, 1, "", "Scheduler"], [344, 2, 1, "", "get_scheduler"], [344, 2, 1, "", "register_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler": [[344, 4, 1, "", "config"]], "neural_compressor.experimental.quantization": [[345, 1, 1, "", "Quantization"]], "neural_compressor.experimental.scheduler": [[346, 1, 1, "", "Scheduler"]], "neural_compressor.experimental.strategy": [[347, 0, 0, "-", "auto_mixed_precision"], [348, 0, 0, "-", "basic"], [349, 0, 0, "-", "bayesian"], [350, 0, 0, "-", "exhaustive"], [352, 0, 0, "-", "mse"], [353, 0, 0, "-", "mse_v2"], [354, 0, 0, "-", "random"], [355, 0, 0, "-", "strategy"], [357, 0, 0, "-", "utils"]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[347, 1, 1, "", "AutoMixedPrecisionTuneStrategy"]], "neural_compressor.experimental.strategy.basic": [[348, 1, 1, "", "BasicTuneStrategy"]], "neural_compressor.experimental.strategy.bayesian": [[349, 1, 1, "", "BayesianOptimization"], [349, 1, 1, "", "BayesianTuneStrategy"], [349, 1, 1, "", "TargetSpace"], [349, 2, 1, "", "acq_max"]], "neural_compressor.experimental.strategy.exhaustive": [[350, 1, 1, "", "ExhaustiveTuneStrategy"]], "neural_compressor.experimental.strategy.mse": [[352, 1, 1, "", "MSETuneStrategy"]], "neural_compressor.experimental.strategy.mse_v2": [[353, 1, 1, "", "MSE_V2TuneStrategy"]], "neural_compressor.experimental.strategy.random": [[354, 1, 1, "", "RandomTuneStrategy"]], "neural_compressor.experimental.strategy.strategy": [[355, 1, 1, "", "TuneStrategy"], [355, 2, 1, "", "strategy_registry"]], "neural_compressor.experimental.strategy.utils": [[356, 0, 0, "-", "constant"], [358, 0, 0, "-", "tuning_sampler"], [359, 0, 0, "-", "tuning_space"], [360, 0, 0, "-", "tuning_structs"], [361, 0, 0, "-", "utility"]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[358, 1, 1, "", "FallbackTuningSampler"], [358, 1, 1, "", "ModelWiseTuningSampler"], [358, 1, 1, "", "OpTypeWiseTuningSampler"], [358, 1, 1, "", "OpWiseTuningSampler"], [358, 1, 1, "", "SmoothQuantSampler"], [358, 1, 1, "", "TuningOrder"], [358, 1, 1, "", "TuningSampler"], [358, 1, 1, "", "TuningSamplerRegistry"]], "neural_compressor.experimental.strategy.utils.tuning_space": [[359, 1, 1, "", "TuningItem"], [359, 1, 1, "", "TuningSpace"], [359, 2, 1, "", "initial_tuning_cfg_with_quant_mode"], [359, 2, 1, "", "pattern_to_internal"], [359, 2, 1, "", "pattern_to_path"], [359, 2, 1, "", "quant_mode_from_pattern"]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[360, 1, 1, "", "OpTuningConfig"]], "neural_compressor.experimental.strategy.utils.utility": [[361, 1, 1, "", "OrderedDefaultDict"], [361, 2, 1, "", "extract_data_type"], [361, 2, 1, "", "get_adaptor_name"], [361, 2, 1, "", "reverted_data_type"]], "neural_compressor.metric": [[363, 0, 0, "-", "bleu"], [364, 0, 0, "-", "bleu_util"], [365, 0, 0, "-", "coco_label_map"], [366, 0, 0, "-", "coco_tools"], [367, 0, 0, "-", "evaluate_squad"], [368, 0, 0, "-", "f1"], [370, 0, 0, "-", "metric"]], "neural_compressor.metric.bleu": [[363, 1, 1, "", "BLEU"], [363, 1, 1, "", "UnicodeRegex"], [363, 2, 1, "", "bleu_tokenize"]], "neural_compressor.metric.bleu.BLEU": [[363, 4, 1, "", "labels"], [363, 4, 1, "", "predictions"]], "neural_compressor.metric.bleu.UnicodeRegex": [[363, 4, 1, "", "nondigit_punct_re"], [363, 4, 1, "", "punct_nondigit_re"], [363, 4, 1, "", "symbol_re"]], "neural_compressor.metric.bleu_util": [[364, 2, 1, "", "compute_bleu"]], "neural_compressor.metric.coco_tools": [[366, 1, 1, "", "COCOEvalWrapper"], [366, 1, 1, "", "COCOWrapper"], [366, 2, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [366, 2, 1, "", "ExportSingleImageDetectionMasksToCoco"], [366, 2, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.metric.coco_tools.COCOWrapper": [[366, 4, 1, "", "dataset"], [366, 4, 1, "", "detection_type"]], "neural_compressor.metric.evaluate_squad": [[367, 2, 1, "", "evaluate"], [367, 2, 1, "", "exact_match_score"], [367, 2, 1, "", "f1_score"], [367, 2, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[368, 2, 1, "", "evaluate"], [368, 2, 1, "", "f1_score"], [368, 2, 1, "", "metric_max_over_ground_truths"], [368, 2, 1, "", "normalize_answer"]], "neural_compressor.metric.metric": [[370, 1, 1, "", "Accuracy"], [370, 1, 1, "", "BaseMetric"], [370, 1, 1, "", "COCOmAPv2"], [370, 1, 1, "", "F1"], [370, 1, 1, "", "GeneralTopK"], [370, 1, 1, "", "Loss"], [370, 1, 1, "", "MAE"], [370, 1, 1, "", "METRICS"], [370, 1, 1, "", "MSE"], [370, 1, 1, "", "MXNetMetrics"], [370, 1, 1, "", "Metric"], [370, 1, 1, "", "ONNXRTGLUE"], [370, 1, 1, "", "ONNXRTITMetrics"], [370, 1, 1, "", "ONNXRTQLMetrics"], [370, 1, 1, "", "PyTorchLoss"], [370, 1, 1, "", "PyTorchMetrics"], [370, 1, 1, "", "RMSE"], [370, 1, 1, "", "ROC"], [370, 1, 1, "", "SquadF1"], [370, 1, 1, "", "TensorflowCOCOMAP"], [370, 1, 1, "", "TensorflowMAP"], [370, 1, 1, "", "TensorflowMetrics"], [370, 1, 1, "", "TensorflowTopK"], [370, 1, 1, "", "TensorflowVOCMAP"], [370, 1, 1, "", "WrapMXNetMetric"], [370, 1, 1, "", "WrapONNXRTMetric"], [370, 1, 1, "", "WrapPyTorchMetric"], [370, 1, 1, "", "mIOU"], [370, 2, 1, "", "metric_registry"], [370, 2, 1, "", "register_customer_metric"]], "neural_compressor.metric.metric.Accuracy": [[370, 4, 1, "", "label_list"], [370, 4, 1, "", "pred_list"], [370, 4, 1, "", "sample"]], "neural_compressor.metric.metric.GeneralTopK": [[370, 4, 1, "", "k"], [370, 4, 1, "", "num_correct"], [370, 4, 1, "", "num_sample"]], "neural_compressor.metric.metric.Loss": [[370, 4, 1, "", "sample"], [370, 4, 1, "", "sum"]], "neural_compressor.metric.metric.MAE": [[370, 4, 1, "", "compare_label"], [370, 4, 1, "", "label_list"], [370, 4, 1, "", "pred_list"]], "neural_compressor.metric.metric.METRICS": [[370, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.MSE": [[370, 4, 1, "", "compare_label"], [370, 4, 1, "", "label_list"], [370, 4, 1, "", "pred_list"]], "neural_compressor.metric.metric.MXNetMetrics": [[370, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTITMetrics": [[370, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTQLMetrics": [[370, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.PyTorchMetrics": [[370, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.RMSE": [[370, 4, 1, "", "mse"]], "neural_compressor.metric.metric.TensorflowMetrics": [[370, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.TensorflowTopK": [[370, 4, 1, "", "k"], [370, 4, 1, "", "num_correct"], [370, 4, 1, "", "num_sample"]], "neural_compressor.mix_precision": [[371, 2, 1, "", "fit"]], "neural_compressor.model": [[372, 0, 0, "-", "base_model"], [374, 0, 0, "-", "keras_model"], [375, 0, 0, "-", "model"], [376, 0, 0, "-", "mxnet_model"], [377, 0, 0, "-", "nets_factory"], [378, 0, 0, "-", "onnx_model"], [379, 0, 0, "-", "tensorflow_model"], [380, 0, 0, "-", "torch_model"]], "neural_compressor.model.base_model": [[372, 1, 1, "", "BaseModel"]], "neural_compressor.model.keras_model": [[374, 1, 1, "", "KerasModel"]], "neural_compressor.model.model": [[375, 1, 1, "", "Model"], [375, 2, 1, "", "get_model_fwk_name"]], "neural_compressor.model.mxnet_model": [[376, 1, 1, "", "MXNetModel"]], "neural_compressor.model.nets_factory": [[377, 1, 1, "", "TFSlimNetsFactory"]], "neural_compressor.model.onnx_model": [[378, 1, 1, "", "ONNXModel"]], "neural_compressor.model.tensorflow_model": [[379, 1, 1, "", "TensorflowBaseModel"], [379, 1, 1, "", "TensorflowCheckpointModel"], [379, 1, 1, "", "TensorflowLLMModel"], [379, 1, 1, "", "TensorflowModel"], [379, 1, 1, "", "TensorflowQATModel"], [379, 1, 1, "", "TensorflowSavedModelModel"], [379, 2, 1, "", "checkpoint_session"], [379, 2, 1, "", "estimator_session"], [379, 2, 1, "", "frozen_pb_session"], [379, 2, 1, "", "get_model_type"], [379, 2, 1, "", "graph_def_session"], [379, 2, 1, "", "graph_session"], [379, 2, 1, "", "keras_session"], [379, 2, 1, "", "load_saved_model"], [379, 2, 1, "", "saved_model_session"], [379, 2, 1, "", "slim_session"], [379, 2, 1, "", "validate_and_inference_input_output"], [379, 2, 1, "", "validate_graph_node"]], "neural_compressor.model.torch_model": [[380, 1, 1, "", "IPEXModel"], [380, 1, 1, "", "PyTorchBaseModel"], [380, 1, 1, "", "PyTorchFXModel"], [380, 1, 1, "", "PyTorchModel"]], "neural_compressor.objective": [[381, 1, 1, "", "Accuracy"], [381, 1, 1, "", "Footprint"], [381, 1, 1, "", "ModelSize"], [381, 1, 1, "", "MultiObjective"], [381, 1, 1, "", "Objective"], [381, 1, 1, "", "Performance"], [381, 2, 1, "", "objective_custom_registry"], [381, 2, 1, "", "objective_registry"]], "neural_compressor.onnxrt": [[382, 0, 0, "-", "algorithms"], [395, 0, 0, "-", "quantization"], [397, 0, 0, "-", "utils"]], "neural_compressor.onnxrt.algorithms": [[385, 0, 0, "-", "smoother"], [388, 0, 0, "-", "weight_only"]], "neural_compressor.onnxrt.algorithms.smoother": [[383, 0, 0, "-", "calibrator"], [384, 0, 0, "-", "core"]], "neural_compressor.onnxrt.algorithms.smoother.calibrator": [[383, 1, 1, "", "Calibrator"]], "neural_compressor.onnxrt.algorithms.smoother.core": [[384, 1, 1, "", "Smoother"]], "neural_compressor.onnxrt.algorithms.weight_only": [[386, 0, 0, "-", "awq"], [387, 0, 0, "-", "gptq"], [389, 0, 0, "-", "rtn"], [390, 0, 0, "-", "utility"]], "neural_compressor.onnxrt.algorithms.weight_only.awq": [[386, 2, 1, "", "apply_awq_on_model"], [386, 2, 1, "", "awq_quantize"]], "neural_compressor.onnxrt.algorithms.weight_only.gptq": [[387, 2, 1, "", "apply_gptq_on_model"], [387, 2, 1, "", "gptq_quantize"]], "neural_compressor.onnxrt.algorithms.weight_only.rtn": [[389, 2, 1, "", "apply_rtn_on_model"], [389, 2, 1, "", "rtn_quantize"]], "neural_compressor.onnxrt.algorithms.weight_only.utility": [[390, 2, 1, "", "make_matmul_weight_only_node"], [390, 2, 1, "", "pad_tensor"], [390, 2, 1, "", "prepare_inputs"], [390, 2, 1, "", "qdq_tensor"], [390, 2, 1, "", "quant_tensor"]], "neural_compressor.onnxrt.quantization": [[392, 0, 0, "-", "algorithm_entry"], [393, 0, 0, "-", "calibrate"], [394, 0, 0, "-", "config"], [396, 0, 0, "-", "quantize"]], "neural_compressor.onnxrt.quantization.algorithm_entry": [[392, 2, 1, "", "awq_quantize_entry"], [392, 2, 1, "", "gptq_quantize_entry"], [392, 2, 1, "", "rtn_quantize_entry"], [392, 2, 1, "", "smooth_quant_entry"]], "neural_compressor.onnxrt.quantization.calibrate": [[393, 1, 1, "", "CalibrationDataReader"]], "neural_compressor.onnxrt.quantization.config": [[394, 1, 1, "", "AWQConfig"], [394, 1, 1, "", "GPTQConfig"], [394, 1, 1, "", "RTNConfig"], [394, 1, 1, "", "SmoohQuantConfig"], [394, 2, 1, "", "get_default_awq_config"], [394, 2, 1, "", "get_default_gptq_config"], [394, 2, 1, "", "get_default_rtn_config"], [394, 2, 1, "", "get_default_sq_config"]], "neural_compressor.onnxrt.utils": [[398, 0, 0, "-", "onnx_model"], [399, 0, 0, "-", "utility"]], "neural_compressor.onnxrt.utils.onnx_model": [[398, 1, 1, "", "ONNXModel"]], "neural_compressor.onnxrt.utils.utility": [[399, 2, 1, "", "find_by_name"], [399, 2, 1, "", "get_qrange_for_qType"], [399, 2, 1, "", "is_B_transposed"], [399, 2, 1, "", "quantize_data"], [399, 2, 1, "", "register_algo"], [399, 2, 1, "", "simple_progress_bar"]], "neural_compressor.profiling": [[402, 0, 0, "-", "parser"], [412, 0, 0, "-", "profiler"]], "neural_compressor.profiling.parser": [[401, 0, 0, "-", "factory"], [404, 0, 0, "-", "onnx_parser"], [406, 0, 0, "-", "parser"], [407, 0, 0, "-", "result"], [409, 0, 0, "-", "tensorflow_parser"]], "neural_compressor.profiling.parser.factory": [[401, 1, 1, "", "ParserFactory"]], "neural_compressor.profiling.parser.onnx_parser": [[403, 0, 0, "-", "factory"], [405, 0, 0, "-", "parser"]], "neural_compressor.profiling.parser.onnx_parser.factory": [[403, 1, 1, "", "OnnxrtParserFactory"]], "neural_compressor.profiling.parser.onnx_parser.parser": [[405, 1, 1, "", "OnnxProfilingParser"]], "neural_compressor.profiling.parser.parser": [[406, 1, 1, "", "ProfilingParser"]], "neural_compressor.profiling.parser.result": [[407, 1, 1, "", "ProfilingResult"]], "neural_compressor.profiling.parser.tensorflow_parser": [[408, 0, 0, "-", "factory"], [410, 0, 0, "-", "parser"]], "neural_compressor.profiling.parser.tensorflow_parser.factory": [[408, 1, 1, "", "TensorFlowParserFactory"]], "neural_compressor.profiling.parser.tensorflow_parser.parser": [[410, 1, 1, "", "TensorFlowProfilingParser"]], "neural_compressor.profiling.profiler": [[411, 0, 0, "-", "factory"], [414, 0, 0, "-", "onnxrt_profiler"], [417, 0, 0, "-", "profiler"], [419, 0, 0, "-", "tensorflow_profiler"]], "neural_compressor.profiling.profiler.factory": [[411, 1, 1, "", "ProfilerFactory"]], "neural_compressor.profiling.profiler.onnxrt_profiler": [[413, 0, 0, "-", "factory"], [415, 0, 0, "-", "profiler"], [416, 0, 0, "-", "utils"]], "neural_compressor.profiling.profiler.onnxrt_profiler.factory": [[413, 1, 1, "", "ProfilerFactory"]], "neural_compressor.profiling.profiler.onnxrt_profiler.profiler": [[415, 1, 1, "", "Profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.utils": [[416, 2, 1, "", "create_onnx_config"]], "neural_compressor.profiling.profiler.profiler": [[417, 1, 1, "", "Profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler": [[418, 0, 0, "-", "factory"], [420, 0, 0, "-", "profiler"], [421, 0, 0, "-", "utils"]], "neural_compressor.profiling.profiler.tensorflow_profiler.factory": [[418, 1, 1, "", "ProfilerFactory"]], "neural_compressor.profiling.profiler.tensorflow_profiler.profiler": [[420, 1, 1, "", "Profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.utils": [[421, 2, 1, "", "create_tf_config"], [421, 2, 1, "", "delete_assign"], [421, 2, 1, "", "set_eager_execution"]], "neural_compressor.quantization": [[422, 2, 1, "", "fit"]], "neural_compressor.strategy": [[423, 0, 0, "-", "auto"], [424, 0, 0, "-", "auto_mixed_precision"], [425, 0, 0, "-", "basic"], [426, 0, 0, "-", "bayesian"], [427, 0, 0, "-", "conservative"], [428, 0, 0, "-", "exhaustive"], [429, 0, 0, "-", "hawq_v2"], [431, 0, 0, "-", "mse"], [432, 0, 0, "-", "mse_v2"], [433, 0, 0, "-", "random"], [434, 0, 0, "-", "strategy"], [436, 0, 0, "-", "utils"]], "neural_compressor.strategy.auto": [[423, 1, 1, "", "AutoTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[424, 1, 1, "", "AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.basic": [[425, 1, 1, "", "BasicTuneStrategy"]], "neural_compressor.strategy.bayesian": [[426, 1, 1, "", "BayesianOptimization"], [426, 1, 1, "", "BayesianTuneStrategy"], [426, 1, 1, "", "TargetSpace"], [426, 2, 1, "", "acq_max"]], "neural_compressor.strategy.conservative": [[427, 1, 1, "", "ConservativeTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[428, 1, 1, "", "ExhaustiveTuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[429, 1, 1, "", "HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.mse": [[431, 1, 1, "", "MSETuneStrategy"]], "neural_compressor.strategy.mse_v2": [[432, 1, 1, "", "MSE_V2TuneStrategy"]], "neural_compressor.strategy.random": [[433, 1, 1, "", "RandomTuneStrategy"]], "neural_compressor.strategy.strategy": [[434, 1, 1, "", "TuneStrategy"], [434, 1, 1, "", "TuneStrategyMeta"], [434, 2, 1, "", "strategy_registry"]], "neural_compressor.strategy.utils": [[435, 0, 0, "-", "constant"], [437, 0, 0, "-", "tuning_sampler"], [438, 0, 0, "-", "tuning_space"], [439, 0, 0, "-", "tuning_structs"], [440, 0, 0, "-", "utility"]], "neural_compressor.strategy.utils.tuning_sampler": [[437, 1, 1, "", "BlockFallbackTuningSampler"], [437, 1, 1, "", "FallbackTuningSampler"], [437, 1, 1, "", "LowerBitsSampler"], [437, 1, 1, "", "ModelWiseTuningSampler"], [437, 1, 1, "", "OpTypeWiseTuningSampler"], [437, 1, 1, "", "OpWiseTuningSampler"], [437, 1, 1, "", "SmoothQuantSampler"], [437, 1, 1, "", "TuningOrder"], [437, 1, 1, "", "TuningSampler"], [437, 1, 1, "", "WeightOnlyQuantSampler"]], "neural_compressor.strategy.utils.tuning_space": [[438, 1, 1, "", "TuningItem"], [438, 1, 1, "", "TuningSpace"], [438, 2, 1, "", "initial_tuning_cfg_with_quant_mode"], [438, 2, 1, "", "pattern_to_internal"], [438, 2, 1, "", "pattern_to_path"], [438, 2, 1, "", "quant_mode_from_pattern"]], "neural_compressor.strategy.utils.tuning_structs": [[439, 1, 1, "", "OpTuningConfig"]], "neural_compressor.strategy.utils.utility": [[440, 1, 1, "", "ClassRegister"], [440, 1, 1, "", "OrderedDefaultDict"], [440, 1, 1, "", "QuantOptions"], [440, 1, 1, "", "QuantType"], [440, 2, 1, "", "build_slave_faker_model"], [440, 2, 1, "", "extract_data_type"], [440, 2, 1, "", "get_adaptor_name"], [440, 2, 1, "", "preprocess_user_cfg"], [440, 2, 1, "", "reverted_data_type"]], "neural_compressor.template": [[441, 0, 0, "-", "api_doc_example"]], "neural_compressor.template.api_doc_example": [[441, 1, 1, "", "ExampleClass"], [441, 4, 1, "", "attribute1"], [441, 2, 1, "", "function1"], [441, 2, 1, "", "function2"], [441, 2, 1, "", "function3"], [441, 2, 1, "", "generator1"], [441, 5, 1, "", "module_debug_level1"]], "neural_compressor.template.api_doc_example.ExampleClass": [[441, 4, 1, "", "attr1"], [441, 4, 1, "", "attr2"], [441, 4, 1, "", "attr5"]], "neural_compressor.tensorflow": [[443, 0, 0, "-", "algorithms"], [460, 0, 0, "-", "quantization"], [503, 0, 0, "-", "utils"]], "neural_compressor.tensorflow.algorithms": [[446, 0, 0, "-", "smoother"], [448, 0, 0, "-", "static_quant"]], "neural_compressor.tensorflow.algorithms.smoother": [[444, 0, 0, "-", "calibration"], [445, 0, 0, "-", "core"], [447, 0, 0, "-", "scaler"]], "neural_compressor.tensorflow.algorithms.smoother.calibration": [[444, 1, 1, "", "SmoothQuantCalibration"], [444, 1, 1, "", "SmoothQuantCalibrationLLM"]], "neural_compressor.tensorflow.algorithms.smoother.core": [[445, 1, 1, "", "SmoothQuant"]], "neural_compressor.tensorflow.algorithms.smoother.scaler": [[447, 1, 1, "", "SmoothQuantScaler"], [447, 1, 1, "", "SmoothQuantScalerLLM"]], "neural_compressor.tensorflow.algorithms.static_quant": [[449, 0, 0, "-", "keras"], [453, 0, 0, "-", "keras_utils"]], "neural_compressor.tensorflow.algorithms.static_quant.keras": [[449, 1, 1, "", "KerasAdaptor"], [449, 1, 1, "", "KerasConfigConverter"], [449, 1, 1, "", "KerasQuery"]], "neural_compressor.tensorflow.algorithms.static_quant.keras_utils": [[450, 0, 0, "-", "conv2d"], [451, 0, 0, "-", "dense"], [452, 0, 0, "-", "depthwise_conv2d"], [454, 0, 0, "-", "pool2d"], [455, 0, 0, "-", "quantizer"], [456, 0, 0, "-", "separable_conv2d"]], "neural_compressor.tensorflow.quantization": [[458, 0, 0, "-", "algorithm_entry"], [459, 0, 0, "-", "config"], [461, 0, 0, "-", "quantize"], [498, 0, 0, "-", "utils"]], "neural_compressor.tensorflow.quantization.algorithm_entry": [[458, 2, 1, "", "static_quantize_entry"]], "neural_compressor.tensorflow.quantization.config": [[459, 1, 1, "", "SmoothQuantConfig"], [459, 1, 1, "", "StaticQuantConfig"], [459, 2, 1, "", "get_all_registered_configs"], [459, 2, 1, "", "get_default_sq_config"], [459, 2, 1, "", "get_default_static_quant_config"]], "neural_compressor.tensorflow.quantization.quantize": [[461, 2, 1, "", "quantize_model"]], "neural_compressor.tensorflow.quantization.utils": [[496, 0, 0, "-", "graph_rewriter"], [497, 0, 0, "-", "graph_util"], [499, 0, 0, "-", "quantize_graph_common"], [500, 0, 0, "-", "utility"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter": [[485, 0, 0, "-", "generic"], [495, 0, 0, "-", "graph_base"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic": [[462, 0, 0, "-", "convert_add_to_biasadd"], [463, 0, 0, "-", "convert_layout"], [464, 0, 0, "-", "convert_leakyrelu"], [465, 0, 0, "-", "convert_nan_to_random"], [466, 0, 0, "-", "convert_placeholder_to_const"], [467, 0, 0, "-", "dilated_contraction"], [468, 0, 0, "-", "dummy_biasadd"], [469, 0, 0, "-", "expanddims_optimizer"], [470, 0, 0, "-", "fetch_weight_from_reshape"], [471, 0, 0, "-", "fold_batch_norm"], [472, 0, 0, "-", "fold_constant"], [473, 0, 0, "-", "fuse_biasadd_add"], [474, 0, 0, "-", "fuse_column_wise_mul"], [475, 0, 0, "-", "fuse_conv_with_math"], [476, 0, 0, "-", "fuse_decomposed_bn"], [477, 0, 0, "-", "fuse_decomposed_in"], [478, 0, 0, "-", "fuse_gelu"], [479, 0, 0, "-", "fuse_layer_norm"], [480, 0, 0, "-", "fuse_pad_with_conv"], [481, 0, 0, "-", "fuse_pad_with_fp32_conv"], [482, 0, 0, "-", "fuse_reshape_transpose"], [483, 0, 0, "-", "graph_cse_optimizer"], [484, 0, 0, "-", "grappler_pass"], [486, 0, 0, "-", "insert_print_node"], [487, 0, 0, "-", "move_squeeze_after_relu"], [488, 0, 0, "-", "pre_optimize"], [489, 0, 0, "-", "remove_training_nodes"], [490, 0, 0, "-", "rename_batch_norm"], [491, 0, 0, "-", "split_shared_input"], [492, 0, 0, "-", "strip_equivalent_nodes"], [493, 0, 0, "-", "strip_unused_nodes"], [494, 0, 0, "-", "switch_optimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_add_to_biasadd": [[462, 1, 1, "", "ConvertAddToBiasAddOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_layout": [[463, 1, 1, "", "ConvertLayoutOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_leakyrelu": [[464, 1, 1, "", "ConvertLeakyReluOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_nan_to_random": [[465, 1, 1, "", "ConvertNanToRandom"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_placeholder_to_const": [[466, 1, 1, "", "ConvertPlaceholderToConst"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dilated_contraction": [[467, 1, 1, "", "DilatedContraction"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dummy_biasadd": [[468, 1, 1, "", "InjectDummyBiasAddOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.expanddims_optimizer": [[469, 1, 1, "", "ExpandDimsOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fetch_weight_from_reshape": [[470, 1, 1, "", "FetchWeightFromReshapeOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_batch_norm": [[471, 1, 1, "", "FoldBatchNormNodesOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_constant": [[472, 1, 1, "", "GraphFoldConstantOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_biasadd_add": [[473, 1, 1, "", "FuseBiasAddAndAddOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_column_wise_mul": [[474, 1, 1, "", "FuseColumnWiseMulOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_conv_with_math": [[475, 1, 1, "", "FuseConvWithMathOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn": [[476, 1, 1, "", "FuseDecomposedBNOptimizer"], [476, 2, 1, "", "bypass_reshape"], [476, 2, 1, "", "get_const_dim_count"], [476, 2, 1, "", "node_from_map"], [476, 2, 1, "", "node_name_from_input"], [476, 2, 1, "", "valid_reshape_inputs"], [476, 2, 1, "", "values_from_const"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in": [[477, 1, 1, "", "FuseDecomposedINOptimizer"], [477, 2, 1, "", "bypass_reshape"], [477, 2, 1, "", "get_const_dim_count"], [477, 2, 1, "", "node_from_map"], [477, 2, 1, "", "node_name_from_input"], [477, 2, 1, "", "valid_reshape_inputs"], [477, 2, 1, "", "values_from_const"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_gelu": [[478, 1, 1, "", "FuseGeluOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm": [[479, 1, 1, "", "FuseLayerNormOptimizer"], [479, 2, 1, "", "node_from_map"], [479, 2, 1, "", "node_name_from_input"], [479, 2, 1, "", "values_from_const"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_conv": [[480, 1, 1, "", "FusePadWithConv2DOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[481, 1, 1, "", "FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_reshape_transpose": [[482, 1, 1, "", "FuseTransposeReshapeOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.graph_cse_optimizer": [[483, 1, 1, "", "GraphCseOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.grappler_pass": [[484, 1, 1, "", "GrapplerOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.insert_print_node": [[486, 1, 1, "", "InsertPrintMinMaxNode"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.move_squeeze_after_relu": [[487, 1, 1, "", "MoveSqueezeAfterReluOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.pre_optimize": [[488, 1, 1, "", "PreOptimization"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.remove_training_nodes": [[489, 1, 1, "", "RemoveTrainingNodesOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.rename_batch_norm": [[490, 1, 1, "", "RenameBatchNormOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.split_shared_input": [[491, 1, 1, "", "SplitSharedInputOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_equivalent_nodes": [[492, 1, 1, "", "StripEquivalentNodesOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_unused_nodes": [[493, 1, 1, "", "StripUnusedNodesOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.switch_optimizer": [[494, 1, 1, "", "SwitchOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.graph_base": [[495, 1, 1, "", "GraphRewriterBase"]], "neural_compressor.tensorflow.quantization.utils.graph_util": [[497, 1, 1, "", "GraphAnalyzer"], [497, 1, 1, "", "GraphRewriterHelper"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph_common": [[499, 1, 1, "", "QuantizeGraphHelper"]], "neural_compressor.tensorflow.quantization.utils.utility": [[500, 2, 1, "", "apply_inlining"], [500, 2, 1, "", "collate_tf_preds"], [500, 2, 1, "", "construct_function_from_graph_def"], [500, 2, 1, "", "disable_random"], [500, 2, 1, "", "fix_ref_type_of_graph_def"], [500, 2, 1, "", "generate_feed_dict"], [500, 2, 1, "", "get_graph_def"], [500, 2, 1, "", "get_input_output_node_names"], [500, 2, 1, "", "get_model_input_shape"], [500, 2, 1, "", "get_tensor_by_name"], [500, 2, 1, "", "get_tensor_val_from_graph_node"], [500, 2, 1, "", "get_weight_from_input_tensor"], [500, 2, 1, "", "int8_node_name_reverse"], [500, 2, 1, "", "is_ckpt_format"], [500, 2, 1, "", "is_saved_model_format"], [500, 2, 1, "", "iterator_sess_run"], [500, 2, 1, "", "parse_saved_model"], [500, 2, 1, "", "read_graph"], [500, 2, 1, "", "reconstruct_saved_model"], [500, 2, 1, "", "strip_equivalent_nodes"], [500, 2, 1, "", "strip_unused_nodes"], [500, 2, 1, "", "tf_diagnosis_helper"], [500, 2, 1, "", "write_graph"]], "neural_compressor.tensorflow.utils": [[501, 0, 0, "-", "constants"], [502, 0, 0, "-", "data"], [504, 0, 0, "-", "model"], [505, 0, 0, "-", "model_wrappers"], [506, 0, 0, "-", "nets_factory"], [507, 0, 0, "-", "utility"]], "neural_compressor.tensorflow.utils.data": [[502, 1, 1, "", "BaseDataLoader"], [502, 1, 1, "", "DummyDataset"], [502, 1, 1, "", "DummyDatasetV2"]], "neural_compressor.tensorflow.utils.model": [[504, 1, 1, "", "Model"]], "neural_compressor.tensorflow.utils.model_wrappers": [[505, 1, 1, "", "BaseModel"], [505, 1, 1, "", "KerasModel"], [505, 1, 1, "", "TensorflowBaseModel"], [505, 1, 1, "", "TensorflowCheckpointModel"], [505, 1, 1, "", "TensorflowLLMModel"], [505, 1, 1, "", "TensorflowModel"], [505, 1, 1, "", "TensorflowQATModel"], [505, 1, 1, "", "TensorflowSavedModelModel"], [505, 2, 1, "", "checkpoint_session"], [505, 2, 1, "", "estimator_session"], [505, 2, 1, "", "frozen_pb_session"], [505, 2, 1, "", "get_model_type"], [505, 2, 1, "", "graph_def_session"], [505, 2, 1, "", "graph_session"], [505, 2, 1, "", "keras_session"], [505, 2, 1, "", "load_saved_model"], [505, 2, 1, "", "saved_model_session"], [505, 2, 1, "", "slim_session"], [505, 2, 1, "", "validate_and_inference_input_output"], [505, 2, 1, "", "validate_graph_node"]], "neural_compressor.tensorflow.utils.nets_factory": [[506, 1, 1, "", "TFSlimNetsFactory"]], "neural_compressor.tensorflow.utils.utility": [[507, 1, 1, "", "CaptureOutputToFile"], [507, 1, 1, "", "CpuInfo"], [507, 2, 1, "", "Dequantize"], [507, 1, 1, "", "LazyImport"], [507, 1, 1, "", "Statistics"], [507, 2, 1, "", "combine_histogram"], [507, 2, 1, "", "deep_get"], [507, 2, 1, "", "dequantize_weight"], [507, 2, 1, "", "disable_random"], [507, 2, 1, "", "dump_data_to_local"], [507, 2, 1, "", "dump_elapsed_time"], [507, 2, 1, "", "get_all_fp32_data"], [507, 2, 1, "", "get_tensor_histogram"], [507, 2, 1, "", "itex_installed"], [507, 2, 1, "", "load_data_from_pkl"], [507, 2, 1, "", "register_algo"], [507, 2, 1, "", "singleton"], [507, 2, 1, "", "version1_eq_version2"], [507, 2, 1, "", "version1_gt_version2"], [507, 2, 1, "", "version1_gte_version2"], [507, 2, 1, "", "version1_lt_version2"], [507, 2, 1, "", "version1_lte_version2"]], "neural_compressor.torch": [[512, 0, 0, "-", "algorithms"], [526, 0, 0, "-", "amp"], [531, 0, 0, "-", "quantization"], [536, 0, 0, "-", "utils"]], "neural_compressor.torch.algorithms": [[509, 0, 0, "-", "habana_fp8"], [513, 0, 0, "-", "layer_wise"], [519, 0, 0, "-", "weight_only"]], "neural_compressor.torch.algorithms.habana_fp8": [[508, 0, 0, "-", "fp8_quant"], [510, 0, 0, "-", "modules"], [511, 0, 0, "-", "observer"]], "neural_compressor.torch.algorithms.layer_wise": [[514, 0, 0, "-", "load"], [515, 0, 0, "-", "modified_pickle"], [516, 0, 0, "-", "utils"]], "neural_compressor.torch.algorithms.layer_wise.load": [[514, 2, 1, "", "load"]], "neural_compressor.torch.algorithms.layer_wise.modified_pickle": [[515, 3, 1, "", "PickleError"], [515, 3, 1, "", "PicklingError"], [515, 3, 1, "", "UnpicklingError"]], "neural_compressor.torch.algorithms.layer_wise.utils": [[516, 2, 1, "", "dowload_hf_model"], [516, 2, 1, "", "get_children"], [516, 2, 1, "", "get_module"], [516, 2, 1, "", "get_named_children"], [516, 2, 1, "", "get_super_module_by_name"], [516, 2, 1, "", "load_empty_model"], [516, 2, 1, "", "load_layer_wise_quantized_model"], [516, 2, 1, "", "load_tensor"], [516, 2, 1, "", "load_tensor_from_shard"], [516, 2, 1, "", "update_module"]], "neural_compressor.torch.algorithms.weight_only": [[517, 0, 0, "-", "awq"], [518, 0, 0, "-", "gptq"], [520, 0, 0, "-", "modules"], [521, 0, 0, "-", "rtn"], [522, 0, 0, "-", "utility"]], "neural_compressor.torch.algorithms.weight_only.awq": [[517, 1, 1, "", "ActAwareWeightQuant"], [517, 2, 1, "", "awq_quantize"]], "neural_compressor.torch.algorithms.weight_only.gptq": [[518, 1, 1, "", "GPTQ"], [518, 1, 1, "", "GPTQuantizer"], [518, 2, 1, "", "find_layers"], [518, 2, 1, "", "find_layers_name"], [518, 2, 1, "", "gptq_quantize"], [518, 2, 1, "", "is_leaf"], [518, 2, 1, "", "log_quantizable_layers_per_transformer"], [518, 2, 1, "", "quantize"], [518, 2, 1, "", "trace_gptq_target_blocks"]], "neural_compressor.torch.algorithms.weight_only.modules": [[520, 1, 1, "", "FakeAffineTensorQuantFunction"], [520, 1, 1, "", "MulLinear"], [520, 1, 1, "", "TEQLinearFakeQuant"]], "neural_compressor.torch.algorithms.weight_only.rtn": [[521, 2, 1, "", "rtn_quantize"]], "neural_compressor.torch.algorithms.weight_only.utility": [[522, 2, 1, "", "calibration"], [522, 2, 1, "", "fetch_module"], [522, 2, 1, "", "get_absorb_layers"], [522, 2, 1, "", "get_block_prefix"], [522, 2, 1, "", "get_example_input"], [522, 2, 1, "", "get_hidden_states"], [522, 2, 1, "", "get_module"], [522, 2, 1, "", "get_module_input_output"], [522, 2, 1, "", "qdq_weight_actor"], [522, 2, 1, "", "qdq_weight_asym"], [522, 2, 1, "", "qdq_weight_sym"], [522, 2, 1, "", "quant_tensor"], [522, 2, 1, "", "quant_weight_w_scale"], [522, 2, 1, "", "quantize_4bit"], [522, 2, 1, "", "search_clip"], [522, 2, 1, "", "set_module"]], "neural_compressor.torch.amp": [[523, 0, 0, "-", "autocast"], [525, 0, 0, "-", "fp8"]], "neural_compressor.torch.amp.autocast": [[523, 1, 1, "", "autocast"]], "neural_compressor.torch.amp.fp8": [[524, 0, 0, "-", "functions"]], "neural_compressor.torch.quantization": [[528, 0, 0, "-", "algorithm_entry"], [529, 0, 0, "-", "autotune"], [530, 0, 0, "-", "config"], [532, 0, 0, "-", "modules"], [533, 0, 0, "-", "quantize"]], "neural_compressor.torch.quantization.algorithm_entry": [[528, 2, 1, "", "rtn_entry"]], "neural_compressor.torch.quantization.autotune": [[529, 2, 1, "", "autotune"]], "neural_compressor.torch.quantization.config": [[530, 1, 1, "", "GPTQConfig"], [530, 1, 1, "", "RTNConfig"], [530, 2, 1, "", "get_default_gptq_config"], [530, 2, 1, "", "get_default_rtn_config"]], "neural_compressor.torch.quantization.quantize": [[533, 2, 1, "", "quantize"]], "neural_compressor.torch.utils": [[534, 0, 0, "-", "constants"], [535, 0, 0, "-", "environ"], [537, 0, 0, "-", "utility"]], "neural_compressor.torch.utils.utility": [[537, 2, 1, "", "fetch_module"], [537, 2, 1, "", "register_algo"], [537, 2, 1, "", "set_module"]], "neural_compressor.training": [[538, 1, 1, "", "CallBacks"], [538, 1, 1, "", "CompressionManager"], [538, 2, 1, "", "fit"], [538, 2, 1, "", "prepare_compression"]], "neural_compressor.utils": [[539, 0, 0, "-", "collect_layer_histogram"], [540, 0, 0, "-", "constant"], [541, 0, 0, "-", "create_obj_from_config"], [543, 0, 0, "-", "kl_divergence"], [544, 0, 0, "-", "load_huggingface"], [545, 0, 0, "-", "logger"], [546, 0, 0, "-", "neural_insights_utils"], [547, 0, 0, "-", "options"], [548, 0, 0, "-", "pytorch"], [549, 0, 0, "-", "utility"], [550, 0, 0, "-", "weights_details"]], "neural_compressor.utils.collect_layer_histogram": [[539, 1, 1, "", "LayerHistogramCollector"]], "neural_compressor.utils.create_obj_from_config": [[541, 2, 1, "", "create_dataloader"], [541, 2, 1, "", "create_dataset"], [541, 2, 1, "", "create_eval_func"], [541, 2, 1, "", "create_train_func"], [541, 2, 1, "", "get_algorithm"], [541, 2, 1, "", "get_func_from_config"], [541, 2, 1, "", "get_metrics"], [541, 2, 1, "", "get_postprocess"], [541, 2, 1, "", "get_preprocess"]], "neural_compressor.utils.kl_divergence": [[543, 1, 1, "", "KL_Divergence"]], "neural_compressor.utils.load_huggingface": [[544, 1, 1, "", "OptimizedModel"], [544, 2, 1, "", "export_compressed_model"], [544, 2, 1, "", "save_for_huggingface_upstream"]], "neural_compressor.utils.logger": [[545, 1, 1, "", "Logger"], [545, 2, 1, "", "debug"], [545, 2, 1, "", "error"], [545, 2, 1, "", "fatal"], [545, 2, 1, "", "info"], [545, 2, 1, "", "log"], [545, 2, 1, "", "warn"], [545, 2, 1, "", "warning"]], "neural_compressor.utils.neural_insights_utils": [[546, 2, 1, "", "get_model_path"], [546, 2, 1, "", "register_neural_insights_workload"], [546, 2, 1, "", "update_neural_insights_workload"], [546, 2, 1, "", "update_neural_insights_workload_accuracy_data"]], "neural_compressor.utils.options": [[547, 1, 1, "", "onnxrt"]], "neural_compressor.utils.pytorch": [[548, 2, 1, "", "is_int8_model"], [548, 2, 1, "", "load"], [548, 2, 1, "", "load_weight_only"], [548, 2, 1, "", "recover_model_from_json"]], "neural_compressor.utils.utility": [[549, 1, 1, "", "CaptureOutputToFile"], [549, 1, 1, "", "CpuInfo"], [549, 2, 1, "", "Dequantize"], [549, 1, 1, "", "DotDict"], [549, 1, 1, "", "GLOBAL_STATE"], [549, 1, 1, "", "LazyImport"], [549, 1, 1, "", "MODE"], [549, 1, 1, "", "OpEntry"], [549, 1, 1, "", "Statistics"], [549, 2, 1, "", "alias_param"], [549, 2, 1, "", "calculate_mse"], [549, 2, 1, "", "check_key_exist"], [549, 2, 1, "", "combine_histogram"], [549, 2, 1, "", "compare_objects"], [549, 2, 1, "", "compute_sparsity"], [549, 2, 1, "", "dequantize_weight"], [549, 2, 1, "", "dump_class_attrs"], [549, 2, 1, "", "dump_data_to_local"], [549, 2, 1, "", "dump_elapsed_time"], [549, 2, 1, "", "dump_table"], [549, 2, 1, "", "dump_table_to_csv"], [549, 2, 1, "", "equal_dicts"], [549, 2, 1, "", "fault_tolerant_file"], [549, 2, 1, "", "get_all_fp32_data"], [549, 2, 1, "", "get_number_of_sockets"], [549, 2, 1, "", "get_op_list"], [549, 2, 1, "", "get_size"], [549, 2, 1, "", "get_tensor_histogram"], [549, 2, 1, "", "get_tensors_info"], [549, 2, 1, "", "get_tuning_history"], [549, 2, 1, "", "get_weights_details"], [549, 2, 1, "", "load_data_from_pkl"], [549, 2, 1, "", "mse_metric_gap"], [549, 2, 1, "", "print_op_list"], [549, 2, 1, "", "print_table"], [549, 2, 1, "", "recover"], [549, 2, 1, "", "set_random_seed"], [549, 2, 1, "", "set_resume_from"], [549, 2, 1, "", "set_tensorboard"], [549, 2, 1, "", "set_workspace"], [549, 2, 1, "", "show_memory_info"], [549, 2, 1, "", "singleton"], [549, 2, 1, "", "str2array"], [549, 2, 1, "", "time_limit"], [549, 2, 1, "", "version1_eq_version2"], [549, 2, 1, "", "version1_gt_version2"], [549, 2, 1, "", "version1_gte_version2"], [549, 2, 1, "", "version1_lt_version2"], [549, 2, 1, "", "version1_lte_version2"]], "neural_compressor.utils.weights_details": [[550, 1, 1, "", "WeightsDetails"], [550, 1, 1, "", "WeightsStatistics"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:function", "3": "py:exception", "4": "py:attribute", "5": "py:data"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "function", "Python function"], "3": ["py", "exception", "Python exception"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "data", "Python data"]}, "titleterms": {"block_mask": [0, 209], "neural_compressor": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551], "adaptor": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 559, 560, 562], "modul": [1, 3, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 113, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 153, 154, 155, 156, 157, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 183, 184, 185, 186, 188, 189, 192, 193, 195, 196, 198, 200, 201, 202, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 228, 229, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 256, 257, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 275, 276, 277, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303, 305, 306, 307, 308, 310, 311, 313, 314, 315, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 329, 330, 331, 332, 335, 336, 337, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 358, 359, 360, 361, 363, 364, 366, 367, 368, 370, 371, 372, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 386, 387, 389, 390, 392, 393, 394, 398, 399, 401, 403, 405, 406, 407, 408, 410, 411, 413, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 434, 437, 438, 439, 440, 441, 444, 445, 447, 449, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 499, 500, 502, 504, 505, 506, 507, 510, 514, 515, 516, 517, 518, 520, 521, 522, 523, 528, 529, 530, 532, 533, 537, 538, 539, 541, 543, 544, 545, 546, 547, 548, 549, 550], "content": [1, 2, 3, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 113, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 153, 154, 155, 156, 157, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 183, 184, 185, 186, 188, 189, 192, 193, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 228, 229, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 358, 359, 360, 361, 363, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 401, 403, 405, 406, 407, 408, 410, 411, 413, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 437, 438, 439, 440, 441, 444, 445, 447, 449, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 499, 500, 502, 504, 505, 506, 507, 514, 515, 516, 517, 518, 520, 521, 522, 523, 528, 529, 530, 533, 537, 538, 539, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 558, 626], "class": [1, 3, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 113, 115, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 149, 153, 154, 155, 156, 157, 161, 165, 166, 167, 169, 172, 173, 174, 175, 176, 178, 179, 180, 183, 185, 186, 188, 192, 193, 195, 200, 201, 202, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 224, 225, 226, 228, 229, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 271, 275, 276, 277, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 308, 309, 310, 313, 316, 317, 318, 319, 320, 321, 323, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 358, 359, 360, 361, 363, 366, 369, 370, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 391, 393, 394, 395, 397, 398, 401, 403, 405, 406, 407, 408, 410, 411, 413, 415, 417, 418, 420, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 434, 437, 438, 439, 440, 441, 444, 445, 447, 449, 459, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 499, 502, 504, 505, 506, 507, 517, 518, 520, 522, 523, 530, 538, 539, 542, 543, 544, 545, 547, 549, 550, 559, 626], "function": [1, 13, 16, 34, 42, 43, 44, 45, 67, 68, 70, 104, 105, 116, 118, 148, 149, 150, 153, 155, 156, 157, 162, 163, 164, 167, 168, 170, 171, 172, 174, 177, 178, 179, 180, 184, 186, 188, 189, 192, 193, 195, 196, 197, 198, 200, 202, 203, 207, 210, 216, 217, 218, 219, 220, 222, 223, 226, 235, 236, 244, 246, 250, 253, 254, 255, 258, 260, 261, 262, 263, 265, 267, 268, 270, 279, 287, 289, 293, 296, 297, 298, 300, 301, 302, 305, 306, 307, 310, 311, 313, 314, 315, 316, 317, 324, 331, 335, 340, 341, 342, 344, 349, 355, 359, 361, 363, 364, 366, 367, 368, 369, 370, 371, 375, 379, 381, 382, 386, 387, 389, 390, 391, 392, 394, 395, 399, 416, 421, 422, 426, 434, 438, 440, 441, 458, 459, 461, 476, 477, 479, 500, 505, 507, 514, 516, 517, 518, 521, 522, 524, 528, 529, 530, 533, 537, 538, 541, 542, 544, 545, 546, 548, 549, 584], "subpackag": [2, 17, 87, 111, 112, 114, 158, 194, 197, 230, 255, 273, 298, 309, 333, 351, 362, 430, 496, 512], "submodul": [2, 12, 17, 29, 52, 76, 87, 95, 101, 106, 111, 112, 114, 117, 130, 145, 151, 158, 159, 174, 182, 187, 190, 194, 197, 199, 203, 210, 221, 227, 231, 238, 250, 254, 258, 265, 274, 281, 293, 297, 300, 304, 309, 316, 322, 328, 334, 338, 351, 357, 362, 369, 373, 385, 397, 402, 404, 409, 412, 414, 419, 430, 436, 442, 446, 485, 496, 498, 503, 513, 519, 531, 542], "packag": [2, 29, 174, 180, 197, 203, 210, 238, 250, 254, 255, 258, 265, 281, 293, 297, 298, 300, 309, 316, 328, 333, 334, 351, 369, 373, 382, 385, 391, 395, 397, 430, 542, 609, 611, 613, 614], "kera": [3, 449], "keras_util": [4, 5, 6, 7, 8, 9, 10, 450, 451, 452, 453, 454, 455, 456], "conv2d": [4, 450], "dens": [5, 451], "depthwise_conv2d": [6, 452], "pool2d": [8, 454], "quantiz": [9, 41, 161, 345, 392, 393, 394, 395, 396, 422, 455, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 528, 529, 530, 531, 532, 533, 555, 558, 560, 561, 573, 577, 581, 583, 586, 589, 592, 594, 596, 597, 605, 616, 618, 619, 620, 621, 629, 630, 631, 637, 638, 639, 640, 641, 644, 650], "separable_conv2d": [10, 456], "mxnet": [11, 579, 595, 638, 646], "mxnet_util": [12, 13], "util": [13, 43, 148, 163, 170, 181, 182, 183, 184, 189, 220, 223, 356, 357, 358, 359, 360, 361, 390, 397, 398, 399, 416, 421, 435, 436, 437, 438, 439, 440, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 516, 522, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 564], "onnxrt": [14, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 579, 595, 646], "ox_util": [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44], "calibr": [15, 16, 383, 393, 444, 560, 577], "oper": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 560, 561], "activ": [18, 619], "argmax": 19, "attent": 20, "binary_op": 21, "concat": 22, "conv": 23, "direct_q8": 24, "embed_layernorm": 25, "gather": 26, "gavgpool": 27, "gemm": 28, "lstm": 30, "matmul": [31, 644], "maxpool": 32, "norm": 33, "op": [34, 586], "pad": 35, "pool": 36, "reduc": 37, "resiz": 38, "split": [39, 622], "unary_op": 40, "smooth_quant": [42, 167, 175], "weight_onli": [44, 171, 386, 387, 388, 389, 390, 517, 518, 519, 520, 521, 522], "pytorch": [45, 548, 579, 584, 586, 595, 620, 638, 639, 640, 645, 646, 650], "queri": [46, 559, 624, 629, 630, 631], "tensorflow": [47, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 579, 584, 586, 595, 638, 640, 645, 646, 650], "tf_util": [48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148], "graph_convert": 48, "graph_converter_without_calib": 49, "graph_rewrit": [50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496], "bf16": [50, 51, 52, 597], "bf16_convert": [50, 155], "dequantize_cast_optim": 51, "gener": [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 560], "convert_add_to_biasadd": [53, 462], "convert_layout": [54, 463], "convert_leakyrelu": [55, 464], "convert_nan_to_random": [56, 465], "convert_placeholder_to_const": [57, 466], "dilated_contract": [58, 467], "dummy_biasadd": [59, 468], "expanddims_optim": [60, 469], "fetch_weight_from_reshap": [61, 470], "fold_batch_norm": [62, 471], "fold_const": [63, 472], "fuse_biasadd_add": [64, 473], "fuse_column_wise_mul": [65, 474], "fuse_conv_with_math": [66, 475], "fuse_decomposed_bn": [67, 476], "fuse_decomposed_in": [68, 477], "fuse_gelu": [69, 478], "fuse_layer_norm": [70, 479], "fuse_pad_with_conv": [71, 480], "fuse_pad_with_fp32_conv": [72, 481], "fuse_reshape_transpos": [73, 482], "graph_cse_optim": [74, 483], "grappler_pass": [75, 484], "insert_print_nod": [77, 486], "move_squeeze_after_relu": [78, 487], "pre_optim": [79, 488], "remove_training_nod": [80, 489], "rename_batch_norm": [81, 490], "split_shared_input": [82, 491], "strip_equivalent_nod": [83, 492], "strip_unused_nod": [84, 493], "switch_optim": [85, 494], "graph_bas": [86, 495], "int8": [88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 586, 650], "freeze_fake_qu": 88, "freeze_valu": 89, "freeze_value_without_calib": 90, "fuse_conv_redundant_dequant": 91, "fuse_conv_requant": 92, "fuse_matmul_redundant_dequant": 93, "fuse_matmul_requant": 94, "meta_op_optim": 96, "post_hostconst_convert": 97, "post_quantized_op_cs": 98, "rnn_convert": 99, "scale_propag": 100, "onnx": [101, 102, 103, 104, 105, 563, 592, 638, 639, 650], "onnx_graph": 102, "onnx_nod": 103, "onnx_schema": 104, "tf2onnx_util": 105, "qdq": [106, 107, 108, 109, 123, 124, 125, 126, 127, 128, 129, 130, 131, 650], "insert_qdq_pattern": 107, "merge_duplicated_qdq": 108, "share_qdq_y_pattern": 109, "graph_util": [110, 497], "quantize_graph": [112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138], "qat": [113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 650], "fake_quant": 113, "quantize_config": 115, "quantize_help": 116, "quantize_lay": [117, 118, 119, 120, 121], "optimize_lay": 118, "quantize_layer_add": 119, "quantize_layer_bas": 120, "quantize_layer_bn": 121, "quantize_wrapp": 122, "fuse_qdq_bn": 123, "fuse_qdq_concatv2": 124, "fuse_qdq_conv": 125, "fuse_qdq_deconv": 126, "fuse_qdq_in": 127, "fuse_qdq_matmul": 128, "fuse_qdq_pool": 129, "optimize_qdq": 131, "quantize_graph_bas": 132, "quantize_graph_bn": 133, "quantize_graph_concatv2": 134, "quantize_graph_conv": 135, "quantize_graph_for_intel_cpu": 136, "quantize_graph_matmul": 137, "quantize_graph_pool": 138, "quantize_graph_common": [139, 499], "smooth_quant_calibr": 140, "smooth_quant_scal": 141, "tf2onnx_convert": 142, "transform_graph": [143, 144, 145, 146, 147], "bias_correct": 143, "graph_transform_bas": 144, "insert_log": 146, "rerange_quantized_concat": 147, "torch_util": [149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 270], "autoround": [149, 150, 151, 152, 153], "export": [150, 304, 305, 306, 307, 586, 641], "model_wrapp": [152, 165, 505], "sign_sgd": 153, "awq": [154, 386, 517], "gptq": [156, 387, 518], "hawq_metr": 157, "layer_wise_qu": [159, 160, 161, 162, 163], "modified_pickl": [160, 515], "torch_load": 162, "mixed_precis": [164, 318], "pattern_detector": 166, "symbolic_trac": 168, "teq": 169, "algorithm": [172, 173, 174, 175, 176, 382, 383, 384, 385, 386, 387, 388, 389, 390, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 577, 641, 644, 647], "fast_bias_correct": 173, "weight_correct": 176, "benchmark": [177, 262, 567, 576, 581, 596, 637], "common": [178, 179, 180, 181, 182, 183, 184, 263, 264, 265, 266, 267, 268, 269, 270, 555, 587], "base_config": 178, "attribut": [178, 180, 183, 238, 246, 255, 289, 298, 309, 333, 373, 394, 397, 399, 441, 522, 542, 553], "base_tun": 179, "constant": [181, 356, 435, 501, 534, 540], "logger": [183, 339, 545], "compress": [185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 272, 568, 641], "callback": 185, "distil": [186, 187, 188, 189, 303, 582, 583, 596, 637, 650], "criterion": [186, 263], "optim": [188, 268, 606, 616, 626, 629, 630, 631, 634, 635, 648], "hpo": [190, 191, 192, 193], "sa_optim": 191, "search_algorithm": [192, 325], "search_spac": 193, "pruner": [195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 331, 342], "criteria": [195, 554, 635, 647], "dsnot": 196, "model_slim": [198, 199, 200, 201], "auto_slim": 198, "pattern_analyz": 200, "weight_slim": 201, "pattern": [202, 203, 204, 205, 206, 334, 335, 336, 340, 635], "base": [202, 207, 592, 625, 648], "mha": [204, 211], "ninm": 205, "nxm": 206, "basic": [208, 348, 425, 556, 647], "pattern_lock": [212, 330], "progress": [213, 622], "retrain_fre": 214, "sparse_gpt": 215, "prune": [216, 222, 332, 343, 596, 635, 637, 650], "reg": 217, "schedul": [218, 344, 346, 635], "tf_criteria": 219, "wanda": [221, 222, 223, 224], "wrapper": 224, "conf": [225, 226, 227, 228], "config": [225, 229, 394, 459, 530, 569, 579, 633], "dotdict": 226, "pythonic_config": 228, "contrib": [230, 231, 232, 233, 273, 274, 275, 276], "strategi": [231, 232, 233, 274, 275, 276, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 574, 643, 647], "sigopt": [232, 275, 643, 647], "tpe": [233, 276, 647], "data": [234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 502, 560, 561, 581, 585, 620], "dataload": [234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 264, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 578, 579], "base_dataload": [234, 277], "default_dataload": [236, 279], "fetcher": [237, 280], "mxnet_dataload": [239, 282], "onnxrt_dataload": [240, 283], "pytorch_dataload": [241, 284], "sampler": [242, 285], "tensorflow_dataload": [243, 286], "dataset": [244, 245, 246, 247, 248, 249, 250, 251, 287, 288, 289, 290, 291, 292, 293, 294, 579, 581, 590, 621], "bert_dataset": [244, 287], "coco_dataset": [245, 288], "dummy_dataset": [247, 290], "dummy_dataset_v2": [248, 291], "imagenet_dataset": [249, 292], "style_transfer_dataset": [251, 294], "filter": [252, 253, 254, 295, 296, 297], "coco_filt": [252, 295], "transform": [256, 257, 258, 259, 260, 261, 299, 300, 301, 302, 590, 646], "coco_transform": 256, "imagenet_transform": [257, 299], "postprocess": [259, 269], "token": [260, 301], "experiment": [262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361], "metric": [266, 310, 311, 312, 313, 314, 315, 316, 317, 363, 364, 365, 366, 367, 368, 369, 370, 590, 595], "model": [267, 372, 373, 374, 375, 376, 377, 378, 379, 380, 504, 560, 571, 586, 589, 592, 594, 596, 598, 605, 619, 620, 621, 629, 630, 631, 635, 639, 641, 644, 650], "compon": 271, "qlinear2qdq": 305, "tf2onnx": 306, "torch2onnx": 307, "graph_optim": 308, "bleu": [310, 363], "bleu_util": [311, 364], "coco_label_map": [312, 365], "coco_tool": [313, 366], "evaluate_squad": [314, 367], "f1": [315, 368], "model_convers": 319, "na": [320, 321, 322, 323, 324, 325, 556, 637], "basic_na": 320, "dyna": 321, "nas_util": 324, "pruner_legaci": [326, 327, 328, 329, 330, 331], "gradient_sensit": 326, "group_lasso": 327, "magnitud": 329, "pruning_recip": [333, 334, 335, 336], "tile_pattern": 336, "pruning_v2": 337, "pytorch_prun": [338, 339, 340, 341, 342, 343, 344], "prune_util": 341, "auto_mixed_precis": [347, 424], "bayesian": [349, 426, 647], "exhaust": [350, 428, 647], "mse": [352, 431, 647], "mse_v2": [353, 432, 647], "random": [354, 433, 647], "tuning_sampl": [358, 437], "tuning_spac": [359, 438], "tuning_struct": [360, 439], "mix_precis": 371, "base_model": 372, "keras_model": 374, "mxnet_model": 376, "nets_factori": [377, 506], "onnx_model": [378, 398], "tensorflow_model": 379, "torch_model": 380, "object": [381, 572, 629, 630, 631, 633], "smoother": [383, 384, 385, 444, 445, 446, 447], "core": [384, 445], "rtn": [389, 521], "algorithm_entri": [392, 458, 528], "profil": [400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 581], "parser": [401, 402, 403, 404, 405, 406, 407, 408, 409, 410], "factori": [401, 403, 408, 411, 413, 418], "onnx_pars": [403, 404, 405], "result": [407, 619, 621, 629, 630, 631], "tensorflow_pars": [408, 409, 410], "onnxrt_profil": [413, 414, 415, 416], "tensorflow_profil": [418, 419, 420, 421], "auto": [423, 610, 616, 640, 644, 647], "conserv": [427, 647], "hawq_v2": [429, 647], "templat": [441, 442, 554], "api_doc_exampl": 441, "scaler": 447, "static_qu": [448, 449, 450, 451, 452, 453, 454, 455, 456], "torch": [508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 564, 650], "habana_fp8": [508, 509, 510, 511], "fp8_quant": 508, "observ": 511, "layer_wis": [513, 514, 515, 516], "load": 514, "amp": [523, 524, 525, 526], "autocast": 523, "fp8": [524, 525], "autotun": 529, "environ": [535, 592, 602], "train": [538, 555, 575, 584, 596, 635, 638], "collect_layer_histogram": 539, "create_obj_from_config": 541, "kl_diverg": 543, "load_huggingfac": 544, "neural_insights_util": 546, "option": [547, 584, 604], "weights_detail": 550, "version": 551, "intel": [552, 558, 578, 581, 591, 592, 595, 596, 602, 610, 616, 650, 651], "neural": [552, 555, 556, 558, 578, 581, 591, 592, 595, 596, 599, 603, 605, 610, 616, 618, 619, 620, 621, 623, 624, 625, 629, 630, 631, 635, 643, 648, 651], "compressor": [552, 555, 558, 578, 581, 591, 592, 595, 596, 610, 616, 643, 651], "document": [552, 558, 565, 651], "section": [552, 651], "contributor": [553, 554], "coven": [553, 554], "code": [553, 554, 556, 596, 617, 622, 641, 648], "conduct": [553, 554], "our": [553, 644], "pledg": 553, "standard": 553, "respons": [553, 625], "scope": [553, 635], "enforc": 553, "contribut": [554, 609, 613], "guidelin": 554, "creat": [554, 622], "pull": 554, "request": [554, 597, 627], "step": [554, 618, 619, 620, 621], "checklist": 554, "accept": 554, "statu": [554, 624, 625], "check": 554, "overview": [554, 626, 648], "support": [554, 555, 556, 559, 561, 576, 577, 578, 579, 581, 582, 583, 584, 586, 588, 591, 592, 595, 597, 598, 600, 601, 605, 606, 633, 634, 635, 637, 638, 639, 641, 644, 645, 646, 649], "fx": 555, "introduct": [555, 556, 559, 560, 561, 576, 577, 578, 579, 581, 582, 583, 584, 586, 588, 591, 595, 597, 598, 616, 619, 620, 621, 633, 634, 635, 637, 638, 639, 641, 643, 644, 645, 646, 647, 649], "mode": [555, 650], "matrix": [555, 556, 559, 576, 577, 578, 579, 581, 582, 583, 584, 586, 588, 591, 595, 597, 598, 601, 633, 634, 635, 637, 638, 639, 641, 644, 645, 649], "get": [555, 556, 558, 559, 576, 578, 579, 581, 582, 583, 584, 588, 589, 595, 597, 599, 610, 617, 618, 622, 623, 624, 625, 633, 634, 635, 637, 638, 645, 649], "start": [555, 556, 558, 559, 576, 578, 579, 581, 582, 583, 584, 588, 589, 595, 597, 599, 600, 604, 610, 618, 622, 623, 624, 629, 630, 631, 633, 634, 635, 637, 638, 645, 649], "post": [555, 596, 625, 638], "static": [555, 638], "dynam": [555, 556, 638], "awar": [555, 596, 635, 638], "exampl": [555, 556, 559, 565, 576, 578, 579, 581, 582, 583, 584, 585, 586, 595, 596, 597, 598, 601, 605, 618, 619, 620, 621, 623, 628, 629, 630, 631, 633, 634, 635, 638, 639, 641, 644, 645, 650], "note": [555, 642], "detail": 555, "problem": 555, "architectur": [556, 580, 591, 592], "search": [556, 616], "api": [556, 558, 559, 560, 565, 566, 576, 578, 579, 582, 583, 584, 589, 590, 595, 597, 599, 603, 617, 618, 625, 631, 633, 634, 635, 637, 648], "usag": [556, 605, 616, 625, 644, 645, 647], "1": [556, 584, 587, 590, 596, 616, 623, 624, 650], "python": [556, 558, 578, 589, 595, 599, 603, 604, 611, 614, 618, 637, 648], "yaml": [556, 560, 579, 584, 588, 649], "2": [556, 584, 587, 590, 596, 616, 623, 624, 650], "onli": [556, 641], "advanc": [556, 622, 648], "custom": [556, 578, 595, 629, 647], "secur": [557, 584], "polici": [557, 647], "report": 557, "vulner": 557, "instal": [558, 581, 592, 600, 602, 609, 610, 613, 618, 623, 624], "from": [558, 560, 592, 596, 618, 623, 624], "pypi": [558, 605, 618], "select": [558, 610], "public": [558, 636], "event": [558, 636], "addit": 558, "commun": 558, "work": [559, 623, 638], "flow": [559, 638], "background": [559, 616], "ad": 559, "new": [559, 561, 611, 614, 647], "backend": [559, 638], "capabl": [559, 641], "implement": [559, 560], "onnxrtadaptor": 559, "how": [560, 561, 581, 619, 620, 621, 623], "add": [560, 624], "an": [560, 629, 630, 631], "list": [560, 585, 628, 646], "need": 560, "design": [560, 580, 626, 647], "framework": [560, 578, 579, 586, 588, 598, 637, 639, 641, 644], "query_fw_cap": 560, "accord": [560, 561], "tune_cfg": 560, "prepar": [560, 581, 619, 620, 621, 643], "fp32": [560, 586], "graph": 560, "run": [560, 581, 617, 619, 620, 621, 622], "sampl": [560, 589], "iter": 560, "calcul": 560, "rang": 560, "type": [561, 635], "like": 561, "int4": 561, "few": 561, "line": 561, "chang": [561, 590, 615, 617, 642], "defin": [561, 584], "abil": 561, "specif": [561, 579], "invok": 561, "kernel": 561, "tune": [561, 638, 641, 644, 647], "configur": [561, 584, 588, 622, 637, 643, 649], "us": [561, 578, 595, 623, 624, 644], "summari": [561, 619], "runtim": [563, 592, 638, 639, 650], "mix": [570, 596, 597, 640], "precis": [570, 596, 597, 640], "refer": [577, 635, 638, 641, 644], "build": [578, 587, 595, 622, 623, 624], "file": [579, 588, 649], "user": [579, 584, 590, 637, 641, 648, 649], "workflow": [580, 626], "diagnosi": [581, 618], "featur": [581, 584, 588, 591, 605, 606, 610, 637, 638, 645, 649], "modifi": 581, "script": [581, 622], "see": 581, "do": [581, 599], "paramet": [581, 625], "descript": [581, 625, 627], "suggest": 581, "fallback": 581, "set": [581, 602, 616], "knowledg": [582, 650], "intermedi": 582, "layer": [582, 639, 644], "self": 582, "distribut": [584, 605, 647], "infer": 584, "evalu": 584, "pure": 584, "horovodrun": 584, "execut": 584, "releas": [585, 611, 614, 642], "appendix": 586, "frequent": 587, "ask": 587, "question": 587, "issu": [587, 642], "3": [587, 600, 616], "4": [587, 607, 616, 636], "quick": [589, 604], "valid": [589, 592, 644, 650], "incompat": [590, 642], "between": 590, "v1": 590, "face": [590, 630, 631], "built": [590, 592, 595], "infrastructur": 591, "prerequisit": [592, 623, 624], "binari": 592, "sourc": [592, 618, 620, 621, 623, 624], "ai": 592, "kit": 592, "system": 592, "requir": [592, 609, 613, 619, 620, 621, 629], "hardwar": [592, 597, 650], "cpu": [592, 602, 650], "64": 592, "compat": 592, "processor": 592, "gpu": 592, "": [592, 617, 623], "xe": 592, "multipl": [592, 633, 650], "vendor": 592, "through": [592, 644, 650], "softwar": [592, 597], "legal": 593, "inform": 593, "licens": 593, "citat": 593, "trademark": 593, "llm": 594, "recip": [594, 638], "ipex": [594, 638], "kei": 594, "migrat": 596, "x": 596, "orchestr": [596, 634], "fp16": 597, "dure": [597, 640], "accuraci": [597, 619, 621, 638, 647], "driven": 597, "coder": [599, 603, 605, 616, 648], "what": [599, 617, 623], "we": 599, "offer": 599, "jupyt": [599, 600, 611, 614], "lab": [599, 600], "extens": [599, 609, 610, 613, 616, 617, 626, 650], "launcher": [599, 604], "contact": [599, 623], "aw": 600, "amazon": 600, "sagemak": 600, "For": 600, "studio": 600, "notebook": 600, "instanc": 600, "guid": [600, 648], "bigdl": 601, "nano": 601, "platform": [602, 643], "best": [602, 610], "perform": [602, 643], "mkl": 602, "openmp": 602, "jemalloc": 602, "numa": 602, "control": 602, "variabl": 602, "frequenc": 602, "govern": 602, "enabl": [603, 610, 616], "bench": 603, "superbench": 603, "argument": 604, "v0": 607, "highlight": 607, "other": 607, "changelog": [608, 612], "neural_compressor_ext_lab": [609, 611], "uninstal": [609, 613], "develop": [609, 613], "jupyterlab": 610, "Or": 610, "let": 610, "u": 610, "help": 610, "you": 610, "pre": 610, "requisit": 610, "make": [611, 614, 617, 622], "manual": [611, 614], "npm": [611, 614, 622], "autom": [611, 614], "publish": [611, 614], "conda": [611, 614], "forg": [611, 614], "neural_compressor_ext_lab_alibaba": [613, 614], "log": [615, 624, 625], "unreleas": 615, "vscode": 616, "open": [616, 621], "icon": 616, "5": 616, "welcom": 617, "your": 617, "v": 617, "folder": 617, "setup": 617, "up": 617, "straight": 617, "awai": 617, "explor": 617, "test": [617, 622], "go": 617, "further": 617, "insight": [618, 619, 620, 621], "tensor": [618, 644], "dump": [618, 620], "research": 618, "collabor": 618, "debug": [619, 621], "analyz": [619, 621, 622], "weight": [619, 620, 621, 641], "histogram": 621, "react": 622, "app": 622, "avail": 622, "eject": 622, "learn": [622, 623], "more": [622, 623], "bundl": 622, "size": 622, "web": 622, "deploy": [622, 635], "fail": 622, "minifi": 622, "solut": [623, 624, 625, 629, 630, 631], "why": 623, "doe": 623, "method": [623, 624], "pip": [623, 624], "end": [623, 629, 630, 631], "servic": [624, 626, 629, 630, 631], "submit": [624, 625, 629, 630, 631], "task": [624, 625, 627, 629, 630, 631], "stop": [624, 629, 630, 631], "inspect": 624, "manag": [624, 629, 630], "resourc": [624, 629, 630], "node": 624, "state": 624, "cluster": [624, 625], "remov": 624, "url": 625, "endpoint": 625, "task_id": 625, "websocket": 625, "screen": 625, "ping": 625, "download": [625, 629, 630], "doc": 626, "wip": 626, "oaa": 626, "definit": 626, "diagram": 626, "hug": [630, 631], "grpc": 631, "client": 632, "singl": 633, "One": 634, "shot": 634, "network": 635, "sparsiti": 635, "decai": 635, "regular": 635, "larg": 635, "languag": 635, "retrain": 635, "free": 635, "spars": 635, "hyperparamet": 635, "full": 636, "79": 636, "2023": 636, "25": 636, "2022": 636, "35": 636, "2021": 636, "15": [636, 650], "2018": 636, "2020": 636, "style": 637, "access": 637, "fundament": [638, 644], "scheme": 638, "approach": 638, "With": 638, "without": 638, "specifi": 638, "rule": 638, "devic": 638, "wise": 639, "lwq": 639, "turn": 640, "off": 640, "woq": [641, 650], "known": 642, "benefit": 643, "comparison": 643, "differ": 643, "smooth": 644, "quant": 644, "per": 644, "channel": 644, "limit": 644, "smoothquant": 644, "enhanc": 644, "alpha": 644, "engin": 644, "fix": 644, "determin": 644, "entir": 644, "each": 644, "block": 644, "tensorboard": 645, "space": 647, "exit": 647, "process": 647, "zero": 648, "topic": 648, "innov": 648, "product": 648, "13": 650, "0": 650, "ptq": 650}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"block_mask": [[0, "module-block_mask"]], "neural_compressor.adaptor.adaptor": [[1, "module-neural_compressor.adaptor.adaptor"]], "Module Contents": [[1, "module-contents"], [3, "module-contents"], [11, "module-contents"], [13, "module-contents"], [14, "module-contents"], [15, "module-contents"], [16, "module-contents"], [18, "module-contents"], [19, "module-contents"], [20, "module-contents"], [21, "module-contents"], [22, "module-contents"], [23, "module-contents"], [24, "module-contents"], [25, "module-contents"], [26, "module-contents"], [27, "module-contents"], [28, "module-contents"], [30, "module-contents"], [31, "module-contents"], [32, "module-contents"], [33, "module-contents"], [34, "module-contents"], [35, "module-contents"], [36, "module-contents"], [37, "module-contents"], [38, "module-contents"], [39, "module-contents"], [40, "module-contents"], [41, "module-contents"], [42, "module-contents"], [43, "module-contents"], [44, "module-contents"], [45, "module-contents"], [46, "module-contents"], [47, "module-contents"], [48, "module-contents"], [49, "module-contents"], [50, "module-contents"], [51, "module-contents"], [53, "module-contents"], [54, "module-contents"], [55, "module-contents"], [56, "module-contents"], [57, "module-contents"], [58, "module-contents"], [59, "module-contents"], [60, "module-contents"], [61, "module-contents"], [62, "module-contents"], [63, "module-contents"], [64, "module-contents"], [65, "module-contents"], [66, "module-contents"], [67, "module-contents"], [68, "module-contents"], [69, "module-contents"], [70, "module-contents"], [71, "module-contents"], [72, "module-contents"], [73, "module-contents"], [74, "module-contents"], [75, "module-contents"], [77, "module-contents"], [78, "module-contents"], [79, "module-contents"], [80, "module-contents"], [81, "module-contents"], [82, "module-contents"], [83, "module-contents"], [84, "module-contents"], [85, "module-contents"], [86, "module-contents"], [88, "module-contents"], [89, "module-contents"], [90, "module-contents"], [91, "module-contents"], [92, "module-contents"], [93, "module-contents"], [94, "module-contents"], [96, "module-contents"], [97, "module-contents"], [98, "module-contents"], [99, "module-contents"], [100, "module-contents"], [102, "module-contents"], [103, "module-contents"], [104, "module-contents"], [105, "module-contents"], [107, "module-contents"], [108, "module-contents"], [109, "module-contents"], [110, "module-contents"], [113, "module-contents"], [115, "module-contents"], [116, "module-contents"], [118, "module-contents"], [119, "module-contents"], [120, "module-contents"], [121, "module-contents"], [122, "module-contents"], [123, "module-contents"], [124, "module-contents"], [125, "module-contents"], [126, "module-contents"], [127, "module-contents"], [128, "module-contents"], [129, "module-contents"], [131, "module-contents"], [132, "module-contents"], [133, "module-contents"], [134, "module-contents"], [135, "module-contents"], [136, "module-contents"], [137, "module-contents"], [138, "module-contents"], [139, "module-contents"], [140, "module-contents"], [141, "module-contents"], [142, "module-contents"], [143, "module-contents"], [144, "module-contents"], [146, "module-contents"], [147, "module-contents"], [148, "module-contents"], [149, "module-contents"], [150, "module-contents"], [153, "module-contents"], [154, "module-contents"], [155, "module-contents"], [156, "module-contents"], [157, "module-contents"], [160, "module-contents"], [161, "module-contents"], [162, "module-contents"], [163, "module-contents"], [164, "module-contents"], [165, "module-contents"], [166, "module-contents"], [167, "module-contents"], [168, "module-contents"], [169, "module-contents"], [170, "module-contents"], [171, "module-contents"], [172, "module-contents"], [173, "module-contents"], [175, "module-contents"], [176, "module-contents"], [177, "module-contents"], [178, "module-contents"], [179, "module-contents"], [183, "module-contents"], [184, "module-contents"], [185, "module-contents"], [186, "module-contents"], [188, "module-contents"], [189, "module-contents"], [192, "module-contents"], [193, "module-contents"], [195, "module-contents"], [196, "module-contents"], [198, "module-contents"], [200, "module-contents"], [201, "module-contents"], [202, "module-contents"], [204, "module-contents"], [205, "module-contents"], [206, "module-contents"], [207, "module-contents"], [208, "module-contents"], [209, "module-contents"], [211, "module-contents"], [212, "module-contents"], [213, "module-contents"], [214, "module-contents"], [215, "module-contents"], [216, "module-contents"], [217, "module-contents"], [218, "module-contents"], [219, "module-contents"], [220, "module-contents"], [222, "module-contents"], [223, "module-contents"], [224, "module-contents"], [225, "module-contents"], [226, "module-contents"], [228, "module-contents"], [229, "module-contents"], [232, "module-contents"], [233, "module-contents"], [234, "module-contents"], [235, "module-contents"], [236, "module-contents"], [237, "module-contents"], [239, "module-contents"], [240, "module-contents"], [241, "module-contents"], [242, "module-contents"], [243, "module-contents"], [244, "module-contents"], [245, "module-contents"], [246, "module-contents"], [247, "module-contents"], [248, "module-contents"], [249, "module-contents"], [251, "module-contents"], [252, "module-contents"], [253, "module-contents"], [256, "module-contents"], [257, "module-contents"], [259, "module-contents"], [260, "module-contents"], [261, "module-contents"], [262, "module-contents"], [263, "module-contents"], [264, "module-contents"], [266, "module-contents"], [267, "module-contents"], [268, "module-contents"], [269, "module-contents"], [270, "module-contents"], [271, "module-contents"], [275, "module-contents"], [276, "module-contents"], [277, "module-contents"], [279, "module-contents"], [280, "module-contents"], [282, "module-contents"], [283, "module-contents"], [284, "module-contents"], [285, "module-contents"], [286, "module-contents"], [287, "module-contents"], [288, "module-contents"], [289, "module-contents"], [290, "module-contents"], [291, "module-contents"], [292, "module-contents"], [294, "module-contents"], [295, "module-contents"], [296, "module-contents"], [299, "module-contents"], [301, "module-contents"], [302, "module-contents"], [303, "module-contents"], [305, "module-contents"], [306, "module-contents"], [307, "module-contents"], [308, "module-contents"], [310, "module-contents"], [311, "module-contents"], [313, "module-contents"], [314, "module-contents"], [315, "module-contents"], [317, "module-contents"], [318, "module-contents"], [319, "module-contents"], [320, "module-contents"], [321, "module-contents"], [323, "module-contents"], [324, "module-contents"], [325, "module-contents"], [326, "module-contents"], [327, "module-contents"], [329, "module-contents"], [330, "module-contents"], [331, "module-contents"], [332, "module-contents"], [335, "module-contents"], [336, "module-contents"], [337, "module-contents"], [340, "module-contents"], [341, "module-contents"], [342, "module-contents"], [343, "module-contents"], [344, "module-contents"], [345, "module-contents"], [346, "module-contents"], [347, "module-contents"], [348, "module-contents"], [349, "module-contents"], [350, "module-contents"], [352, "module-contents"], [353, "module-contents"], [354, "module-contents"], [355, "module-contents"], [358, "module-contents"], [359, "module-contents"], [360, "module-contents"], [361, "module-contents"], [363, "module-contents"], [364, "module-contents"], [366, "module-contents"], [367, "module-contents"], [368, "module-contents"], [370, "module-contents"], [371, "module-contents"], [372, "module-contents"], [374, "module-contents"], [375, "module-contents"], [376, "module-contents"], [377, "module-contents"], [378, "module-contents"], [379, "module-contents"], [380, "module-contents"], [381, "module-contents"], [383, "module-contents"], [384, "module-contents"], [386, "module-contents"], [387, "module-contents"], [389, "module-contents"], [390, "module-contents"], [392, "module-contents"], [393, "module-contents"], [394, "module-contents"], [398, "module-contents"], [399, "module-contents"], [401, "module-contents"], [403, "module-contents"], [405, "module-contents"], [406, "module-contents"], [407, "module-contents"], [408, "module-contents"], [410, "module-contents"], [411, "module-contents"], [413, "module-contents"], [415, "module-contents"], [416, "module-contents"], [417, "module-contents"], [418, "module-contents"], [420, "module-contents"], [421, "module-contents"], [422, "module-contents"], [423, "module-contents"], [424, "module-contents"], [425, "module-contents"], [426, "module-contents"], [427, "module-contents"], [428, "module-contents"], [429, "module-contents"], [431, "module-contents"], [432, "module-contents"], [433, "module-contents"], [434, "module-contents"], [437, "module-contents"], [438, "module-contents"], [439, "module-contents"], [440, "module-contents"], [441, "module-contents"], [444, "module-contents"], [445, "module-contents"], [447, "module-contents"], [449, "module-contents"], [458, "module-contents"], [459, "module-contents"], [461, "module-contents"], [462, "module-contents"], [463, "module-contents"], [464, "module-contents"], [465, "module-contents"], [466, "module-contents"], [467, "module-contents"], [468, "module-contents"], [469, "module-contents"], [470, "module-contents"], [471, "module-contents"], [472, "module-contents"], [473, "module-contents"], [474, "module-contents"], [475, "module-contents"], [476, "module-contents"], [477, "module-contents"], [478, "module-contents"], [479, "module-contents"], [480, "module-contents"], [481, "module-contents"], [482, "module-contents"], [483, "module-contents"], [484, "module-contents"], [486, "module-contents"], [487, "module-contents"], [488, "module-contents"], [489, "module-contents"], [490, "module-contents"], [491, "module-contents"], [492, "module-contents"], [493, "module-contents"], [494, "module-contents"], [495, "module-contents"], [497, "module-contents"], [499, "module-contents"], [500, "module-contents"], [502, "module-contents"], [504, "module-contents"], [505, "module-contents"], [506, "module-contents"], [507, "module-contents"], [514, "module-contents"], [515, "module-contents"], [516, "module-contents"], [517, "module-contents"], [518, "module-contents"], [520, "module-contents"], [521, "module-contents"], [522, "module-contents"], [523, "module-contents"], [528, "module-contents"], [529, "module-contents"], [530, "module-contents"], [533, "module-contents"], [537, "module-contents"], [538, "module-contents"], [539, "module-contents"], [541, "module-contents"], [543, "module-contents"], [544, "module-contents"], [545, "module-contents"], [546, "module-contents"], [547, "module-contents"], [548, "module-contents"], [549, "module-contents"], [550, "module-contents"]], "Classes": [[1, "classes"], [3, "classes"], [11, "classes"], [13, "classes"], [14, "classes"], [15, "classes"], [16, "classes"], [18, "classes"], [19, "classes"], [20, "classes"], [21, "classes"], [22, "classes"], [23, "classes"], [24, "classes"], [25, "classes"], [26, "classes"], [27, "classes"], [28, "classes"], [30, "classes"], [31, "classes"], [32, "classes"], [33, "classes"], [34, "classes"], [35, "classes"], [36, "classes"], [37, "classes"], [38, "classes"], [39, "classes"], [40, "classes"], [41, "classes"], [42, "classes"], [43, "classes"], [45, "classes"], [46, "classes"], [47, "classes"], [48, "classes"], [49, "classes"], [50, "classes"], [51, "classes"], [53, "classes"], [54, "classes"], [55, "classes"], [56, "classes"], [57, "classes"], [58, "classes"], [59, "classes"], [60, "classes"], [61, "classes"], [62, "classes"], [63, "classes"], [64, "classes"], [65, "classes"], [66, "classes"], [67, "classes"], [68, "classes"], [69, "classes"], [70, "classes"], [71, "classes"], [72, "classes"], [73, "classes"], [74, "classes"], [75, "classes"], [77, "classes"], [78, "classes"], [79, "classes"], [80, "classes"], [81, "classes"], [82, "classes"], [83, "classes"], [84, "classes"], [85, "classes"], [86, "classes"], [88, "classes"], [89, "classes"], [90, "classes"], [91, "classes"], [92, "classes"], [93, "classes"], [94, "classes"], [96, "classes"], [97, "classes"], [98, "classes"], [99, "classes"], [100, "classes"], [102, "classes"], [103, "classes"], [104, "classes"], [105, "classes"], [107, "classes"], [108, "classes"], [109, "classes"], [110, "classes"], [113, "classes"], [115, "classes"], [119, "classes"], [120, "classes"], [121, "classes"], [122, "classes"], [123, "classes"], [124, "classes"], [125, "classes"], [126, "classes"], [127, "classes"], [128, "classes"], [129, "classes"], [131, "classes"], [132, "classes"], [133, "classes"], [134, "classes"], [135, "classes"], [136, "classes"], [137, "classes"], [138, "classes"], [139, "classes"], [140, "classes"], [141, "classes"], [142, "classes"], [143, "classes"], [144, "classes"], [146, "classes"], [147, "classes"], [149, "classes"], [153, "classes"], [154, "classes"], [155, "classes"], [156, "classes"], [157, "classes"], [161, "classes"], [165, "classes"], [166, "classes"], [167, "classes"], [169, "classes"], [172, "classes"], [173, "classes"], [174, "classes"], [175, "classes"], [176, "classes"], [178, "classes"], [179, "classes"], [180, "classes"], [183, "classes"], [185, "classes"], [186, "classes"], [188, "classes"], [192, "classes"], [193, "classes"], [195, "classes"], [200, "classes"], [201, "classes"], [202, "classes"], [204, "classes"], [205, "classes"], [206, "classes"], [207, "classes"], [208, "classes"], [209, "classes"], [211, "classes"], [212, "classes"], [213, "classes"], [214, "classes"], [215, "classes"], [216, "classes"], [217, "classes"], [218, "classes"], [219, "classes"], [224, "classes"], [225, "classes"], [226, "classes"], [228, "classes"], [229, "classes"], [232, "classes"], [233, "classes"], [234, "classes"], [235, "classes"], [236, "classes"], [237, "classes"], [238, "classes"], [239, "classes"], [240, "classes"], [241, "classes"], [242, "classes"], [243, "classes"], [244, "classes"], [245, "classes"], [246, "classes"], [247, "classes"], [248, "classes"], [249, "classes"], [250, "classes"], [251, "classes"], [252, "classes"], [253, "classes"], [254, "classes"], [255, "classes"], [256, "classes"], [257, "classes"], [258, "classes"], [259, "classes"], [260, "classes"], [261, "classes"], [262, "classes"], [263, "classes"], [264, "classes"], [265, "classes"], [266, "classes"], [267, "classes"], [268, "classes"], [269, "classes"], [271, "classes"], [275, "classes"], [276, "classes"], [277, "classes"], [279, "classes"], [280, "classes"], [282, "classes"], [283, "classes"], [284, "classes"], [285, "classes"], [286, "classes"], [287, "classes"], [288, "classes"], [289, "classes"], [290, "classes"], [291, "classes"], [292, "classes"], [293, "classes"], [294, "classes"], [295, "classes"], [296, "classes"], [297, "classes"], [298, "classes"], [299, "classes"], [300, "classes"], [301, "classes"], [302, "classes"], [303, "classes"], [308, "classes"], [309, "classes"], [310, "classes"], [313, "classes"], [316, "classes"], [317, "classes"], [318, "classes"], [319, "classes"], [320, "classes"], [321, "classes"], [323, "classes"], [325, "classes"], [326, "classes"], [327, "classes"], [329, "classes"], [330, "classes"], [331, "classes"], [332, "classes"], [333, "classes"], [334, "classes"], [335, "classes"], [336, "classes"], [337, "classes"], [340, "classes"], [342, "classes"], [343, "classes"], [344, "classes"], [345, "classes"], [346, "classes"], [347, "classes"], [348, "classes"], [349, "classes"], [350, "classes"], [352, "classes"], [353, "classes"], [354, "classes"], [355, "classes"], [358, "classes"], [359, "classes"], [360, "classes"], [361, "classes"], [363, "classes"], [366, "classes"], [369, "classes"], [370, "classes"], [372, "classes"], [373, "classes"], [374, "classes"], [375, "classes"], [376, "classes"], [377, "classes"], [378, "classes"], [379, "classes"], [380, "classes"], [381, "classes"], [382, "classes"], [383, "classes"], [384, "classes"], [385, "classes"], [391, "classes"], [393, "classes"], [394, "classes"], [395, "classes"], [397, "classes"], [398, "classes"], [401, "classes"], [403, "classes"], [405, "classes"], [406, "classes"], [407, "classes"], [408, "classes"], [410, "classes"], [411, "classes"], [413, "classes"], [415, "classes"], [417, "classes"], [418, "classes"], [420, "classes"], [423, "classes"], [424, "classes"], [425, "classes"], [426, "classes"], [427, "classes"], [428, "classes"], [429, "classes"], [431, "classes"], [432, "classes"], [433, "classes"], [434, "classes"], [437, "classes"], [438, "classes"], [439, "classes"], [440, "classes"], [441, "classes"], [444, "classes"], [445, "classes"], [447, "classes"], [449, "classes"], [459, "classes"], [462, "classes"], [463, "classes"], [464, "classes"], [465, "classes"], [466, "classes"], [467, "classes"], [468, "classes"], [469, "classes"], [470, "classes"], [471, "classes"], [472, "classes"], [473, "classes"], [474, "classes"], [475, "classes"], [476, "classes"], [477, "classes"], [478, "classes"], [479, "classes"], [480, "classes"], [481, "classes"], [482, "classes"], [483, "classes"], [484, "classes"], [486, "classes"], [487, "classes"], [488, "classes"], [489, "classes"], [490, "classes"], [491, "classes"], [492, "classes"], [493, "classes"], [494, "classes"], [495, "classes"], [497, "classes"], [499, "classes"], [502, "classes"], [504, "classes"], [505, "classes"], [506, "classes"], [507, "classes"], [517, "classes"], [518, "classes"], [520, "classes"], [522, "classes"], [523, "classes"], [530, "classes"], [538, "classes"], [539, "classes"], [542, "classes"], [543, "classes"], [544, "classes"], [545, "classes"], [547, "classes"], [549, "classes"], [550, "classes"]], "Functions": [[1, "functions"], [13, "functions"], [16, "functions"], [34, "functions"], [42, "functions"], [43, "functions"], [44, "functions"], [45, "functions"], [67, "functions"], [68, "functions"], [70, "functions"], [104, "functions"], [105, "functions"], [116, "functions"], [118, "functions"], [148, "functions"], [149, "functions"], [150, "functions"], [153, "functions"], [155, "functions"], [156, "functions"], [157, "functions"], [162, "functions"], [163, "functions"], [164, "functions"], [167, "functions"], [168, "functions"], [170, "functions"], [171, "functions"], [172, "functions"], [174, "functions"], [177, "functions"], [178, "functions"], [179, "functions"], [180, "functions"], [184, "functions"], [186, "functions"], [188, "functions"], [189, "functions"], [192, "functions"], [193, "functions"], [195, "functions"], [196, "functions"], [197, "functions"], [198, "functions"], [200, "functions"], [202, "functions"], [203, "functions"], [207, "functions"], [210, "functions"], [216, "functions"], [217, "functions"], [218, "functions"], [219, "functions"], [220, "functions"], [222, "functions"], [223, "functions"], [226, "functions"], [235, "functions"], [236, "functions"], [244, "functions"], [246, "functions"], [250, "functions"], [253, "functions"], [254, "functions"], [255, "functions"], [258, "functions"], [260, "functions"], [261, "functions"], [262, "functions"], [263, "functions"], [265, "functions"], [267, "functions"], [268, "functions"], [270, "functions"], [279, "functions"], [287, "functions"], [289, "functions"], [293, "functions"], [296, "functions"], [297, "functions"], [298, "functions"], [300, "functions"], [301, "functions"], [302, "functions"], [305, "functions"], [306, "functions"], [307, "functions"], [310, "functions"], [311, "functions"], [313, "functions"], [314, "functions"], [315, "functions"], [316, "functions"], [317, "functions"], [324, "functions"], [331, "functions"], [335, "functions"], [340, "functions"], [341, "functions"], [342, "functions"], [344, "functions"], [349, "functions"], [355, "functions"], [359, "functions"], [361, "functions"], [363, "functions"], [364, "functions"], [366, "functions"], [367, "functions"], [368, "functions"], [369, "functions"], [370, "functions"], [371, "functions"], [375, "functions"], [379, "functions"], [381, "functions"], [382, "functions"], [386, "functions"], [387, "functions"], [389, "functions"], [390, "functions"], [391, "functions"], [392, "functions"], [394, "functions"], [395, "functions"], [399, "functions"], [416, "functions"], [421, "functions"], [422, "functions"], [426, "functions"], [434, "functions"], [438, "functions"], [440, "functions"], [441, "functions"], [458, "functions"], [459, "functions"], [461, "functions"], [476, "functions"], [477, "functions"], [479, "functions"], [500, "functions"], [505, "functions"], [507, "functions"], [514, "functions"], [516, "functions"], [517, "functions"], [518, "functions"], [521, "functions"], [522, "functions"], [528, "functions"], [529, "functions"], [530, "functions"], [533, "functions"], [537, "functions"], [538, "functions"], [541, "functions"], [542, "functions"], [544, "functions"], [545, "functions"], [546, "functions"], [548, "functions"], [549, "functions"]], "neural_compressor.adaptor": [[2, "module-neural_compressor.adaptor"]], "Subpackages": [[2, "subpackages"], [17, "subpackages"], [87, "subpackages"], [111, "subpackages"], [112, "subpackages"], [114, "subpackages"], [158, "subpackages"], [194, "subpackages"], [197, "subpackages"], [230, "subpackages"], [255, "subpackages"], [273, "subpackages"], [298, "subpackages"], [309, "subpackages"], [333, "subpackages"], [351, "subpackages"], [362, "subpackages"], [430, "subpackages"], [496, "subpackages"], [512, "subpackages"]], "Submodules": [[2, "submodules"], [12, "submodules"], [17, "submodules"], [29, "submodules"], [52, "submodules"], [76, "submodules"], [87, "submodules"], [95, "submodules"], [101, "submodules"], [106, "submodules"], [111, "submodules"], [112, "submodules"], [114, "submodules"], [117, "submodules"], [130, "submodules"], [145, "submodules"], [151, "submodules"], [158, "submodules"], [159, "submodules"], [174, "submodules"], [182, "submodules"], [187, "submodules"], [190, "submodules"], [194, "submodules"], [197, "submodules"], [199, "submodules"], [203, "submodules"], [210, "submodules"], [221, "submodules"], [227, "submodules"], [231, "submodules"], [238, "submodules"], [250, "submodules"], [254, "submodules"], [258, "submodules"], [265, "submodules"], [274, "submodules"], [281, "submodules"], [293, "submodules"], [297, "submodules"], [300, "submodules"], [304, "submodules"], [309, "submodules"], [316, "submodules"], [322, "submodules"], [328, "submodules"], [334, "submodules"], [338, "submodules"], [351, "submodules"], [357, "submodules"], [362, "submodules"], [369, "submodules"], [373, "submodules"], [385, "submodules"], [397, "submodules"], [402, "submodules"], [404, "submodules"], [409, "submodules"], [412, "submodules"], [414, "submodules"], [419, "submodules"], [430, "submodules"], [436, "submodules"], [442, "submodules"], [446, "submodules"], [485, "submodules"], [496, "submodules"], [498, "submodules"], [503, "submodules"], [513, "submodules"], [519, "submodules"], [531, "submodules"], [542, "submodules"]], "Package Contents": [[2, "package-contents"], [29, "package-contents"], [174, "package-contents"], [180, "package-contents"], [197, "package-contents"], [203, "package-contents"], [210, "package-contents"], [238, "package-contents"], [250, "package-contents"], [254, "package-contents"], [255, "package-contents"], [258, "package-contents"], [265, "package-contents"], [281, "package-contents"], [293, "package-contents"], [297, "package-contents"], [298, "package-contents"], [300, "package-contents"], [309, "package-contents"], [316, "package-contents"], [328, "package-contents"], [333, "package-contents"], [334, "package-contents"], [351, "package-contents"], [369, "package-contents"], [373, "package-contents"], [382, "package-contents"], [385, "package-contents"], [391, "package-contents"], [395, "package-contents"], [397, "package-contents"], [430, "package-contents"], [542, "package-contents"]], "neural_compressor.adaptor.keras": [[3, "module-neural_compressor.adaptor.keras"]], "neural_compressor.adaptor.keras_utils.conv2d": [[4, "module-neural_compressor.adaptor.keras_utils.conv2d"]], "neural_compressor.adaptor.keras_utils.dense": [[5, "module-neural_compressor.adaptor.keras_utils.dense"]], "neural_compressor.adaptor.keras_utils.depthwise_conv2d": [[6, "module-neural_compressor.adaptor.keras_utils.depthwise_conv2d"]], "neural_compressor.adaptor.keras_utils": [[7, "module-neural_compressor.adaptor.keras_utils"]], "neural_compressor.adaptor.keras_utils.pool2d": [[8, "module-neural_compressor.adaptor.keras_utils.pool2d"]], "neural_compressor.adaptor.keras_utils.quantizer": [[9, "module-neural_compressor.adaptor.keras_utils.quantizer"]], "neural_compressor.adaptor.keras_utils.separable_conv2d": [[10, "module-neural_compressor.adaptor.keras_utils.separable_conv2d"]], "neural_compressor.adaptor.mxnet": [[11, "module-neural_compressor.adaptor.mxnet"]], "neural_compressor.adaptor.mxnet_utils": [[12, "module-neural_compressor.adaptor.mxnet_utils"]], "neural_compressor.adaptor.mxnet_utils.util": [[13, "module-neural_compressor.adaptor.mxnet_utils.util"]], "neural_compressor.adaptor.onnxrt": [[14, "module-neural_compressor.adaptor.onnxrt"]], "neural_compressor.adaptor.ox_utils.calibration": [[15, "module-neural_compressor.adaptor.ox_utils.calibration"]], "neural_compressor.adaptor.ox_utils.calibrator": [[16, "module-neural_compressor.adaptor.ox_utils.calibrator"]], "neural_compressor.adaptor.ox_utils": [[17, "module-neural_compressor.adaptor.ox_utils"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[18, "module-neural_compressor.adaptor.ox_utils.operators.activation"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[19, "module-neural_compressor.adaptor.ox_utils.operators.argmax"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[20, "module-neural_compressor.adaptor.ox_utils.operators.attention"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[21, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[22, "module-neural_compressor.adaptor.ox_utils.operators.concat"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[23, "module-neural_compressor.adaptor.ox_utils.operators.conv"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[24, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[25, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[26, "module-neural_compressor.adaptor.ox_utils.operators.gather"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[27, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[28, "module-neural_compressor.adaptor.ox_utils.operators.gemm"]], "neural_compressor.adaptor.ox_utils.operators": [[29, "module-neural_compressor.adaptor.ox_utils.operators"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[30, "module-neural_compressor.adaptor.ox_utils.operators.lstm"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[31, "module-neural_compressor.adaptor.ox_utils.operators.matmul"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[32, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"]], "neural_compressor.adaptor.ox_utils.operators.norm": [[33, "module-neural_compressor.adaptor.ox_utils.operators.norm"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[34, "module-neural_compressor.adaptor.ox_utils.operators.ops"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[35, "module-neural_compressor.adaptor.ox_utils.operators.pad"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[36, "module-neural_compressor.adaptor.ox_utils.operators.pooling"]], "neural_compressor.adaptor.ox_utils.operators.reduce": [[37, "module-neural_compressor.adaptor.ox_utils.operators.reduce"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[38, "module-neural_compressor.adaptor.ox_utils.operators.resize"]], "neural_compressor.adaptor.ox_utils.operators.split": [[39, "module-neural_compressor.adaptor.ox_utils.operators.split"]], "neural_compressor.adaptor.ox_utils.operators.unary_op": [[40, "module-neural_compressor.adaptor.ox_utils.operators.unary_op"]], "neural_compressor.adaptor.ox_utils.quantizer": [[41, "module-neural_compressor.adaptor.ox_utils.quantizer"]], "neural_compressor.adaptor.ox_utils.smooth_quant": [[42, "module-neural_compressor.adaptor.ox_utils.smooth_quant"]], "neural_compressor.adaptor.ox_utils.util": [[43, "module-neural_compressor.adaptor.ox_utils.util"]], "neural_compressor.adaptor.ox_utils.weight_only": [[44, "module-neural_compressor.adaptor.ox_utils.weight_only"]], "neural_compressor.adaptor.pytorch": [[45, "module-neural_compressor.adaptor.pytorch"]], "neural_compressor.adaptor.query": [[46, "module-neural_compressor.adaptor.query"]], "neural_compressor.adaptor.tensorflow": [[47, "module-neural_compressor.adaptor.tensorflow"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[48, "module-neural_compressor.adaptor.tf_utils.graph_converter"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[49, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer": [[51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[109, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_util": [[110, "module-neural_compressor.adaptor.tf_utils.graph_util"]], "neural_compressor.adaptor.tf_utils": [[111, "module-neural_compressor.adaptor.tf_utils"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[112, "module-neural_compressor.adaptor.tf_utils.quantize_graph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[138, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[139, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"]], "neural_compressor.adaptor.tf_utils.smooth_quant_calibration": [[140, "module-neural_compressor.adaptor.tf_utils.smooth_quant_calibration"]], "neural_compressor.adaptor.tf_utils.smooth_quant_scaler": [[141, "module-neural_compressor.adaptor.tf_utils.smooth_quant_scaler"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[142, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[143, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[144, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[145, "module-neural_compressor.adaptor.tf_utils.transform_graph"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[146, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[147, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.util": [[148, "module-neural_compressor.adaptor.tf_utils.util"]], "neural_compressor.adaptor.torch_utils.autoround.autoround": [[149, "module-neural_compressor.adaptor.torch_utils.autoround.autoround"]], "neural_compressor.adaptor.torch_utils.autoround.export": [[150, "module-neural_compressor.adaptor.torch_utils.autoround.export"]], "neural_compressor.adaptor.torch_utils.autoround": [[151, "module-neural_compressor.adaptor.torch_utils.autoround"]], "neural_compressor.adaptor.torch_utils.autoround.model_wrapper": [[152, "module-neural_compressor.adaptor.torch_utils.autoround.model_wrapper"]], "neural_compressor.adaptor.torch_utils.autoround.sign_sgd": [[153, "module-neural_compressor.adaptor.torch_utils.autoround.sign_sgd"]], "neural_compressor.adaptor.torch_utils.awq": [[154, "module-neural_compressor.adaptor.torch_utils.awq"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[155, "module-neural_compressor.adaptor.torch_utils.bf16_convert"]], "neural_compressor.adaptor.torch_utils.gptq": [[156, "module-neural_compressor.adaptor.torch_utils.gptq"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[157, "module-neural_compressor.adaptor.torch_utils.hawq_metric"]], "neural_compressor.adaptor.torch_utils": [[158, "module-neural_compressor.adaptor.torch_utils"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant": [[159, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle": [[160, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize": [[161, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load": [[162, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils": [[163, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.utils"]], "neural_compressor.adaptor.torch_utils.mixed_precision": [[164, "module-neural_compressor.adaptor.torch_utils.mixed_precision"]], "neural_compressor.adaptor.torch_utils.model_wrapper": [[165, "module-neural_compressor.adaptor.torch_utils.model_wrapper"]], "neural_compressor.adaptor.torch_utils.pattern_detector": [[166, "module-neural_compressor.adaptor.torch_utils.pattern_detector"]], "neural_compressor.adaptor.torch_utils.smooth_quant": [[167, "module-neural_compressor.adaptor.torch_utils.smooth_quant"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[168, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"]], "neural_compressor.adaptor.torch_utils.teq": [[169, "module-neural_compressor.adaptor.torch_utils.teq"]], "neural_compressor.adaptor.torch_utils.util": [[170, "module-neural_compressor.adaptor.torch_utils.util"]], "}": [[170, "id3"]], "neural_compressor.adaptor.torch_utils.weight_only": [[171, "module-neural_compressor.adaptor.torch_utils.weight_only"]], "neural_compressor.algorithm.algorithm": [[172, "module-neural_compressor.algorithm.algorithm"]], "neural_compressor.algorithm.fast_bias_correction": [[173, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[174, "module-neural_compressor.algorithm"]], "neural_compressor.algorithm.smooth_quant": [[175, "module-neural_compressor.algorithm.smooth_quant"]], "neural_compressor.algorithm.weight_correction": [[176, "module-neural_compressor.algorithm.weight_correction"]], "neural_compressor.benchmark": [[177, "module-neural_compressor.benchmark"]], "neural_compressor.common.base_config": [[178, "module-neural_compressor.common.base_config"]], "Attributes": [[178, "attributes"], [180, "attributes"], [183, "attributes"], [238, "attributes"], [246, "attributes"], [255, "attributes"], [289, "attributes"], [298, "attributes"], [309, "attributes"], [333, "attributes"], [373, "attributes"], [394, "attributes"], [397, "attributes"], [399, "attributes"], [441, "attributes"], [522, "attributes"], [542, "attributes"]], "neural_compressor.common.base_tuning": [[179, "module-neural_compressor.common.base_tuning"]], "neural_compressor.common": [[180, "module-neural_compressor.common"]], "neural_compressor.common.utils.constants": [[181, "module-neural_compressor.common.utils.constants"]], "neural_compressor.common.utils": [[182, "module-neural_compressor.common.utils"]], "neural_compressor.common.utils.logger": [[183, "module-neural_compressor.common.utils.logger"]], "neural_compressor.common.utils.utility": [[184, "module-neural_compressor.common.utils.utility"]], "neural_compressor.compression.callbacks": [[185, "module-neural_compressor.compression.callbacks"]], "neural_compressor.compression.distillation.criterions": [[186, "module-neural_compressor.compression.distillation.criterions"]], "neural_compressor.compression.distillation": [[187, "module-neural_compressor.compression.distillation"]], "neural_compressor.compression.distillation.optimizers": [[188, "module-neural_compressor.compression.distillation.optimizers"]], "neural_compressor.compression.distillation.utility": [[189, "module-neural_compressor.compression.distillation.utility"]], "neural_compressor.compression.hpo": [[190, "module-neural_compressor.compression.hpo"]], "neural_compressor.compression.hpo.sa_optimizer": [[191, "module-neural_compressor.compression.hpo.sa_optimizer"]], "neural_compressor.compression.hpo.search_algorithms": [[192, "module-neural_compressor.compression.hpo.search_algorithms"]], "neural_compressor.compression.hpo.search_space": [[193, "module-neural_compressor.compression.hpo.search_space"]], "neural_compressor.compression": [[194, "module-neural_compressor.compression"]], "neural_compressor.compression.pruner.criteria": [[195, "module-neural_compressor.compression.pruner.criteria"]], "neural_compressor.compression.pruner.dsnot": [[196, "module-neural_compressor.compression.pruner.dsnot"]], "neural_compressor.compression.pruner": [[197, "module-neural_compressor.compression.pruner"]], "neural_compressor.compression.pruner.model_slim.auto_slim": [[198, "module-neural_compressor.compression.pruner.model_slim.auto_slim"]], "neural_compressor.compression.pruner.model_slim": [[199, "module-neural_compressor.compression.pruner.model_slim"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[200, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer"]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[201, "module-neural_compressor.compression.pruner.model_slim.weight_slim"]], "neural_compressor.compression.pruner.patterns.base": [[202, "module-neural_compressor.compression.pruner.patterns.base"]], "neural_compressor.compression.pruner.patterns": [[203, "module-neural_compressor.compression.pruner.patterns"]], "neural_compressor.compression.pruner.patterns.mha": [[204, "module-neural_compressor.compression.pruner.patterns.mha"]], "neural_compressor.compression.pruner.patterns.ninm": [[205, "module-neural_compressor.compression.pruner.patterns.ninm"]], "neural_compressor.compression.pruner.patterns.nxm": [[206, "module-neural_compressor.compression.pruner.patterns.nxm"]], "neural_compressor.compression.pruner.pruners.base": [[207, "module-neural_compressor.compression.pruner.pruners.base"]], "neural_compressor.compression.pruner.pruners.basic": [[208, "module-neural_compressor.compression.pruner.pruners.basic"]], "neural_compressor.compression.pruner.pruners.block_mask": [[209, "module-neural_compressor.compression.pruner.pruners.block_mask"]], "neural_compressor.compression.pruner.pruners": [[210, "module-neural_compressor.compression.pruner.pruners"]], "neural_compressor.compression.pruner.pruners.mha": [[211, "module-neural_compressor.compression.pruner.pruners.mha"]], "neural_compressor.compression.pruner.pruners.pattern_lock": [[212, "module-neural_compressor.compression.pruner.pruners.pattern_lock"]], "neural_compressor.compression.pruner.pruners.progressive": [[213, "module-neural_compressor.compression.pruner.pruners.progressive"]], "neural_compressor.compression.pruner.pruners.retrain_free": [[214, "module-neural_compressor.compression.pruner.pruners.retrain_free"]], "neural_compressor.compression.pruner.pruners.sparse_gpt": [[215, "module-neural_compressor.compression.pruner.pruners.sparse_gpt"]], "neural_compressor.compression.pruner.pruning": [[216, "module-neural_compressor.compression.pruner.pruning"]], "neural_compressor.compression.pruner.regs": [[217, "module-neural_compressor.compression.pruner.regs"]], "neural_compressor.compression.pruner.schedulers": [[218, "module-neural_compressor.compression.pruner.schedulers"]], "neural_compressor.compression.pruner.tf_criteria": [[219, "module-neural_compressor.compression.pruner.tf_criteria"]], "neural_compressor.compression.pruner.utils": [[220, "module-neural_compressor.compression.pruner.utils"]], "neural_compressor.compression.pruner.wanda": [[221, "module-neural_compressor.compression.pruner.wanda"]], "neural_compressor.compression.pruner.wanda.prune": [[222, "module-neural_compressor.compression.pruner.wanda.prune"]], "neural_compressor.compression.pruner.wanda.utils": [[223, "module-neural_compressor.compression.pruner.wanda.utils"]], "neural_compressor.compression.pruner.wanda.wrapper": [[224, "module-neural_compressor.compression.pruner.wanda.wrapper"]], "neural_compressor.conf.config": [[225, "module-neural_compressor.conf.config"]], "neural_compressor.conf.dotdict": [[226, "module-neural_compressor.conf.dotdict"]], "neural_compressor.conf": [[227, "module-neural_compressor.conf"]], "neural_compressor.conf.pythonic_config": [[228, "module-neural_compressor.conf.pythonic_config"]], "neural_compressor.config": [[229, "module-neural_compressor.config"]], "neural_compressor.contrib": [[230, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[231, "module-neural_compressor.contrib.strategy"]], "neural_compressor.contrib.strategy.sigopt": [[232, "module-neural_compressor.contrib.strategy.sigopt"]], "neural_compressor.contrib.strategy.tpe": [[233, "module-neural_compressor.contrib.strategy.tpe"]], "neural_compressor.data.dataloaders.base_dataloader": [[234, "module-neural_compressor.data.dataloaders.base_dataloader"]], "neural_compressor.data.dataloaders.dataloader": [[235, "module-neural_compressor.data.dataloaders.dataloader"]], "neural_compressor.data.dataloaders.default_dataloader": [[236, "module-neural_compressor.data.dataloaders.default_dataloader"]], "neural_compressor.data.dataloaders.fetcher": [[237, "module-neural_compressor.data.dataloaders.fetcher"]], "neural_compressor.data.dataloaders": [[238, "module-neural_compressor.data.dataloaders"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[239, "module-neural_compressor.data.dataloaders.mxnet_dataloader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[240, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[241, "module-neural_compressor.data.dataloaders.pytorch_dataloader"]], "neural_compressor.data.dataloaders.sampler": [[242, "module-neural_compressor.data.dataloaders.sampler"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[243, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.data.datasets.bert_dataset": [[244, "module-neural_compressor.data.datasets.bert_dataset"]], "neural_compressor.data.datasets.coco_dataset": [[245, "module-neural_compressor.data.datasets.coco_dataset"]], "neural_compressor.data.datasets.dataset": [[246, "module-neural_compressor.data.datasets.dataset"]], "neural_compressor.data.datasets.dummy_dataset": [[247, "module-neural_compressor.data.datasets.dummy_dataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[248, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "neural_compressor.data.datasets.imagenet_dataset": [[249, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[250, "module-neural_compressor.data.datasets"]], "neural_compressor.data.datasets.style_transfer_dataset": [[251, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "neural_compressor.data.filters.coco_filter": [[252, "module-neural_compressor.data.filters.coco_filter"]], "neural_compressor.data.filters.filter": [[253, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.filters": [[254, "module-neural_compressor.data.filters"]], "neural_compressor.data": [[255, "module-neural_compressor.data"]], "neural_compressor.data.transforms.coco_transform": [[256, "module-neural_compressor.data.transforms.coco_transform"]], "neural_compressor.data.transforms.imagenet_transform": [[257, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[258, "module-neural_compressor.data.transforms"]], "neural_compressor.data.transforms.postprocess": [[259, "module-neural_compressor.data.transforms.postprocess"]], "neural_compressor.data.transforms.tokenization": [[260, "module-neural_compressor.data.transforms.tokenization"]], "neural_compressor.data.transforms.transform": [[261, "module-neural_compressor.data.transforms.transform"]], "neural_compressor.experimental.benchmark": [[262, "module-neural_compressor.experimental.benchmark"]], "neural_compressor.experimental.common.criterion": [[263, "module-neural_compressor.experimental.common.criterion"]], "neural_compressor.experimental.common.dataloader": [[264, "module-neural_compressor.experimental.common.dataloader"]], "neural_compressor.experimental.common": [[265, "module-neural_compressor.experimental.common"]], "neural_compressor.experimental.common.metric": [[266, "module-neural_compressor.experimental.common.metric"]], "neural_compressor.experimental.common.model": [[267, "module-neural_compressor.experimental.common.model"]], "neural_compressor.experimental.common.optimizer": [[268, "module-neural_compressor.experimental.common.optimizer"]], "neural_compressor.experimental.common.postprocess": [[269, "module-neural_compressor.experimental.common.postprocess"]], "neural_compressor.experimental.common.torch_utils": [[270, "module-neural_compressor.experimental.common.torch_utils"]], "neural_compressor.experimental.component": [[271, "module-neural_compressor.experimental.component"]], "neural_compressor.experimental.compression": [[272, "module-neural_compressor.experimental.compression"]], "neural_compressor.experimental.contrib": [[273, "module-neural_compressor.experimental.contrib"]], "neural_compressor.experimental.contrib.strategy": [[274, "module-neural_compressor.experimental.contrib.strategy"]], "neural_compressor.experimental.contrib.strategy.sigopt": [[275, "module-neural_compressor.experimental.contrib.strategy.sigopt"]], "neural_compressor.experimental.contrib.strategy.tpe": [[276, "module-neural_compressor.experimental.contrib.strategy.tpe"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[277, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[278, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[279, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[280, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[281, "module-neural_compressor.experimental.data.dataloaders"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[282, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[283, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[284, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[285, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[286, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[287, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[288, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "neural_compressor.experimental.data.datasets.dataset": [[289, "module-neural_compressor.experimental.data.datasets.dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[290, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[291, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[292, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "neural_compressor.experimental.data.datasets": [[293, "module-neural_compressor.experimental.data.datasets"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[294, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "neural_compressor.experimental.data.filters.coco_filter": [[295, "module-neural_compressor.experimental.data.filters.coco_filter"]], "neural_compressor.experimental.data.filters.filter": [[296, "module-neural_compressor.experimental.data.filters.filter"]], "neural_compressor.experimental.data.filters": [[297, "module-neural_compressor.experimental.data.filters"]], "neural_compressor.experimental.data": [[298, "module-neural_compressor.experimental.data"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[299, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "neural_compressor.experimental.data.transforms": [[300, "module-neural_compressor.experimental.data.transforms"]], "neural_compressor.experimental.data.transforms.tokenization": [[301, "module-neural_compressor.experimental.data.transforms.tokenization"]], "neural_compressor.experimental.data.transforms.transform": [[302, "module-neural_compressor.experimental.data.transforms.transform"]], "neural_compressor.experimental.distillation": [[303, "module-neural_compressor.experimental.distillation"]], "neural_compressor.experimental.export": [[304, "module-neural_compressor.experimental.export"]], "neural_compressor.experimental.export.qlinear2qdq": [[305, "module-neural_compressor.experimental.export.qlinear2qdq"]], "neural_compressor.experimental.export.tf2onnx": [[306, "module-neural_compressor.experimental.export.tf2onnx"]], "neural_compressor.experimental.export.torch2onnx": [[307, "module-neural_compressor.experimental.export.torch2onnx"]], "neural_compressor.experimental.graph_optimization": [[308, "module-neural_compressor.experimental.graph_optimization"]], "neural_compressor.experimental": [[309, "module-neural_compressor.experimental"]], "neural_compressor.experimental.metric.bleu": [[310, "module-neural_compressor.experimental.metric.bleu"]], "neural_compressor.experimental.metric.bleu_util": [[311, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[312, "module-neural_compressor.experimental.metric.coco_label_map"]], "neural_compressor.experimental.metric.coco_tools": [[313, "module-neural_compressor.experimental.metric.coco_tools"]], "neural_compressor.experimental.metric.evaluate_squad": [[314, "module-neural_compressor.experimental.metric.evaluate_squad"]], "neural_compressor.experimental.metric.f1": [[315, "module-neural_compressor.experimental.metric.f1"]], "neural_compressor.experimental.metric": [[316, "module-neural_compressor.experimental.metric"]], "neural_compressor.experimental.metric.metric": [[317, "module-neural_compressor.experimental.metric.metric"]], "neural_compressor.experimental.mixed_precision": [[318, "module-neural_compressor.experimental.mixed_precision"]], "neural_compressor.experimental.model_conversion": [[319, "module-neural_compressor.experimental.model_conversion"]], "neural_compressor.experimental.nas.basic_nas": [[320, "module-neural_compressor.experimental.nas.basic_nas"]], "neural_compressor.experimental.nas.dynas": [[321, "module-neural_compressor.experimental.nas.dynas"]], "neural_compressor.experimental.nas": [[322, "module-neural_compressor.experimental.nas"]], "neural_compressor.experimental.nas.nas": [[323, "module-neural_compressor.experimental.nas.nas"]], "neural_compressor.experimental.nas.nas_utils": [[324, "module-neural_compressor.experimental.nas.nas_utils"]], "neural_compressor.experimental.nas.search_algorithms": [[325, "module-neural_compressor.experimental.nas.search_algorithms"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[326, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[327, "module-neural_compressor.experimental.pruner_legacy.group_lasso"]], "neural_compressor.experimental.pruner_legacy": [[328, "module-neural_compressor.experimental.pruner_legacy"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[329, "module-neural_compressor.experimental.pruner_legacy.magnitude"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[330, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"]], "neural_compressor.experimental.pruner_legacy.pruner": [[331, "module-neural_compressor.experimental.pruner_legacy.pruner"]], "neural_compressor.experimental.pruning": [[332, "module-neural_compressor.experimental.pruning"]], "neural_compressor.experimental.pruning_recipes": [[333, "module-neural_compressor.experimental.pruning_recipes"]], "neural_compressor.experimental.pruning_recipes.patterns": [[334, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[335, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[336, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "neural_compressor.experimental.pruning_v2": [[337, "module-neural_compressor.experimental.pruning_v2"]], "neural_compressor.experimental.pytorch_pruner": [[338, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[339, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[340, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[341, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[342, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[343, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[344, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "neural_compressor.experimental.quantization": [[345, "module-neural_compressor.experimental.quantization"]], "neural_compressor.experimental.scheduler": [[346, "module-neural_compressor.experimental.scheduler"]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[347, "module-neural_compressor.experimental.strategy.auto_mixed_precision"]], "neural_compressor.experimental.strategy.basic": [[348, "module-neural_compressor.experimental.strategy.basic"]], "neural_compressor.experimental.strategy.bayesian": [[349, "module-neural_compressor.experimental.strategy.bayesian"]], "neural_compressor.experimental.strategy.exhaustive": [[350, "module-neural_compressor.experimental.strategy.exhaustive"]], "neural_compressor.experimental.strategy": [[351, "module-neural_compressor.experimental.strategy"]], "neural_compressor.experimental.strategy.mse": [[352, "module-neural_compressor.experimental.strategy.mse"]], "neural_compressor.experimental.strategy.mse_v2": [[353, "module-neural_compressor.experimental.strategy.mse_v2"]], "neural_compressor.experimental.strategy.random": [[354, "module-neural_compressor.experimental.strategy.random"]], "neural_compressor.experimental.strategy.strategy": [[355, "module-neural_compressor.experimental.strategy.strategy"]], "neural_compressor.experimental.strategy.utils.constant": [[356, "module-neural_compressor.experimental.strategy.utils.constant"]], "neural_compressor.experimental.strategy.utils": [[357, "module-neural_compressor.experimental.strategy.utils"]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[358, "module-neural_compressor.experimental.strategy.utils.tuning_sampler"]], "neural_compressor.experimental.strategy.utils.tuning_space": [[359, "module-neural_compressor.experimental.strategy.utils.tuning_space"]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[360, "module-neural_compressor.experimental.strategy.utils.tuning_structs"]], "neural_compressor.experimental.strategy.utils.utility": [[361, "module-neural_compressor.experimental.strategy.utils.utility"]], "neural_compressor": [[362, "module-neural_compressor"]], "neural_compressor.metric.bleu": [[363, "module-neural_compressor.metric.bleu"]], "neural_compressor.metric.bleu_util": [[364, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[365, "module-neural_compressor.metric.coco_label_map"]], "neural_compressor.metric.coco_tools": [[366, "module-neural_compressor.metric.coco_tools"]], "neural_compressor.metric.evaluate_squad": [[367, "module-neural_compressor.metric.evaluate_squad"]], "neural_compressor.metric.f1": [[368, "module-neural_compressor.metric.f1"]], "neural_compressor.metric": [[369, "module-neural_compressor.metric"]], "neural_compressor.metric.metric": [[370, "module-neural_compressor.metric.metric"]], "neural_compressor.mix_precision": [[371, "module-neural_compressor.mix_precision"]], "neural_compressor.model.base_model": [[372, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[373, "module-neural_compressor.model"]], "neural_compressor.model.keras_model": [[374, "module-neural_compressor.model.keras_model"]], "neural_compressor.model.model": [[375, "module-neural_compressor.model.model"]], "neural_compressor.model.mxnet_model": [[376, "module-neural_compressor.model.mxnet_model"]], "neural_compressor.model.nets_factory": [[377, "module-neural_compressor.model.nets_factory"]], "neural_compressor.model.onnx_model": [[378, "module-neural_compressor.model.onnx_model"]], "neural_compressor.model.tensorflow_model": [[379, "module-neural_compressor.model.tensorflow_model"]], "neural_compressor.model.torch_model": [[380, "module-neural_compressor.model.torch_model"]], "neural_compressor.objective": [[381, "module-neural_compressor.objective"]], "neural_compressor.onnxrt.algorithms": [[382, "module-neural_compressor.onnxrt.algorithms"]], "neural_compressor.onnxrt.algorithms.smoother.calibrator": [[383, "module-neural_compressor.onnxrt.algorithms.smoother.calibrator"]], "neural_compressor.onnxrt.algorithms.smoother.core": [[384, "module-neural_compressor.onnxrt.algorithms.smoother.core"]], "neural_compressor.onnxrt.algorithms.smoother": [[385, "module-neural_compressor.onnxrt.algorithms.smoother"]], "neural_compressor.onnxrt.algorithms.weight_only.awq": [[386, "module-neural_compressor.onnxrt.algorithms.weight_only.awq"]], "neural_compressor.onnxrt.algorithms.weight_only.gptq": [[387, "module-neural_compressor.onnxrt.algorithms.weight_only.gptq"]], "neural_compressor.onnxrt.algorithms.weight_only": [[388, "module-neural_compressor.onnxrt.algorithms.weight_only"]], "neural_compressor.onnxrt.algorithms.weight_only.rtn": [[389, "module-neural_compressor.onnxrt.algorithms.weight_only.rtn"]], "neural_compressor.onnxrt.algorithms.weight_only.utility": [[390, "module-neural_compressor.onnxrt.algorithms.weight_only.utility"]], "neural_compressor.onnxrt": [[391, "module-neural_compressor.onnxrt"]], "neural_compressor.onnxrt.quantization.algorithm_entry": [[392, "module-neural_compressor.onnxrt.quantization.algorithm_entry"]], "neural_compressor.onnxrt.quantization.calibrate": [[393, "module-neural_compressor.onnxrt.quantization.calibrate"]], "neural_compressor.onnxrt.quantization.config": [[394, "module-neural_compressor.onnxrt.quantization.config"]], "neural_compressor.onnxrt.quantization": [[395, "module-neural_compressor.onnxrt.quantization"]], "neural_compressor.onnxrt.quantization.quantize": [[396, "module-neural_compressor.onnxrt.quantization.quantize"]], "neural_compressor.onnxrt.utils": [[397, "module-neural_compressor.onnxrt.utils"]], "neural_compressor.onnxrt.utils.onnx_model": [[398, "module-neural_compressor.onnxrt.utils.onnx_model"]], "neural_compressor.onnxrt.utils.utility": [[399, "module-neural_compressor.onnxrt.utils.utility"]], "neural_compressor.profiling": [[400, "module-neural_compressor.profiling"]], "neural_compressor.profiling.parser.factory": [[401, "module-neural_compressor.profiling.parser.factory"]], "neural_compressor.profiling.parser": [[402, "module-neural_compressor.profiling.parser"]], "neural_compressor.profiling.parser.onnx_parser.factory": [[403, "module-neural_compressor.profiling.parser.onnx_parser.factory"]], "neural_compressor.profiling.parser.onnx_parser": [[404, "module-neural_compressor.profiling.parser.onnx_parser"]], "neural_compressor.profiling.parser.onnx_parser.parser": [[405, "module-neural_compressor.profiling.parser.onnx_parser.parser"]], "neural_compressor.profiling.parser.parser": [[406, "module-neural_compressor.profiling.parser.parser"]], "neural_compressor.profiling.parser.result": [[407, "module-neural_compressor.profiling.parser.result"]], "neural_compressor.profiling.parser.tensorflow_parser.factory": [[408, "module-neural_compressor.profiling.parser.tensorflow_parser.factory"]], "neural_compressor.profiling.parser.tensorflow_parser": [[409, "module-neural_compressor.profiling.parser.tensorflow_parser"]], "neural_compressor.profiling.parser.tensorflow_parser.parser": [[410, "module-neural_compressor.profiling.parser.tensorflow_parser.parser"]], "neural_compressor.profiling.profiler.factory": [[411, "module-neural_compressor.profiling.profiler.factory"]], "neural_compressor.profiling.profiler": [[412, "module-neural_compressor.profiling.profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.factory": [[413, "module-neural_compressor.profiling.profiler.onnxrt_profiler.factory"]], "neural_compressor.profiling.profiler.onnxrt_profiler": [[414, "module-neural_compressor.profiling.profiler.onnxrt_profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.profiler": [[415, "module-neural_compressor.profiling.profiler.onnxrt_profiler.profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.utils": [[416, "module-neural_compressor.profiling.profiler.onnxrt_profiler.utils"]], "neural_compressor.profiling.profiler.profiler": [[417, "module-neural_compressor.profiling.profiler.profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.factory": [[418, "module-neural_compressor.profiling.profiler.tensorflow_profiler.factory"]], "neural_compressor.profiling.profiler.tensorflow_profiler": [[419, "module-neural_compressor.profiling.profiler.tensorflow_profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.profiler": [[420, "module-neural_compressor.profiling.profiler.tensorflow_profiler.profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.utils": [[421, "module-neural_compressor.profiling.profiler.tensorflow_profiler.utils"]], "neural_compressor.quantization": [[422, "module-neural_compressor.quantization"]], "neural_compressor.strategy.auto": [[423, "module-neural_compressor.strategy.auto"]], "neural_compressor.strategy.auto_mixed_precision": [[424, "module-neural_compressor.strategy.auto_mixed_precision"]], "neural_compressor.strategy.basic": [[425, "module-neural_compressor.strategy.basic"]], "neural_compressor.strategy.bayesian": [[426, "module-neural_compressor.strategy.bayesian"]], "neural_compressor.strategy.conservative": [[427, "module-neural_compressor.strategy.conservative"]], "neural_compressor.strategy.exhaustive": [[428, "module-neural_compressor.strategy.exhaustive"]], "neural_compressor.strategy.hawq_v2": [[429, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy": [[430, "module-neural_compressor.strategy"]], "neural_compressor.strategy.mse": [[431, "module-neural_compressor.strategy.mse"]], "neural_compressor.strategy.mse_v2": [[432, "module-neural_compressor.strategy.mse_v2"]], "neural_compressor.strategy.random": [[433, "module-neural_compressor.strategy.random"]], "neural_compressor.strategy.strategy": [[434, "module-neural_compressor.strategy.strategy"]], "neural_compressor.strategy.utils.constant": [[435, "module-neural_compressor.strategy.utils.constant"]], "neural_compressor.strategy.utils": [[436, "module-neural_compressor.strategy.utils"]], "neural_compressor.strategy.utils.tuning_sampler": [[437, "module-neural_compressor.strategy.utils.tuning_sampler"]], "neural_compressor.strategy.utils.tuning_space": [[438, "module-neural_compressor.strategy.utils.tuning_space"]], "neural_compressor.strategy.utils.tuning_structs": [[439, "module-neural_compressor.strategy.utils.tuning_structs"]], "neural_compressor.strategy.utils.utility": [[440, "module-neural_compressor.strategy.utils.utility"]], "neural_compressor.template.api_doc_example": [[441, "module-neural_compressor.template.api_doc_example"]], "neural_compressor.template": [[442, "module-neural_compressor.template"]], "neural_compressor.tensorflow.algorithms": [[443, "module-neural_compressor.tensorflow.algorithms"]], "neural_compressor.tensorflow.algorithms.smoother.calibration": [[444, "module-neural_compressor.tensorflow.algorithms.smoother.calibration"]], "neural_compressor.tensorflow.algorithms.smoother.core": [[445, "module-neural_compressor.tensorflow.algorithms.smoother.core"]], "neural_compressor.tensorflow.algorithms.smoother": [[446, "module-neural_compressor.tensorflow.algorithms.smoother"]], "neural_compressor.tensorflow.algorithms.smoother.scaler": [[447, "module-neural_compressor.tensorflow.algorithms.smoother.scaler"]], "neural_compressor.tensorflow.algorithms.static_quant": [[448, "module-neural_compressor.tensorflow.algorithms.static_quant"]], "neural_compressor.tensorflow.algorithms.static_quant.keras": [[449, "module-neural_compressor.tensorflow.algorithms.static_quant.keras"]], "neural_compressor.tensorflow.algorithms.static_quant.keras_utils.conv2d": [[450, "module-neural_compressor.tensorflow.algorithms.static_quant.keras_utils.conv2d"]], "neural_compressor.tensorflow.algorithms.static_quant.keras_utils.dense": [[451, "module-neural_compressor.tensorflow.algorithms.static_quant.keras_utils.dense"]], "neural_compressor.tensorflow.algorithms.static_quant.keras_utils.depthwise_conv2d": [[452, "module-neural_compressor.tensorflow.algorithms.static_quant.keras_utils.depthwise_conv2d"]], "neural_compressor.tensorflow.algorithms.static_quant.keras_utils": [[453, "module-neural_compressor.tensorflow.algorithms.static_quant.keras_utils"]], "neural_compressor.tensorflow.algorithms.static_quant.keras_utils.pool2d": [[454, "module-neural_compressor.tensorflow.algorithms.static_quant.keras_utils.pool2d"]], "neural_compressor.tensorflow.algorithms.static_quant.keras_utils.quantizer": [[455, "module-neural_compressor.tensorflow.algorithms.static_quant.keras_utils.quantizer"]], "neural_compressor.tensorflow.algorithms.static_quant.keras_utils.separable_conv2d": [[456, "module-neural_compressor.tensorflow.algorithms.static_quant.keras_utils.separable_conv2d"]], "neural_compressor.tensorflow": [[457, "module-neural_compressor.tensorflow"]], "neural_compressor.tensorflow.quantization.algorithm_entry": [[458, "module-neural_compressor.tensorflow.quantization.algorithm_entry"]], "neural_compressor.tensorflow.quantization.config": [[459, "module-neural_compressor.tensorflow.quantization.config"]], "neural_compressor.tensorflow.quantization": [[460, "module-neural_compressor.tensorflow.quantization"]], "neural_compressor.tensorflow.quantization.quantize": [[461, "module-neural_compressor.tensorflow.quantization.quantize"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_add_to_biasadd": [[462, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_add_to_biasadd"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_layout": [[463, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_layout"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_leakyrelu": [[464, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_leakyrelu"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_nan_to_random": [[465, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_nan_to_random"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_placeholder_to_const": [[466, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_placeholder_to_const"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dilated_contraction": [[467, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dilated_contraction"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dummy_biasadd": [[468, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dummy_biasadd"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.expanddims_optimizer": [[469, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.expanddims_optimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fetch_weight_from_reshape": [[470, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_batch_norm": [[471, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_batch_norm"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_constant": [[472, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_constant"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_biasadd_add": [[473, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_biasadd_add"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_column_wise_mul": [[474, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_column_wise_mul"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_conv_with_math": [[475, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_conv_with_math"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn": [[476, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in": [[477, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_gelu": [[478, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_gelu"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm": [[479, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_conv": [[480, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_conv"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[481, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_reshape_transpose": [[482, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_reshape_transpose"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.graph_cse_optimizer": [[483, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.graph_cse_optimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.grappler_pass": [[484, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic": [[485, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.insert_print_node": [[486, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.insert_print_node"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.move_squeeze_after_relu": [[487, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.move_squeeze_after_relu"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.pre_optimize": [[488, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.pre_optimize"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.remove_training_nodes": [[489, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.remove_training_nodes"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.rename_batch_norm": [[490, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.rename_batch_norm"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.split_shared_input": [[491, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.split_shared_input"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_equivalent_nodes": [[492, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_equivalent_nodes"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_unused_nodes": [[493, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_unused_nodes"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.switch_optimizer": [[494, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.switch_optimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.graph_base": [[495, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.graph_base"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter": [[496, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter"]], "neural_compressor.tensorflow.quantization.utils.graph_util": [[497, "module-neural_compressor.tensorflow.quantization.utils.graph_util"]], "neural_compressor.tensorflow.quantization.utils": [[498, "module-neural_compressor.tensorflow.quantization.utils"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph_common": [[499, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph_common"]], "neural_compressor.tensorflow.quantization.utils.utility": [[500, "module-neural_compressor.tensorflow.quantization.utils.utility"]], "neural_compressor.tensorflow.utils.constants": [[501, "module-neural_compressor.tensorflow.utils.constants"]], "neural_compressor.tensorflow.utils.data": [[502, "module-neural_compressor.tensorflow.utils.data"]], "neural_compressor.tensorflow.utils": [[503, "module-neural_compressor.tensorflow.utils"]], "neural_compressor.tensorflow.utils.model": [[504, "module-neural_compressor.tensorflow.utils.model"]], "neural_compressor.tensorflow.utils.model_wrappers": [[505, "module-neural_compressor.tensorflow.utils.model_wrappers"]], "neural_compressor.tensorflow.utils.nets_factory": [[506, "module-neural_compressor.tensorflow.utils.nets_factory"]], "neural_compressor.tensorflow.utils.utility": [[507, "module-neural_compressor.tensorflow.utils.utility"]], "neural_compressor.torch.algorithms.habana_fp8.fp8_quant": [[508, "module-neural_compressor.torch.algorithms.habana_fp8.fp8_quant"]], "neural_compressor.torch.algorithms.habana_fp8": [[509, "module-neural_compressor.torch.algorithms.habana_fp8"]], "neural_compressor.torch.algorithms.habana_fp8.modules": [[510, "module-neural_compressor.torch.algorithms.habana_fp8.modules"]], "neural_compressor.torch.algorithms.habana_fp8.observer": [[511, "module-neural_compressor.torch.algorithms.habana_fp8.observer"]], "neural_compressor.torch.algorithms": [[512, "module-neural_compressor.torch.algorithms"]], "neural_compressor.torch.algorithms.layer_wise": [[513, "module-neural_compressor.torch.algorithms.layer_wise"]], "neural_compressor.torch.algorithms.layer_wise.load": [[514, "module-neural_compressor.torch.algorithms.layer_wise.load"]], "neural_compressor.torch.algorithms.layer_wise.modified_pickle": [[515, "module-neural_compressor.torch.algorithms.layer_wise.modified_pickle"]], "neural_compressor.torch.algorithms.layer_wise.utils": [[516, "module-neural_compressor.torch.algorithms.layer_wise.utils"]], "neural_compressor.torch.algorithms.weight_only.awq": [[517, "module-neural_compressor.torch.algorithms.weight_only.awq"]], "neural_compressor.torch.algorithms.weight_only.gptq": [[518, "module-neural_compressor.torch.algorithms.weight_only.gptq"]], "neural_compressor.torch.algorithms.weight_only": [[519, "module-neural_compressor.torch.algorithms.weight_only"]], "neural_compressor.torch.algorithms.weight_only.modules": [[520, "module-neural_compressor.torch.algorithms.weight_only.modules"]], "neural_compressor.torch.algorithms.weight_only.rtn": [[521, "module-neural_compressor.torch.algorithms.weight_only.rtn"]], "neural_compressor.torch.algorithms.weight_only.utility": [[522, "module-neural_compressor.torch.algorithms.weight_only.utility"]], "neural_compressor.torch.amp.autocast": [[523, "module-neural_compressor.torch.amp.autocast"]], "neural_compressor.torch.amp.fp8.functions": [[524, "module-neural_compressor.torch.amp.fp8.functions"]], "neural_compressor.torch.amp.fp8": [[525, "module-neural_compressor.torch.amp.fp8"]], "neural_compressor.torch.amp": [[526, "module-neural_compressor.torch.amp"]], "neural_compressor.torch": [[527, "module-neural_compressor.torch"]], "neural_compressor.torch.quantization.algorithm_entry": [[528, "module-neural_compressor.torch.quantization.algorithm_entry"]], "neural_compressor.torch.quantization.autotune": [[529, "module-neural_compressor.torch.quantization.autotune"]], "neural_compressor.torch.quantization.config": [[530, "module-neural_compressor.torch.quantization.config"]], "neural_compressor.torch.quantization": [[531, "module-neural_compressor.torch.quantization"]], "neural_compressor.torch.quantization.modules": [[532, "module-neural_compressor.torch.quantization.modules"]], "neural_compressor.torch.quantization.quantize": [[533, "module-neural_compressor.torch.quantization.quantize"]], "neural_compressor.torch.utils.constants": [[534, "module-neural_compressor.torch.utils.constants"]], "neural_compressor.torch.utils.environ": [[535, "module-neural_compressor.torch.utils.environ"]], "neural_compressor.torch.utils": [[536, "module-neural_compressor.torch.utils"]], "neural_compressor.torch.utils.utility": [[537, "module-neural_compressor.torch.utils.utility"]], "neural_compressor.training": [[538, "module-neural_compressor.training"]], "neural_compressor.utils.collect_layer_histogram": [[539, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[540, "module-neural_compressor.utils.constant"]], "neural_compressor.utils.create_obj_from_config": [[541, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils": [[542, "module-neural_compressor.utils"]], "neural_compressor.utils.kl_divergence": [[543, "module-neural_compressor.utils.kl_divergence"]], "neural_compressor.utils.load_huggingface": [[544, "module-neural_compressor.utils.load_huggingface"]], "neural_compressor.utils.logger": [[545, "module-neural_compressor.utils.logger"]], "neural_compressor.utils.neural_insights_utils": [[546, "module-neural_compressor.utils.neural_insights_utils"]], "neural_compressor.utils.options": [[547, "module-neural_compressor.utils.options"]], "neural_compressor.utils.pytorch": [[548, "module-neural_compressor.utils.pytorch"]], "neural_compressor.utils.utility": [[549, "module-neural_compressor.utils.utility"]], "neural_compressor.utils.weights_details": [[550, "module-neural_compressor.utils.weights_details"]], "neural_compressor.version": [[551, "module-neural_compressor.version"]], "Intel\u00ae Neural Compressor Documentation": [[552, "intel-neural-compressor-documentation"], [651, "intel-neural-compressor-documentation"]], "Sections": [[552, "sections"], [651, "sections"]], "Contributor Covenant Code of Conduct": [[553, "contributor-covenant-code-of-conduct"], [554, "contributor-covenant-code-of-conduct"]], "Our Pledge": [[553, "our-pledge"]], "Our Standards": [[553, "our-standards"]], "Our Responsibilities": [[553, "our-responsibilities"]], "Scope": [[553, "scope"]], "Enforcement": [[553, "enforcement"]], "Attribution": [[553, "attribution"]], "Contribution Guidelines": [[554, "contribution-guidelines"]], "Create Pull Request": [[554, "create-pull-request"]], "Step-by-Step guidelines": [[554, "step-by-step-guidelines"]], "Pull Request Checklist": [[554, "pull-request-checklist"]], "Pull Request Template": [[554, "pull-request-template"]], "Pull Request Acceptance Criteria": [[554, "pull-request-acceptance-criteria"]], "Pull Request Status Checks Overview": [[554, "pull-request-status-checks-overview"]], "Support": [[554, "support"]], "FX": [[555, "fx"]], "Introduction": [[555, "introduction"], [556, "introduction"], [559, "introduction"], [560, "introduction"], [561, "introduction"], [576, "introduction"], [577, "introduction"], [578, "introduction"], [579, "introduction"], [582, "introduction"], [583, "introduction"], [584, "introduction"], [586, "introduction"], [588, "introduction"], [591, "introduction"], [595, "introduction"], [597, "introduction"], [598, "introduction"], [619, "introduction"], [620, "introduction"], [621, "introduction"], [633, "introduction"], [634, "introduction"], [635, "introduction"], [637, "introduction"], [639, "introduction"], [641, "introduction"], [643, "introduction"], [644, "introduction"], [645, "introduction"], [646, "introduction"], [647, "introduction"], [649, "introduction"]], "FX Mode Support Matrix in Neural Compressor": [[555, "fx-mode-support-matrix-in-neural-compressor"]], "Get Started": [[555, "get-started"], [581, "get-started"], [623, "get-started"], [638, "get-started"]], "Post Training Static Quantization": [[555, "post-training-static-quantization"], [638, "post-training-static-quantization"]], "Post Training Dynamic Quantization": [[555, "post-training-dynamic-quantization"], [638, "post-training-dynamic-quantization"]], "Quantization-Aware Training": [[555, "quantization-aware-training"]], "Examples": [[555, "examples"], [556, "examples"], [576, "examples"], [578, "examples"], [579, "examples"], [582, "examples"], [583, "examples"], [584, "examples"], [585, "examples"], [586, "examples"], [596, "examples"], [597, "examples"], [598, "examples"], [634, "examples"], [635, "examples"], [638, "examples"], [639, "examples"], [641, "examples"], [645, "examples"]], "Note": [[555, "note"]], "Details": [[555, "details"]], "Common Problem": [[555, "common-problem"]], "Dynamic Quantization": [[555, "dynamic-quantization"]], "Static Quantization & Quantization Aware Training": [[555, "static-quantization-quantization-aware-training"]], "Neural Architecture Search": [[556, "neural-architecture-search"]], "Basic NAS": [[556, "basic-nas"]], "Dynamic NAS": [[556, "dynamic-nas"]], "NAS Support Matrix": [[556, "nas-support-matrix"]], "Get Started with NAS API": [[556, "get-started-with-nas-api"]], "Basic Usage": [[556, "basic-usage"]], "1. Python code + YAML": [[556, "python-code-yaml"]], "2. Python code only": [[556, "python-code-only"]], "Advanced Usage (Custom NAS)": [[556, "advanced-usage-custom-nas"]], "Security Policy": [[557, "security-policy"]], "Report a Vulnerability": [[557, "report-a-vulnerability"]], "Intel\u00ae Neural Compressor": [[558, "intel-neural-compressor"], [616, "intel-neural-compressor"]], "Installation": [[558, "installation"], [592, "installation"], [592, "id1"], [610, "installation"], [618, "installation"], [623, "installation"]], "Install from pypi": [[558, "install-from-pypi"], [618, "install-from-pypi"]], "Getting Started": [[558, "getting-started"], [589, "getting-started"], [618, "getting-started"]], "Quantization with Python API": [[558, "quantization-with-python-api"], [589, "quantization-with-python-api"], [618, "quantization-with-python-api"]], "Documentation": [[558, "documentation"]], "Selected Publications/Events": [[558, "selected-publications-events"]], "Additional Content": [[558, "additional-content"]], "Communication": [[558, "communication"]], "Adaptor": [[559, "adaptor"], [562, "adaptor"]], "Adaptor Support Matrix": [[559, "adaptor-support-matrix"]], "Working Flow": [[559, "working-flow"], [638, "working-flow"]], "Get Started with Adaptor API": [[559, "get-started-with-adaptor-api"]], "Query API": [[559, "query-api"]], "Background": [[559, "background"]], "Query API Introduction": [[559, "query-api-introduction"]], "Example of Adding a New Backend Support": [[559, "example-of-adding-a-new-backend-support"]], "Capability": [[559, "capability"]], "Implement ONNXRTAdaptor Class": [[559, "implement-onnxrtadaptor-class"]], "How to Add An Adaptor": [[560, "how-to-add-an-adaptor"]], "API List that Need to Implement": [[560, "api-list-that-need-to-implement"]], "Design the framework YAML": [[560, "design-the-framework-yaml"]], "Add query_fw_capability to Adaptor": [[560, "add-query-fw-capability-to-adaptor"]], "Add quantize API according to tune_cfg": [[560, "add-quantize-api-according-to-tune-cfg"]], "Prepare calibration model from fp32 graph": [[560, "prepare-calibration-model-from-fp32-graph"]], "Run sampling iterations of the fp32 graph to calibrate quantizable operators.": [[560, "run-sampling-iterations-of-the-fp32-graph-to-calibrate-quantizable-operators"]], "Calculate the data range and generate quantized model": [[560, "calculate-the-data-range-and-generate-quantized-model"]], "How to Support New Data Type, Like Int4, with a Few Line Changes": [[561, "how-to-support-new-data-type-like-int4-with-a-few-line-changes"]], "Define the Quantization Ability of the Specific Operator": [[561, "define-the-quantization-ability-of-the-specific-operator"]], "Invoke the Operator Kernel According to the Tuning Configuration": [[561, "invoke-the-operator-kernel-according-to-the-tuning-configuration"]], "Use the New Data Type": [[561, "use-the-new-data-type"]], "Summary": [[561, "summary"]], "ONNX Runtime": [[563, "onnx-runtime"]], "Torch Utils": [[564, "torch-utils"]], "API Document Example": [[565, "api-document-example"]], "APIs": [[566, "apis"]], "Benchmark": [[567, "benchmark"], [596, "benchmark"], [637, "benchmark"]], "Compression": [[568, "compression"]], "Config": [[569, "config"]], "Mix Precision": [[570, "mix-precision"], [596, "mix-precision"]], "Model": [[571, "model"], [598, "model"], [619, "model"], [621, "model"]], "Objective": [[572, "objective"], [629, "objective"], [630, "objective"], [631, "objective"], [633, "objective"]], "Quantization": [[573, "quantization"], [637, "quantization"], [638, "quantization"]], "Strategy": [[574, "strategy"]], "Training": [[575, "training"]], "Benchmarking": [[576, "benchmarking"]], "Benchmark Support Matrix": [[576, "benchmark-support-matrix"]], "Get Started with Benchmark API": [[576, "get-started-with-benchmark-api"]], "Calibration Algorithms in Quantization": [[577, "calibration-algorithms-in-quantization"]], "Calibration Algorithms": [[577, "calibration-algorithms"]], "Support Matrix": [[577, "support-matrix"], [601, "support-matrix"]], "Reference": [[577, "reference"], [635, "reference"], [638, "reference"], [641, "reference"], [644, "reference"]], "DataLoader": [[578, "dataloader"]], "Supported Framework Dataloader Matrix": [[578, "supported-framework-dataloader-matrix"]], "Get Started with DataLoader": [[578, "get-started-with-dataloader"]], "Use Intel\u00ae Neural Compressor DataLoader API": [[578, "use-intel-neural-compressor-dataloader-api"]], "Build Custom Dataloader with Python API": [[578, "build-custom-dataloader-with-python-api"]], "Dataset": [[579, "dataset"]], "Supported Framework Dataset Matrix": [[579, "supported-framework-dataset-matrix"]], "TensorFlow": [[579, "tensorflow"], [595, "tensorflow"], [646, "tensorflow"]], "PyTorch": [[579, "pytorch"], [595, "pytorch"], [640, "pytorch"]], "MXNet": [[579, "mxnet"], [595, "mxnet"], [646, "mxnet"]], "ONNXRT": [[579, "onnxrt"], [595, "onnxrt"], [646, "onnxrt"]], "Get start with Dataset API": [[579, "get-start-with-dataset-api"]], "Config dataloader in a yaml file": [[579, "config-dataloader-in-a-yaml-file"]], "User-specific dataset": [[579, "user-specific-dataset"]], "Design": [[580, "design"], [647, "design"], [647, "id1"], [647, "id3"], [647, "id5"], [647, "id7"], [647, "id9"], [647, "id11"], [647, "id13"], [647, "id15"], [647, "id17"], [647, "id19"], [647, "id21"]], "Architecture": [[580, "architecture"], [591, "architecture"]], "Workflow": [[580, "workflow"]], "Diagnosis": [[581, "diagnosis"]], "Diagnosis Introduction": [[581, "diagnosis-introduction"]], "Supported Feature Matrix": [[581, "supported-feature-matrix"], [584, "supported-feature-matrix"], [588, "supported-feature-matrix"], [591, "supported-feature-matrix"], [637, "supported-feature-matrix"], [638, "supported-feature-matrix"], [645, "supported-feature-matrix"], [649, "supported-feature-matrix"]], "Install Intel\u00ae Neural Compressor": [[581, "install-intel-neural-compressor"]], "Modify script": [[581, "modify-script"]], "Quantization diagnosis": [[581, "quantization-diagnosis"]], "Benchmark diagnosis": [[581, "benchmark-diagnosis"]], "Example": [[581, "example"], [595, "example"], [601, "example"], [605, "example"], [633, "example"]], "Prepare dataset": [[581, "prepare-dataset"]], "Run quantization script": [[581, "run-quantization-script"]], "Run benchmark script": [[581, "run-benchmark-script"]], "See quantization data": [[581, "see-quantization-data"]], "How to do diagnosis": [[581, "how-to-do-diagnosis"]], "Parameter description": [[581, "parameter-description"]], "Diagnosis suggestions": [[581, "diagnosis-suggestions"]], "Fallback setting example": [[581, "fallback-setting-example"]], "See profiling data": [[581, "see-profiling-data"]], "Distillation": [[582, "distillation"], [596, "distillation"], [637, "distillation"]], "Knowledge Distillation": [[582, "knowledge-distillation"]], "Intermediate Layer Knowledge Distillation": [[582, "intermediate-layer-knowledge-distillation"]], "Self Distillation": [[582, "self-distillation"]], "Distillation Support Matrix": [[582, "distillation-support-matrix"]], "Get Started with Distillation API": [[582, "get-started-with-distillation-api"]], "Distillation for Quantization": [[583, "distillation-for-quantization"]], "Distillation for Quantization Support Matrix": [[583, "distillation-for-quantization-support-matrix"]], "Get Started with Distillation for Quantization API": [[583, "get-started-with-distillation-for-quantization-api"]], "Distributed Training and Inference (Evaluation)": [[584, "distributed-training-and-inference-evaluation"]], "Get Started with Distributed Training and Inference API": [[584, "get-started-with-distributed-training-and-inference-api"]], "Option 1: Pure Yaml Configuration": [[584, "option-1-pure-yaml-configuration"]], "Option 2: User Defined Training Function": [[584, "option-2-user-defined-training-function"]], "Horovodrun Execution": [[584, "horovodrun-execution"]], "Security": [[584, "security"]], "PyTorch Examples:": [[584, "pytorch-examples"]], "TensorFlow Examples:": [[584, "tensorflow-examples"]], "Example List": [[585, "example-list"]], "Release Data": [[585, "release-data"]], "Export": [[586, "export"]], "Supported Framework Model Matrix": [[586, "supported-framework-model-matrix"], [598, "supported-framework-model-matrix"], [639, "supported-framework-model-matrix"], [641, "supported-framework-model-matrix"]], "PyTorch Model": [[586, "pytorch-model"]], "FP32 Model Export": [[586, "fp32-model-export"], [586, "id1"]], "INT8 Model Export": [[586, "int8-model-export"], [586, "id2"]], "Tensorflow Model": [[586, "tensorflow-model"]], "Appendix": [[586, "appendix"]], "Supported quantized ops": [[586, "supported-quantized-ops"]], "Frequently Asked Questions": [[587, "frequently-asked-questions"]], "Common Build Issues": [[587, "common-build-issues"]], "Issue 1:": [[587, "issue-1"]], "Issue 2:": [[587, "issue-2"]], "Issue 3:": [[587, "issue-3"]], "Issue 4:": [[587, "issue-4"]], "Framework YAML Configuration Files": [[588, "framework-yaml-configuration-files"]], "Get started with Framework YAML Files": [[588, "get-started-with-framework-yaml-files"]], "Quick Samples": [[589, "quick-samples"]], "Validated Models": [[589, "validated-models"], [644, "validated-models"], [650, "validated-models"]], "Incompatible changes between v1.2 and v1.1": [[590, "incompatible-changes-between-v1-2-and-v1-1"]], "User-facing APIs": [[590, "user-facing-apis"]], "Built-in transform/dataset/metric APIs": [[590, "built-in-transform-dataset-metric-apis"]], "Infrastructure of Intel\u00ae Neural Compressor": [[591, "infrastructure-of-intel-neural-compressor"]], "Prerequisites": [[592, "prerequisites"], [623, "prerequisites"], [624, "prerequisites"]], "Install from Binary": [[592, "install-from-binary"]], "Install from Source": [[592, "install-from-source"], [618, "install-from-source"]], "Install from AI Kit": [[592, "install-from-ai-kit"]], "System Requirements": [[592, "system-requirements"]], "Validated Hardware Environment": [[592, "validated-hardware-environment"]], "Intel\u00ae Neural Compressor supports CPUs based on Intel 64 architecture or compatible processors:": [[592, "intel-neural-compressor-supports-cpus-based-on-intel-64-architecture-or-compatible-processors"]], "Intel\u00ae Neural Compressor supports GPUs built on Intel\u2019s Xe architecture:": [[592, "intel-neural-compressor-supports-gpus-built-on-intel-s-xe-architecture"]], "Intel\u00ae Neural Compressor quantized ONNX models support multiple hardware vendors through ONNX Runtime:": [[592, "intel-neural-compressor-quantized-onnx-models-support-multiple-hardware-vendors-through-onnx-runtime"]], "Validated Software Environment": [[592, "validated-software-environment"]], "Legal Information": [[593, "legal-information"]], "License": [[593, "license"]], "Citation": [[593, "citation"]], "Trademarks": [[593, "trademarks"]], "LLMs Quantization Recipes": [[594, "llms-quantization-recipes"]], "IPEX key models": [[594, "ipex-key-models"]], "Metrics": [[595, "metrics"]], "Supported Built-in Metric Matrix": [[595, "supported-built-in-metric-matrix"]], "Get Started with Metric": [[595, "get-started-with-metric"]], "Use Intel\u00ae Neural Compressor Metric API": [[595, "use-intel-neural-compressor-metric-api"]], "Build Custom Metric with Python API": [[595, "build-custom-metric-with-python-api"]], "Code Migration from Intel Neural Compressor 1.X to Intel Neural Compressor 2.X": [[596, "code-migration-from-intel-neural-compressor-1-x-to-intel-neural-compressor-2-x"]], "Model Quantization": [[596, "model-quantization"]], "Post-training Quantization": [[596, "post-training-quantization"]], "Quantization Aware Training": [[596, "quantization-aware-training"], [638, "quantization-aware-training"], [638, "id1"]], "Pruning": [[596, "pruning"], [635, "pruning"], [637, "pruning"]], "Orchestration": [[596, "orchestration"]], "Mixed Precision": [[597, "mixed-precision"]], "Mixed Precision Support Matrix": [[597, "mixed-precision-support-matrix"]], "Hardware and Software requests for BF16": [[597, "hardware-and-software-requests-for-bf16"]], "Hardware and Software requests for FP16": [[597, "hardware-and-software-requests-for-fp16"]], "During quantization mixed precision": [[597, "during-quantization-mixed-precision"]], "Accuracy-driven mixed precision": [[597, "accuracy-driven-mixed-precision"]], "Get Started with Mixed Precision API": [[597, "get-started-with-mixed-precision-api"]], "Neural Coder": [[599, "neural-coder"], [616, "neural-coder"], [616, "id1"]], "What do we offer?": [[599, "what-do-we-offer"]], "Getting Started!": [[599, "getting-started"], [610, "getting-started"]], "Jupyter Lab Extension": [[599, "jupyter-lab-extension"]], "Python Launcher": [[599, "python-launcher"], [604, "python-launcher"]], "Python API": [[599, "python-api"]], "Contact": [[599, "contact"], [623, "contact"]], "AWS Amazon SageMaker Support": [[600, "aws-amazon-sagemaker-support"]], "Start Jupyter Lab 3": [[600, "start-jupyter-lab-3"]], "For SageMaker Studio": [[600, "for-sagemaker-studio"]], "For SageMaker Notebook instance": [[600, "for-sagemaker-notebook-instance"]], "Installation Guide": [[600, "installation-guide"]], "BigDL Nano Support": [[601, "bigdl-nano-support"]], "Intel CPU Platforms: Best Performance Setting": [[602, "intel-cpu-platforms-best-performance-setting"]], "Install MKL, OpenMP and JEMALLOC": [[602, "install-mkl-openmp-and-jemalloc"]], "Install NUMA Controller": [[602, "install-numa-controller"]], "Environment Variables": [[602, "environment-variables"]], "Frequency Governers": [[602, "frequency-governers"]], "Neural Coder as Python API": [[603, "neural-coder-as-python-api"]], "Enable": [[603, "enable"]], "Bench": [[603, "bench"]], "SuperBench": [[603, "superbench"]], "Quick-Start": [[604, "quick-start"]], "Launcher Arguments (Optional)": [[604, "launcher-arguments-optional"]], "Neural Coder for Quantization": [[605, "neural-coder-for-quantization"]], "Features Supported": [[605, "features-supported"]], "Models Supported": [[605, "models-supported"]], "Usage": [[605, "usage"], [625, "usage"], [625, "id2"], [625, "id6"], [625, "id9"], [625, "id16"], [625, "id19"], [625, "id22"], [625, "id25"], [644, "usage"], [645, "usage"], [645, "id1"], [647, "usage"], [647, "id2"], [647, "id4"], [647, "id6"], [647, "id8"], [647, "id10"], [647, "id12"], [647, "id14"], [647, "id16"], [647, "id18"], [647, "id20"], [647, "id22"]], "PyPI distribution:": [[605, "pypi-distribution"]], "Supported Optimization Features": [[606, "supported-optimization-features"]], "v0.4": [[607, "v0-4"]], "Highlights": [[607, "highlights"]], "Others": [[607, "others"]], "Changelog": [[608, "changelog"], [612, "changelog"]], "neural_compressor_ext_lab": [[609, "neural-compressor-ext-lab"]], "Requirements": [[609, "requirements"], [613, "requirements"], [619, "requirements"], [620, "requirements"], [621, "requirements"], [629, "requirements"]], "Install": [[609, "install"]], "Uninstall": [[609, "uninstall"]], "Contributing": [[609, "contributing"], [613, "contributing"]], "Development install": [[609, "development-install"], [613, "development-install"]], "Development uninstall": [[609, "development-uninstall"], [613, "development-uninstall"]], "Packaging the extension": [[609, "packaging-the-extension"], [613, "packaging-the-extension"]], "Intel\u00ae Neural Compressor as JupyterLab Extension": [[610, "intel-neural-compressor-as-jupyterlab-extension"]], "Auto-enable a feature": [[610, "auto-enable-a-feature"]], "Or let us help you auto-select the best feature": [[610, "or-let-us-help-you-auto-select-the-best-feature"]], "Pre-requisites": [[610, "pre-requisites"]], "Making a new release of neural_compressor_ext_lab": [[611, "making-a-new-release-of-neural-compressor-ext-lab"]], "Manual release": [[611, "manual-release"], [614, "manual-release"]], "Python package": [[611, "python-package"], [614, "python-package"]], "NPM package": [[611, "npm-package"], [614, "npm-package"]], "Automated releases with the Jupyter Releaser": [[611, "automated-releases-with-the-jupyter-releaser"], [614, "automated-releases-with-the-jupyter-releaser"]], "Publishing to conda-forge": [[611, "publishing-to-conda-forge"], [614, "publishing-to-conda-forge"]], "neural_compressor_ext_lab_alibaba": [[613, "neural-compressor-ext-lab-alibaba"]], "Making a new release of neural_compressor_ext_lab_alibaba": [[614, "making-a-new-release-of-neural-compressor-ext-lab-alibaba"]], "Change Log": [[615, "change-log"]], "[Unreleased]": [[615, "unreleased"]], "Background Introduction": [[616, "background-introduction"]], "Neural Coder Extension in VSCode": [[616, "neural-coder-extension-in-vscode"]], "Neural Coder Extension Usage": [[616, "neural-coder-extension-usage"]], "1. Open": [[616, "open"]], "2. Search": [[616, "search"]], "3. Setting": [[616, "setting"]], "4. Icon": [[616, "icon"]], "5. optimization (quantization)": [[616, "optimization-quantization"]], "5.1 Enable": [[616, "enable"]], "5.2 Auto": [[616, "auto"]], "Welcome to your VS Code Extension": [[617, "welcome-to-your-vs-code-extension"]], "What\u2019s in the folder": [[617, "what-s-in-the-folder"]], "Setup": [[617, "setup"]], "Get up and running straight away": [[617, "get-up-and-running-straight-away"]], "Make changes": [[617, "make-changes"]], "Explore the API": [[617, "explore-the-api"]], "Run tests": [[617, "run-tests"]], "Go further": [[617, "go-further"]], "Neural Insights": [[618, "neural-insights"]], "Start the Neural Insights": [[618, "start-the-neural-insights"]], "Tensor dump examples": [[618, "tensor-dump-examples"]], "Step by Step Diagnosis Example": [[618, "step-by-step-diagnosis-example"]], "Research Collaborations": [[618, "research-collaborations"]], "Step by step example how to debug accuracy with Neural Insights": [[619, "step-by-step-example-how-to-debug-accuracy-with-neural-insights"], [621, "step-by-step-example-how-to-debug-accuracy-with-neural-insights"]], "Preparation": [[619, "preparation"], [620, "preparation"], [621, "preparation"], [643, "preparation"]], "Running the quantization": [[619, "running-the-quantization"], [620, "running-the-quantization"], [621, "running-the-quantization"]], "Analyzing the result of quantization": [[619, "analyzing-the-result-of-quantization"], [621, "analyzing-the-result-of-quantization"]], "Weights summary": [[619, "weights-summary"]], "Activations summary": [[619, "activations-summary"]], "Step by step example how to dump weights data for PyTorch model with Neural Insights": [[620, "step-by-step-example-how-to-dump-weights-data-for-pytorch-model-with-neural-insights"]], "Source": [[620, "source"], [621, "source"]], "Prepare the dataset": [[621, "prepare-the-dataset"]], "Analyzing weight histograms": [[621, "analyzing-weight-histograms"]], "Open Neural Insights": [[621, "open-neural-insights"]], "Getting Started with Create React App": [[622, "getting-started-with-create-react-app"]], "Available Scripts": [[622, "available-scripts"]], "npm start": [[622, "npm-start"]], "npm test": [[622, "npm-test"]], "npm run build": [[622, "npm-run-build"]], "npm run eject": [[622, "npm-run-eject"]], "Learn More": [[622, "learn-more"], [623, "learn-more"]], "Code Splitting": [[622, "code-splitting"]], "Analyzing the Bundle Size": [[622, "analyzing-the-bundle-size"]], "Making a Progressive Web App": [[622, "making-a-progressive-web-app"]], "Advanced Configuration": [[622, "advanced-configuration"]], "Deployment": [[622, "deployment"]], "npm run build fails to minify": [[622, "npm-run-build-fails-to-minify"]], "What\u2019s Neural Solution?": [[623, "what-s-neural-solution"]], "Why Neural Solution?": [[623, "why-neural-solution"]], "How does Neural Solution Work?": [[623, "how-does-neural-solution-work"]], "Method 1. Using pip:": [[623, "method-1-using-pip"]], "Method 2. Building from source:": [[623, "method-2-building-from-source"]], "End-to-end examples": [[623, "end-to-end-examples"]], "Get started": [[624, "get-started"]], "Install Neural Solution": [[624, "install-neural-solution"]], "Method 1. Using pip": [[624, "method-1-using-pip"]], "Method 2. Building from source": [[624, "method-2-building-from-source"]], "Start service": [[624, "start-service"]], "Submit task": [[624, "submit-task"]], "Query task status": [[624, "query-task-status"]], "Stop service": [[624, "stop-service"]], "Inspect logs": [[624, "inspect-logs"]], "Manage resource": [[624, "manage-resource"], [629, "manage-resource"], [630, "manage-resource"]], "Node States": [[624, "node-states"]], "Query cluster": [[624, "query-cluster"]], "Add node": [[624, "add-node"]], "Remove node": [[624, "remove-node"]], "Neural Solution API": [[625, "neural-solution-api"]], "Base URL": [[625, "base-url"]], "Endpoints": [[625, "endpoints"]], "GET /": [[625, "get"]], "Description": [[625, "description"], [625, "id1"], [625, "id4"], [625, "id8"], [625, "id12"], [625, "id15"], [625, "id18"], [625, "id21"], [625, "id24"]], "Responses": [[625, "responses"], [625, "id3"], [625, "id7"], [625, "id11"], [625, "id14"], [625, "id17"], [625, "id20"], [625, "id23"], [625, "id26"]], "POST /task/submit": [[625, "post-task-submit"]], "Parameters": [[625, "parameters"], [625, "id5"], [625, "id10"], [625, "id13"]], "GET /task/status/{task_id}": [[625, "get-task-status-task-id"]], "GET /task/log/{task_id}": [[625, "get-task-log-task-id"]], "WebSocket /task/screen/{task_id}": [[625, "websocket-task-screen-task-id"]], "GET /ping": [[625, "get-ping"]], "GET /cluster": [[625, "get-cluster"]], "GET /download/{task_id}": [[625, "get-download-task-id"]], "GET /description": [[625, "get-description"]], "Design Doc for Optimization as a Service [WIP]": [[626, "design-doc-for-optimization-as-a-service-wip"]], "Contents": [[626, "contents"]], "Overview": [[626, "overview"], [648, "overview"]], "Workflow of OaaS": [[626, "workflow-of-oaas"]], "Class definition diagram": [[626, "class-definition-diagram"]], "Extensibility": [[626, "extensibility"]], "Task request description": [[627, "task-request-description"]], "Examples List": [[628, "examples-list"]], "An end-to-end example: quantize a custom model with Neural Solution": [[629, "an-end-to-end-example-quantize-a-custom-model-with-neural-solution"]], "Start the Neural Solution Service": [[629, "start-the-neural-solution-service"], [630, "start-the-neural-solution-service"], [631, "start-the-neural-solution-service"]], "Submit optimization task": [[629, "submit-optimization-task"], [630, "submit-optimization-task"], [631, "submit-optimization-task"]], "Query optimization result": [[629, "query-optimization-result"], [630, "query-optimization-result"], [631, "query-optimization-result"]], "Download optimized model": [[629, "download-optimized-model"], [630, "download-optimized-model"]], "Stop the service": [[629, "stop-the-service"], [630, "stop-the-service"], [631, "stop-the-service"]], "An end-to-end example: quantize a Hugging Face model with Neural Solution": [[630, "an-end-to-end-example-quantize-a-hugging-face-model-with-neural-solution"]], "An end-to-end example: quantize a Hugging Face model with Neural Solution gRPC API": [[631, "an-end-to-end-example-quantize-a-hugging-face-model-with-neural-solution-grpc-api"]], "Client": [[632, "client"]], "Single Objective": [[633, "single-objective"]], "Multiple Objectives": [[633, "multiple-objectives"]], "Objective Support Matrix": [[633, "objective-support-matrix"]], "Get Started with Objective API": [[633, "get-started-with-objective-api"]], "Config Single Objective": [[633, "config-single-objective"]], "Config Multiple Objectives": [[633, "config-multiple-objectives"]], "Optimization Orchestration": [[634, "optimization-orchestration"]], "One-shot": [[634, "one-shot"]], "Orchestration Support Matrix": [[634, "orchestration-support-matrix"]], "Get Started with Orchestration API": [[634, "get-started-with-orchestration-api"]], "Neural Network Pruning": [[635, "neural-network-pruning"]], "Pruning Patterns": [[635, "pruning-patterns"]], "Pruning Criteria": [[635, "pruning-criteria"]], "Pruning Types": [[635, "pruning-types"]], "Pruning Schedules": [[635, "pruning-schedules"]], "Pruning Scope": [[635, "pruning-scope"]], "Sparsity Decay Types": [[635, "sparsity-decay-types"]], "Regularization": [[635, "regularization"]], "Large Language Model Pruning": [[635, "large-language-model-pruning"]], "Pruning Support Matrix": [[635, "pruning-support-matrix"]], "Get Started with Pruning API": [[635, "get-started-with-pruning-api"]], "Training-aware pruning API": [[635, "training-aware-pruning-api"]], "Retrain-free Pruning API": [[635, "retrain-free-pruning-api"]], "Sparse Model Deployment": [[635, "sparse-model-deployment"]], "Pruning with Hyperparameter Optimization": [[635, "pruning-with-hyperparameter-optimization"]], "Full Publications/Events (79)": [[636, "full-publications-events-79"]], "2023 (25)": [[636, "id1"]], "2022 (35)": [[636, "id2"]], "2021 (15)": [[636, "id3"]], "2018 - 2020 (4)": [[636, "id4"]], "Pythonic Style Access for Configurations": [[637, "pythonic-style-access-for-configurations"]], "Pythonic API for User Configurations": [[637, "pythonic-api-for-user-configurations"], [637, "id1"]], "Pythonic API for Framework Configurations": [[637, "pythonic-api-for-framework-configurations"], [637, "id2"]], "Get Started with Pythonic API for Configurations": [[637, "get-started-with-pythonic-api-for-configurations"]], "NAS": [[637, "nas"]], "Quantization Introduction": [[638, "quantization-introduction"]], "Quantization Fundamentals": [[638, "quantization-fundamentals"], [644, "quantization-fundamentals"]], "Quantization Support Matrix": [[638, "quantization-support-matrix"]], "Quantization Scheme in TensorFlow": [[638, "quantization-scheme-in-tensorflow"]], "Quantization Scheme in PyTorch": [[638, "quantization-scheme-in-pytorch"]], "Quantization Scheme in IPEX": [[638, "quantization-scheme-in-ipex"]], "Quantization Scheme in MXNet": [[638, "quantization-scheme-in-mxnet"]], "Quantization Scheme in ONNX Runtime": [[638, "quantization-scheme-in-onnx-runtime"]], "Quantization Approaches": [[638, "quantization-approaches"]], "With or Without Accuracy Aware Tuning": [[638, "with-or-without-accuracy-aware-tuning"]], "Post Training Quantization": [[638, "post-training-quantization"]], "Specify Quantization Rules": [[638, "specify-quantization-rules"]], "Specify Quantization Recipes": [[638, "specify-quantization-recipes"]], "Specify Quantization Backend and Device": [[638, "specify-quantization-backend-and-device"]], "Layer Wise Quantization (LWQ)": [[639, "layer-wise-quantization-lwq"]], "PyTorch framework example": [[639, "pytorch-framework-example"]], "ONNX Runtime framework example": [[639, "onnx-runtime-framework-example"]], "Turn OFF Auto Mixed Precision during Quantization": [[640, "turn-off-auto-mixed-precision-during-quantization"]], "Tensorflow": [[640, "tensorflow"]], "Weight Only Quantization (WOQ)": [[641, "weight-only-quantization-woq"]], "Quantization Capability": [[641, "quantization-capability"]], "Export Compressed Model": [[641, "export-compressed-model"]], "User Code Example": [[641, "user-code-example"]], "WOQ Algorithms Tuning": [[641, "woq-algorithms-tuning"]], "User code example": [[641, "id1"]], "Release": [[642, "release"]], "Release Notes": [[642, "release-notes"]], "Known Issues": [[642, "known-issues"]], "Incompatible Changes": [[642, "incompatible-changes"]], "SigOpt Strategy": [[643, "sigopt-strategy"]], "SigOpt Platform": [[643, "sigopt-platform"]], "Neural Compressor Configuration": [[643, "neural-compressor-configuration"]], "Performance": [[643, "performance"]], "Benefit of SigOpt Strategy": [[643, "benefit-of-sigopt-strategy"]], "Performance Comparison of Different Strategies": [[643, "performance-comparison-of-different-strategies"]], "Smooth Quant": [[644, "smooth-quant"]], "Per-tensor & Per-channel": [[644, "per-tensor-per-channel"]], "Per-tensor example": [[644, "per-tensor-example"]], "Per-channel example": [[644, "per-channel-example"]], "Matmul quantization example": [[644, "matmul-quantization-example"]], "Per-channel limitation": [[644, "per-channel-limitation"]], "SmoothQuant and Our Enhancement": [[644, "smoothquant-and-our-enhancement"]], "SmoothQuant": [[644, "smoothquant"]], "Our enhancement:": [[644, "our-enhancement"]], "Algorithm: Auto-tuning of $\\alpha$.": [[644, "algorithm-auto-tuning-of-alpha"]], "Engineering": [[644, "engineering"]], "Using a fixed alpha": [[644, "using-a-fixed-alpha"]], "Determining the alpha through auto-tuning": [[644, "determining-the-alpha-through-auto-tuning"]], "Auto-tune the alpha for the entire model": [[644, "auto-tune-the-alpha-for-the-entire-model"]], "Auto-tune the alpha for each layer/block": [[644, "auto-tune-the-alpha-for-each-layer-block"]], "Supported Framework Matrix": [[644, "supported-framework-matrix"]], "TensorBoard": [[645, "tensorboard"]], "Get Started with TensorBoard": [[645, "get-started-with-tensorboard"]], "PyTorch TensorBoard": [[645, "pytorch-tensorboard"]], "TensorFlow Tensorboard": [[645, "tensorflow-tensorboard"]], "PyTorch Examples": [[645, "pytorch-examples"]], "TensorFlow Examples": [[645, "tensorflow-examples"]], "Transform": [[646, "transform"]], "Transform Support List": [[646, "transform-support-list"]], "Pytorch": [[646, "pytorch"]], "Tuning Strategies": [[647, "tuning-strategies"]], "Strategy Design": [[647, "strategy-design"]], "Tuning Space": [[647, "tuning-space"]], "Exit Policy": [[647, "exit-policy"]], "Accuracy Criteria": [[647, "accuracy-criteria"]], "Tuning Process": [[647, "tuning-process"]], "Tuning Algorithms": [[647, "tuning-algorithms"]], "Auto": [[647, "auto"]], "Conservative Tuning": [[647, "conservative-tuning"]], "Basic": [[647, "basic"]], "MSE": [[647, "mse"]], "MSE_V2": [[647, "mse-v2"]], "HAWQ_V2": [[647, "hawq-v2"]], "Bayesian": [[647, "bayesian"]], "Exhaustive": [[647, "exhaustive"]], "Random": [[647, "random"]], "SigOpt": [[647, "sigopt"]], "TPE": [[647, "tpe"]], "Distributed Tuning": [[647, "distributed-tuning"]], "Customize a New Tuning Strategy": [[647, "customize-a-new-tuning-strategy"]], "User Guide": [[648, "user-guide"]], "Python-based APIs": [[648, "python-based-apis"]], "Neural Coder (Zero-code Optimization)": [[648, "neural-coder-zero-code-optimization"]], "Advanced Topics": [[648, "advanced-topics"]], "Innovations for Productivity": [[648, "innovations-for-productivity"]], "User YAML Configuration Files": [[649, "user-yaml-configuration-files"]], "Get started with User YAML Files": [[649, "get-started-with-user-yaml-files"]], "Validated Quantization Examples": [[650, "validated-quantization-examples"]], "TensorFlow Models with Intel TensorFlow 2.13.0": [[650, "tensorflow-models-with-intel-tensorflow-2-13-0"]], "PyTorch Models with Torch 2.0.1+cpu in PTQ Mode": [[650, "pytorch-models-with-torch-2-0-1-cpu-in-ptq-mode"]], "PyTorch Models with Torch 2.0.1+cpu in QAT Mode": [[650, "pytorch-models-with-torch-2-0-1-cpu-in-qat-mode"]], "PyTorch Models with Intel\u00ae Extension for PyTorch* 2.0.1+cpu": [[650, "pytorch-models-with-intel-extension-for-pytorch-2-0-1-cpu"]], "PyTorch Models with Torch 2.0.1+cpu in WOQ Mode": [[650, "pytorch-models-with-torch-2-0-1-cpu-in-woq-mode"]], "ONNX Models with ONNX Runtime 1.15.1": [[650, "onnx-models-with-onnx-runtime-1-15-1"]], "ONNX Models with ONNX Runtime 1.15.0 in WOQ Mode": [[650, "onnx-models-with-onnx-runtime-1-15-0-in-woq-mode"]], "Validated Pruning Examples": [[650, "validated-pruning-examples"]], "Validated Knowledge Distillation Examples": [[650, "validated-knowledge-distillation-examples"]], "Validated ONNX QDQ INT8 Models on Multiple Hardware through ONNX Runtime": [[650, "validated-onnx-qdq-int8-models-on-multiple-hardware-through-onnx-runtime"]]}, "indexentries": {"block_mask": [[0, "module-block_mask"]], "module": [[0, "module-block_mask"], [1, "module-neural_compressor.adaptor.adaptor"], [2, "module-neural_compressor.adaptor"], [3, "module-neural_compressor.adaptor.keras"], [4, "module-neural_compressor.adaptor.keras_utils.conv2d"], [5, "module-neural_compressor.adaptor.keras_utils.dense"], [6, "module-neural_compressor.adaptor.keras_utils.depthwise_conv2d"], [7, "module-neural_compressor.adaptor.keras_utils"], [8, "module-neural_compressor.adaptor.keras_utils.pool2d"], [9, "module-neural_compressor.adaptor.keras_utils.quantizer"], [10, "module-neural_compressor.adaptor.keras_utils.separable_conv2d"], [11, "module-neural_compressor.adaptor.mxnet"], [12, "module-neural_compressor.adaptor.mxnet_utils"], [13, "module-neural_compressor.adaptor.mxnet_utils.util"], [14, "module-neural_compressor.adaptor.onnxrt"], [15, "module-neural_compressor.adaptor.ox_utils.calibration"], [16, "module-neural_compressor.adaptor.ox_utils.calibrator"], [17, "module-neural_compressor.adaptor.ox_utils"], [18, "module-neural_compressor.adaptor.ox_utils.operators.activation"], [19, "module-neural_compressor.adaptor.ox_utils.operators.argmax"], [20, "module-neural_compressor.adaptor.ox_utils.operators.attention"], [21, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"], [22, "module-neural_compressor.adaptor.ox_utils.operators.concat"], [23, "module-neural_compressor.adaptor.ox_utils.operators.conv"], [24, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"], [25, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"], [26, "module-neural_compressor.adaptor.ox_utils.operators.gather"], [27, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"], [28, "module-neural_compressor.adaptor.ox_utils.operators.gemm"], [29, "module-neural_compressor.adaptor.ox_utils.operators"], [30, "module-neural_compressor.adaptor.ox_utils.operators.lstm"], [31, "module-neural_compressor.adaptor.ox_utils.operators.matmul"], [32, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"], [33, "module-neural_compressor.adaptor.ox_utils.operators.norm"], [34, "module-neural_compressor.adaptor.ox_utils.operators.ops"], [35, "module-neural_compressor.adaptor.ox_utils.operators.pad"], [36, "module-neural_compressor.adaptor.ox_utils.operators.pooling"], [37, "module-neural_compressor.adaptor.ox_utils.operators.reduce"], [38, "module-neural_compressor.adaptor.ox_utils.operators.resize"], [39, "module-neural_compressor.adaptor.ox_utils.operators.split"], [40, "module-neural_compressor.adaptor.ox_utils.operators.unary_op"], [41, "module-neural_compressor.adaptor.ox_utils.quantizer"], [42, "module-neural_compressor.adaptor.ox_utils.smooth_quant"], [43, "module-neural_compressor.adaptor.ox_utils.util"], [44, "module-neural_compressor.adaptor.ox_utils.weight_only"], [45, "module-neural_compressor.adaptor.pytorch"], [46, "module-neural_compressor.adaptor.query"], [47, "module-neural_compressor.adaptor.tensorflow"], [48, "module-neural_compressor.adaptor.tf_utils.graph_converter"], [49, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"], [50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"], [51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer"], [52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"], [53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"], [54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"], [55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"], [56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"], [57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"], [58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"], [59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"], [60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"], [61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"], [62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"], [63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"], [64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"], [65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"], [66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"], [67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"], [68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"], [69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"], [70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"], [71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"], [72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"], [73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"], [74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"], [75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"], [76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"], [77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"], [78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"], [79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"], [80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"], [81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"], [82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"], [83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"], [84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"], [85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"], [86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"], [87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"], [88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"], [89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"], [90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"], [91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"], [92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"], [93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"], [94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"], [95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"], [96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"], [97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"], [98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"], [99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"], [100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"], [101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"], [102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"], [103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"], [104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"], [105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"], [106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"], [107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"], [108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"], [109, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"], [110, "module-neural_compressor.adaptor.tf_utils.graph_util"], [111, "module-neural_compressor.adaptor.tf_utils"], [112, "module-neural_compressor.adaptor.tf_utils.quantize_graph"], [113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"], [114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"], [115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"], [116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"], [117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"], [118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"], [119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"], [120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"], [121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"], [122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"], [123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"], [124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"], [125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"], [126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"], [127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"], [128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"], [129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"], [130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"], [131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"], [132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"], [133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"], [134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"], [135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"], [136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"], [137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"], [138, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"], [139, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"], [140, "module-neural_compressor.adaptor.tf_utils.smooth_quant_calibration"], [141, "module-neural_compressor.adaptor.tf_utils.smooth_quant_scaler"], [142, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"], [143, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"], [144, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"], [145, "module-neural_compressor.adaptor.tf_utils.transform_graph"], [146, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"], [147, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"], [148, "module-neural_compressor.adaptor.tf_utils.util"], [149, "module-neural_compressor.adaptor.torch_utils.autoround.autoround"], [150, "module-neural_compressor.adaptor.torch_utils.autoround.export"], [151, "module-neural_compressor.adaptor.torch_utils.autoround"], [152, "module-neural_compressor.adaptor.torch_utils.autoround.model_wrapper"], [153, "module-neural_compressor.adaptor.torch_utils.autoround.sign_sgd"], [154, "module-neural_compressor.adaptor.torch_utils.awq"], [155, "module-neural_compressor.adaptor.torch_utils.bf16_convert"], [156, "module-neural_compressor.adaptor.torch_utils.gptq"], [157, "module-neural_compressor.adaptor.torch_utils.hawq_metric"], [158, "module-neural_compressor.adaptor.torch_utils"], [159, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant"], [160, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle"], [161, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize"], [162, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load"], [163, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.utils"], [164, "module-neural_compressor.adaptor.torch_utils.mixed_precision"], [165, "module-neural_compressor.adaptor.torch_utils.model_wrapper"], [166, "module-neural_compressor.adaptor.torch_utils.pattern_detector"], [167, "module-neural_compressor.adaptor.torch_utils.smooth_quant"], [168, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"], [169, "module-neural_compressor.adaptor.torch_utils.teq"], [170, "module-neural_compressor.adaptor.torch_utils.util"], [171, "module-neural_compressor.adaptor.torch_utils.weight_only"], [172, "module-neural_compressor.algorithm.algorithm"], [173, "module-neural_compressor.algorithm.fast_bias_correction"], [174, "module-neural_compressor.algorithm"], [175, "module-neural_compressor.algorithm.smooth_quant"], [176, "module-neural_compressor.algorithm.weight_correction"], [177, "module-neural_compressor.benchmark"], [178, "module-neural_compressor.common.base_config"], [179, "module-neural_compressor.common.base_tuning"], [180, "module-neural_compressor.common"], [181, "module-neural_compressor.common.utils.constants"], [182, "module-neural_compressor.common.utils"], [183, "module-neural_compressor.common.utils.logger"], [184, "module-neural_compressor.common.utils.utility"], [185, "module-neural_compressor.compression.callbacks"], [186, "module-neural_compressor.compression.distillation.criterions"], [187, "module-neural_compressor.compression.distillation"], [188, "module-neural_compressor.compression.distillation.optimizers"], [189, "module-neural_compressor.compression.distillation.utility"], [190, "module-neural_compressor.compression.hpo"], [191, "module-neural_compressor.compression.hpo.sa_optimizer"], [192, "module-neural_compressor.compression.hpo.search_algorithms"], [193, "module-neural_compressor.compression.hpo.search_space"], [194, "module-neural_compressor.compression"], [195, "module-neural_compressor.compression.pruner.criteria"], [196, "module-neural_compressor.compression.pruner.dsnot"], [197, "module-neural_compressor.compression.pruner"], [198, "module-neural_compressor.compression.pruner.model_slim.auto_slim"], [199, "module-neural_compressor.compression.pruner.model_slim"], [200, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer"], [201, "module-neural_compressor.compression.pruner.model_slim.weight_slim"], [202, "module-neural_compressor.compression.pruner.patterns.base"], [203, "module-neural_compressor.compression.pruner.patterns"], [204, "module-neural_compressor.compression.pruner.patterns.mha"], [205, "module-neural_compressor.compression.pruner.patterns.ninm"], [206, "module-neural_compressor.compression.pruner.patterns.nxm"], [207, "module-neural_compressor.compression.pruner.pruners.base"], [208, "module-neural_compressor.compression.pruner.pruners.basic"], [209, "module-neural_compressor.compression.pruner.pruners.block_mask"], [210, "module-neural_compressor.compression.pruner.pruners"], [211, "module-neural_compressor.compression.pruner.pruners.mha"], [212, "module-neural_compressor.compression.pruner.pruners.pattern_lock"], [213, "module-neural_compressor.compression.pruner.pruners.progressive"], [214, "module-neural_compressor.compression.pruner.pruners.retrain_free"], [215, "module-neural_compressor.compression.pruner.pruners.sparse_gpt"], [216, "module-neural_compressor.compression.pruner.pruning"], [217, "module-neural_compressor.compression.pruner.regs"], [218, "module-neural_compressor.compression.pruner.schedulers"], [219, "module-neural_compressor.compression.pruner.tf_criteria"], [220, "module-neural_compressor.compression.pruner.utils"], [221, "module-neural_compressor.compression.pruner.wanda"], [222, "module-neural_compressor.compression.pruner.wanda.prune"], [223, "module-neural_compressor.compression.pruner.wanda.utils"], [224, "module-neural_compressor.compression.pruner.wanda.wrapper"], [225, "module-neural_compressor.conf.config"], [226, "module-neural_compressor.conf.dotdict"], [227, "module-neural_compressor.conf"], [228, "module-neural_compressor.conf.pythonic_config"], [229, "module-neural_compressor.config"], [230, "module-neural_compressor.contrib"], [231, "module-neural_compressor.contrib.strategy"], [232, "module-neural_compressor.contrib.strategy.sigopt"], [233, "module-neural_compressor.contrib.strategy.tpe"], [234, "module-neural_compressor.data.dataloaders.base_dataloader"], [235, "module-neural_compressor.data.dataloaders.dataloader"], [236, "module-neural_compressor.data.dataloaders.default_dataloader"], [237, "module-neural_compressor.data.dataloaders.fetcher"], [238, "module-neural_compressor.data.dataloaders"], [239, "module-neural_compressor.data.dataloaders.mxnet_dataloader"], [240, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"], [241, "module-neural_compressor.data.dataloaders.pytorch_dataloader"], [242, "module-neural_compressor.data.dataloaders.sampler"], [243, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"], [244, "module-neural_compressor.data.datasets.bert_dataset"], [245, "module-neural_compressor.data.datasets.coco_dataset"], [246, "module-neural_compressor.data.datasets.dataset"], [247, "module-neural_compressor.data.datasets.dummy_dataset"], [248, "module-neural_compressor.data.datasets.dummy_dataset_v2"], [249, "module-neural_compressor.data.datasets.imagenet_dataset"], [250, "module-neural_compressor.data.datasets"], [251, "module-neural_compressor.data.datasets.style_transfer_dataset"], [252, "module-neural_compressor.data.filters.coco_filter"], [253, "module-neural_compressor.data.filters.filter"], [254, "module-neural_compressor.data.filters"], [255, "module-neural_compressor.data"], [256, "module-neural_compressor.data.transforms.coco_transform"], [257, "module-neural_compressor.data.transforms.imagenet_transform"], [258, "module-neural_compressor.data.transforms"], [259, "module-neural_compressor.data.transforms.postprocess"], [260, "module-neural_compressor.data.transforms.tokenization"], [261, "module-neural_compressor.data.transforms.transform"], [262, "module-neural_compressor.experimental.benchmark"], [263, "module-neural_compressor.experimental.common.criterion"], [264, "module-neural_compressor.experimental.common.dataloader"], [265, "module-neural_compressor.experimental.common"], [266, "module-neural_compressor.experimental.common.metric"], [267, "module-neural_compressor.experimental.common.model"], [268, "module-neural_compressor.experimental.common.optimizer"], [269, "module-neural_compressor.experimental.common.postprocess"], [270, "module-neural_compressor.experimental.common.torch_utils"], [271, "module-neural_compressor.experimental.component"], [272, "module-neural_compressor.experimental.compression"], [273, "module-neural_compressor.experimental.contrib"], [274, "module-neural_compressor.experimental.contrib.strategy"], [275, "module-neural_compressor.experimental.contrib.strategy.sigopt"], [276, "module-neural_compressor.experimental.contrib.strategy.tpe"], [277, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"], [278, "module-neural_compressor.experimental.data.dataloaders.dataloader"], [279, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"], [280, "module-neural_compressor.experimental.data.dataloaders.fetcher"], [281, "module-neural_compressor.experimental.data.dataloaders"], [282, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"], [283, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"], [284, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"], [285, "module-neural_compressor.experimental.data.dataloaders.sampler"], [286, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"], [287, "module-neural_compressor.experimental.data.datasets.bert_dataset"], [288, "module-neural_compressor.experimental.data.datasets.coco_dataset"], [289, "module-neural_compressor.experimental.data.datasets.dataset"], [290, "module-neural_compressor.experimental.data.datasets.dummy_dataset"], [291, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"], [292, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"], [293, "module-neural_compressor.experimental.data.datasets"], [294, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"], [295, "module-neural_compressor.experimental.data.filters.coco_filter"], [296, "module-neural_compressor.experimental.data.filters.filter"], [297, "module-neural_compressor.experimental.data.filters"], [298, "module-neural_compressor.experimental.data"], [299, "module-neural_compressor.experimental.data.transforms.imagenet_transform"], [300, "module-neural_compressor.experimental.data.transforms"], [301, "module-neural_compressor.experimental.data.transforms.tokenization"], [302, "module-neural_compressor.experimental.data.transforms.transform"], [303, "module-neural_compressor.experimental.distillation"], [304, "module-neural_compressor.experimental.export"], [305, "module-neural_compressor.experimental.export.qlinear2qdq"], [306, "module-neural_compressor.experimental.export.tf2onnx"], [307, "module-neural_compressor.experimental.export.torch2onnx"], [308, "module-neural_compressor.experimental.graph_optimization"], [309, "module-neural_compressor.experimental"], [310, "module-neural_compressor.experimental.metric.bleu"], [311, "module-neural_compressor.experimental.metric.bleu_util"], [312, "module-neural_compressor.experimental.metric.coco_label_map"], [313, "module-neural_compressor.experimental.metric.coco_tools"], [314, "module-neural_compressor.experimental.metric.evaluate_squad"], [315, "module-neural_compressor.experimental.metric.f1"], [316, "module-neural_compressor.experimental.metric"], [317, "module-neural_compressor.experimental.metric.metric"], [318, "module-neural_compressor.experimental.mixed_precision"], [319, "module-neural_compressor.experimental.model_conversion"], [320, "module-neural_compressor.experimental.nas.basic_nas"], [321, "module-neural_compressor.experimental.nas.dynas"], [322, "module-neural_compressor.experimental.nas"], [323, "module-neural_compressor.experimental.nas.nas"], [324, "module-neural_compressor.experimental.nas.nas_utils"], [325, "module-neural_compressor.experimental.nas.search_algorithms"], [326, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"], [327, "module-neural_compressor.experimental.pruner_legacy.group_lasso"], [328, "module-neural_compressor.experimental.pruner_legacy"], [329, "module-neural_compressor.experimental.pruner_legacy.magnitude"], [330, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"], [331, "module-neural_compressor.experimental.pruner_legacy.pruner"], [332, "module-neural_compressor.experimental.pruning"], [333, "module-neural_compressor.experimental.pruning_recipes"], [334, "module-neural_compressor.experimental.pruning_recipes.patterns"], [335, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"], [336, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"], [337, "module-neural_compressor.experimental.pruning_v2"], [338, "module-neural_compressor.experimental.pytorch_pruner"], [339, "module-neural_compressor.experimental.pytorch_pruner.logger"], [340, "module-neural_compressor.experimental.pytorch_pruner.patterns"], [341, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"], [342, "module-neural_compressor.experimental.pytorch_pruner.pruner"], [343, "module-neural_compressor.experimental.pytorch_pruner.pruning"], [344, "module-neural_compressor.experimental.pytorch_pruner.scheduler"], [345, "module-neural_compressor.experimental.quantization"], [346, "module-neural_compressor.experimental.scheduler"], [347, "module-neural_compressor.experimental.strategy.auto_mixed_precision"], [348, "module-neural_compressor.experimental.strategy.basic"], [349, "module-neural_compressor.experimental.strategy.bayesian"], [350, "module-neural_compressor.experimental.strategy.exhaustive"], [351, "module-neural_compressor.experimental.strategy"], [352, "module-neural_compressor.experimental.strategy.mse"], [353, "module-neural_compressor.experimental.strategy.mse_v2"], [354, "module-neural_compressor.experimental.strategy.random"], [355, "module-neural_compressor.experimental.strategy.strategy"], [356, "module-neural_compressor.experimental.strategy.utils.constant"], [357, "module-neural_compressor.experimental.strategy.utils"], [358, "module-neural_compressor.experimental.strategy.utils.tuning_sampler"], [359, "module-neural_compressor.experimental.strategy.utils.tuning_space"], [360, "module-neural_compressor.experimental.strategy.utils.tuning_structs"], [361, "module-neural_compressor.experimental.strategy.utils.utility"], [362, "module-neural_compressor"], [363, "module-neural_compressor.metric.bleu"], [364, "module-neural_compressor.metric.bleu_util"], [365, "module-neural_compressor.metric.coco_label_map"], [366, "module-neural_compressor.metric.coco_tools"], [367, "module-neural_compressor.metric.evaluate_squad"], [368, "module-neural_compressor.metric.f1"], [369, "module-neural_compressor.metric"], [370, "module-neural_compressor.metric.metric"], [371, "module-neural_compressor.mix_precision"], [372, "module-neural_compressor.model.base_model"], [373, "module-neural_compressor.model"], [374, "module-neural_compressor.model.keras_model"], [375, "module-neural_compressor.model.model"], [376, "module-neural_compressor.model.mxnet_model"], [377, "module-neural_compressor.model.nets_factory"], [378, "module-neural_compressor.model.onnx_model"], [379, "module-neural_compressor.model.tensorflow_model"], [380, "module-neural_compressor.model.torch_model"], [381, "module-neural_compressor.objective"], [382, "module-neural_compressor.onnxrt.algorithms"], [383, "module-neural_compressor.onnxrt.algorithms.smoother.calibrator"], [384, "module-neural_compressor.onnxrt.algorithms.smoother.core"], [385, "module-neural_compressor.onnxrt.algorithms.smoother"], [386, "module-neural_compressor.onnxrt.algorithms.weight_only.awq"], [387, "module-neural_compressor.onnxrt.algorithms.weight_only.gptq"], [388, "module-neural_compressor.onnxrt.algorithms.weight_only"], [389, "module-neural_compressor.onnxrt.algorithms.weight_only.rtn"], [390, "module-neural_compressor.onnxrt.algorithms.weight_only.utility"], [391, "module-neural_compressor.onnxrt"], [392, "module-neural_compressor.onnxrt.quantization.algorithm_entry"], [393, "module-neural_compressor.onnxrt.quantization.calibrate"], [394, "module-neural_compressor.onnxrt.quantization.config"], [395, "module-neural_compressor.onnxrt.quantization"], [396, "module-neural_compressor.onnxrt.quantization.quantize"], [397, "module-neural_compressor.onnxrt.utils"], [398, "module-neural_compressor.onnxrt.utils.onnx_model"], [399, "module-neural_compressor.onnxrt.utils.utility"], [400, "module-neural_compressor.profiling"], [401, "module-neural_compressor.profiling.parser.factory"], [402, "module-neural_compressor.profiling.parser"], [403, "module-neural_compressor.profiling.parser.onnx_parser.factory"], [404, "module-neural_compressor.profiling.parser.onnx_parser"], [405, "module-neural_compressor.profiling.parser.onnx_parser.parser"], [406, "module-neural_compressor.profiling.parser.parser"], [407, "module-neural_compressor.profiling.parser.result"], [408, "module-neural_compressor.profiling.parser.tensorflow_parser.factory"], [409, "module-neural_compressor.profiling.parser.tensorflow_parser"], [410, "module-neural_compressor.profiling.parser.tensorflow_parser.parser"], [411, "module-neural_compressor.profiling.profiler.factory"], [412, "module-neural_compressor.profiling.profiler"], [413, "module-neural_compressor.profiling.profiler.onnxrt_profiler.factory"], [414, "module-neural_compressor.profiling.profiler.onnxrt_profiler"], [415, "module-neural_compressor.profiling.profiler.onnxrt_profiler.profiler"], [416, "module-neural_compressor.profiling.profiler.onnxrt_profiler.utils"], [417, "module-neural_compressor.profiling.profiler.profiler"], [418, "module-neural_compressor.profiling.profiler.tensorflow_profiler.factory"], [419, "module-neural_compressor.profiling.profiler.tensorflow_profiler"], [420, "module-neural_compressor.profiling.profiler.tensorflow_profiler.profiler"], [421, "module-neural_compressor.profiling.profiler.tensorflow_profiler.utils"], [422, "module-neural_compressor.quantization"], [423, "module-neural_compressor.strategy.auto"], [424, "module-neural_compressor.strategy.auto_mixed_precision"], [425, "module-neural_compressor.strategy.basic"], [426, "module-neural_compressor.strategy.bayesian"], [427, "module-neural_compressor.strategy.conservative"], [428, "module-neural_compressor.strategy.exhaustive"], [429, "module-neural_compressor.strategy.hawq_v2"], [430, "module-neural_compressor.strategy"], [431, "module-neural_compressor.strategy.mse"], [432, "module-neural_compressor.strategy.mse_v2"], [433, "module-neural_compressor.strategy.random"], [434, "module-neural_compressor.strategy.strategy"], [435, "module-neural_compressor.strategy.utils.constant"], [436, "module-neural_compressor.strategy.utils"], [437, "module-neural_compressor.strategy.utils.tuning_sampler"], [438, "module-neural_compressor.strategy.utils.tuning_space"], [439, "module-neural_compressor.strategy.utils.tuning_structs"], [440, "module-neural_compressor.strategy.utils.utility"], [441, "module-neural_compressor.template.api_doc_example"], [442, "module-neural_compressor.template"], [443, "module-neural_compressor.tensorflow.algorithms"], [444, "module-neural_compressor.tensorflow.algorithms.smoother.calibration"], [445, "module-neural_compressor.tensorflow.algorithms.smoother.core"], [446, "module-neural_compressor.tensorflow.algorithms.smoother"], [447, "module-neural_compressor.tensorflow.algorithms.smoother.scaler"], [448, "module-neural_compressor.tensorflow.algorithms.static_quant"], [449, "module-neural_compressor.tensorflow.algorithms.static_quant.keras"], [450, "module-neural_compressor.tensorflow.algorithms.static_quant.keras_utils.conv2d"], [451, "module-neural_compressor.tensorflow.algorithms.static_quant.keras_utils.dense"], [452, "module-neural_compressor.tensorflow.algorithms.static_quant.keras_utils.depthwise_conv2d"], [453, "module-neural_compressor.tensorflow.algorithms.static_quant.keras_utils"], [454, "module-neural_compressor.tensorflow.algorithms.static_quant.keras_utils.pool2d"], [455, "module-neural_compressor.tensorflow.algorithms.static_quant.keras_utils.quantizer"], [456, "module-neural_compressor.tensorflow.algorithms.static_quant.keras_utils.separable_conv2d"], [457, "module-neural_compressor.tensorflow"], [458, "module-neural_compressor.tensorflow.quantization.algorithm_entry"], [459, "module-neural_compressor.tensorflow.quantization.config"], [460, "module-neural_compressor.tensorflow.quantization"], [461, "module-neural_compressor.tensorflow.quantization.quantize"], [462, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_add_to_biasadd"], [463, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_layout"], [464, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_leakyrelu"], [465, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_nan_to_random"], [466, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_placeholder_to_const"], [467, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dilated_contraction"], [468, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dummy_biasadd"], [469, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.expanddims_optimizer"], [470, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fetch_weight_from_reshape"], [471, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_batch_norm"], [472, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_constant"], [473, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_biasadd_add"], [474, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_column_wise_mul"], [475, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_conv_with_math"], [476, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn"], [477, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in"], [478, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_gelu"], [479, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm"], [480, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_conv"], [481, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"], [482, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_reshape_transpose"], [483, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.graph_cse_optimizer"], [484, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.grappler_pass"], [485, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic"], [486, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.insert_print_node"], [487, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.move_squeeze_after_relu"], [488, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.pre_optimize"], [489, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.remove_training_nodes"], [490, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.rename_batch_norm"], [491, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.split_shared_input"], [492, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_equivalent_nodes"], [493, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_unused_nodes"], [494, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.switch_optimizer"], [495, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.graph_base"], [496, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter"], [497, "module-neural_compressor.tensorflow.quantization.utils.graph_util"], [498, "module-neural_compressor.tensorflow.quantization.utils"], [499, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph_common"], [500, "module-neural_compressor.tensorflow.quantization.utils.utility"], [501, "module-neural_compressor.tensorflow.utils.constants"], [502, "module-neural_compressor.tensorflow.utils.data"], [503, "module-neural_compressor.tensorflow.utils"], [504, "module-neural_compressor.tensorflow.utils.model"], [505, "module-neural_compressor.tensorflow.utils.model_wrappers"], [506, "module-neural_compressor.tensorflow.utils.nets_factory"], [507, "module-neural_compressor.tensorflow.utils.utility"], [508, "module-neural_compressor.torch.algorithms.habana_fp8.fp8_quant"], [509, "module-neural_compressor.torch.algorithms.habana_fp8"], [510, "module-neural_compressor.torch.algorithms.habana_fp8.modules"], [511, "module-neural_compressor.torch.algorithms.habana_fp8.observer"], [512, "module-neural_compressor.torch.algorithms"], [513, "module-neural_compressor.torch.algorithms.layer_wise"], [514, "module-neural_compressor.torch.algorithms.layer_wise.load"], [515, "module-neural_compressor.torch.algorithms.layer_wise.modified_pickle"], [516, "module-neural_compressor.torch.algorithms.layer_wise.utils"], [517, "module-neural_compressor.torch.algorithms.weight_only.awq"], [518, "module-neural_compressor.torch.algorithms.weight_only.gptq"], [519, "module-neural_compressor.torch.algorithms.weight_only"], [520, "module-neural_compressor.torch.algorithms.weight_only.modules"], [521, "module-neural_compressor.torch.algorithms.weight_only.rtn"], [522, "module-neural_compressor.torch.algorithms.weight_only.utility"], [523, "module-neural_compressor.torch.amp.autocast"], [524, "module-neural_compressor.torch.amp.fp8.functions"], [525, "module-neural_compressor.torch.amp.fp8"], [526, "module-neural_compressor.torch.amp"], [527, "module-neural_compressor.torch"], [528, "module-neural_compressor.torch.quantization.algorithm_entry"], [529, "module-neural_compressor.torch.quantization.autotune"], [530, "module-neural_compressor.torch.quantization.config"], [531, "module-neural_compressor.torch.quantization"], [532, "module-neural_compressor.torch.quantization.modules"], [533, "module-neural_compressor.torch.quantization.quantize"], [534, "module-neural_compressor.torch.utils.constants"], [535, "module-neural_compressor.torch.utils.environ"], [536, "module-neural_compressor.torch.utils"], [537, "module-neural_compressor.torch.utils.utility"], [538, "module-neural_compressor.training"], [539, "module-neural_compressor.utils.collect_layer_histogram"], [540, "module-neural_compressor.utils.constant"], [541, "module-neural_compressor.utils.create_obj_from_config"], [542, "module-neural_compressor.utils"], [543, "module-neural_compressor.utils.kl_divergence"], [544, "module-neural_compressor.utils.load_huggingface"], [545, "module-neural_compressor.utils.logger"], [546, "module-neural_compressor.utils.neural_insights_utils"], [547, "module-neural_compressor.utils.options"], [548, "module-neural_compressor.utils.pytorch"], [549, "module-neural_compressor.utils.utility"], [550, "module-neural_compressor.utils.weights_details"], [551, "module-neural_compressor.version"]], "adaptor (class in neural_compressor.adaptor.adaptor)": [[1, "neural_compressor.adaptor.adaptor.Adaptor"]], "adaptor_registry() (in module neural_compressor.adaptor.adaptor)": [[1, "neural_compressor.adaptor.adaptor.adaptor_registry"]], "neural_compressor.adaptor.adaptor": [[1, "module-neural_compressor.adaptor.adaptor"]], "neural_compressor.adaptor": [[2, "module-neural_compressor.adaptor"]], "kerasadaptor (class in neural_compressor.adaptor.keras)": [[3, "neural_compressor.adaptor.keras.KerasAdaptor"]], "kerasquery (class in neural_compressor.adaptor.keras)": [[3, "neural_compressor.adaptor.keras.KerasQuery"]], "neural_compressor.adaptor.keras": [[3, "module-neural_compressor.adaptor.keras"]], "neural_compressor.adaptor.keras_utils.conv2d": [[4, "module-neural_compressor.adaptor.keras_utils.conv2d"]], "neural_compressor.adaptor.keras_utils.dense": [[5, "module-neural_compressor.adaptor.keras_utils.dense"]], "neural_compressor.adaptor.keras_utils.depthwise_conv2d": [[6, "module-neural_compressor.adaptor.keras_utils.depthwise_conv2d"]], "neural_compressor.adaptor.keras_utils": [[7, "module-neural_compressor.adaptor.keras_utils"]], "neural_compressor.adaptor.keras_utils.pool2d": [[8, "module-neural_compressor.adaptor.keras_utils.pool2d"]], "neural_compressor.adaptor.keras_utils.quantizer": [[9, "module-neural_compressor.adaptor.keras_utils.quantizer"]], "neural_compressor.adaptor.keras_utils.separable_conv2d": [[10, "module-neural_compressor.adaptor.keras_utils.separable_conv2d"]], "mxnetquery (class in neural_compressor.adaptor.mxnet)": [[11, "neural_compressor.adaptor.mxnet.MXNetQuery"]], "mxnetadaptor (class in neural_compressor.adaptor.mxnet)": [[11, "neural_compressor.adaptor.mxnet.MxNetAdaptor"]], "neural_compressor.adaptor.mxnet": [[11, "module-neural_compressor.adaptor.mxnet"]], "neural_compressor.adaptor.mxnet_utils": [[12, "module-neural_compressor.adaptor.mxnet_utils"]], "calibcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CalibCollector"]], "calibdata (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CalibData"]], "collectorbase (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CollectorBase"]], "dataiterloader (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.DataIterLoader"]], "dataloaderwrap (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.DataLoaderWrap"]], "namecollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.NameCollector"]], "optype (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.OpType"]], "tensorcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.TensorCollector"]], "amp_convert() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.amp_convert"]], "calib_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.calib_model"]], "check_mx_version() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.check_mx_version"]], "combine_capabilities() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.combine_capabilities"]], "create_data_example() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.create_data_example"]], "distribute_calib_tensors() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.distribute_calib_tensors"]], "ensure_list() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.ensure_list"]], "fuse() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.fuse"]], "get_framework_name() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.get_framework_name"]], "is_model_quantized() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.is_model_quantized"]], "isiterable() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.isiterable"]], "make_module() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.make_module"]], "make_nc_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.make_nc_model"]], "make_symbol_block() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.make_symbol_block"]], "ndarray_to_device() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.ndarray_to_device"]], "neural_compressor.adaptor.mxnet_utils.util": [[13, "module-neural_compressor.adaptor.mxnet_utils.util"]], "parse_tune_config() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.parse_tune_config"]], "prepare_dataloader() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.prepare_dataloader"]], "prepare_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.prepare_model"]], "prepare_model_data() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.prepare_model_data"]], "quantize_sym_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.quantize_sym_model"]], "query_quantizable_nodes() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.query_quantizable_nodes"]], "run_forward() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.run_forward"]], "onnxrtquery (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRTQuery"]], "onnxrt_integeropsadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRT_IntegerOpsAdaptor"]], "onnxrt_qdqadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRT_QDQAdaptor"]], "onnxrt_qlinearopsadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRT_QLinearOpsAdaptor"]], "onnxrt_weightonlyadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRT_WeightOnlyAdaptor"]], "onnxruntimeadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor"]], "neural_compressor.adaptor.onnxrt": [[14, "module-neural_compressor.adaptor.onnxrt"]], "onnxrtaugment (class in neural_compressor.adaptor.ox_utils.calibration)": [[15, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment"]], "neural_compressor.adaptor.ox_utils.calibration": [[15, "module-neural_compressor.adaptor.ox_utils.calibration"]], "calibratorbase (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.CalibratorBase"]], "histogramcollector (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.HistogramCollector"]], "klcalibrator (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.KLCalibrator"]], "minmaxcalibrator (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.MinMaxCalibrator"]], "percentilecalibrator (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.PercentileCalibrator"]], "calib_registry() (in module neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.calib_registry"]], "neural_compressor.adaptor.ox_utils.calibrator": [[16, "module-neural_compressor.adaptor.ox_utils.calibrator"]], "smooth_distribution() (in module neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.smooth_distribution"]], "neural_compressor.adaptor.ox_utils": [[17, "module-neural_compressor.adaptor.ox_utils"]], "activationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[18, "neural_compressor.adaptor.ox_utils.operators.activation.ActivationOperator"]], "float16activationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[18, "neural_compressor.adaptor.ox_utils.operators.activation.Float16ActivationOperator"]], "qactivationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[18, "neural_compressor.adaptor.ox_utils.operators.activation.QActivationOperator"]], "removableactivationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[18, "neural_compressor.adaptor.ox_utils.operators.activation.RemovableActivationOperator"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[18, "module-neural_compressor.adaptor.ox_utils.operators.activation"]], "argmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.argmax)": [[19, "neural_compressor.adaptor.ox_utils.operators.argmax.ArgMaxOperator"]], "qargmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.argmax)": [[19, "neural_compressor.adaptor.ox_utils.operators.argmax.QArgMaxOperator"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[19, "module-neural_compressor.adaptor.ox_utils.operators.argmax"]], "attentionoperator (class in neural_compressor.adaptor.ox_utils.operators.attention)": [[20, "neural_compressor.adaptor.ox_utils.operators.attention.AttentionOperator"]], "qattentionoperator (class in neural_compressor.adaptor.ox_utils.operators.attention)": [[20, "neural_compressor.adaptor.ox_utils.operators.attention.QAttentionOperator"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[20, "module-neural_compressor.adaptor.ox_utils.operators.attention"]], "binarydirect8bitoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[21, "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryDirect8BitOperator"]], "binaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[21, "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryOperator"]], "float16binaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[21, "neural_compressor.adaptor.ox_utils.operators.binary_op.Float16BinaryOperator"]], "qbinaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[21, "neural_compressor.adaptor.ox_utils.operators.binary_op.QBinaryOperator"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[21, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"]], "concatoperator (class in neural_compressor.adaptor.ox_utils.operators.concat)": [[22, "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator"]], "qconcatoperator (class in neural_compressor.adaptor.ox_utils.operators.concat)": [[22, "neural_compressor.adaptor.ox_utils.operators.concat.QConcatOperator"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[22, "module-neural_compressor.adaptor.ox_utils.operators.concat"]], "convoperator (class in neural_compressor.adaptor.ox_utils.operators.conv)": [[23, "neural_compressor.adaptor.ox_utils.operators.conv.ConvOperator"]], "qconvoperator (class in neural_compressor.adaptor.ox_utils.operators.conv)": [[23, "neural_compressor.adaptor.ox_utils.operators.conv.QConvOperator"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[23, "module-neural_compressor.adaptor.ox_utils.operators.conv"]], "direct8bitoperator (class in neural_compressor.adaptor.ox_utils.operators.direct_q8)": [[24, "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator"]], "qdirectoperator (class in neural_compressor.adaptor.ox_utils.operators.direct_q8)": [[24, "neural_compressor.adaptor.ox_utils.operators.direct_q8.QDirectOperator"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[24, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"]], "embedlayernormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.embed_layernorm)": [[25, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.EmbedLayerNormalizationOperator"]], "qembedlayernormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.embed_layernorm)": [[25, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.QEmbedLayerNormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[25, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"]], "gatheroperator (class in neural_compressor.adaptor.ox_utils.operators.gather)": [[26, "neural_compressor.adaptor.ox_utils.operators.gather.GatherOperator"]], "qgatheroperator (class in neural_compressor.adaptor.ox_utils.operators.gather)": [[26, "neural_compressor.adaptor.ox_utils.operators.gather.QGatherOperator"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[26, "module-neural_compressor.adaptor.ox_utils.operators.gather"]], "globalaveragepooloperator (class in neural_compressor.adaptor.ox_utils.operators.gavgpool)": [[27, "neural_compressor.adaptor.ox_utils.operators.gavgpool.GlobalAveragePoolOperator"]], "qglobalaveragepooloperator (class in neural_compressor.adaptor.ox_utils.operators.gavgpool)": [[27, "neural_compressor.adaptor.ox_utils.operators.gavgpool.QGlobalAveragePoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[27, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"]], "gemmoperator (class in neural_compressor.adaptor.ox_utils.operators.gemm)": [[28, "neural_compressor.adaptor.ox_utils.operators.gemm.GemmOperator"]], "qgemmoperator (class in neural_compressor.adaptor.ox_utils.operators.gemm)": [[28, "neural_compressor.adaptor.ox_utils.operators.gemm.QGemmOperator"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[28, "module-neural_compressor.adaptor.ox_utils.operators.gemm"]], "neural_compressor.adaptor.ox_utils.operators": [[29, "module-neural_compressor.adaptor.ox_utils.operators"]], "lstmoperator (class in neural_compressor.adaptor.ox_utils.operators.lstm)": [[30, "neural_compressor.adaptor.ox_utils.operators.lstm.LSTMOperator"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[30, "module-neural_compressor.adaptor.ox_utils.operators.lstm"]], "fusedmatmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[31, "neural_compressor.adaptor.ox_utils.operators.matmul.FusedMatMulOperator"]], "matmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[31, "neural_compressor.adaptor.ox_utils.operators.matmul.MatMulOperator"]], "qmatmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[31, "neural_compressor.adaptor.ox_utils.operators.matmul.QMatMulOperator"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[31, "module-neural_compressor.adaptor.ox_utils.operators.matmul"]], "maxpooloperator (class in neural_compressor.adaptor.ox_utils.operators.maxpool)": [[32, "neural_compressor.adaptor.ox_utils.operators.maxpool.MaxPoolOperator"]], "qmaxpooloperator (class in neural_compressor.adaptor.ox_utils.operators.maxpool)": [[32, "neural_compressor.adaptor.ox_utils.operators.maxpool.QMaxPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[32, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"]], "batchnormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.norm)": [[33, "neural_compressor.adaptor.ox_utils.operators.norm.BatchNormalizationOperator"]], "normalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.norm)": [[33, "neural_compressor.adaptor.ox_utils.operators.norm.NormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.norm": [[33, "module-neural_compressor.adaptor.ox_utils.operators.norm"]], "operator (class in neural_compressor.adaptor.ox_utils.operators.ops)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.Operator"]], "qoperator (class in neural_compressor.adaptor.ox_utils.operators.ops)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.QOperator"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[34, "module-neural_compressor.adaptor.ox_utils.operators.ops"]], "op_registry() (in module neural_compressor.adaptor.ox_utils.operators.ops)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.op_registry"]], "qop_registry() (in module neural_compressor.adaptor.ox_utils.operators.ops)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.qop_registry"]], "padoperator (class in neural_compressor.adaptor.ox_utils.operators.pad)": [[35, "neural_compressor.adaptor.ox_utils.operators.pad.PadOperator"]], "qpadoperator (class in neural_compressor.adaptor.ox_utils.operators.pad)": [[35, "neural_compressor.adaptor.ox_utils.operators.pad.QPadOperator"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[35, "module-neural_compressor.adaptor.ox_utils.operators.pad"]], "pooloperator (class in neural_compressor.adaptor.ox_utils.operators.pooling)": [[36, "neural_compressor.adaptor.ox_utils.operators.pooling.PoolOperator"]], "qpooloperator (class in neural_compressor.adaptor.ox_utils.operators.pooling)": [[36, "neural_compressor.adaptor.ox_utils.operators.pooling.QPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[36, "module-neural_compressor.adaptor.ox_utils.operators.pooling"]], "reduceminmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.reduce)": [[37, "neural_compressor.adaptor.ox_utils.operators.reduce.ReduceMinMaxOperator"]], "reduceoperator (class in neural_compressor.adaptor.ox_utils.operators.reduce)": [[37, "neural_compressor.adaptor.ox_utils.operators.reduce.ReduceOperator"]], "neural_compressor.adaptor.ox_utils.operators.reduce": [[37, "module-neural_compressor.adaptor.ox_utils.operators.reduce"]], "qresizeoperator (class in neural_compressor.adaptor.ox_utils.operators.resize)": [[38, "neural_compressor.adaptor.ox_utils.operators.resize.QResizeOperator"]], "resizeoperator (class in neural_compressor.adaptor.ox_utils.operators.resize)": [[38, "neural_compressor.adaptor.ox_utils.operators.resize.ResizeOperator"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[38, "module-neural_compressor.adaptor.ox_utils.operators.resize"]], "qsplitoperator (class in neural_compressor.adaptor.ox_utils.operators.split)": [[39, "neural_compressor.adaptor.ox_utils.operators.split.QSplitOperator"]], "splitoperator (class in neural_compressor.adaptor.ox_utils.operators.split)": [[39, "neural_compressor.adaptor.ox_utils.operators.split.SplitOperator"]], "neural_compressor.adaptor.ox_utils.operators.split": [[39, "module-neural_compressor.adaptor.ox_utils.operators.split"]], "unarydirect8bitoperator (class in neural_compressor.adaptor.ox_utils.operators.unary_op)": [[40, "neural_compressor.adaptor.ox_utils.operators.unary_op.UnaryDirect8BitOperator"]], "unaryoperator (class in neural_compressor.adaptor.ox_utils.operators.unary_op)": [[40, "neural_compressor.adaptor.ox_utils.operators.unary_op.UnaryOperator"]], "neural_compressor.adaptor.ox_utils.operators.unary_op": [[40, "module-neural_compressor.adaptor.ox_utils.operators.unary_op"]], "quantizer (class in neural_compressor.adaptor.ox_utils.quantizer)": [[41, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer"]], "neural_compressor.adaptor.ox_utils.quantizer": [[41, "module-neural_compressor.adaptor.ox_utils.quantizer"]], "ortsmoothquant (class in neural_compressor.adaptor.ox_utils.smooth_quant)": [[42, "neural_compressor.adaptor.ox_utils.smooth_quant.ORTSmoothQuant"]], "get_quant_dequant_output() (in module neural_compressor.adaptor.ox_utils.smooth_quant)": [[42, "neural_compressor.adaptor.ox_utils.smooth_quant.get_quant_dequant_output"]], "make_sub_graph() (in module neural_compressor.adaptor.ox_utils.smooth_quant)": [[42, "neural_compressor.adaptor.ox_utils.smooth_quant.make_sub_graph"]], "neural_compressor.adaptor.ox_utils.smooth_quant": [[42, "module-neural_compressor.adaptor.ox_utils.smooth_quant"]], "quant_dequant_data() (in module neural_compressor.adaptor.ox_utils.smooth_quant)": [[42, "neural_compressor.adaptor.ox_utils.smooth_quant.quant_dequant_data"]], "quantformat (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantFormat"]], "quanttype (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantType"]], "quantizationmode (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantizationMode"]], "quantizedinitializer (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantizedInitializer"]], "quantizedvalue (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantizedValue"]], "quantizedvaluetype (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantizedValueType"]], "valueinfo (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.ValueInfo"]], "attribute_to_kwarg() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.attribute_to_kwarg"]], "calculate_scale_zp() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.calculate_scale_zp"]], "cast_tensor() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.cast_tensor"]], "collate_preds() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.collate_preds"]], "dequantize_data() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.dequantize_data"]], "dequantize_data_with_scale_zero() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.dequantize_data_with_scale_zero"]], "dtype_to_name() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.dtype_to_name"]], "find_by_name() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.find_by_name"]], "float_to_bfloat16() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.float_to_bfloat16"]], "float_to_float16() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.float_to_float16"]], "get_node_original_name() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.get_node_original_name"]], "infer_shapes() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.infer_shapes"]], "is_b_transposed() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.is_B_transposed"]], "make_dquant_node() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.make_dquant_node"]], "make_quant_node() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.make_quant_node"]], "neural_compressor.adaptor.ox_utils.util": [[43, "module-neural_compressor.adaptor.ox_utils.util"]], "quantize_data() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.quantize_data"]], "quantize_data_per_channel() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.quantize_data_per_channel"]], "quantize_data_with_scale_zero() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.quantize_data_with_scale_zero"]], "quantize_nparray() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.quantize_nparray"]], "remove_init_from_model_input() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.remove_init_from_model_input"]], "simple_progress_bar() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.simple_progress_bar"]], "split_shared_bias() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.split_shared_bias"]], "to_numpy() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.to_numpy"]], "trt_env_setup() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.trt_env_setup"]], "apply_awq_clip() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.apply_awq_clip"]], "apply_awq_scale() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.apply_awq_scale"]], "awq_quantize() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.awq_quantize"]], "get_blob_size() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.get_blob_size"]], "get_weight_scale() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.get_weight_scale"]], "gptq() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.gptq"]], "gptq_quantize() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.gptq_quantize"]], "make_matmul_weight_only_node() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.make_matmul_weight_only_node"]], "neural_compressor.adaptor.ox_utils.weight_only": [[44, "module-neural_compressor.adaptor.ox_utils.weight_only"]], "pad_tensor() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.pad_tensor"]], "prepare_inputs() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.prepare_inputs"]], "qdq_tensor() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.qdq_tensor"]], "quant_tensor() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.quant_tensor"]], "rtn_quantize() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.rtn_quantize"]], "pytorchadaptor (class in neural_compressor.adaptor.pytorch)": [[45, "neural_compressor.adaptor.pytorch.PyTorchAdaptor"]], "pytorchquery (class in neural_compressor.adaptor.pytorch)": [[45, "neural_compressor.adaptor.pytorch.PyTorchQuery"]], "pytorchweightonlyadaptor (class in neural_compressor.adaptor.pytorch)": [[45, "neural_compressor.adaptor.pytorch.PyTorchWeightOnlyAdaptor"]], "pytorch_fxadaptor (class in neural_compressor.adaptor.pytorch)": [[45, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor"]], "pytorch_ipexadaptor (class in neural_compressor.adaptor.pytorch)": [[45, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor"]], "templateadaptor (class in neural_compressor.adaptor.pytorch)": [[45, "neural_compressor.adaptor.pytorch.TemplateAdaptor"]], "get_ops_recursively() (in module neural_compressor.adaptor.pytorch)": [[45, "neural_compressor.adaptor.pytorch.get_ops_recursively"]], "neural_compressor.adaptor.pytorch": [[45, "module-neural_compressor.adaptor.pytorch"]], "querybackendcapability (class in neural_compressor.adaptor.query)": [[46, "neural_compressor.adaptor.query.QueryBackendCapability"]], "neural_compressor.adaptor.query": [[46, "module-neural_compressor.adaptor.query"]], "tensorflowadaptor (class in neural_compressor.adaptor.tensorflow)": [[47, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor"]], "tensorflowquery (class in neural_compressor.adaptor.tensorflow)": [[47, "neural_compressor.adaptor.tensorflow.TensorflowQuery"]], "tensorflow_itexadaptor (class in neural_compressor.adaptor.tensorflow)": [[47, "neural_compressor.adaptor.tensorflow.Tensorflow_ITEXAdaptor"]], "neural_compressor.adaptor.tensorflow": [[47, "module-neural_compressor.adaptor.tensorflow"]], "graphconverter (class in neural_compressor.adaptor.tf_utils.graph_converter)": [[48, "neural_compressor.adaptor.tf_utils.graph_converter.GraphConverter"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[48, "module-neural_compressor.adaptor.tf_utils.graph_converter"]], "graphconverterwithoutcalib (class in neural_compressor.adaptor.tf_utils.graph_converter_without_calib)": [[49, "neural_compressor.adaptor.tf_utils.graph_converter_without_calib.GraphConverterWithoutCalib"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[49, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"]], "bf16convert (class in neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert)": [[50, "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert.BF16Convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"]], "dequantizecastoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer)": [[51, "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer.DequantizeCastOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer": [[51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"]], "convertaddtobiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd)": [[53, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd.ConvertAddToBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"]], "convertlayoutoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout)": [[54, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout.ConvertLayoutOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"]], "convertleakyreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu)": [[55, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu.ConvertLeakyReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"]], "convertnantorandom (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random)": [[56, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random.ConvertNanToRandom"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"]], "convertplaceholdertoconst (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const)": [[57, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"]], "dilatedcontraction (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction)": [[58, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction.DilatedContraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"]], "injectdummybiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd)": [[59, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd.InjectDummyBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"]], "expanddimsoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer)": [[60, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.ExpandDimsOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"]], "fetchweightfromreshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape)": [[61, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape.FetchWeightFromReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "foldbatchnormnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm)": [[62, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"]], "graphfoldconstantoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant)": [[63, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"]], "fusebiasaddandaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add)": [[64, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add.FuseBiasAddAndAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"]], "fusecolumnwisemuloptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul)": [[65, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul.FuseColumnWiseMulOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"]], "fuseconvwithmathoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math.FuseConvWithMathOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"]], "fusedecomposedbnoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.FuseDecomposedBNOptimizer"]], "bypass_reshape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.bypass_reshape"]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.get_const_dim_count"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_name_from_input"]], "valid_reshape_inputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.valid_reshape_inputs"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.values_from_const"]], "fusedecomposedinoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.FuseDecomposedINOptimizer"]], "bypass_reshape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.bypass_reshape"]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.get_const_dim_count"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_name_from_input"]], "valid_reshape_inputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.valid_reshape_inputs"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.values_from_const"]], "fusegeluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu)": [[69, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu.FuseGeluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"]], "fuselayernormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[70, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.FuseLayerNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[70, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[70, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_name_from_input"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[70, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.values_from_const"]], "fusepadwithconv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv)": [[71, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv.FusePadWithConv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"]], "fusepadwithfp32conv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv)": [[72, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "fusetransposereshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose)": [[73, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose.FuseTransposeReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"]], "graphcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer)": [[74, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer.GraphCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"]], "grappleroptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass)": [[75, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass.GrapplerOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"]], "insertprintminmaxnode (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node)": [[77, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node.InsertPrintMinMaxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"]], "movesqueezeafterreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu)": [[78, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu.MoveSqueezeAfterReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"]], "preoptimization (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize)": [[79, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.PreOptimization"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"]], "removetrainingnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes)": [[80, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes.RemoveTrainingNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"]], "renamebatchnormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm)": [[81, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm.RenameBatchNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"]], "splitsharedinputoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input)": [[82, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input.SplitSharedInputOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"]], "stripequivalentnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes)": [[83, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes.StripEquivalentNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"]], "stripunusednodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes)": [[84, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes.StripUnusedNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"]], "switchoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer)": [[85, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer.SwitchOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"]], "graphrewriterbase (class in neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base)": [[86, "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.GraphRewriterBase"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"]], "freezefakequantopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant)": [[88, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant.FreezeFakeQuantOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"]], "freezevaluetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value)": [[89, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"]], "freezevaluewithoutcalibtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"]], "fuseconvredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.FuseConvRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "fuseconvrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize)": [[92, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize.FuseConvRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"]], "fusematmulredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.FuseMatMulRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "fusematmulrequantizedequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeNewAPITransformer"]], "fusematmulrequantizedequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeTransformer"]], "fusematmulrequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeNewAPITransformer"]], "fusematmulrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"]], "metainfochangingmemopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer.MetaInfoChangingMemOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"]], "posthostconstconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter.PostHostConstConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"]], "postcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse.PostCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"]], "quantizedrnnconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert.QuantizedRNNConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"]], "scalepropagationtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation)": [[100, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation.ScaleProPagationTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"]], "onnxgraph (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph)": [[102, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"]], "onnxnode (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"]], "onnxopschema (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.OnnxOpSchema"]], "get_max_supported_opset_version() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.get_max_supported_opset_version"]], "get_schema() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.get_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"]], "seqtype (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.SeqType"]], "add_port_to_name() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.add_port_to_name"]], "are_shapes_equal() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.are_shapes_equal"]], "assert_error() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.assert_error"]], "compute_const_folding_using_tf() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.compute_const_folding_using_tf"]], "convert_tensorflow_tensor_to_onnx() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.convert_tensorflow_tensor_to_onnx"]], "find_opset() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.find_opset"]], "get_index_from_strided_slice_of_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_index_from_strided_slice_of_shape"]], "get_subgraphs_from_onnx() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_subgraphs_from_onnx"]], "get_tensorflow_node_attr() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_node_attr"]], "get_tensorflow_node_shape_attr() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_node_shape_attr"]], "get_tensorflow_tensor_data() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_tensor_data"]], "get_tensorflow_tensor_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_tensor_shape"]], "infer_onnx_shape_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.infer_onnx_shape_dtype"]], "initialize_name_counter() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.initialize_name_counter"]], "is_list_or_tuple() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.is_list_or_tuple"]], "is_onnx_domain() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.is_onnx_domain"]], "make_onnx_inputs_outputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.make_onnx_inputs_outputs"]], "make_onnx_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.make_onnx_shape"]], "map_numpy_to_onnx_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_numpy_to_onnx_dtype"]], "map_onnx_to_numpy_type() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_onnx_to_numpy_type"]], "map_tensorflow_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_tensorflow_dtype"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"]], "read_tensorflow_node_attrs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.read_tensorflow_node_attrs"]], "save_protobuf() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.save_protobuf"]], "set_name() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.set_name"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"]], "generategraphwithqdqpattern (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern)": [[107, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern.GenerateGraphWithQDQPattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"]], "mergeduplicatedqdqoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq)": [[108, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq.MergeDuplicatedQDQOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "shareqdqforitexypatternoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern)": [[109, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern.ShareQDQForItexYPatternOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[109, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "graphanalyzer (class in neural_compressor.adaptor.tf_utils.graph_util)": [[110, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer"]], "graphrewriterhelper (class in neural_compressor.adaptor.tf_utils.graph_util)": [[110, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper"]], "neural_compressor.adaptor.tf_utils.graph_util": [[110, "module-neural_compressor.adaptor.tf_utils.graph_util"]], "neural_compressor.adaptor.tf_utils": [[111, "module-neural_compressor.adaptor.tf_utils"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[112, "module-neural_compressor.adaptor.tf_utils.quantize_graph"]], "fakequantize (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize)": [[113, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantize"]], "fakequantizebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize)": [[113, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantizeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"]], "quantizeconfig (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config)": [[115, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"]], "init_quantize_config() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper)": [[116, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper.init_quantize_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"]], "qat_clone_function() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper)": [[116, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper.qat_clone_function"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"]], "config_quantizable_layers() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer)": [[118, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer.config_quantizable_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "quantizelayeradd (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add)": [[119, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add.QuantizeLayerAdd"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "quantizelayerbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base)": [[120, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base.QuantizeLayerBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "quantizelayerbatchnormalization (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn)": [[121, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn.QuantizeLayerBatchNormalization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "quantizewrapper (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper)": [[122, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapper"]], "quantizewrapperbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper)": [[122, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn)": [[123, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2)": [[124, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv)": [[125, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"]], "fusenodestartwithdeconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv)": [[126, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"]], "fusenodestartwithfusedinstancenorm (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in)": [[127, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul)": [[128, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling)": [[129, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"]], "optimizeqdqgraph (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq)": [[131, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"]], "quantizegraphbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[132, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase"]], "quantizenodebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[132, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn)": [[133, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2)": [[134, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv)": [[135, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"]], "quantizegraphforintel (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu)": [[136, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu.QuantizeGraphForIntel"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul)": [[137, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling)": [[138, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[138, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"]], "quantizegraphhelper (class in neural_compressor.adaptor.tf_utils.quantize_graph_common)": [[139, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[139, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"]], "smoothquantcalibration (class in neural_compressor.adaptor.tf_utils.smooth_quant_calibration)": [[140, "neural_compressor.adaptor.tf_utils.smooth_quant_calibration.SmoothQuantCalibration"]], "smoothquantcalibrationllm (class in neural_compressor.adaptor.tf_utils.smooth_quant_calibration)": [[140, "neural_compressor.adaptor.tf_utils.smooth_quant_calibration.SmoothQuantCalibrationLLM"]], "neural_compressor.adaptor.tf_utils.smooth_quant_calibration": [[140, "module-neural_compressor.adaptor.tf_utils.smooth_quant_calibration"]], "smoothquantscaler (class in neural_compressor.adaptor.tf_utils.smooth_quant_scaler)": [[141, "neural_compressor.adaptor.tf_utils.smooth_quant_scaler.SmoothQuantScaler"]], "smoothquantscalerllm (class in neural_compressor.adaptor.tf_utils.smooth_quant_scaler)": [[141, "neural_compressor.adaptor.tf_utils.smooth_quant_scaler.SmoothQuantScalerLLM"]], "neural_compressor.adaptor.tf_utils.smooth_quant_scaler": [[141, "module-neural_compressor.adaptor.tf_utils.smooth_quant_scaler"]], "tensorflowqdqtoonnxqdqconverter (class in neural_compressor.adaptor.tf_utils.tf2onnx_converter)": [[142, "neural_compressor.adaptor.tf_utils.tf2onnx_converter.TensorflowQDQToOnnxQDQConverter"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[142, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"]], "biascorrection (class in neural_compressor.adaptor.tf_utils.transform_graph.bias_correction)": [[143, "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction.BiasCorrection"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[143, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"]], "graphtransformbase (class in neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base)": [[144, "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.GraphTransformBase"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[144, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[145, "module-neural_compressor.adaptor.tf_utils.transform_graph"]], "insertlogging (class in neural_compressor.adaptor.tf_utils.transform_graph.insert_logging)": [[146, "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging.InsertLogging"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[146, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"]], "rerangequantizedconcat (class in neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat)": [[147, "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat.RerangeQuantizedConcat"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[147, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"]], "apply_inlining() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.apply_inlining"]], "collate_tf_preds() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.collate_tf_preds"]], "construct_function_from_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.construct_function_from_graph_def"]], "disable_random() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.disable_random"]], "fix_ref_type_of_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.fix_ref_type_of_graph_def"]], "generate_feed_dict() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.generate_feed_dict"]], "get_estimator_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.get_estimator_graph"]], "get_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.get_graph_def"]], "get_input_output_node_names() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.get_input_output_node_names"]], "get_model_input_shape() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.get_model_input_shape"]], "get_tensor_by_name() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.get_tensor_by_name"]], "get_tensor_val_from_graph_node() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.get_tensor_val_from_graph_node"]], "get_weight_from_input_tensor() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.get_weight_from_input_tensor"]], "int8_node_name_reverse() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.int8_node_name_reverse"]], "is_ckpt_format() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.is_ckpt_format"]], "is_saved_model_format() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.is_saved_model_format"]], "iterator_sess_run() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.iterator_sess_run"]], "neural_compressor.adaptor.tf_utils.util": [[148, "module-neural_compressor.adaptor.tf_utils.util"]], "parse_saved_model() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.parse_saved_model"]], "read_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.read_graph"]], "reconstruct_saved_model() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.reconstruct_saved_model"]], "strip_equivalent_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.strip_equivalent_nodes"]], "strip_unused_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.strip_unused_nodes"]], "tf_diagnosis_helper() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.tf_diagnosis_helper"]], "version1_eq_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.version1_eq_version2"]], "version1_gt_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.version1_gt_version2"]], "version1_gte_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.version1_gte_version2"]], "version1_lt_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.version1_lt_version2"]], "version1_lte_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.version1_lte_version2"]], "write_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.write_graph"]], "autoadamround (class in neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.AutoAdamRound"]], "autooptround (class in neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.AutoOPTRound"]], "autoround (class in neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.AutoRound"]], "saveinputs (class in neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.SaveInputs"]], "wrappermultiblock (class in neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.WrapperMultiblock"]], "block_forward() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.block_forward"]], "check_is_cpu() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.check_is_cpu"]], "collect_minmax_scale() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.collect_minmax_scale"]], "collect_round_v() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.collect_round_v"]], "get_batch_dim() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.get_batch_dim"]], "get_block_names() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.get_block_names"]], "get_dataloader() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.get_dataloader"]], "get_module() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.get_module"]], "get_scale_shape() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.get_scale_shape"]], "get_tokenizer_function() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.get_tokenizer_function"]], "move_input_to_device() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.move_input_to_device"]], "neural_compressor.adaptor.torch_utils.autoround.autoround": [[149, "module-neural_compressor.adaptor.torch_utils.autoround.autoround"]], "quant_weight() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.quant_weight"]], "quant_weight_actor() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.quant_weight_actor"]], "quant_weight_asym() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.quant_weight_asym"]], "quant_weight_sym() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.quant_weight_sym"]], "quant_weight_w_scale() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.quant_weight_w_scale"]], "round_ste() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.round_ste"]], "sampling_inputs() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.sampling_inputs"]], "set_module() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.set_module"]], "unwrapper_block() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.unwrapper_block"]], "wrapper_block() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.wrapper_block"]], "export_compressed_model() (in module neural_compressor.adaptor.torch_utils.autoround.export)": [[150, "neural_compressor.adaptor.torch_utils.autoround.export.export_compressed_model"]], "neural_compressor.adaptor.torch_utils.autoround.export": [[150, "module-neural_compressor.adaptor.torch_utils.autoround.export"]], "neural_compressor.adaptor.torch_utils.autoround": [[151, "module-neural_compressor.adaptor.torch_utils.autoround"]], "neural_compressor.adaptor.torch_utils.autoround.model_wrapper": [[152, "module-neural_compressor.adaptor.torch_utils.autoround.model_wrapper"]], "sgd (class in neural_compressor.adaptor.torch_utils.autoround.sign_sgd)": [[153, "neural_compressor.adaptor.torch_utils.autoround.sign_sgd.SGD"]], "neural_compressor.adaptor.torch_utils.autoround.sign_sgd": [[153, "module-neural_compressor.adaptor.torch_utils.autoround.sign_sgd"]], "sgd() (in module neural_compressor.adaptor.torch_utils.autoround.sign_sgd)": [[153, "neural_compressor.adaptor.torch_utils.autoround.sign_sgd.sgd"]], "actawareweightquant (class in neural_compressor.adaptor.torch_utils.awq)": [[154, "neural_compressor.adaptor.torch_utils.awq.ActAwareWeightQuant"]], "neural_compressor.adaptor.torch_utils.awq": [[154, "module-neural_compressor.adaptor.torch_utils.awq"]], "bf16modulewrapper (class in neural_compressor.adaptor.torch_utils.bf16_convert)": [[155, "neural_compressor.adaptor.torch_utils.bf16_convert.BF16ModuleWrapper"]], "convert() (in module neural_compressor.adaptor.torch_utils.bf16_convert)": [[155, "neural_compressor.adaptor.torch_utils.bf16_convert.Convert"]], "bf16_symbolic_trace() (in module neural_compressor.adaptor.torch_utils.bf16_convert)": [[155, "neural_compressor.adaptor.torch_utils.bf16_convert.bf16_symbolic_trace"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[155, "module-neural_compressor.adaptor.torch_utils.bf16_convert"]], "gptq (class in neural_compressor.adaptor.torch_utils.gptq)": [[156, "neural_compressor.adaptor.torch_utils.gptq.GPTQ"]], "gptquantizer (class in neural_compressor.adaptor.torch_utils.gptq)": [[156, "neural_compressor.adaptor.torch_utils.gptq.GPTQuantizer"]], "find_layers() (in module neural_compressor.adaptor.torch_utils.gptq)": [[156, "neural_compressor.adaptor.torch_utils.gptq.find_layers"]], "find_layers_name() (in module neural_compressor.adaptor.torch_utils.gptq)": [[156, "neural_compressor.adaptor.torch_utils.gptq.find_layers_name"]], "is_leaf() (in module neural_compressor.adaptor.torch_utils.gptq)": [[156, "neural_compressor.adaptor.torch_utils.gptq.is_leaf"]], "log_quantizable_layers_per_transformer() (in module neural_compressor.adaptor.torch_utils.gptq)": [[156, "neural_compressor.adaptor.torch_utils.gptq.log_quantizable_layers_per_transformer"]], "neural_compressor.adaptor.torch_utils.gptq": [[156, "module-neural_compressor.adaptor.torch_utils.gptq"]], "quantize() (in module neural_compressor.adaptor.torch_utils.gptq)": [[156, "neural_compressor.adaptor.torch_utils.gptq.quantize"]], "trace_gptq_target_blocks() (in module neural_compressor.adaptor.torch_utils.gptq)": [[156, "neural_compressor.adaptor.torch_utils.gptq.trace_gptq_target_blocks"]], "hessiantrace (class in neural_compressor.adaptor.torch_utils.hawq_metric)": [[157, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace"]], "node_collector (class in neural_compressor.adaptor.torch_utils.hawq_metric)": [[157, "neural_compressor.adaptor.torch_utils.hawq_metric.Node_collector"]], "compare_weights() (in module neural_compressor.adaptor.torch_utils.hawq_metric)": [[157, "neural_compressor.adaptor.torch_utils.hawq_metric.compare_weights"]], "hawq_top() (in module neural_compressor.adaptor.torch_utils.hawq_metric)": [[157, "neural_compressor.adaptor.torch_utils.hawq_metric.hawq_top"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[157, "module-neural_compressor.adaptor.torch_utils.hawq_metric"]], "neural_compressor.adaptor.torch_utils": [[158, "module-neural_compressor.adaptor.torch_utils"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant": [[159, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant"]], "pickleerror": [[160, "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle.PickleError"], [515, "neural_compressor.torch.algorithms.layer_wise.modified_pickle.PickleError"]], "picklingerror": [[160, "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle.PicklingError"], [515, "neural_compressor.torch.algorithms.layer_wise.modified_pickle.PicklingError"]], "unpicklingerror": [[160, "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle.UnpicklingError"], [515, "neural_compressor.torch.algorithms.layer_wise.modified_pickle.UnpicklingError"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle": [[160, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle"]], "layerwisequant (class in neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize)": [[161, "neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize.LayerWiseQuant"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize": [[161, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize"]], "load() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load)": [[162, "neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load.load"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load": [[162, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load"]], "dowload_hf_model() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[163, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.dowload_hf_model"]], "get_children() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[163, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.get_children"]], "get_module() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[163, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.get_module"]], "get_named_children() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[163, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.get_named_children"]], "get_super_module_by_name() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[163, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.get_super_module_by_name"]], "load_empty_model() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[163, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.load_empty_model"]], "load_layer_wise_quantized_model() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[163, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.load_layer_wise_quantized_model"]], "load_tensor() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[163, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.load_tensor"]], "load_tensor_from_shard() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[163, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.load_tensor_from_shard"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils": [[163, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.utils"]], "update_module() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[163, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.update_module"]], "ipex_mixed_precision() (in module neural_compressor.adaptor.torch_utils.mixed_precision)": [[164, "neural_compressor.adaptor.torch_utils.mixed_precision.ipex_mixed_precision"]], "neural_compressor.adaptor.torch_utils.mixed_precision": [[164, "module-neural_compressor.adaptor.torch_utils.mixed_precision"]], "fakeaffinetensorquantfunction (class in neural_compressor.adaptor.torch_utils.model_wrapper)": [[165, "neural_compressor.adaptor.torch_utils.model_wrapper.FakeAffineTensorQuantFunction"]], "mullinear (class in neural_compressor.adaptor.torch_utils.model_wrapper)": [[165, "neural_compressor.adaptor.torch_utils.model_wrapper.MulLinear"]], "teqlinearfakequant (class in neural_compressor.adaptor.torch_utils.model_wrapper)": [[165, "neural_compressor.adaptor.torch_utils.model_wrapper.TEQLinearFakeQuant"]], "neural_compressor.adaptor.torch_utils.model_wrapper": [[165, "module-neural_compressor.adaptor.torch_utils.model_wrapper"]], "transformerbasedmodelblockpatterndetector (class in neural_compressor.adaptor.torch_utils.pattern_detector)": [[166, "neural_compressor.adaptor.torch_utils.pattern_detector.TransformerBasedModelBlockPatternDetector"]], "neural_compressor.adaptor.torch_utils.pattern_detector": [[166, "module-neural_compressor.adaptor.torch_utils.pattern_detector"]], "torchsmoothquant (class in neural_compressor.adaptor.torch_utils.smooth_quant)": [[167, "neural_compressor.adaptor.torch_utils.smooth_quant.TorchSmoothQuant"]], "get_module() (in module neural_compressor.adaptor.torch_utils.smooth_quant)": [[167, "neural_compressor.adaptor.torch_utils.smooth_quant.get_module"]], "neural_compressor.adaptor.torch_utils.smooth_quant": [[167, "module-neural_compressor.adaptor.torch_utils.smooth_quant"]], "set_module() (in module neural_compressor.adaptor.torch_utils.smooth_quant)": [[167, "neural_compressor.adaptor.torch_utils.smooth_quant.set_module"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[168, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"]], "symbolic_trace() (in module neural_compressor.adaptor.torch_utils.symbolic_trace)": [[168, "neural_compressor.adaptor.torch_utils.symbolic_trace.symbolic_trace"]], "trace_and_fuse_sub_graph() (in module neural_compressor.adaptor.torch_utils.symbolic_trace)": [[168, "neural_compressor.adaptor.torch_utils.symbolic_trace.trace_and_fuse_sub_graph"]], "tequantizer (class in neural_compressor.adaptor.torch_utils.teq)": [[169, "neural_compressor.adaptor.torch_utils.teq.TEQuantizer"]], "neural_compressor.adaptor.torch_utils.teq": [[169, "module-neural_compressor.adaptor.torch_utils.teq"]], "append_attr() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.append_attr"]], "auto_copy() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.auto_copy"]], "calculate_quant_min_max() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.calculate_quant_min_max"]], "calibration() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.calibration"]], "check_cfg_and_qconfig() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.check_cfg_and_qconfig"]], "collate_torch_preds() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.collate_torch_preds"]], "collect_weight_info() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.collect_weight_info"]], "fetch_module() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.fetch_module"]], "forward_wrapper() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.forward_wrapper"]], "generate_activation_observer() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.generate_activation_observer"]], "get_absorb_layers() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.get_absorb_layers"]], "get_block_prefix() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.get_block_prefix"]], "get_depth() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.get_depth"]], "get_dict_at_depth() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.get_dict_at_depth"]], "get_element_under_depth() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.get_element_under_depth"]], "get_embedding_contiguous() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.get_embedding_contiguous"]], "get_example_input() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.get_example_input"]], "get_fallback_order() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.get_fallback_order"]], "get_hidden_states() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.get_hidden_states"]], "get_module_input_output() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.get_module_input_output"]], "get_mse_order_per_fp32() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.get_mse_order_per_fp32"]], "get_mse_order_per_int8() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.get_mse_order_per_int8"]], "get_op_type_by_name() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.get_op_type_by_name"]], "get_quantizable_ops_from_cfgs() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.get_quantizable_ops_from_cfgs"]], "get_torch_version() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.get_torch_version"]], "input2tuple() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.input2tuple"]], "is_fused_module() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.is_fused_module"]], "match_datatype_pattern() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.match_datatype_pattern"]], "move_input_device() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.move_input_device"]], "neural_compressor.adaptor.torch_utils.util": [[170, "module-neural_compressor.adaptor.torch_utils.util"]], "paser_cfgs() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.paser_cfgs"]], "set_module() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.set_module"]], "simple_inference() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.simple_inference"]], "update_sq_scale() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.update_sq_scale"]], "awq_quantize() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[171, "neural_compressor.adaptor.torch_utils.weight_only.awq_quantize"]], "gptq_quantize() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[171, "neural_compressor.adaptor.torch_utils.weight_only.gptq_quantize"]], "neural_compressor.adaptor.torch_utils.weight_only": [[171, "module-neural_compressor.adaptor.torch_utils.weight_only"]], "qdq_weight_actor() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[171, "neural_compressor.adaptor.torch_utils.weight_only.qdq_weight_actor"]], "qdq_weight_asym() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[171, "neural_compressor.adaptor.torch_utils.weight_only.qdq_weight_asym"]], "qdq_weight_sym() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[171, "neural_compressor.adaptor.torch_utils.weight_only.qdq_weight_sym"]], "quant_weight() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[171, "neural_compressor.adaptor.torch_utils.weight_only.quant_weight"]], "quant_weight_w_scale() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[171, "neural_compressor.adaptor.torch_utils.weight_only.quant_weight_w_scale"]], "quantize_4bit() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[171, "neural_compressor.adaptor.torch_utils.weight_only.quantize_4bit"]], "rtn_quantize() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[171, "neural_compressor.adaptor.torch_utils.weight_only.rtn_quantize"]], "search_clip() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[171, "neural_compressor.adaptor.torch_utils.weight_only.search_clip"]], "teq_quantize() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[171, "neural_compressor.adaptor.torch_utils.weight_only.teq_quantize"]], "algorithms (class in neural_compressor.algorithm.algorithm)": [[172, "neural_compressor.algorithm.algorithm.ALGORITHMS"]], "algorithm (class in neural_compressor.algorithm.algorithm)": [[172, "neural_compressor.algorithm.algorithm.Algorithm"]], "algorithmscheduler (class in neural_compressor.algorithm.algorithm)": [[172, "neural_compressor.algorithm.algorithm.AlgorithmScheduler"]], "algorithm_registry() (in module neural_compressor.algorithm.algorithm)": [[172, "neural_compressor.algorithm.algorithm.algorithm_registry"]], "neural_compressor.algorithm.algorithm": [[172, "module-neural_compressor.algorithm.algorithm"]], "fastbiascorrection (class in neural_compressor.algorithm.fast_bias_correction)": [[173, "neural_compressor.algorithm.fast_bias_correction.FastBiasCorrection"]], "neural_compressor.algorithm.fast_bias_correction": [[173, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[174, "module-neural_compressor.algorithm"]], "smoothquant (class in neural_compressor.algorithm.smooth_quant)": [[175, "neural_compressor.algorithm.smooth_quant.SmoothQuant"]], "neural_compressor.algorithm.smooth_quant": [[175, "module-neural_compressor.algorithm.smooth_quant"]], "weightcorrection (class in neural_compressor.algorithm.weight_correction)": [[176, "neural_compressor.algorithm.weight_correction.WeightCorrection"]], "neural_compressor.algorithm.weight_correction": [[176, "module-neural_compressor.algorithm.weight_correction"]], "benchmark_with_raw_cmd() (in module neural_compressor.benchmark)": [[177, "neural_compressor.benchmark.benchmark_with_raw_cmd"]], "call_one() (in module neural_compressor.benchmark)": [[177, "neural_compressor.benchmark.call_one"]], "config_instance() (in module neural_compressor.benchmark)": [[177, "neural_compressor.benchmark.config_instance"]], "fit() (in module neural_compressor.benchmark)": [[177, "neural_compressor.benchmark.fit"]], "generate_prefix() (in module neural_compressor.benchmark)": [[177, "neural_compressor.benchmark.generate_prefix"]], "get_architecture() (in module neural_compressor.benchmark)": [[177, "neural_compressor.benchmark.get_architecture"]], "get_bounded_threads() (in module neural_compressor.benchmark)": [[177, "neural_compressor.benchmark.get_bounded_threads"]], "get_core_ids() (in module neural_compressor.benchmark)": [[177, "neural_compressor.benchmark.get_core_ids"]], "get_physical_ids() (in module neural_compressor.benchmark)": [[177, "neural_compressor.benchmark.get_physical_ids"]], "get_threads() (in module neural_compressor.benchmark)": [[177, "neural_compressor.benchmark.get_threads"]], "get_threads_per_core() (in module neural_compressor.benchmark)": [[177, "neural_compressor.benchmark.get_threads_per_core"]], "neural_compressor.benchmark": [[177, "module-neural_compressor.benchmark"]], "profile() (in module neural_compressor.benchmark)": [[177, "neural_compressor.benchmark.profile"]], "run_instance() (in module neural_compressor.benchmark)": [[177, "neural_compressor.benchmark.run_instance"]], "set_all_env_var() (in module neural_compressor.benchmark)": [[177, "neural_compressor.benchmark.set_all_env_var"]], "set_env_var() (in module neural_compressor.benchmark)": [[177, "neural_compressor.benchmark.set_env_var"]], "summary_benchmark() (in module neural_compressor.benchmark)": [[177, "neural_compressor.benchmark.summary_benchmark"]], "baseconfig (class in neural_compressor.common.base_config)": [[178, "neural_compressor.common.base_config.BaseConfig"]], "composableconfig (class in neural_compressor.common.base_config)": [[178, "neural_compressor.common.base_config.ComposableConfig"]], "neural_compressor.common.base_config": [[178, "module-neural_compressor.common.base_config"]], "register_config() (in module neural_compressor.common.base_config)": [[178, "neural_compressor.common.base_config.register_config"]], "register_supported_configs_for_fwk() (in module neural_compressor.common.base_config)": [[178, "neural_compressor.common.base_config.register_supported_configs_for_fwk"]], "evaluator (class in neural_compressor.common.base_tuning)": [[179, "neural_compressor.common.base_tuning.Evaluator"]], "tuningconfig (class in neural_compressor.common.base_tuning)": [[179, "neural_compressor.common.base_tuning.TuningConfig"]], "tuninglogger (class in neural_compressor.common.base_tuning)": [[179, "neural_compressor.common.base_tuning.TuningLogger"]], "neural_compressor.common.base_tuning": [[179, "module-neural_compressor.common.base_tuning"]], "neural_compressor.common": [[180, "module-neural_compressor.common"]], "neural_compressor.common.utils.constants": [[181, "module-neural_compressor.common.utils.constants"]], "neural_compressor.common.utils": [[182, "module-neural_compressor.common.utils"]], "logger (class in neural_compressor.common.utils.logger)": [[183, "neural_compressor.common.utils.logger.Logger"]], "neural_compressor.common.utils.logger": [[183, "module-neural_compressor.common.utils.logger"]], "neural_compressor.common.utils.utility": [[184, "module-neural_compressor.common.utils.utility"]], "set_random_seed() (in module neural_compressor.common.utils.utility)": [[184, "neural_compressor.common.utils.utility.set_random_seed"]], "set_resume_from() (in module neural_compressor.common.utils.utility)": [[184, "neural_compressor.common.utils.utility.set_resume_from"]], "set_tensorboard() (in module neural_compressor.common.utils.utility)": [[184, "neural_compressor.common.utils.utility.set_tensorboard"]], "set_workspace() (in module neural_compressor.common.utils.utility)": [[184, "neural_compressor.common.utils.utility.set_workspace"]], "basecallbacks (class in neural_compressor.compression.callbacks)": [[185, "neural_compressor.compression.callbacks.BaseCallbacks"]], "distillationcallbacks (class in neural_compressor.compression.callbacks)": [[185, "neural_compressor.compression.callbacks.DistillationCallbacks"]], "pruningcallbacks (class in neural_compressor.compression.callbacks)": [[185, "neural_compressor.compression.callbacks.PruningCallbacks"]], "quantizationawaretrainingcallbacks (class in neural_compressor.compression.callbacks)": [[185, "neural_compressor.compression.callbacks.QuantizationAwareTrainingCallbacks"]], "_epoch_ran (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[185, "neural_compressor.compression.callbacks.DistillationCallbacks._epoch_ran"]], "best_model (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[185, "neural_compressor.compression.callbacks.DistillationCallbacks.best_model"]], "best_score (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[185, "neural_compressor.compression.callbacks.DistillationCallbacks.best_score"]], "eval_frequency (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[185, "neural_compressor.compression.callbacks.DistillationCallbacks.eval_frequency"]], "neural_compressor.compression.callbacks": [[185, "module-neural_compressor.compression.callbacks"]], "criterions (class in neural_compressor.compression.distillation.criterions)": [[186, "neural_compressor.compression.distillation.criterions.Criterions"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[186, "neural_compressor.compression.distillation.criterions.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationframework (class in neural_compressor.compression.distillation.criterions)": [[186, "neural_compressor.compression.distillation.criterions.KnowledgeDistillationFramework"]], "knowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[186, "neural_compressor.compression.distillation.criterions.KnowledgeDistillationLoss"]], "pytorchcriterions (class in neural_compressor.compression.distillation.criterions)": [[186, "neural_compressor.compression.distillation.criterions.PyTorchCriterions"]], "pytorchcrossentropyloss (class in neural_compressor.compression.distillation.criterions)": [[186, "neural_compressor.compression.distillation.criterions.PyTorchCrossEntropyLoss"]], "pytorchintermediatelayersknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[186, "neural_compressor.compression.distillation.criterions.PyTorchIntermediateLayersKnowledgeDistillationLoss"]], "pytorchintermediatelayersknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[186, "neural_compressor.compression.distillation.criterions.PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"]], "pytorchknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[186, "neural_compressor.compression.distillation.criterions.PyTorchKnowledgeDistillationLoss"]], "pytorchknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[186, "neural_compressor.compression.distillation.criterions.PyTorchKnowledgeDistillationLossWrapper"]], "pytorchselfknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[186, "neural_compressor.compression.distillation.criterions.PyTorchSelfKnowledgeDistillationLoss"]], "pytorchselfknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[186, "neural_compressor.compression.distillation.criterions.PyTorchSelfKnowledgeDistillationLossWrapper"]], "selfknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[186, "neural_compressor.compression.distillation.criterions.SelfKnowledgeDistillationLoss"]], "tensorflowcrossentropyloss (class in neural_compressor.compression.distillation.criterions)": [[186, "neural_compressor.compression.distillation.criterions.TensorFlowCrossEntropyLoss"]], "tensorflowsparsecategoricalcrossentropy (class in neural_compressor.compression.distillation.criterions)": [[186, "neural_compressor.compression.distillation.criterions.TensorFlowSparseCategoricalCrossentropy"]], "tensorflowcriterions (class in neural_compressor.compression.distillation.criterions)": [[186, "neural_compressor.compression.distillation.criterions.TensorflowCriterions"]], "tensorflowknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[186, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLoss"]], "tensorflowknowledgedistillationlossexternal (class in neural_compressor.compression.distillation.criterions)": [[186, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLossExternal"]], "tensorflowknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[186, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLossWrapper"]], "criterion_registry() (in module neural_compressor.compression.distillation.criterions)": [[186, "neural_compressor.compression.distillation.criterions.criterion_registry"]], "neural_compressor.compression.distillation.criterions": [[186, "module-neural_compressor.compression.distillation.criterions"]], "neural_compressor.compression.distillation": [[187, "module-neural_compressor.compression.distillation"]], "optimizers (class in neural_compressor.compression.distillation.optimizers)": [[188, "neural_compressor.compression.distillation.optimizers.Optimizers"]], "pytorchoptimizers (class in neural_compressor.compression.distillation.optimizers)": [[188, "neural_compressor.compression.distillation.optimizers.PyTorchOptimizers"]], "pytorchsgd (class in neural_compressor.compression.distillation.optimizers)": [[188, "neural_compressor.compression.distillation.optimizers.PyTorchSGD"]], "tensorflowadam (class in neural_compressor.compression.distillation.optimizers)": [[188, "neural_compressor.compression.distillation.optimizers.TensorFlowAdam"]], "tensorflowadamw (class in neural_compressor.compression.distillation.optimizers)": [[188, "neural_compressor.compression.distillation.optimizers.TensorFlowAdamW"]], "tensorflowsgd (class in neural_compressor.compression.distillation.optimizers)": [[188, "neural_compressor.compression.distillation.optimizers.TensorFlowSGD"]], "tensorflowoptimizers (class in neural_compressor.compression.distillation.optimizers)": [[188, "neural_compressor.compression.distillation.optimizers.TensorflowOptimizers"]], "neural_compressor.compression.distillation.optimizers": [[188, "module-neural_compressor.compression.distillation.optimizers"]], "optimizer_registry() (in module neural_compressor.compression.distillation.optimizers)": [[188, "neural_compressor.compression.distillation.optimizers.optimizer_registry"]], "get_activation() (in module neural_compressor.compression.distillation.utility)": [[189, "neural_compressor.compression.distillation.utility.get_activation"]], "neural_compressor.compression.distillation.utility": [[189, "module-neural_compressor.compression.distillation.utility"]], "record_output() (in module neural_compressor.compression.distillation.utility)": [[189, "neural_compressor.compression.distillation.utility.record_output"]], "neural_compressor.compression.hpo": [[190, "module-neural_compressor.compression.hpo"]], "neural_compressor.compression.hpo.sa_optimizer": [[191, "module-neural_compressor.compression.hpo.sa_optimizer"]], "bayesianoptimizationsearcher (class in neural_compressor.compression.hpo.search_algorithms)": [[192, "neural_compressor.compression.hpo.search_algorithms.BayesianOptimizationSearcher"]], "gridsearcher (class in neural_compressor.compression.hpo.search_algorithms)": [[192, "neural_compressor.compression.hpo.search_algorithms.GridSearcher"]], "randomsearcher (class in neural_compressor.compression.hpo.search_algorithms)": [[192, "neural_compressor.compression.hpo.search_algorithms.RandomSearcher"]], "searcher (class in neural_compressor.compression.hpo.search_algorithms)": [[192, "neural_compressor.compression.hpo.search_algorithms.Searcher"]], "xgbsearcher (class in neural_compressor.compression.hpo.search_algorithms)": [[192, "neural_compressor.compression.hpo.search_algorithms.XgbSearcher"]], "neural_compressor.compression.hpo.search_algorithms": [[192, "module-neural_compressor.compression.hpo.search_algorithms"]], "register_searcher() (in module neural_compressor.compression.hpo.search_algorithms)": [[192, "neural_compressor.compression.hpo.search_algorithms.register_searcher"]], "basesearchspace (class in neural_compressor.compression.hpo.search_space)": [[193, "neural_compressor.compression.hpo.search_space.BaseSearchSpace"]], "continuoussearchspace (class in neural_compressor.compression.hpo.search_space)": [[193, "neural_compressor.compression.hpo.search_space.ContinuousSearchSpace"]], "discretesearchspace (class in neural_compressor.compression.hpo.search_space)": [[193, "neural_compressor.compression.hpo.search_space.DiscreteSearchSpace"]], "searchspace (class in neural_compressor.compression.hpo.search_space)": [[193, "neural_compressor.compression.hpo.search_space.SearchSpace"]], "neural_compressor.compression.hpo.search_space": [[193, "module-neural_compressor.compression.hpo.search_space"]], "register_searchspace() (in module neural_compressor.compression.hpo.search_space)": [[193, "neural_compressor.compression.hpo.search_space.register_searchspace"]], "neural_compressor.compression": [[194, "module-neural_compressor.compression"]], "blockmaskcriterion (class in neural_compressor.compression.pruner.criteria)": [[195, "neural_compressor.compression.pruner.criteria.BlockMaskCriterion"]], "gradientcriterion (class in neural_compressor.compression.pruner.criteria)": [[195, "neural_compressor.compression.pruner.criteria.GradientCriterion"]], "magnitudecriterion (class in neural_compressor.compression.pruner.criteria)": [[195, "neural_compressor.compression.pruner.criteria.MagnitudeCriterion"]], "pruningcriterion (class in neural_compressor.compression.pruner.criteria)": [[195, "neural_compressor.compression.pruner.criteria.PruningCriterion"]], "retrainfreecriterion (class in neural_compressor.compression.pruner.criteria)": [[195, "neural_compressor.compression.pruner.criteria.RetrainFreeCriterion"]], "snipcriterion (class in neural_compressor.compression.pruner.criteria)": [[195, "neural_compressor.compression.pruner.criteria.SnipCriterion"]], "snipmomentumcriterion (class in neural_compressor.compression.pruner.criteria)": [[195, "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion"]], "get_criterion() (in module neural_compressor.compression.pruner.criteria)": [[195, "neural_compressor.compression.pruner.criteria.get_criterion"]], "neural_compressor.compression.pruner.criteria": [[195, "module-neural_compressor.compression.pruner.criteria"]], "register_criterion() (in module neural_compressor.compression.pruner.criteria)": [[195, "neural_compressor.compression.pruner.criteria.register_criterion"]], "scores (neural_compressor.compression.pruner.criteria.blockmaskcriterion attribute)": [[195, "neural_compressor.compression.pruner.criteria.BlockMaskCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.gradientcriterion attribute)": [[195, "neural_compressor.compression.pruner.criteria.GradientCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.magnitudecriterion attribute)": [[195, "neural_compressor.compression.pruner.criteria.MagnitudeCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.pruningcriterion attribute)": [[195, "neural_compressor.compression.pruner.criteria.PruningCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.retrainfreecriterion attribute)": [[195, "neural_compressor.compression.pruner.criteria.RetrainFreeCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.snipcriterion attribute)": [[195, "neural_compressor.compression.pruner.criteria.SnipCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.snipmomentumcriterion attribute)": [[195, "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion.scores"]], "dsnot() (in module neural_compressor.compression.pruner.dsnot)": [[196, "neural_compressor.compression.pruner.dsnot.DSnoT"]], "neural_compressor.compression.pruner.dsnot": [[196, "module-neural_compressor.compression.pruner.dsnot"]], "return_reorder_indice() (in module neural_compressor.compression.pruner.dsnot)": [[196, "neural_compressor.compression.pruner.dsnot.return_reorder_indice"]], "neural_compressor.compression.pruner": [[197, "module-neural_compressor.compression.pruner"]], "prepare_pruning() (in module neural_compressor.compression.pruner)": [[197, "neural_compressor.compression.pruner.prepare_pruning"]], "save() (in module neural_compressor.compression.pruner)": [[197, "neural_compressor.compression.pruner.save"]], "generate_ffn2_pruning_config() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[198, "neural_compressor.compression.pruner.model_slim.auto_slim.generate_ffn2_pruning_config"]], "generate_mha_pruning_config() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[198, "neural_compressor.compression.pruner.model_slim.auto_slim.generate_mha_pruning_config"]], "model_slim() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[198, "neural_compressor.compression.pruner.model_slim.auto_slim.model_slim"]], "model_slim_ffn2() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[198, "neural_compressor.compression.pruner.model_slim.auto_slim.model_slim_ffn2"]], "model_slim_mha() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[198, "neural_compressor.compression.pruner.model_slim.auto_slim.model_slim_mha"]], "neural_compressor.compression.pruner.model_slim.auto_slim": [[198, "module-neural_compressor.compression.pruner.model_slim.auto_slim"]], "parse_auto_slim_config() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[198, "neural_compressor.compression.pruner.model_slim.auto_slim.parse_auto_slim_config"]], "neural_compressor.compression.pruner.model_slim": [[199, "module-neural_compressor.compression.pruner.model_slim"]], "classifierheadsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[200, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher"]], "classifierheadsearchertf (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[200, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF"]], "jitbasicsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[200, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher"]], "linear2linearsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[200, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher"]], "recipesearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[200, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher"]], "selfmhasearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[200, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher"]], "current_pattern (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[200, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.current_pattern"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[200, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearchertf attribute)": [[200, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[200, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[200, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[200, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.device"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[200, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearchertf attribute)": [[200, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[200, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[200, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[200, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.flatten_static_graph"]], "get_attributes() (in module neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[200, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.get_attributes"]], "get_common_module() (in module neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[200, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.get_common_module"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[200, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearchertf attribute)": [[200, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[200, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[200, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[200, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[200, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.model"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[200, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer"]], "print_iterables() (in module neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[200, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.print_iterables"]], "recipe (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[200, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.recipe"]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[200, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.searching_results"]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[200, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.searching_results"]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[200, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.searching_results"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[200, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearchertf attribute)": [[200, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[200, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[200, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[200, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.static_graph"]], "target_layers (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[200, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.target_layers"]], "target_layers (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[200, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.target_layers"]], "target_op_lut (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[200, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.target_op_lut"]], "targets (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[200, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.targets"]], "linearcompression (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[201, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression"]], "linearcompressioniterator (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[201, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator"]], "postcompressionutils (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[201, "neural_compressor.compression.pruner.model_slim.weight_slim.PostCompressionUtils"]], "device (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[201, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.device"]], "layer_1 (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[201, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.layer_1"]], "layer_2 (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[201, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.layer_2"]], "linear_patterns (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompressioniterator attribute)": [[201, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator.linear_patterns"]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[201, "module-neural_compressor.compression.pruner.model_slim.weight_slim"]], "basepattern (class in neural_compressor.compression.pruner.patterns.base)": [[202, "neural_compressor.compression.pruner.patterns.base.BasePattern"]], "kerasbasepattern (class in neural_compressor.compression.pruner.patterns.base)": [[202, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern"]], "pytorchbasepattern (class in neural_compressor.compression.pruner.patterns.base)": [[202, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern"]], "config (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[202, "neural_compressor.compression.pruner.patterns.base.BasePattern.config"]], "config (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[202, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.config"]], "config (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[202, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.config"]], "invalid_layers (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[202, "neural_compressor.compression.pruner.patterns.base.BasePattern.invalid_layers"]], "invalid_layers (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[202, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.invalid_layers"]], "invalid_layers (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[202, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.invalid_layers"]], "is_global (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[202, "neural_compressor.compression.pruner.patterns.base.BasePattern.is_global"]], "is_global (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[202, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.is_global"]], "is_global (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[202, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.is_global"]], "keep_mask_layers (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[202, "neural_compressor.compression.pruner.patterns.base.BasePattern.keep_mask_layers"]], "keep_mask_layers (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[202, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.keep_mask_layers"]], "keep_mask_layers (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[202, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.keep_mask_layers"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[202, "neural_compressor.compression.pruner.patterns.base.BasePattern.max_sparsity_ratio_per_op"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[202, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.max_sparsity_ratio_per_op"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[202, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.max_sparsity_ratio_per_op"]], "min_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[202, "neural_compressor.compression.pruner.patterns.base.BasePattern.min_sparsity_ratio_per_op"]], "min_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[202, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.min_sparsity_ratio_per_op"]], "min_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[202, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.min_sparsity_ratio_per_op"]], "modules (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[202, "neural_compressor.compression.pruner.patterns.base.BasePattern.modules"]], "modules (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[202, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.modules"]], "modules (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[202, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.modules"]], "neural_compressor.compression.pruner.patterns.base": [[202, "module-neural_compressor.compression.pruner.patterns.base"]], "pattern (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[202, "neural_compressor.compression.pruner.patterns.base.BasePattern.pattern"]], "pattern (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[202, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.pattern"]], "pattern (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[202, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.pattern"]], "register_pattern() (in module neural_compressor.compression.pruner.patterns.base)": [[202, "neural_compressor.compression.pruner.patterns.base.register_pattern"]], "target_sparsity (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[202, "neural_compressor.compression.pruner.patterns.base.BasePattern.target_sparsity"]], "target_sparsity (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[202, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.target_sparsity"]], "target_sparsity (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[202, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.target_sparsity"]], "get_pattern() (in module neural_compressor.compression.pruner.patterns)": [[203, "neural_compressor.compression.pruner.patterns.get_pattern"]], "neural_compressor.compression.pruner.patterns": [[203, "module-neural_compressor.compression.pruner.patterns"]], "m (neural_compressor.compression.pruner.patterns.mha.patternmha attribute)": [[204, "neural_compressor.compression.pruner.patterns.mha.PatternMHA.M"]], "n (neural_compressor.compression.pruner.patterns.mha.patternmha attribute)": [[204, "neural_compressor.compression.pruner.patterns.mha.PatternMHA.N"]], "patternmha (class in neural_compressor.compression.pruner.patterns.mha)": [[204, "neural_compressor.compression.pruner.patterns.mha.PatternMHA"]], "neural_compressor.compression.pruner.patterns.mha": [[204, "module-neural_compressor.compression.pruner.patterns.mha"]], "m (neural_compressor.compression.pruner.patterns.ninm.pytorchpatternninm attribute)": [[205, "neural_compressor.compression.pruner.patterns.ninm.PytorchPatternNInM.M"]], "n (neural_compressor.compression.pruner.patterns.ninm.pytorchpatternninm attribute)": [[205, "neural_compressor.compression.pruner.patterns.ninm.PytorchPatternNInM.N"]], "pytorchpatternninm (class in neural_compressor.compression.pruner.patterns.ninm)": [[205, "neural_compressor.compression.pruner.patterns.ninm.PytorchPatternNInM"]], "neural_compressor.compression.pruner.patterns.ninm": [[205, "module-neural_compressor.compression.pruner.patterns.ninm"]], "keraspatternnxm (class in neural_compressor.compression.pruner.patterns.nxm)": [[206, "neural_compressor.compression.pruner.patterns.nxm.KerasPatternNxM"]], "pytorchpatternnxm (class in neural_compressor.compression.pruner.patterns.nxm)": [[206, "neural_compressor.compression.pruner.patterns.nxm.PytorchPatternNxM"]], "block_size (neural_compressor.compression.pruner.patterns.nxm.keraspatternnxm attribute)": [[206, "neural_compressor.compression.pruner.patterns.nxm.KerasPatternNxM.block_size"]], "block_size (neural_compressor.compression.pruner.patterns.nxm.pytorchpatternnxm attribute)": [[206, "neural_compressor.compression.pruner.patterns.nxm.PytorchPatternNxM.block_size"]], "neural_compressor.compression.pruner.patterns.nxm": [[206, "module-neural_compressor.compression.pruner.patterns.nxm"]], "basepruner (class in neural_compressor.compression.pruner.pruners.base)": [[207, "neural_compressor.compression.pruner.pruners.base.BasePruner"]], "kerasbasepruner (class in neural_compressor.compression.pruner.pruners.base)": [[207, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner"]], "pytorchbasepruner (class in neural_compressor.compression.pruner.pruners.base)": [[207, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner"]], "config (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[207, "neural_compressor.compression.pruner.pruners.base.BasePruner.config"]], "config (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[207, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.config"]], "config (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[207, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.config"]], "current_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[207, "neural_compressor.compression.pruner.pruners.base.BasePruner.current_sparsity_ratio"]], "current_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[207, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.current_sparsity_ratio"]], "current_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[207, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.current_sparsity_ratio"]], "end_step (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[207, "neural_compressor.compression.pruner.pruners.base.BasePruner.end_step"]], "end_step (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[207, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.end_step"]], "end_step (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[207, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.end_step"]], "global_step (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[207, "neural_compressor.compression.pruner.pruners.base.BasePruner.global_step"]], "global_step (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[207, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.global_step"]], "global_step (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[207, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.global_step"]], "masks (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[207, "neural_compressor.compression.pruner.pruners.base.BasePruner.masks"]], "masks (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[207, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.masks"]], "masks (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[207, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.masks"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[207, "neural_compressor.compression.pruner.pruners.base.BasePruner.max_sparsity_ratio_per_op"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[207, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.max_sparsity_ratio_per_op"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[207, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.max_sparsity_ratio_per_op"]], "modules (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[207, "neural_compressor.compression.pruner.pruners.base.BasePruner.modules"]], "modules (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[207, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.modules"]], "modules (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[207, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.modules"]], "neural_compressor.compression.pruner.pruners.base": [[207, "module-neural_compressor.compression.pruner.pruners.base"]], "pattern (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[207, "neural_compressor.compression.pruner.pruners.base.BasePruner.pattern"]], "pattern (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[207, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.pattern"]], "pattern (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[207, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.pattern"]], "pruning_frequency (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[207, "neural_compressor.compression.pruner.pruners.base.BasePruner.pruning_frequency"]], "pruning_frequency (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[207, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.pruning_frequency"]], "pruning_frequency (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[207, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.pruning_frequency"]], "register_pruner() (in module neural_compressor.compression.pruner.pruners.base)": [[207, "neural_compressor.compression.pruner.pruners.base.register_pruner"]], "scheduler (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[207, "neural_compressor.compression.pruner.pruners.base.BasePruner.scheduler"]], "scheduler (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[207, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.scheduler"]], "scheduler (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[207, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.scheduler"]], "scores (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[207, "neural_compressor.compression.pruner.pruners.base.BasePruner.scores"]], "scores (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[207, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.scores"]], "scores (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[207, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.scores"]], "start_step (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[207, "neural_compressor.compression.pruner.pruners.base.BasePruner.start_step"]], "start_step (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[207, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.start_step"]], "start_step (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[207, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.start_step"]], "target_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[207, "neural_compressor.compression.pruner.pruners.base.BasePruner.target_sparsity_ratio"]], "target_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[207, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.target_sparsity_ratio"]], "target_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[207, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.target_sparsity_ratio"]], "kerasbasicpruner (class in neural_compressor.compression.pruner.pruners.basic)": [[208, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner"]], "pytorchbasicpruner (class in neural_compressor.compression.pruner.pruners.basic)": [[208, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner"]], "criterion (neural_compressor.compression.pruner.pruners.basic.kerasbasicpruner attribute)": [[208, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner.criterion"]], "criterion (neural_compressor.compression.pruner.pruners.basic.pytorchbasicpruner attribute)": [[208, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner.criterion"]], "neural_compressor.compression.pruner.pruners.basic": [[208, "module-neural_compressor.compression.pruner.pruners.basic"]], "pattern (neural_compressor.compression.pruner.pruners.basic.kerasbasicpruner attribute)": [[208, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner.pattern"]], "pattern (neural_compressor.compression.pruner.pruners.basic.pytorchbasicpruner attribute)": [[208, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner.pattern"]], "reg (neural_compressor.compression.pruner.pruners.basic.kerasbasicpruner attribute)": [[208, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner.reg"]], "reg (neural_compressor.compression.pruner.pruners.basic.pytorchbasicpruner attribute)": [[208, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner.reg"]], "scheduler (neural_compressor.compression.pruner.pruners.basic.kerasbasicpruner attribute)": [[208, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner.scheduler"]], "scheduler (neural_compressor.compression.pruner.pruners.basic.pytorchbasicpruner attribute)": [[208, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner.scheduler"]], "pytorchblockmaskpruner (class in neural_compressor.compression.pruner.pruners.block_mask)": [[209, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner"]], "criterion (neural_compressor.compression.pruner.pruners.block_mask.pytorchblockmaskpruner attribute)": [[209, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner.criterion"]], "neural_compressor.compression.pruner.pruners.block_mask": [[209, "module-neural_compressor.compression.pruner.pruners.block_mask"]], "pattern (neural_compressor.compression.pruner.pruners.block_mask.pytorchblockmaskpruner attribute)": [[209, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner.pattern"]], "reg (neural_compressor.compression.pruner.pruners.block_mask.pytorchblockmaskpruner attribute)": [[209, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner.reg"]], "scheduler (neural_compressor.compression.pruner.pruners.block_mask.pytorchblockmaskpruner attribute)": [[209, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner.scheduler"]], "get_pruner() (in module neural_compressor.compression.pruner.pruners)": [[210, "neural_compressor.compression.pruner.pruners.get_pruner"]], "neural_compressor.compression.pruner.pruners": [[210, "module-neural_compressor.compression.pruner.pruners"]], "parse_valid_pruner_types() (in module neural_compressor.compression.pruner.pruners)": [[210, "neural_compressor.compression.pruner.pruners.parse_valid_pruner_types"]], "pythonmultiheadattentionpruner (class in neural_compressor.compression.pruner.pruners.mha)": [[211, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner"]], "head_masks (neural_compressor.compression.pruner.pruners.mha.pythonmultiheadattentionpruner attribute)": [[211, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner.head_masks"]], "linear_layers (neural_compressor.compression.pruner.pruners.mha.pythonmultiheadattentionpruner attribute)": [[211, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner.linear_layers"]], "mha_compressions (neural_compressor.compression.pruner.pruners.mha.pythonmultiheadattentionpruner attribute)": [[211, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner.mha_compressions"]], "mha_scores (neural_compressor.compression.pruner.pruners.mha.pythonmultiheadattentionpruner attribute)": [[211, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner.mha_scores"]], "neural_compressor.compression.pruner.pruners.mha": [[211, "module-neural_compressor.compression.pruner.pruners.mha"]], "pytorchpatternlockpruner (class in neural_compressor.compression.pruner.pruners.pattern_lock)": [[212, "neural_compressor.compression.pruner.pruners.pattern_lock.PytorchPatternLockPruner"]], "neural_compressor.compression.pruner.pruners.pattern_lock": [[212, "module-neural_compressor.compression.pruner.pruners.pattern_lock"]], "pytorchprogressivepruner (class in neural_compressor.compression.pruner.pruners.progressive)": [[213, "neural_compressor.compression.pruner.pruners.progressive.PytorchProgressivePruner"]], "neural_compressor.compression.pruner.pruners.progressive": [[213, "module-neural_compressor.compression.pruner.pruners.progressive"]], "pytorchretrainfreepruner (class in neural_compressor.compression.pruner.pruners.retrain_free)": [[214, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner"]], "criterion (neural_compressor.compression.pruner.pruners.retrain_free.pytorchretrainfreepruner attribute)": [[214, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner.criterion"]], "neural_compressor.compression.pruner.pruners.retrain_free": [[214, "module-neural_compressor.compression.pruner.pruners.retrain_free"]], "pattern (neural_compressor.compression.pruner.pruners.retrain_free.pytorchretrainfreepruner attribute)": [[214, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner.pattern"]], "reg (neural_compressor.compression.pruner.pruners.retrain_free.pytorchretrainfreepruner attribute)": [[214, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner.reg"]], "scheduler (neural_compressor.compression.pruner.pruners.retrain_free.pytorchretrainfreepruner attribute)": [[214, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner.scheduler"]], "sparsegptpruner (class in neural_compressor.compression.pruner.pruners.sparse_gpt)": [[215, "neural_compressor.compression.pruner.pruners.sparse_gpt.SparseGPTPruner"]], "criterion (neural_compressor.compression.pruner.pruners.sparse_gpt.sparsegptpruner attribute)": [[215, "neural_compressor.compression.pruner.pruners.sparse_gpt.SparseGPTPruner.criterion"]], "neural_compressor.compression.pruner.pruners.sparse_gpt": [[215, "module-neural_compressor.compression.pruner.pruners.sparse_gpt"]], "pattern (neural_compressor.compression.pruner.pruners.sparse_gpt.sparsegptpruner attribute)": [[215, "neural_compressor.compression.pruner.pruners.sparse_gpt.SparseGPTPruner.pattern"]], "reg (neural_compressor.compression.pruner.pruners.sparse_gpt.sparsegptpruner attribute)": [[215, "neural_compressor.compression.pruner.pruners.sparse_gpt.SparseGPTPruner.reg"]], "scheduler (neural_compressor.compression.pruner.pruners.sparse_gpt.sparsegptpruner attribute)": [[215, "neural_compressor.compression.pruner.pruners.sparse_gpt.SparseGPTPruner.scheduler"]], "basepruning (class in neural_compressor.compression.pruner.pruning)": [[216, "neural_compressor.compression.pruner.pruning.BasePruning"]], "basicpruning (class in neural_compressor.compression.pruner.pruning)": [[216, "neural_compressor.compression.pruner.pruning.BasicPruning"]], "retrainfreepruning (class in neural_compressor.compression.pruner.pruning)": [[216, "neural_compressor.compression.pruner.pruning.RetrainFreePruning"]], "sparsegptpruning (class in neural_compressor.compression.pruner.pruning)": [[216, "neural_compressor.compression.pruner.pruning.SparseGPTPruning"]], "config_file_path (neural_compressor.compression.pruner.pruning.basepruning attribute)": [[216, "neural_compressor.compression.pruner.pruning.BasePruning.config_file_path"]], "config_file_path (neural_compressor.compression.pruner.pruning.basicpruning attribute)": [[216, "neural_compressor.compression.pruner.pruning.BasicPruning.config_file_path"]], "config_file_path (neural_compressor.compression.pruner.pruning.retrainfreepruning attribute)": [[216, "neural_compressor.compression.pruner.pruning.RetrainFreePruning.config_file_path"]], "model (neural_compressor.compression.pruner.pruning.basepruning attribute)": [[216, "neural_compressor.compression.pruner.pruning.BasePruning.model"]], "model (neural_compressor.compression.pruner.pruning.basicpruning attribute)": [[216, "neural_compressor.compression.pruner.pruning.BasicPruning.model"]], "model (neural_compressor.compression.pruner.pruning.retrainfreepruning attribute)": [[216, "neural_compressor.compression.pruner.pruning.RetrainFreePruning.model"]], "neural_compressor.compression.pruner.pruning": [[216, "module-neural_compressor.compression.pruner.pruning"]], "pruner_info (neural_compressor.compression.pruner.pruning.basepruning attribute)": [[216, "neural_compressor.compression.pruner.pruning.BasePruning.pruner_info"]], "pruner_info (neural_compressor.compression.pruner.pruning.basicpruning attribute)": [[216, "neural_compressor.compression.pruner.pruning.BasicPruning.pruner_info"]], "pruner_info (neural_compressor.compression.pruner.pruning.retrainfreepruning attribute)": [[216, "neural_compressor.compression.pruner.pruning.RetrainFreePruning.pruner_info"]], "pruners (neural_compressor.compression.pruner.pruning.basepruning attribute)": [[216, "neural_compressor.compression.pruner.pruning.BasePruning.pruners"]], "pruners (neural_compressor.compression.pruner.pruning.basicpruning attribute)": [[216, "neural_compressor.compression.pruner.pruning.BasicPruning.pruners"]], "pruners (neural_compressor.compression.pruner.pruning.retrainfreepruning attribute)": [[216, "neural_compressor.compression.pruner.pruning.RetrainFreePruning.pruners"]], "register_pruning() (in module neural_compressor.compression.pruner.pruning)": [[216, "neural_compressor.compression.pruner.pruning.register_pruning"]], "basereg (class in neural_compressor.compression.pruner.regs)": [[217, "neural_compressor.compression.pruner.regs.BaseReg"]], "grouplasso (class in neural_compressor.compression.pruner.regs)": [[217, "neural_compressor.compression.pruner.regs.GroupLasso"]], "alpha (neural_compressor.compression.pruner.regs.grouplasso attribute)": [[217, "neural_compressor.compression.pruner.regs.GroupLasso.alpha"]], "get_reg() (in module neural_compressor.compression.pruner.regs)": [[217, "neural_compressor.compression.pruner.regs.get_reg"]], "get_reg_type() (in module neural_compressor.compression.pruner.regs)": [[217, "neural_compressor.compression.pruner.regs.get_reg_type"]], "neural_compressor.compression.pruner.regs": [[217, "module-neural_compressor.compression.pruner.regs"]], "reg_terms (neural_compressor.compression.pruner.regs.grouplasso attribute)": [[217, "neural_compressor.compression.pruner.regs.GroupLasso.reg_terms"]], "register_reg() (in module neural_compressor.compression.pruner.regs)": [[217, "neural_compressor.compression.pruner.regs.register_reg"]], "iterativescheduler (class in neural_compressor.compression.pruner.schedulers)": [[218, "neural_compressor.compression.pruner.schedulers.IterativeScheduler"]], "oneshotscheduler (class in neural_compressor.compression.pruner.schedulers)": [[218, "neural_compressor.compression.pruner.schedulers.OneshotScheduler"]], "pruningscheduler (class in neural_compressor.compression.pruner.schedulers)": [[218, "neural_compressor.compression.pruner.schedulers.PruningScheduler"]], "config (neural_compressor.compression.pruner.schedulers.pruningscheduler attribute)": [[218, "neural_compressor.compression.pruner.schedulers.PruningScheduler.config"]], "get_scheduler() (in module neural_compressor.compression.pruner.schedulers)": [[218, "neural_compressor.compression.pruner.schedulers.get_scheduler"]], "neural_compressor.compression.pruner.schedulers": [[218, "module-neural_compressor.compression.pruner.schedulers"]], "register_scheduler() (in module neural_compressor.compression.pruner.schedulers)": [[218, "neural_compressor.compression.pruner.schedulers.register_scheduler"]], "magnitudecriterion (class in neural_compressor.compression.pruner.tf_criteria)": [[219, "neural_compressor.compression.pruner.tf_criteria.MagnitudeCriterion"]], "pruningcriterion (class in neural_compressor.compression.pruner.tf_criteria)": [[219, "neural_compressor.compression.pruner.tf_criteria.PruningCriterion"]], "get_tf_criterion() (in module neural_compressor.compression.pruner.tf_criteria)": [[219, "neural_compressor.compression.pruner.tf_criteria.get_tf_criterion"]], "neural_compressor.compression.pruner.tf_criteria": [[219, "module-neural_compressor.compression.pruner.tf_criteria"]], "register_criterion() (in module neural_compressor.compression.pruner.tf_criteria)": [[219, "neural_compressor.compression.pruner.tf_criteria.register_criterion"]], "scores (neural_compressor.compression.pruner.tf_criteria.magnitudecriterion attribute)": [[219, "neural_compressor.compression.pruner.tf_criteria.MagnitudeCriterion.scores"]], "scores (neural_compressor.compression.pruner.tf_criteria.pruningcriterion attribute)": [[219, "neural_compressor.compression.pruner.tf_criteria.PruningCriterion.scores"]], "check_config() (in module neural_compressor.compression.pruner.utils)": [[220, "neural_compressor.compression.pruner.utils.check_config"]], "check_key_validity() (in module neural_compressor.compression.pruner.utils)": [[220, "neural_compressor.compression.pruner.utils.check_key_validity"]], "collect_layer_inputs() (in module neural_compressor.compression.pruner.utils)": [[220, "neural_compressor.compression.pruner.utils.collect_layer_inputs"]], "generate_pruner_config() (in module neural_compressor.compression.pruner.utils)": [[220, "neural_compressor.compression.pruner.utils.generate_pruner_config"]], "get_layers() (in module neural_compressor.compression.pruner.utils)": [[220, "neural_compressor.compression.pruner.utils.get_layers"]], "get_sparsity_ratio() (in module neural_compressor.compression.pruner.utils)": [[220, "neural_compressor.compression.pruner.utils.get_sparsity_ratio"]], "get_sparsity_ratio_tf() (in module neural_compressor.compression.pruner.utils)": [[220, "neural_compressor.compression.pruner.utils.get_sparsity_ratio_tf"]], "neural_compressor.compression.pruner.utils": [[220, "module-neural_compressor.compression.pruner.utils"]], "parse_last_linear() (in module neural_compressor.compression.pruner.utils)": [[220, "neural_compressor.compression.pruner.utils.parse_last_linear"]], "parse_last_linear_tf() (in module neural_compressor.compression.pruner.utils)": [[220, "neural_compressor.compression.pruner.utils.parse_last_linear_tf"]], "parse_to_prune() (in module neural_compressor.compression.pruner.utils)": [[220, "neural_compressor.compression.pruner.utils.parse_to_prune"]], "parse_to_prune_tf() (in module neural_compressor.compression.pruner.utils)": [[220, "neural_compressor.compression.pruner.utils.parse_to_prune_tf"]], "process_and_check_config() (in module neural_compressor.compression.pruner.utils)": [[220, "neural_compressor.compression.pruner.utils.process_and_check_config"]], "process_config() (in module neural_compressor.compression.pruner.utils)": [[220, "neural_compressor.compression.pruner.utils.process_config"]], "process_weight_config() (in module neural_compressor.compression.pruner.utils)": [[220, "neural_compressor.compression.pruner.utils.process_weight_config"]], "process_yaml_config() (in module neural_compressor.compression.pruner.utils)": [[220, "neural_compressor.compression.pruner.utils.process_yaml_config"]], "reset_none_to_default() (in module neural_compressor.compression.pruner.utils)": [[220, "neural_compressor.compression.pruner.utils.reset_none_to_default"]], "update_params() (in module neural_compressor.compression.pruner.utils)": [[220, "neural_compressor.compression.pruner.utils.update_params"]], "neural_compressor.compression.pruner.wanda": [[221, "module-neural_compressor.compression.pruner.wanda"]], "neural_compressor.compression.pruner.wanda.prune": [[222, "module-neural_compressor.compression.pruner.wanda.prune"]], "prune_wanda() (in module neural_compressor.compression.pruner.wanda.prune)": [[222, "neural_compressor.compression.pruner.wanda.prune.prune_wanda"]], "find_layers() (in module neural_compressor.compression.pruner.wanda.utils)": [[223, "neural_compressor.compression.pruner.wanda.utils.find_layers"]], "neural_compressor.compression.pruner.wanda.utils": [[223, "module-neural_compressor.compression.pruner.wanda.utils"]], "wrappedgpt (class in neural_compressor.compression.pruner.wanda.wrapper)": [[224, "neural_compressor.compression.pruner.wanda.wrapper.WrappedGPT"]], "neural_compressor.compression.pruner.wanda.wrapper": [[224, "module-neural_compressor.compression.pruner.wanda.wrapper"]], "benchmark_conf (class in neural_compressor.conf.config)": [[225, "neural_compressor.conf.config.Benchmark_Conf"]], "conf (class in neural_compressor.conf.config)": [[225, "neural_compressor.conf.config.Conf"]], "defaultconf (class in neural_compressor.conf.config)": [[225, "neural_compressor.conf.config.DefaultConf"]], "distillation_conf (class in neural_compressor.conf.config)": [[225, "neural_compressor.conf.config.Distillation_Conf"]], "graph_optimization_conf (class in neural_compressor.conf.config)": [[225, "neural_compressor.conf.config.Graph_Optimization_Conf"]], "mixedprecision_conf (class in neural_compressor.conf.config)": [[225, "neural_compressor.conf.config.MixedPrecision_Conf"]], "nasconfig (class in neural_compressor.conf.config)": [[225, "neural_compressor.conf.config.NASConfig"]], "prunerv2 (class in neural_compressor.conf.config)": [[225, "neural_compressor.conf.config.PrunerV2"]], "pruning_conf (class in neural_compressor.conf.config)": [[225, "neural_compressor.conf.config.Pruning_Conf"]], "quantization_conf (class in neural_compressor.conf.config)": [[225, "neural_compressor.conf.config.Quantization_Conf"]], "neural_compressor.conf.config": [[225, "module-neural_compressor.conf.config"]], "dotdict (class in neural_compressor.conf.dotdict)": [[226, "neural_compressor.conf.dotdict.DotDict"]], "deep_get() (in module neural_compressor.conf.dotdict)": [[226, "neural_compressor.conf.dotdict.deep_get"]], "deep_set() (in module neural_compressor.conf.dotdict)": [[226, "neural_compressor.conf.dotdict.deep_set"]], "neural_compressor.conf.dotdict": [[226, "module-neural_compressor.conf.dotdict"]], "neural_compressor.conf": [[227, "module-neural_compressor.conf"]], "accuracycriterion (class in neural_compressor.conf.pythonic_config)": [[228, "neural_compressor.conf.pythonic_config.AccuracyCriterion"]], "benchmarkconfig (class in neural_compressor.conf.pythonic_config)": [[228, "neural_compressor.conf.pythonic_config.BenchmarkConfig"]], "distillationconfig (class in neural_compressor.conf.pythonic_config)": [[228, "neural_compressor.conf.pythonic_config.DistillationConfig"]], "knowledgedistillationlossconfig (class in neural_compressor.conf.pythonic_config)": [[228, "neural_compressor.conf.pythonic_config.KnowledgeDistillationLossConfig"]], "options (class in neural_compressor.conf.pythonic_config)": [[228, "neural_compressor.conf.pythonic_config.Options"]], "quantizationconfig (class in neural_compressor.conf.pythonic_config)": [[228, "neural_compressor.conf.pythonic_config.QuantizationConfig"]], "weightpruningconfig (class in neural_compressor.conf.pythonic_config)": [[228, "neural_compressor.conf.pythonic_config.WeightPruningConfig"]], "neural_compressor.conf.pythonic_config": [[228, "module-neural_compressor.conf.pythonic_config"]], "accuracycriterion (class in neural_compressor.config)": [[229, "neural_compressor.config.AccuracyCriterion"]], "benchmarkconfig (class in neural_compressor.config)": [[229, "neural_compressor.config.BenchmarkConfig"]], "distillationconfig (class in neural_compressor.config)": [[229, "neural_compressor.config.DistillationConfig"]], "dotdict (class in neural_compressor.config)": [[229, "neural_compressor.config.DotDict"]], "exportconfig (class in neural_compressor.config)": [[229, "neural_compressor.config.ExportConfig"]], "hpoconfig (class in neural_compressor.config)": [[229, "neural_compressor.config.HPOConfig"]], "intermediatelayersknowledgedistillationlossconfig (class in neural_compressor.config)": [[229, "neural_compressor.config.IntermediateLayersKnowledgeDistillationLossConfig"]], "keras (class in neural_compressor.config)": [[229, "neural_compressor.config.Keras"]], "knowledgedistillationlossconfig (class in neural_compressor.config)": [[229, "neural_compressor.config.KnowledgeDistillationLossConfig"]], "mxnet (class in neural_compressor.config)": [[229, "neural_compressor.config.MXNet"]], "mixedprecisionconfig (class in neural_compressor.config)": [[229, "neural_compressor.config.MixedPrecisionConfig"]], "nasconfig (class in neural_compressor.config)": [[229, "neural_compressor.config.NASConfig"]], "onnx (class in neural_compressor.config)": [[229, "neural_compressor.config.ONNX"]], "onnxqlinear2qdqconfig (class in neural_compressor.config)": [[229, "neural_compressor.config.ONNXQlinear2QDQConfig"]], "options (class in neural_compressor.config)": [[229, "neural_compressor.config.Options"]], "posttrainingquantconfig (class in neural_compressor.config)": [[229, "neural_compressor.config.PostTrainingQuantConfig"]], "pytorch (class in neural_compressor.config)": [[229, "neural_compressor.config.PyTorch"]], "quantizationawaretrainingconfig (class in neural_compressor.config)": [[229, "neural_compressor.config.QuantizationAwareTrainingConfig"]], "selfknowledgedistillationlossconfig (class in neural_compressor.config)": [[229, "neural_compressor.config.SelfKnowledgeDistillationLossConfig"]], "tf2onnxconfig (class in neural_compressor.config)": [[229, "neural_compressor.config.TF2ONNXConfig"]], "tensorflow (class in neural_compressor.config)": [[229, "neural_compressor.config.TensorFlow"]], "torch2onnxconfig (class in neural_compressor.config)": [[229, "neural_compressor.config.Torch2ONNXConfig"]], "tuningcriterion (class in neural_compressor.config)": [[229, "neural_compressor.config.TuningCriterion"]], "weightpruningconfig (class in neural_compressor.config)": [[229, "neural_compressor.config.WeightPruningConfig"]], "neural_compressor.config": [[229, "module-neural_compressor.config"]], "neural_compressor.contrib": [[230, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[231, "module-neural_compressor.contrib.strategy"]], "sigopttunestrategy (class in neural_compressor.contrib.strategy.sigopt)": [[232, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.sigopt": [[232, "module-neural_compressor.contrib.strategy.sigopt"]], "tpetunestrategy (class in neural_compressor.contrib.strategy.tpe)": [[233, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy"]], "neural_compressor.contrib.strategy.tpe": [[233, "module-neural_compressor.contrib.strategy.tpe"]], "basedataloader (class in neural_compressor.data.dataloaders.base_dataloader)": [[234, "neural_compressor.data.dataloaders.base_dataloader.BaseDataLoader"]], "neural_compressor.data.dataloaders.base_dataloader": [[234, "module-neural_compressor.data.dataloaders.base_dataloader"]], "dataloader (class in neural_compressor.data.dataloaders.dataloader)": [[235, "neural_compressor.data.dataloaders.dataloader.DataLoader"]], "check_dataloader() (in module neural_compressor.data.dataloaders.dataloader)": [[235, "neural_compressor.data.dataloaders.dataloader.check_dataloader"]], "neural_compressor.data.dataloaders.dataloader": [[235, "module-neural_compressor.data.dataloaders.dataloader"]], "defaultdataloader (class in neural_compressor.data.dataloaders.default_dataloader)": [[236, "neural_compressor.data.dataloaders.default_dataloader.DefaultDataLoader"]], "default_collate() (in module neural_compressor.data.dataloaders.default_dataloader)": [[236, "neural_compressor.data.dataloaders.default_dataloader.default_collate"]], "neural_compressor.data.dataloaders.default_dataloader": [[236, "module-neural_compressor.data.dataloaders.default_dataloader"]], "fetcher (class in neural_compressor.data.dataloaders.fetcher)": [[237, "neural_compressor.data.dataloaders.fetcher.Fetcher"]], "indexfetcher (class in neural_compressor.data.dataloaders.fetcher)": [[237, "neural_compressor.data.dataloaders.fetcher.IndexFetcher"]], "iterablefetcher (class in neural_compressor.data.dataloaders.fetcher)": [[237, "neural_compressor.data.dataloaders.fetcher.IterableFetcher"]], "neural_compressor.data.dataloaders.fetcher": [[237, "module-neural_compressor.data.dataloaders.fetcher"]], "neural_compressor.data.dataloaders": [[238, "module-neural_compressor.data.dataloaders"]], "mxnetdataloader (class in neural_compressor.data.dataloaders.mxnet_dataloader)": [[239, "neural_compressor.data.dataloaders.mxnet_dataloader.MXNetDataLoader"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[239, "module-neural_compressor.data.dataloaders.mxnet_dataloader"]], "onnxrtbertdataloader (class in neural_compressor.data.dataloaders.onnxrt_dataloader)": [[240, "neural_compressor.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader"]], "onnxrtdataloader (class in neural_compressor.data.dataloaders.onnxrt_dataloader)": [[240, "neural_compressor.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[240, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"]], "pytorchdataloader (class in neural_compressor.data.dataloaders.pytorch_dataloader)": [[241, "neural_compressor.data.dataloaders.pytorch_dataloader.PyTorchDataLoader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[241, "module-neural_compressor.data.dataloaders.pytorch_dataloader"]], "batchsampler (class in neural_compressor.data.dataloaders.sampler)": [[242, "neural_compressor.data.dataloaders.sampler.BatchSampler"]], "iterablesampler (class in neural_compressor.data.dataloaders.sampler)": [[242, "neural_compressor.data.dataloaders.sampler.IterableSampler"]], "sampler (class in neural_compressor.data.dataloaders.sampler)": [[242, "neural_compressor.data.dataloaders.sampler.Sampler"]], "sequentialsampler (class in neural_compressor.data.dataloaders.sampler)": [[242, "neural_compressor.data.dataloaders.sampler.SequentialSampler"]], "neural_compressor.data.dataloaders.sampler": [[242, "module-neural_compressor.data.dataloaders.sampler"]], "tfdatadataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[243, "neural_compressor.data.dataloaders.tensorflow_dataloader.TFDataDataLoader"]], "tensorflowbertdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[243, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader"]], "tensorflowdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[243, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader"]], "tensorflowmodelzoobertdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[243, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[243, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"]], "inputfeatures (class in neural_compressor.data.datasets.bert_dataset)": [[244, "neural_compressor.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[244, "neural_compressor.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.data.datasets.bert_dataset)": [[244, "neural_compressor.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[244, "neural_compressor.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[244, "neural_compressor.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[244, "neural_compressor.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.data.datasets.bert_dataset)": [[244, "neural_compressor.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.data.datasets.bert_dataset)": [[244, "neural_compressor.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.data.datasets.bert_dataset": [[244, "module-neural_compressor.data.datasets.bert_dataset"]], "coconpy (class in neural_compressor.data.datasets.coco_dataset)": [[245, "neural_compressor.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.data.datasets.coco_dataset)": [[245, "neural_compressor.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.data.datasets.coco_dataset)": [[245, "neural_compressor.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.data.datasets.coco_dataset)": [[245, "neural_compressor.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.data.datasets.coco_dataset": [[245, "module-neural_compressor.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.data.datasets.dataset)": [[246, "neural_compressor.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.data.datasets.dataset)": [[246, "neural_compressor.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.data.datasets.dataset)": [[246, "neural_compressor.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.data.datasets.dataset)": [[246, "neural_compressor.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.data.datasets.dataset)": [[246, "neural_compressor.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.data.datasets.dataset)": [[246, "neural_compressor.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.data.datasets.dataset)": [[246, "neural_compressor.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.data.datasets.dataset)": [[246, "neural_compressor.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.data.datasets.dataset)": [[246, "neural_compressor.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.data.datasets.dataset)": [[246, "neural_compressor.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.data.datasets.dataset)": [[246, "neural_compressor.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.data.datasets.dataset)": [[246, "neural_compressor.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.data.datasets.dataset)": [[246, "neural_compressor.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.data.datasets.dataset)": [[246, "neural_compressor.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.data.datasets.dataset)": [[246, "neural_compressor.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.data.datasets.dataset)": [[246, "neural_compressor.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.data.datasets.dataset)": [[246, "neural_compressor.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.data.datasets.dataset)": [[246, "neural_compressor.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.data.datasets.dataset)": [[246, "neural_compressor.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.data.datasets.dataset)": [[246, "neural_compressor.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.data.datasets.dataset)": [[246, "neural_compressor.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.data.datasets.dataset)": [[246, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.datasets.dataset)": [[246, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflow (class in neural_compressor.data.datasets.dataset)": [[246, "neural_compressor.data.datasets.dataset.Tensorflow"]], "tensorflowcifar10 (class in neural_compressor.data.datasets.dataset)": [[246, "neural_compressor.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.data.datasets.dataset)": [[246, "neural_compressor.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.data.datasets.dataset)": [[246, "neural_compressor.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.data.datasets.dataset)": [[246, "neural_compressor.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagerecord (class in neural_compressor.data.datasets.dataset)": [[246, "neural_compressor.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.data.datasets.dataset)": [[246, "neural_compressor.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.data.datasets.dataset)": [[246, "neural_compressor.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.data.datasets.dataset)": [[246, "neural_compressor.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.data.datasets.dataset)": [[246, "neural_compressor.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.data.datasets.dataset)": [[246, "neural_compressor.data.datasets.dataset.check_integrity"]], "dataset_registry() (in module neural_compressor.data.datasets.dataset)": [[246, "neural_compressor.data.datasets.dataset.dataset_registry"]], "download_url() (in module neural_compressor.data.datasets.dataset)": [[246, "neural_compressor.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.data.datasets.dataset)": [[246, "neural_compressor.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.data.datasets.dataset)": [[246, "neural_compressor.data.datasets.dataset.gen_bar_updater"]], "neural_compressor.data.datasets.dataset": [[246, "module-neural_compressor.data.datasets.dataset"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset)": [[247, "neural_compressor.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset": [[247, "module-neural_compressor.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[248, "neural_compressor.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[248, "neural_compressor.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[248, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[249, "neural_compressor.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[249, "neural_compressor.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[249, "neural_compressor.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[249, "neural_compressor.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[249, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[249, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.data.datasets.imagenet_dataset": [[249, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[250, "module-neural_compressor.data.datasets"]], "styletransferdataset (class in neural_compressor.data.datasets.style_transfer_dataset)": [[251, "neural_compressor.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.data.datasets.style_transfer_dataset": [[251, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.data.filters.coco_filter)": [[252, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.data.filters.coco_filter)": [[252, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.coco_filter": [[252, "module-neural_compressor.data.filters.coco_filter"]], "filters (class in neural_compressor.data.filters.filter)": [[253, "neural_compressor.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.data.filters.filter)": [[253, "neural_compressor.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.data.filters.filter)": [[253, "neural_compressor.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.data.filters.filter)": [[253, "neural_compressor.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.data.filters.filter)": [[253, "neural_compressor.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.data.filters.filter)": [[253, "neural_compressor.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.data.filters.filter)": [[253, "neural_compressor.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.data.filters.filter)": [[253, "neural_compressor.data.filters.filter.filter_registry"]], "neural_compressor.data.filters.filter": [[253, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.filters": [[254, "module-neural_compressor.data.filters"]], "neural_compressor.data": [[255, "module-neural_compressor.data"]], "parsedecodecocotransform (class in neural_compressor.data.transforms.coco_transform)": [[256, "neural_compressor.data.transforms.coco_transform.ParseDecodeCocoTransform"]], "neural_compressor.data.transforms.coco_transform": [[256, "module-neural_compressor.data.transforms.coco_transform"]], "bilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[257, "neural_compressor.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.data.transforms.imagenet_transform)": [[257, "neural_compressor.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[257, "neural_compressor.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[257, "neural_compressor.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.data.transforms.imagenet_transform)": [[257, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[257, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.data.transforms.imagenet_transform)": [[257, "neural_compressor.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.data.transforms.imagenet_transform)": [[257, "neural_compressor.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[257, "neural_compressor.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "tensorflowshiftrescale (class in neural_compressor.data.transforms.imagenet_transform)": [[257, "neural_compressor.data.transforms.imagenet_transform.TensorflowShiftRescale"]], "tensorflowtransposelastchannel (class in neural_compressor.data.transforms.imagenet_transform)": [[257, "neural_compressor.data.transforms.imagenet_transform.TensorflowTransposeLastChannel"]], "neural_compressor.data.transforms.imagenet_transform": [[257, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[258, "module-neural_compressor.data.transforms"]], "postprocess (class in neural_compressor.data.transforms.postprocess)": [[259, "neural_compressor.data.transforms.postprocess.Postprocess"]], "neural_compressor.data.transforms.postprocess": [[259, "module-neural_compressor.data.transforms.postprocess"]], "basictokenizer (class in neural_compressor.data.transforms.tokenization)": [[260, "neural_compressor.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.data.transforms.tokenization)": [[260, "neural_compressor.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.data.transforms.tokenization)": [[260, "neural_compressor.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.data.transforms.tokenization)": [[260, "neural_compressor.data.transforms.tokenization.convert_by_vocab"]], "convert_to_unicode() (in module neural_compressor.data.transforms.tokenization)": [[260, "neural_compressor.data.transforms.tokenization.convert_to_unicode"]], "load_vocab() (in module neural_compressor.data.transforms.tokenization)": [[260, "neural_compressor.data.transforms.tokenization.load_vocab"]], "neural_compressor.data.transforms.tokenization": [[260, "module-neural_compressor.data.transforms.tokenization"]], "whitespace_tokenize() (in module neural_compressor.data.transforms.tokenization)": [[260, "neural_compressor.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.TRANSFORMS"], [261, "neural_compressor.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.get_final_text"]], "get_torchvision_map() (in module neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.get_torchvision_map"]], "neural_compressor.data.transforms.transform": [[261, "module-neural_compressor.data.transforms.transform"]], "read_squad_examples() (in module neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.read_squad_examples"]], "transform_registry() (in module neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.transform_registry"]], "benchmark (class in neural_compressor.experimental.benchmark)": [[262, "neural_compressor.experimental.benchmark.Benchmark"]], "get_architecture() (in module neural_compressor.experimental.benchmark)": [[262, "neural_compressor.experimental.benchmark.get_architecture"]], "get_bounded_threads() (in module neural_compressor.experimental.benchmark)": [[262, "neural_compressor.experimental.benchmark.get_bounded_threads"]], "get_core_ids() (in module neural_compressor.experimental.benchmark)": [[262, "neural_compressor.experimental.benchmark.get_core_ids"]], "get_physical_ids() (in module neural_compressor.experimental.benchmark)": [[262, "neural_compressor.experimental.benchmark.get_physical_ids"]], "get_threads() (in module neural_compressor.experimental.benchmark)": [[262, "neural_compressor.experimental.benchmark.get_threads"]], "get_threads_per_core() (in module neural_compressor.experimental.benchmark)": [[262, "neural_compressor.experimental.benchmark.get_threads_per_core"]], "neural_compressor.experimental.benchmark": [[262, "module-neural_compressor.experimental.benchmark"]], "set_all_env_var() (in module neural_compressor.experimental.benchmark)": [[262, "neural_compressor.experimental.benchmark.set_all_env_var"]], "set_env_var() (in module neural_compressor.experimental.benchmark)": [[262, "neural_compressor.experimental.benchmark.set_env_var"]], "criterions (class in neural_compressor.experimental.common.criterion)": [[263, "neural_compressor.experimental.common.criterion.Criterions"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[263, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationframework (class in neural_compressor.experimental.common.criterion)": [[263, "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework"]], "knowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[263, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss"]], "pytorchcriterions (class in neural_compressor.experimental.common.criterion)": [[263, "neural_compressor.experimental.common.criterion.PyTorchCriterions"]], "pytorchintermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[263, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss"]], "pytorchintermediatelayersknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[263, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"]], "pytorchknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[263, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss"]], "pytorchknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[263, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLossWrapper"]], "selfknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[263, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss"]], "tensorflowcriterions (class in neural_compressor.experimental.common.criterion)": [[263, "neural_compressor.experimental.common.criterion.TensorflowCriterions"]], "tensorflowknowledgedistillationlossexternal (class in neural_compressor.experimental.common.criterion)": [[263, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal"]], "criterion_registry() (in module neural_compressor.experimental.common.criterion)": [[263, "neural_compressor.experimental.common.criterion.criterion_registry"]], "neural_compressor.experimental.common.criterion": [[263, "module-neural_compressor.experimental.common.criterion"]], "dataloader (class in neural_compressor.experimental.common.dataloader)": [[264, "neural_compressor.experimental.common.dataloader.DataLoader"]], "neural_compressor.experimental.common.dataloader": [[264, "module-neural_compressor.experimental.common.dataloader"]], "neural_compressor.experimental.common": [[265, "module-neural_compressor.experimental.common"]], "metric (class in neural_compressor.experimental.common.metric)": [[266, "neural_compressor.experimental.common.metric.Metric"]], "neural_compressor.experimental.common.metric": [[266, "module-neural_compressor.experimental.common.metric"]], "model (class in neural_compressor.experimental.common.model)": [[267, "neural_compressor.experimental.common.model.Model"]], "neural_compressor.experimental.common.model": [[267, "module-neural_compressor.experimental.common.model"]], "set_backend() (in module neural_compressor.experimental.common.model)": [[267, "neural_compressor.experimental.common.model.set_backend"]], "optimizers (class in neural_compressor.experimental.common.optimizer)": [[268, "neural_compressor.experimental.common.optimizer.Optimizers"]], "pytorchoptimizers (class in neural_compressor.experimental.common.optimizer)": [[268, "neural_compressor.experimental.common.optimizer.PyTorchOptimizers"]], "pytorchsgd (class in neural_compressor.experimental.common.optimizer)": [[268, "neural_compressor.experimental.common.optimizer.PyTorchSGD"]], "tensorflowadamw (class in neural_compressor.experimental.common.optimizer)": [[268, "neural_compressor.experimental.common.optimizer.TensorFlowAdamW"]], "tensorflowsgd (class in neural_compressor.experimental.common.optimizer)": [[268, "neural_compressor.experimental.common.optimizer.TensorFlowSGD"]], "tensorflowoptimizers (class in neural_compressor.experimental.common.optimizer)": [[268, "neural_compressor.experimental.common.optimizer.TensorflowOptimizers"]], "neural_compressor.experimental.common.optimizer": [[268, "module-neural_compressor.experimental.common.optimizer"]], "optimizer_registry() (in module neural_compressor.experimental.common.optimizer)": [[268, "neural_compressor.experimental.common.optimizer.optimizer_registry"]], "postprocess (class in neural_compressor.experimental.common.postprocess)": [[269, "neural_compressor.experimental.common.postprocess.Postprocess"]], "neural_compressor.experimental.common.postprocess": [[269, "module-neural_compressor.experimental.common.postprocess"]], "get_activation() (in module neural_compressor.experimental.common.torch_utils)": [[270, "neural_compressor.experimental.common.torch_utils.get_activation"]], "neural_compressor.experimental.common.torch_utils": [[270, "module-neural_compressor.experimental.common.torch_utils"]], "record_output() (in module neural_compressor.experimental.common.torch_utils)": [[270, "neural_compressor.experimental.common.torch_utils.record_output"]], "component (class in neural_compressor.experimental.component)": [[271, "neural_compressor.experimental.component.Component"]], "neural_compressor.experimental.component": [[271, "module-neural_compressor.experimental.component"]], "neural_compressor.experimental.compression": [[272, "module-neural_compressor.experimental.compression"]], "neural_compressor.experimental.contrib": [[273, "module-neural_compressor.experimental.contrib"]], "neural_compressor.experimental.contrib.strategy": [[274, "module-neural_compressor.experimental.contrib.strategy"]], "sigopttunestrategy (class in neural_compressor.experimental.contrib.strategy.sigopt)": [[275, "neural_compressor.experimental.contrib.strategy.sigopt.SigOptTuneStrategy"]], "neural_compressor.experimental.contrib.strategy.sigopt": [[275, "module-neural_compressor.experimental.contrib.strategy.sigopt"]], "tpetunestrategy (class in neural_compressor.experimental.contrib.strategy.tpe)": [[276, "neural_compressor.experimental.contrib.strategy.tpe.TpeTuneStrategy"]], "neural_compressor.experimental.contrib.strategy.tpe": [[276, "module-neural_compressor.experimental.contrib.strategy.tpe"]], "basedataloader (class in neural_compressor.experimental.data.dataloaders.base_dataloader)": [[277, "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[277, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[278, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "defaultdataloader (class in neural_compressor.experimental.data.dataloaders.default_dataloader)": [[279, "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader"]], "default_collate() (in module neural_compressor.experimental.data.dataloaders.default_dataloader)": [[279, "neural_compressor.experimental.data.dataloaders.default_dataloader.default_collate"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[279, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "fetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[280, "neural_compressor.experimental.data.dataloaders.fetcher.Fetcher"]], "indexfetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[280, "neural_compressor.experimental.data.dataloaders.fetcher.IndexFetcher"]], "iterablefetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[280, "neural_compressor.experimental.data.dataloaders.fetcher.IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[280, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[281, "module-neural_compressor.experimental.data.dataloaders"]], "mxnetdataloader (class in neural_compressor.experimental.data.dataloaders.mxnet_dataloader)": [[282, "neural_compressor.experimental.data.dataloaders.mxnet_dataloader.MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[282, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "onnxrtbertdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[283, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader"]], "onnxrtdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[283, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[283, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "pytorchdataloader (class in neural_compressor.experimental.data.dataloaders.pytorch_dataloader)": [[284, "neural_compressor.experimental.data.dataloaders.pytorch_dataloader.PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[284, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "batchsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[285, "neural_compressor.experimental.data.dataloaders.sampler.BatchSampler"]], "iterablesampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[285, "neural_compressor.experimental.data.dataloaders.sampler.IterableSampler"]], "sampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[285, "neural_compressor.experimental.data.dataloaders.sampler.Sampler"]], "sequentialsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[285, "neural_compressor.experimental.data.dataloaders.sampler.SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.sampler": [[285, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "tfdatadataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[286, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TFDataDataLoader"]], "tensorflowbertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[286, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader"]], "tensorflowdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[286, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader"]], "tensorflowmodelzoobertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[286, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[286, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "inputfeatures (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[287, "neural_compressor.experimental.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[287, "neural_compressor.experimental.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[287, "neural_compressor.experimental.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[287, "neural_compressor.experimental.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[287, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[287, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[287, "neural_compressor.experimental.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[287, "neural_compressor.experimental.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[287, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "coconpy (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[288, "neural_compressor.experimental.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[288, "neural_compressor.experimental.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[288, "neural_compressor.experimental.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[288, "neural_compressor.experimental.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[288, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[289, "neural_compressor.experimental.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[289, "neural_compressor.experimental.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.experimental.data.datasets.dataset)": [[289, "neural_compressor.experimental.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.experimental.data.datasets.dataset)": [[289, "neural_compressor.experimental.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[289, "neural_compressor.experimental.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[289, "neural_compressor.experimental.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.experimental.data.datasets.dataset)": [[289, "neural_compressor.experimental.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.experimental.data.datasets.dataset)": [[289, "neural_compressor.experimental.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[289, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[289, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[289, "neural_compressor.experimental.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[289, "neural_compressor.experimental.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[289, "neural_compressor.experimental.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[289, "neural_compressor.experimental.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[289, "neural_compressor.experimental.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[289, "neural_compressor.experimental.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[289, "neural_compressor.experimental.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[289, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[289, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[289, "neural_compressor.experimental.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[289, "neural_compressor.experimental.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.experimental.data.datasets.dataset)": [[289, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.datasets.dataset)": [[289, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflowcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[289, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[289, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[289, "neural_compressor.experimental.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[289, "neural_compressor.experimental.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[289, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageFolder"]], "tensorflowimagerecord (class in neural_compressor.experimental.data.datasets.dataset)": [[289, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[289, "neural_compressor.experimental.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.experimental.data.datasets.dataset)": [[289, "neural_compressor.experimental.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.experimental.data.datasets.dataset)": [[289, "neural_compressor.experimental.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.experimental.data.datasets.dataset)": [[289, "neural_compressor.experimental.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.experimental.data.datasets.dataset)": [[289, "neural_compressor.experimental.data.datasets.dataset.check_integrity"]], "dataset_registry() (in module neural_compressor.experimental.data.datasets.dataset)": [[289, "neural_compressor.experimental.data.datasets.dataset.dataset_registry"]], "download_url() (in module neural_compressor.experimental.data.datasets.dataset)": [[289, "neural_compressor.experimental.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.experimental.data.datasets.dataset)": [[289, "neural_compressor.experimental.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.experimental.data.datasets.dataset)": [[289, "neural_compressor.experimental.data.datasets.dataset.gen_bar_updater"]], "neural_compressor.experimental.data.datasets.dataset": [[289, "module-neural_compressor.experimental.data.datasets.dataset"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset)": [[290, "neural_compressor.experimental.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[290, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[291, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[291, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[291, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[292, "neural_compressor.experimental.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[292, "neural_compressor.experimental.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[292, "neural_compressor.experimental.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[292, "neural_compressor.experimental.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[292, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[292, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[292, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "neural_compressor.experimental.data.datasets": [[293, "module-neural_compressor.experimental.data.datasets"]], "styletransferdataset (class in neural_compressor.experimental.data.datasets.style_transfer_dataset)": [[294, "neural_compressor.experimental.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[294, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[295, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[295, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.coco_filter": [[295, "module-neural_compressor.experimental.data.filters.coco_filter"]], "filters (class in neural_compressor.experimental.data.filters.filter)": [[296, "neural_compressor.experimental.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.experimental.data.filters.filter)": [[296, "neural_compressor.experimental.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.experimental.data.filters.filter)": [[296, "neural_compressor.experimental.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.experimental.data.filters.filter)": [[296, "neural_compressor.experimental.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.experimental.data.filters.filter)": [[296, "neural_compressor.experimental.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.experimental.data.filters.filter)": [[296, "neural_compressor.experimental.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.experimental.data.filters.filter)": [[296, "neural_compressor.experimental.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.experimental.data.filters.filter)": [[296, "neural_compressor.experimental.data.filters.filter.filter_registry"]], "neural_compressor.experimental.data.filters.filter": [[296, "module-neural_compressor.experimental.data.filters.filter"]], "neural_compressor.experimental.data.filters": [[297, "module-neural_compressor.experimental.data.filters"]], "neural_compressor.experimental.data": [[298, "module-neural_compressor.experimental.data"]], "bilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[299, "neural_compressor.experimental.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[299, "neural_compressor.experimental.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[299, "neural_compressor.experimental.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[299, "neural_compressor.experimental.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[299, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[299, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[299, "neural_compressor.experimental.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[299, "neural_compressor.experimental.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[299, "neural_compressor.experimental.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[299, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "neural_compressor.experimental.data.transforms": [[300, "module-neural_compressor.experimental.data.transforms"]], "basictokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[301, "neural_compressor.experimental.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[301, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[301, "neural_compressor.experimental.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[301, "neural_compressor.experimental.data.transforms.tokenization.convert_by_vocab"]], "convert_to_unicode() (in module neural_compressor.experimental.data.transforms.tokenization)": [[301, "neural_compressor.experimental.data.transforms.tokenization.convert_to_unicode"]], "load_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[301, "neural_compressor.experimental.data.transforms.tokenization.load_vocab"]], "neural_compressor.experimental.data.transforms.tokenization": [[301, "module-neural_compressor.experimental.data.transforms.tokenization"]], "whitespace_tokenize() (in module neural_compressor.experimental.data.transforms.tokenization)": [[301, "neural_compressor.experimental.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.TRANSFORMS"], [302, "neural_compressor.experimental.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.get_final_text"]], "get_torchvision_map() (in module neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.get_torchvision_map"]], "neural_compressor.experimental.data.transforms.transform": [[302, "module-neural_compressor.experimental.data.transforms.transform"]], "read_squad_examples() (in module neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.read_squad_examples"]], "transform_registry() (in module neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.transform_registry"]], "distillation (class in neural_compressor.experimental.distillation)": [[303, "neural_compressor.experimental.distillation.Distillation"]], "_epoch_ran (neural_compressor.experimental.distillation.distillation attribute)": [[303, "neural_compressor.experimental.distillation.Distillation._epoch_ran"]], "best_model (neural_compressor.experimental.distillation.distillation attribute)": [[303, "neural_compressor.experimental.distillation.Distillation.best_model"]], "best_score (neural_compressor.experimental.distillation.distillation attribute)": [[303, "neural_compressor.experimental.distillation.Distillation.best_score"]], "eval_frequency (neural_compressor.experimental.distillation.distillation attribute)": [[303, "neural_compressor.experimental.distillation.Distillation.eval_frequency"]], "neural_compressor.experimental.distillation": [[303, "module-neural_compressor.experimental.distillation"]], "neural_compressor.experimental.export": [[304, "module-neural_compressor.experimental.export"]], "check_model() (in module neural_compressor.experimental.export.qlinear2qdq)": [[305, "neural_compressor.experimental.export.qlinear2qdq.check_model"]], "neural_compressor.experimental.export.qlinear2qdq": [[305, "module-neural_compressor.experimental.export.qlinear2qdq"]], "onnx_qlinear_to_qdq() (in module neural_compressor.experimental.export.qlinear2qdq)": [[305, "neural_compressor.experimental.export.qlinear2qdq.onnx_qlinear_to_qdq"]], "neural_compressor.experimental.export.tf2onnx": [[306, "module-neural_compressor.experimental.export.tf2onnx"]], "tf_to_fp32_onnx() (in module neural_compressor.experimental.export.tf2onnx)": [[306, "neural_compressor.experimental.export.tf2onnx.tf_to_fp32_onnx"]], "tf_to_int8_onnx() (in module neural_compressor.experimental.export.tf2onnx)": [[306, "neural_compressor.experimental.export.tf2onnx.tf_to_int8_onnx"]], "dynamic_quant_export() (in module neural_compressor.experimental.export.torch2onnx)": [[307, "neural_compressor.experimental.export.torch2onnx.dynamic_quant_export"]], "get_node_mapping() (in module neural_compressor.experimental.export.torch2onnx)": [[307, "neural_compressor.experimental.export.torch2onnx.get_node_mapping"]], "get_quantizable_onnx_ops() (in module neural_compressor.experimental.export.torch2onnx)": [[307, "neural_compressor.experimental.export.torch2onnx.get_quantizable_onnx_ops"]], "neural_compressor.experimental.export.torch2onnx": [[307, "module-neural_compressor.experimental.export.torch2onnx"]], "static_quant_export() (in module neural_compressor.experimental.export.torch2onnx)": [[307, "neural_compressor.experimental.export.torch2onnx.static_quant_export"]], "torch_to_fp32_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[307, "neural_compressor.experimental.export.torch2onnx.torch_to_fp32_onnx"]], "torch_to_int8_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[307, "neural_compressor.experimental.export.torch2onnx.torch_to_int8_onnx"]], "graph_optimization (class in neural_compressor.experimental.graph_optimization)": [[308, "neural_compressor.experimental.graph_optimization.Graph_Optimization"]], "neural_compressor.experimental.graph_optimization": [[308, "module-neural_compressor.experimental.graph_optimization"]], "neural_compressor.experimental": [[309, "module-neural_compressor.experimental"]], "bleu (class in neural_compressor.experimental.metric.bleu)": [[310, "neural_compressor.experimental.metric.bleu.BLEU"]], "unicoderegex (class in neural_compressor.experimental.metric.bleu)": [[310, "neural_compressor.experimental.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.experimental.metric.bleu)": [[310, "neural_compressor.experimental.metric.bleu.bleu_tokenize"]], "labels (neural_compressor.experimental.metric.bleu.bleu attribute)": [[310, "neural_compressor.experimental.metric.bleu.BLEU.labels"]], "neural_compressor.experimental.metric.bleu": [[310, "module-neural_compressor.experimental.metric.bleu"]], "nondigit_punct_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[310, "neural_compressor.experimental.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "predictions (neural_compressor.experimental.metric.bleu.bleu attribute)": [[310, "neural_compressor.experimental.metric.bleu.BLEU.predictions"]], "punct_nondigit_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[310, "neural_compressor.experimental.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "symbol_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[310, "neural_compressor.experimental.metric.bleu.UnicodeRegex.symbol_re"]], "compute_bleu() (in module neural_compressor.experimental.metric.bleu_util)": [[311, "neural_compressor.experimental.metric.bleu_util.compute_bleu"]], "neural_compressor.experimental.metric.bleu_util": [[311, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[312, "module-neural_compressor.experimental.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.experimental.metric.coco_tools)": [[313, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.experimental.metric.coco_tools)": [[313, "neural_compressor.experimental.metric.coco_tools.COCOWrapper"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.experimental.metric.coco_tools)": [[313, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.experimental.metric.coco_tools)": [[313, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.experimental.metric.coco_tools)": [[313, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "dataset (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[313, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[313, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.experimental.metric.coco_tools": [[313, "module-neural_compressor.experimental.metric.coco_tools"]], "evaluate() (in module neural_compressor.experimental.metric.evaluate_squad)": [[314, "neural_compressor.experimental.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[314, "neural_compressor.experimental.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[314, "neural_compressor.experimental.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.evaluate_squad)": [[314, "neural_compressor.experimental.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.evaluate_squad": [[314, "module-neural_compressor.experimental.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.experimental.metric.f1)": [[315, "neural_compressor.experimental.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.experimental.metric.f1)": [[315, "neural_compressor.experimental.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.f1)": [[315, "neural_compressor.experimental.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[315, "module-neural_compressor.experimental.metric.f1"]], "normalize_answer() (in module neural_compressor.experimental.metric.f1)": [[315, "neural_compressor.experimental.metric.f1.normalize_answer"]], "neural_compressor.experimental.metric": [[316, "module-neural_compressor.experimental.metric"]], "accuracy (class in neural_compressor.experimental.metric.metric)": [[317, "neural_compressor.experimental.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.experimental.metric.metric)": [[317, "neural_compressor.experimental.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.experimental.metric.metric)": [[317, "neural_compressor.experimental.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.experimental.metric.metric)": [[317, "neural_compressor.experimental.metric.metric.F1"]], "generaltopk (class in neural_compressor.experimental.metric.metric)": [[317, "neural_compressor.experimental.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.experimental.metric.metric)": [[317, "neural_compressor.experimental.metric.metric.Loss"]], "mae (class in neural_compressor.experimental.metric.metric)": [[317, "neural_compressor.experimental.metric.metric.MAE"]], "metrics (class in neural_compressor.experimental.metric.metric)": [[317, "neural_compressor.experimental.metric.metric.METRICS"]], "mse (class in neural_compressor.experimental.metric.metric)": [[317, "neural_compressor.experimental.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.experimental.metric.metric)": [[317, "neural_compressor.experimental.metric.metric.MXNetMetrics"]], "onnxrtglue (class in neural_compressor.experimental.metric.metric)": [[317, "neural_compressor.experimental.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.experimental.metric.metric)": [[317, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.experimental.metric.metric)": [[317, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.experimental.metric.metric)": [[317, "neural_compressor.experimental.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.experimental.metric.metric)": [[317, "neural_compressor.experimental.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.experimental.metric.metric)": [[317, "neural_compressor.experimental.metric.metric.RMSE"]], "roc (class in neural_compressor.experimental.metric.metric)": [[317, "neural_compressor.experimental.metric.metric.ROC"]], "squadf1 (class in neural_compressor.experimental.metric.metric)": [[317, "neural_compressor.experimental.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.experimental.metric.metric)": [[317, "neural_compressor.experimental.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.experimental.metric.metric)": [[317, "neural_compressor.experimental.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.experimental.metric.metric)": [[317, "neural_compressor.experimental.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.experimental.metric.metric)": [[317, "neural_compressor.experimental.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.experimental.metric.metric)": [[317, "neural_compressor.experimental.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.experimental.metric.metric)": [[317, "neural_compressor.experimental.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.experimental.metric.metric)": [[317, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.experimental.metric.metric)": [[317, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.experimental.metric.metric.mae attribute)": [[317, "neural_compressor.experimental.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.experimental.metric.metric.mse attribute)": [[317, "neural_compressor.experimental.metric.metric.MSE.compare_label"]], "k (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[317, "neural_compressor.experimental.metric.metric.GeneralTopK.k"]], "k (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[317, "neural_compressor.experimental.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[317, "neural_compressor.experimental.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mae attribute)": [[317, "neural_compressor.experimental.metric.metric.MAE.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mse attribute)": [[317, "neural_compressor.experimental.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.experimental.metric.metric)": [[317, "neural_compressor.experimental.metric.metric.mIOU"]], "metric_registry() (in module neural_compressor.experimental.metric.metric)": [[317, "neural_compressor.experimental.metric.metric.metric_registry"]], "metrics (neural_compressor.experimental.metric.metric.metrics attribute)": [[317, "neural_compressor.experimental.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.experimental.metric.metric.mxnetmetrics attribute)": [[317, "neural_compressor.experimental.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtitmetrics attribute)": [[317, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtqlmetrics attribute)": [[317, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.pytorchmetrics attribute)": [[317, "neural_compressor.experimental.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.tensorflowmetrics attribute)": [[317, "neural_compressor.experimental.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.experimental.metric.metric.rmse attribute)": [[317, "neural_compressor.experimental.metric.metric.RMSE.mse"]], "neural_compressor.experimental.metric.metric": [[317, "module-neural_compressor.experimental.metric.metric"]], "num_correct (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[317, "neural_compressor.experimental.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[317, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[317, "neural_compressor.experimental.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[317, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[317, "neural_compressor.experimental.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mae attribute)": [[317, "neural_compressor.experimental.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mse attribute)": [[317, "neural_compressor.experimental.metric.metric.MSE.pred_list"]], "sample (neural_compressor.experimental.metric.metric.accuracy attribute)": [[317, "neural_compressor.experimental.metric.metric.Accuracy.sample"]], "sample (neural_compressor.experimental.metric.metric.loss attribute)": [[317, "neural_compressor.experimental.metric.metric.Loss.sample"]], "sum (neural_compressor.experimental.metric.metric.loss attribute)": [[317, "neural_compressor.experimental.metric.metric.Loss.sum"]], "mixedprecision (class in neural_compressor.experimental.mixed_precision)": [[318, "neural_compressor.experimental.mixed_precision.MixedPrecision"]], "neural_compressor.experimental.mixed_precision": [[318, "module-neural_compressor.experimental.mixed_precision"]], "modelconversion (class in neural_compressor.experimental.model_conversion)": [[319, "neural_compressor.experimental.model_conversion.ModelConversion"]], "neural_compressor.experimental.model_conversion": [[319, "module-neural_compressor.experimental.model_conversion"]], "basicnas (class in neural_compressor.experimental.nas.basic_nas)": [[320, "neural_compressor.experimental.nas.basic_nas.BasicNAS"]], "neural_compressor.experimental.nas.basic_nas": [[320, "module-neural_compressor.experimental.nas.basic_nas"]], "dynas (class in neural_compressor.experimental.nas.dynas)": [[321, "neural_compressor.experimental.nas.dynas.DyNAS"]], "neural_compressor.experimental.nas.dynas": [[321, "module-neural_compressor.experimental.nas.dynas"]], "neural_compressor.experimental.nas": [[322, "module-neural_compressor.experimental.nas"]], "nas (class in neural_compressor.experimental.nas.nas)": [[323, "neural_compressor.experimental.nas.nas.NAS"]], "nasbase (class in neural_compressor.experimental.nas.nas)": [[323, "neural_compressor.experimental.nas.nas.NASBase"]], "neural_compressor.experimental.nas.nas": [[323, "module-neural_compressor.experimental.nas.nas"]], "create_search_space_pool() (in module neural_compressor.experimental.nas.nas_utils)": [[324, "neural_compressor.experimental.nas.nas_utils.create_search_space_pool"]], "find_pareto_front() (in module neural_compressor.experimental.nas.nas_utils)": [[324, "neural_compressor.experimental.nas.nas_utils.find_pareto_front"]], "nas_registry() (in module neural_compressor.experimental.nas.nas_utils)": [[324, "neural_compressor.experimental.nas.nas_utils.nas_registry"]], "neural_compressor.experimental.nas.nas_utils": [[324, "module-neural_compressor.experimental.nas.nas_utils"]], "bayesianoptimizationsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[325, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher"]], "gridsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[325, "neural_compressor.experimental.nas.search_algorithms.GridSearcher"]], "randomsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[325, "neural_compressor.experimental.nas.search_algorithms.RandomSearcher"]], "searcher (class in neural_compressor.experimental.nas.search_algorithms)": [[325, "neural_compressor.experimental.nas.search_algorithms.Searcher"]], "neural_compressor.experimental.nas.search_algorithms": [[325, "module-neural_compressor.experimental.nas.search_algorithms"]], "gradientsensitivitypruner (class in neural_compressor.experimental.pruner_legacy.gradient_sensitivity)": [[326, "neural_compressor.experimental.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[326, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"]], "grouplassopruner (class in neural_compressor.experimental.pruner_legacy.group_lasso)": [[327, "neural_compressor.experimental.pruner_legacy.group_lasso.GroupLassoPruner"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[327, "module-neural_compressor.experimental.pruner_legacy.group_lasso"]], "neural_compressor.experimental.pruner_legacy": [[328, "module-neural_compressor.experimental.pruner_legacy"]], "basicmagnitudepruner (class in neural_compressor.experimental.pruner_legacy.magnitude)": [[329, "neural_compressor.experimental.pruner_legacy.magnitude.BasicMagnitudePruner"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[329, "module-neural_compressor.experimental.pruner_legacy.magnitude"]], "patternlockpruner (class in neural_compressor.experimental.pruner_legacy.pattern_lock)": [[330, "neural_compressor.experimental.pruner_legacy.pattern_lock.PatternLockPruner"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[330, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"]], "pruner (class in neural_compressor.experimental.pruner_legacy.pruner)": [[331, "neural_compressor.experimental.pruner_legacy.pruner.Pruner"]], "neural_compressor.experimental.pruner_legacy.pruner": [[331, "module-neural_compressor.experimental.pruner_legacy.pruner"]], "pruner_registry() (in module neural_compressor.experimental.pruner_legacy.pruner)": [[331, "neural_compressor.experimental.pruner_legacy.pruner.pruner_registry"]], "pruning (class in neural_compressor.experimental.pruning)": [[332, "neural_compressor.experimental.pruning.Pruning"]], "tfpruningcallback (class in neural_compressor.experimental.pruning)": [[332, "neural_compressor.experimental.pruning.TfPruningCallback"]], "conf (neural_compressor.experimental.pruning.pruning attribute)": [[332, "neural_compressor.experimental.pruning.Pruning.conf"]], "neural_compressor.experimental.pruning": [[332, "module-neural_compressor.experimental.pruning"]], "pruners (neural_compressor.experimental.pruning.pruning attribute)": [[332, "neural_compressor.experimental.pruning.Pruning.pruners"]], "neural_compressor.experimental.pruning_recipes": [[333, "module-neural_compressor.experimental.pruning_recipes"]], "neural_compressor.experimental.pruning_recipes.patterns": [[334, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "patterns (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[335, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS"]], "patternbase (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[335, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[335, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "pattern_registry() (in module neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[335, "neural_compressor.experimental.pruning_recipes.patterns.pattern.pattern_registry"]], "patterns (neural_compressor.experimental.pruning_recipes.patterns.pattern.patterns attribute)": [[335, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS.patterns"]], "tilepatternbase (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[336, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase"]], "tilepattern_1x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[336, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x1"]], "tilepattern_1x16 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[336, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x16"]], "tilepattern_1x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[336, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x2"]], "tilepattern_2x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[336, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_2x2"]], "tilepattern_4x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[336, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_4x1"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[336, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "pruning (class in neural_compressor.experimental.pruning_v2)": [[337, "neural_compressor.experimental.pruning_v2.Pruning"]], "tfpruningcallback (class in neural_compressor.experimental.pruning_v2)": [[337, "neural_compressor.experimental.pruning_v2.TfPruningCallback"]], "conf (neural_compressor.experimental.pruning_v2.pruning attribute)": [[337, "neural_compressor.experimental.pruning_v2.Pruning.conf"]], "neural_compressor.experimental.pruning_v2": [[337, "module-neural_compressor.experimental.pruning_v2"]], "pruners (neural_compressor.experimental.pruning_v2.pruning attribute)": [[337, "neural_compressor.experimental.pruning_v2.Pruning.pruners"]], "neural_compressor.experimental.pytorch_pruner": [[338, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[339, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "m (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[340, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.M"]], "n (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[340, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.N"]], "pattern (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[340, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern"]], "patternninm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[340, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM"]], "patternnxm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[340, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM"]], "block_size (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm attribute)": [[340, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.block_size"]], "get_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[340, "neural_compressor.experimental.pytorch_pruner.patterns.get_pattern"]], "is_global (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[340, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.is_global"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[340, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "pattern (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[340, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.pattern"]], "register_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[340, "neural_compressor.experimental.pytorch_pruner.patterns.register_pattern"]], "check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[341, "neural_compressor.experimental.pytorch_pruner.prune_utils.check_config"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[341, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "parse_not_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[341, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_not_to_prune"]], "parse_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[341, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_to_prune"]], "process_and_check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[341, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_and_check_config"]], "process_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[341, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_config"]], "reset_non_value_to_default() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[341, "neural_compressor.experimental.pytorch_pruner.prune_utils.reset_non_value_to_default"]], "magnitudepruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[342, "neural_compressor.experimental.pytorch_pruner.pruner.MagnitudePruner"]], "patternlockpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[342, "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner"]], "pruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[342, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner"]], "snipmomentumpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[342, "neural_compressor.experimental.pytorch_pruner.pruner.SnipMomentumPruner"]], "snippruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[342, "neural_compressor.experimental.pytorch_pruner.pruner.SnipPruner"]], "config (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[342, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.config"]], "current_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[342, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.current_sparsity_ratio"]], "end_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[342, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.end_step"]], "get_pruner() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[342, "neural_compressor.experimental.pytorch_pruner.pruner.get_pruner"]], "global_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[342, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.global_step"]], "masks (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[342, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.masks"]], "max_sparsity_ratio_per_layer (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[342, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.max_sparsity_ratio_per_layer"]], "modules (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[342, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.modules"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[342, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "pattern (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[342, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.pattern"]], "register_pruners() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[342, "neural_compressor.experimental.pytorch_pruner.pruner.register_pruners"]], "scheduler (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[342, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scheduler"]], "scores (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[342, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scores"]], "start_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[342, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.start_step"]], "target_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[342, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.target_sparsity_ratio"]], "update_frequency_on_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[342, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.update_frequency_on_step"]], "pruning (class in neural_compressor.experimental.pytorch_pruner.pruning)": [[343, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning"]], "config_file_path (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[343, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.config_file_path"]], "model (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[343, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.model"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[343, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "pruner_info (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[343, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruner_info"]], "pruners (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[343, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruners"]], "iterativescheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[344, "neural_compressor.experimental.pytorch_pruner.scheduler.IterativeScheduler"]], "oneshotscheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[344, "neural_compressor.experimental.pytorch_pruner.scheduler.OneshotScheduler"]], "scheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[344, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler"]], "config (neural_compressor.experimental.pytorch_pruner.scheduler.scheduler attribute)": [[344, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler.config"]], "get_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[344, "neural_compressor.experimental.pytorch_pruner.scheduler.get_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[344, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "register_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[344, "neural_compressor.experimental.pytorch_pruner.scheduler.register_scheduler"]], "quantization (class in neural_compressor.experimental.quantization)": [[345, "neural_compressor.experimental.quantization.Quantization"]], "neural_compressor.experimental.quantization": [[345, "module-neural_compressor.experimental.quantization"]], "scheduler (class in neural_compressor.experimental.scheduler)": [[346, "neural_compressor.experimental.scheduler.Scheduler"]], "neural_compressor.experimental.scheduler": [[346, "module-neural_compressor.experimental.scheduler"]], "automixedprecisiontunestrategy (class in neural_compressor.experimental.strategy.auto_mixed_precision)": [[347, "neural_compressor.experimental.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy"]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[347, "module-neural_compressor.experimental.strategy.auto_mixed_precision"]], "basictunestrategy (class in neural_compressor.experimental.strategy.basic)": [[348, "neural_compressor.experimental.strategy.basic.BasicTuneStrategy"]], "neural_compressor.experimental.strategy.basic": [[348, "module-neural_compressor.experimental.strategy.basic"]], "bayesianoptimization (class in neural_compressor.experimental.strategy.bayesian)": [[349, "neural_compressor.experimental.strategy.bayesian.BayesianOptimization"]], "bayesiantunestrategy (class in neural_compressor.experimental.strategy.bayesian)": [[349, "neural_compressor.experimental.strategy.bayesian.BayesianTuneStrategy"]], "targetspace (class in neural_compressor.experimental.strategy.bayesian)": [[349, "neural_compressor.experimental.strategy.bayesian.TargetSpace"]], "acq_max() (in module neural_compressor.experimental.strategy.bayesian)": [[349, "neural_compressor.experimental.strategy.bayesian.acq_max"]], "neural_compressor.experimental.strategy.bayesian": [[349, "module-neural_compressor.experimental.strategy.bayesian"]], "exhaustivetunestrategy (class in neural_compressor.experimental.strategy.exhaustive)": [[350, "neural_compressor.experimental.strategy.exhaustive.ExhaustiveTuneStrategy"]], "neural_compressor.experimental.strategy.exhaustive": [[350, "module-neural_compressor.experimental.strategy.exhaustive"]], "neural_compressor.experimental.strategy": [[351, "module-neural_compressor.experimental.strategy"]], "msetunestrategy (class in neural_compressor.experimental.strategy.mse)": [[352, "neural_compressor.experimental.strategy.mse.MSETuneStrategy"]], "neural_compressor.experimental.strategy.mse": [[352, "module-neural_compressor.experimental.strategy.mse"]], "mse_v2tunestrategy (class in neural_compressor.experimental.strategy.mse_v2)": [[353, "neural_compressor.experimental.strategy.mse_v2.MSE_V2TuneStrategy"]], "neural_compressor.experimental.strategy.mse_v2": [[353, "module-neural_compressor.experimental.strategy.mse_v2"]], "randomtunestrategy (class in neural_compressor.experimental.strategy.random)": [[354, "neural_compressor.experimental.strategy.random.RandomTuneStrategy"]], "neural_compressor.experimental.strategy.random": [[354, "module-neural_compressor.experimental.strategy.random"]], "tunestrategy (class in neural_compressor.experimental.strategy.strategy)": [[355, "neural_compressor.experimental.strategy.strategy.TuneStrategy"]], "neural_compressor.experimental.strategy.strategy": [[355, "module-neural_compressor.experimental.strategy.strategy"]], "strategy_registry() (in module neural_compressor.experimental.strategy.strategy)": [[355, "neural_compressor.experimental.strategy.strategy.strategy_registry"]], "neural_compressor.experimental.strategy.utils.constant": [[356, "module-neural_compressor.experimental.strategy.utils.constant"]], "neural_compressor.experimental.strategy.utils": [[357, "module-neural_compressor.experimental.strategy.utils"]], "fallbacktuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[358, "neural_compressor.experimental.strategy.utils.tuning_sampler.FallbackTuningSampler"]], "modelwisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[358, "neural_compressor.experimental.strategy.utils.tuning_sampler.ModelWiseTuningSampler"]], "optypewisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[358, "neural_compressor.experimental.strategy.utils.tuning_sampler.OpTypeWiseTuningSampler"]], "opwisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[358, "neural_compressor.experimental.strategy.utils.tuning_sampler.OpWiseTuningSampler"]], "smoothquantsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[358, "neural_compressor.experimental.strategy.utils.tuning_sampler.SmoothQuantSampler"]], "tuningorder (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[358, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningOrder"]], "tuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[358, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningSampler"]], "tuningsamplerregistry (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[358, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningSamplerRegistry"]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[358, "module-neural_compressor.experimental.strategy.utils.tuning_sampler"]], "tuningitem (class in neural_compressor.experimental.strategy.utils.tuning_space)": [[359, "neural_compressor.experimental.strategy.utils.tuning_space.TuningItem"]], "tuningspace (class in neural_compressor.experimental.strategy.utils.tuning_space)": [[359, "neural_compressor.experimental.strategy.utils.tuning_space.TuningSpace"]], "initial_tuning_cfg_with_quant_mode() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[359, "neural_compressor.experimental.strategy.utils.tuning_space.initial_tuning_cfg_with_quant_mode"]], "neural_compressor.experimental.strategy.utils.tuning_space": [[359, "module-neural_compressor.experimental.strategy.utils.tuning_space"]], "pattern_to_internal() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[359, "neural_compressor.experimental.strategy.utils.tuning_space.pattern_to_internal"]], "pattern_to_path() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[359, "neural_compressor.experimental.strategy.utils.tuning_space.pattern_to_path"]], "quant_mode_from_pattern() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[359, "neural_compressor.experimental.strategy.utils.tuning_space.quant_mode_from_pattern"]], "optuningconfig (class in neural_compressor.experimental.strategy.utils.tuning_structs)": [[360, "neural_compressor.experimental.strategy.utils.tuning_structs.OpTuningConfig"]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[360, "module-neural_compressor.experimental.strategy.utils.tuning_structs"]], "ordereddefaultdict (class in neural_compressor.experimental.strategy.utils.utility)": [[361, "neural_compressor.experimental.strategy.utils.utility.OrderedDefaultDict"]], "extract_data_type() (in module neural_compressor.experimental.strategy.utils.utility)": [[361, "neural_compressor.experimental.strategy.utils.utility.extract_data_type"]], "get_adaptor_name() (in module neural_compressor.experimental.strategy.utils.utility)": [[361, "neural_compressor.experimental.strategy.utils.utility.get_adaptor_name"]], "neural_compressor.experimental.strategy.utils.utility": [[361, "module-neural_compressor.experimental.strategy.utils.utility"]], "reverted_data_type() (in module neural_compressor.experimental.strategy.utils.utility)": [[361, "neural_compressor.experimental.strategy.utils.utility.reverted_data_type"]], "neural_compressor": [[362, "module-neural_compressor"]], "bleu (class in neural_compressor.metric.bleu)": [[363, "neural_compressor.metric.bleu.BLEU"]], "unicoderegex (class in neural_compressor.metric.bleu)": [[363, "neural_compressor.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.metric.bleu)": [[363, "neural_compressor.metric.bleu.bleu_tokenize"]], "labels (neural_compressor.metric.bleu.bleu attribute)": [[363, "neural_compressor.metric.bleu.BLEU.labels"]], "neural_compressor.metric.bleu": [[363, "module-neural_compressor.metric.bleu"]], "nondigit_punct_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[363, "neural_compressor.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "predictions (neural_compressor.metric.bleu.bleu attribute)": [[363, "neural_compressor.metric.bleu.BLEU.predictions"]], "punct_nondigit_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[363, "neural_compressor.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "symbol_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[363, "neural_compressor.metric.bleu.UnicodeRegex.symbol_re"]], "compute_bleu() (in module neural_compressor.metric.bleu_util)": [[364, "neural_compressor.metric.bleu_util.compute_bleu"]], "neural_compressor.metric.bleu_util": [[364, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[365, "module-neural_compressor.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.metric.coco_tools)": [[366, "neural_compressor.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.metric.coco_tools)": [[366, "neural_compressor.metric.coco_tools.COCOWrapper"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.metric.coco_tools)": [[366, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.metric.coco_tools)": [[366, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.metric.coco_tools)": [[366, "neural_compressor.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "dataset (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[366, "neural_compressor.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[366, "neural_compressor.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.metric.coco_tools": [[366, "module-neural_compressor.metric.coco_tools"]], "evaluate() (in module neural_compressor.metric.evaluate_squad)": [[367, "neural_compressor.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.metric.evaluate_squad)": [[367, "neural_compressor.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.metric.evaluate_squad)": [[367, "neural_compressor.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.evaluate_squad)": [[367, "neural_compressor.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.metric.evaluate_squad": [[367, "module-neural_compressor.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.metric.f1)": [[368, "neural_compressor.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.metric.f1)": [[368, "neural_compressor.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.f1)": [[368, "neural_compressor.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[368, "module-neural_compressor.metric.f1"]], "normalize_answer() (in module neural_compressor.metric.f1)": [[368, "neural_compressor.metric.f1.normalize_answer"]], "neural_compressor.metric": [[369, "module-neural_compressor.metric"]], "accuracy (class in neural_compressor.metric.metric)": [[370, "neural_compressor.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.metric.metric)": [[370, "neural_compressor.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.metric.metric)": [[370, "neural_compressor.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.metric.metric)": [[370, "neural_compressor.metric.metric.F1"]], "generaltopk (class in neural_compressor.metric.metric)": [[370, "neural_compressor.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.metric.metric)": [[370, "neural_compressor.metric.metric.Loss"]], "mae (class in neural_compressor.metric.metric)": [[370, "neural_compressor.metric.metric.MAE"]], "metrics (class in neural_compressor.metric.metric)": [[370, "neural_compressor.metric.metric.METRICS"]], "mse (class in neural_compressor.metric.metric)": [[370, "neural_compressor.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.metric.metric)": [[370, "neural_compressor.metric.metric.MXNetMetrics"]], "metric (class in neural_compressor.metric.metric)": [[370, "neural_compressor.metric.metric.Metric"]], "onnxrtglue (class in neural_compressor.metric.metric)": [[370, "neural_compressor.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.metric.metric)": [[370, "neural_compressor.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.metric.metric)": [[370, "neural_compressor.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.metric.metric)": [[370, "neural_compressor.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.metric.metric)": [[370, "neural_compressor.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.metric.metric)": [[370, "neural_compressor.metric.metric.RMSE"]], "roc (class in neural_compressor.metric.metric)": [[370, "neural_compressor.metric.metric.ROC"]], "squadf1 (class in neural_compressor.metric.metric)": [[370, "neural_compressor.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.metric.metric)": [[370, "neural_compressor.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.metric.metric)": [[370, "neural_compressor.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.metric.metric)": [[370, "neural_compressor.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.metric.metric)": [[370, "neural_compressor.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.metric.metric)": [[370, "neural_compressor.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.metric.metric)": [[370, "neural_compressor.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.metric.metric)": [[370, "neural_compressor.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.metric.metric)": [[370, "neural_compressor.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.metric.metric.mae attribute)": [[370, "neural_compressor.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.metric.metric.mse attribute)": [[370, "neural_compressor.metric.metric.MSE.compare_label"]], "k (neural_compressor.metric.metric.generaltopk attribute)": [[370, "neural_compressor.metric.metric.GeneralTopK.k"]], "k (neural_compressor.metric.metric.tensorflowtopk attribute)": [[370, "neural_compressor.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.metric.metric.accuracy attribute)": [[370, "neural_compressor.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.metric.metric.mae attribute)": [[370, "neural_compressor.metric.metric.MAE.label_list"]], "label_list (neural_compressor.metric.metric.mse attribute)": [[370, "neural_compressor.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.metric.metric)": [[370, "neural_compressor.metric.metric.mIOU"]], "metric_registry() (in module neural_compressor.metric.metric)": [[370, "neural_compressor.metric.metric.metric_registry"]], "metrics (neural_compressor.metric.metric.metrics attribute)": [[370, "neural_compressor.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.metric.metric.mxnetmetrics attribute)": [[370, "neural_compressor.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtitmetrics attribute)": [[370, "neural_compressor.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtqlmetrics attribute)": [[370, "neural_compressor.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.metric.metric.pytorchmetrics attribute)": [[370, "neural_compressor.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.metric.metric.tensorflowmetrics attribute)": [[370, "neural_compressor.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.metric.metric.rmse attribute)": [[370, "neural_compressor.metric.metric.RMSE.mse"]], "neural_compressor.metric.metric": [[370, "module-neural_compressor.metric.metric"]], "num_correct (neural_compressor.metric.metric.generaltopk attribute)": [[370, "neural_compressor.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.metric.metric.tensorflowtopk attribute)": [[370, "neural_compressor.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.metric.metric.generaltopk attribute)": [[370, "neural_compressor.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.metric.metric.tensorflowtopk attribute)": [[370, "neural_compressor.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.metric.metric.accuracy attribute)": [[370, "neural_compressor.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.metric.metric.mae attribute)": [[370, "neural_compressor.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.metric.metric.mse attribute)": [[370, "neural_compressor.metric.metric.MSE.pred_list"]], "register_customer_metric() (in module neural_compressor.metric.metric)": [[370, "neural_compressor.metric.metric.register_customer_metric"]], "sample (neural_compressor.metric.metric.accuracy attribute)": [[370, "neural_compressor.metric.metric.Accuracy.sample"]], "sample (neural_compressor.metric.metric.loss attribute)": [[370, "neural_compressor.metric.metric.Loss.sample"]], "sum (neural_compressor.metric.metric.loss attribute)": [[370, "neural_compressor.metric.metric.Loss.sum"]], "fit() (in module neural_compressor.mix_precision)": [[371, "neural_compressor.mix_precision.fit"]], "neural_compressor.mix_precision": [[371, "module-neural_compressor.mix_precision"]], "basemodel (class in neural_compressor.model.base_model)": [[372, "neural_compressor.model.base_model.BaseModel"]], "neural_compressor.model.base_model": [[372, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[373, "module-neural_compressor.model"]], "kerasmodel (class in neural_compressor.model.keras_model)": [[374, "neural_compressor.model.keras_model.KerasModel"]], "neural_compressor.model.keras_model": [[374, "module-neural_compressor.model.keras_model"]], "model (class in neural_compressor.model.model)": [[375, "neural_compressor.model.model.Model"]], "get_model_fwk_name() (in module neural_compressor.model.model)": [[375, "neural_compressor.model.model.get_model_fwk_name"]], "neural_compressor.model.model": [[375, "module-neural_compressor.model.model"]], "mxnetmodel (class in neural_compressor.model.mxnet_model)": [[376, "neural_compressor.model.mxnet_model.MXNetModel"]], "neural_compressor.model.mxnet_model": [[376, "module-neural_compressor.model.mxnet_model"]], "tfslimnetsfactory (class in neural_compressor.model.nets_factory)": [[377, "neural_compressor.model.nets_factory.TFSlimNetsFactory"]], "neural_compressor.model.nets_factory": [[377, "module-neural_compressor.model.nets_factory"]], "onnxmodel (class in neural_compressor.model.onnx_model)": [[378, "neural_compressor.model.onnx_model.ONNXModel"]], "neural_compressor.model.onnx_model": [[378, "module-neural_compressor.model.onnx_model"]], "tensorflowbasemodel (class in neural_compressor.model.tensorflow_model)": [[379, "neural_compressor.model.tensorflow_model.TensorflowBaseModel"]], "tensorflowcheckpointmodel (class in neural_compressor.model.tensorflow_model)": [[379, "neural_compressor.model.tensorflow_model.TensorflowCheckpointModel"]], "tensorflowllmmodel (class in neural_compressor.model.tensorflow_model)": [[379, "neural_compressor.model.tensorflow_model.TensorflowLLMModel"]], "tensorflowmodel (class in neural_compressor.model.tensorflow_model)": [[379, "neural_compressor.model.tensorflow_model.TensorflowModel"]], "tensorflowqatmodel (class in neural_compressor.model.tensorflow_model)": [[379, "neural_compressor.model.tensorflow_model.TensorflowQATModel"]], "tensorflowsavedmodelmodel (class in neural_compressor.model.tensorflow_model)": [[379, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel"]], "checkpoint_session() (in module neural_compressor.model.tensorflow_model)": [[379, "neural_compressor.model.tensorflow_model.checkpoint_session"]], "estimator_session() (in module neural_compressor.model.tensorflow_model)": [[379, "neural_compressor.model.tensorflow_model.estimator_session"]], "frozen_pb_session() (in module neural_compressor.model.tensorflow_model)": [[379, "neural_compressor.model.tensorflow_model.frozen_pb_session"]], "get_model_type() (in module neural_compressor.model.tensorflow_model)": [[379, "neural_compressor.model.tensorflow_model.get_model_type"]], "graph_def_session() (in module neural_compressor.model.tensorflow_model)": [[379, "neural_compressor.model.tensorflow_model.graph_def_session"]], "graph_session() (in module neural_compressor.model.tensorflow_model)": [[379, "neural_compressor.model.tensorflow_model.graph_session"]], "keras_session() (in module neural_compressor.model.tensorflow_model)": [[379, "neural_compressor.model.tensorflow_model.keras_session"]], "load_saved_model() (in module neural_compressor.model.tensorflow_model)": [[379, "neural_compressor.model.tensorflow_model.load_saved_model"]], "neural_compressor.model.tensorflow_model": [[379, "module-neural_compressor.model.tensorflow_model"]], "saved_model_session() (in module neural_compressor.model.tensorflow_model)": [[379, "neural_compressor.model.tensorflow_model.saved_model_session"]], "slim_session() (in module neural_compressor.model.tensorflow_model)": [[379, "neural_compressor.model.tensorflow_model.slim_session"]], "validate_and_inference_input_output() (in module neural_compressor.model.tensorflow_model)": [[379, "neural_compressor.model.tensorflow_model.validate_and_inference_input_output"]], "validate_graph_node() (in module neural_compressor.model.tensorflow_model)": [[379, "neural_compressor.model.tensorflow_model.validate_graph_node"]], "ipexmodel (class in neural_compressor.model.torch_model)": [[380, "neural_compressor.model.torch_model.IPEXModel"]], "pytorchbasemodel (class in neural_compressor.model.torch_model)": [[380, "neural_compressor.model.torch_model.PyTorchBaseModel"]], "pytorchfxmodel (class in neural_compressor.model.torch_model)": [[380, "neural_compressor.model.torch_model.PyTorchFXModel"]], "pytorchmodel (class in neural_compressor.model.torch_model)": [[380, "neural_compressor.model.torch_model.PyTorchModel"]], "neural_compressor.model.torch_model": [[380, "module-neural_compressor.model.torch_model"]], "accuracy (class in neural_compressor.objective)": [[381, "neural_compressor.objective.Accuracy"]], "footprint (class in neural_compressor.objective)": [[381, "neural_compressor.objective.Footprint"]], "modelsize (class in neural_compressor.objective)": [[381, "neural_compressor.objective.ModelSize"]], "multiobjective (class in neural_compressor.objective)": [[381, "neural_compressor.objective.MultiObjective"]], "objective (class in neural_compressor.objective)": [[381, "neural_compressor.objective.Objective"]], "performance (class in neural_compressor.objective)": [[381, "neural_compressor.objective.Performance"]], "neural_compressor.objective": [[381, "module-neural_compressor.objective"]], "objective_custom_registry() (in module neural_compressor.objective)": [[381, "neural_compressor.objective.objective_custom_registry"]], "objective_registry() (in module neural_compressor.objective)": [[381, "neural_compressor.objective.objective_registry"]], "neural_compressor.onnxrt.algorithms": [[382, "module-neural_compressor.onnxrt.algorithms"]], "calibrator (class in neural_compressor.onnxrt.algorithms.smoother.calibrator)": [[383, "neural_compressor.onnxrt.algorithms.smoother.calibrator.Calibrator"]], "neural_compressor.onnxrt.algorithms.smoother.calibrator": [[383, "module-neural_compressor.onnxrt.algorithms.smoother.calibrator"]], "smoother (class in neural_compressor.onnxrt.algorithms.smoother.core)": [[384, "neural_compressor.onnxrt.algorithms.smoother.core.Smoother"]], "neural_compressor.onnxrt.algorithms.smoother.core": [[384, "module-neural_compressor.onnxrt.algorithms.smoother.core"]], "neural_compressor.onnxrt.algorithms.smoother": [[385, "module-neural_compressor.onnxrt.algorithms.smoother"]], "apply_awq_on_model() (in module neural_compressor.onnxrt.algorithms.weight_only.awq)": [[386, "neural_compressor.onnxrt.algorithms.weight_only.awq.apply_awq_on_model"]], "awq_quantize() (in module neural_compressor.onnxrt.algorithms.weight_only.awq)": [[386, "neural_compressor.onnxrt.algorithms.weight_only.awq.awq_quantize"]], "neural_compressor.onnxrt.algorithms.weight_only.awq": [[386, "module-neural_compressor.onnxrt.algorithms.weight_only.awq"]], "apply_gptq_on_model() (in module neural_compressor.onnxrt.algorithms.weight_only.gptq)": [[387, "neural_compressor.onnxrt.algorithms.weight_only.gptq.apply_gptq_on_model"]], "gptq_quantize() (in module neural_compressor.onnxrt.algorithms.weight_only.gptq)": [[387, "neural_compressor.onnxrt.algorithms.weight_only.gptq.gptq_quantize"]], "neural_compressor.onnxrt.algorithms.weight_only.gptq": [[387, "module-neural_compressor.onnxrt.algorithms.weight_only.gptq"]], "neural_compressor.onnxrt.algorithms.weight_only": [[388, "module-neural_compressor.onnxrt.algorithms.weight_only"]], "apply_rtn_on_model() (in module neural_compressor.onnxrt.algorithms.weight_only.rtn)": [[389, "neural_compressor.onnxrt.algorithms.weight_only.rtn.apply_rtn_on_model"]], "neural_compressor.onnxrt.algorithms.weight_only.rtn": [[389, "module-neural_compressor.onnxrt.algorithms.weight_only.rtn"]], "rtn_quantize() (in module neural_compressor.onnxrt.algorithms.weight_only.rtn)": [[389, "neural_compressor.onnxrt.algorithms.weight_only.rtn.rtn_quantize"]], "make_matmul_weight_only_node() (in module neural_compressor.onnxrt.algorithms.weight_only.utility)": [[390, "neural_compressor.onnxrt.algorithms.weight_only.utility.make_matmul_weight_only_node"]], "neural_compressor.onnxrt.algorithms.weight_only.utility": [[390, "module-neural_compressor.onnxrt.algorithms.weight_only.utility"]], "pad_tensor() (in module neural_compressor.onnxrt.algorithms.weight_only.utility)": [[390, "neural_compressor.onnxrt.algorithms.weight_only.utility.pad_tensor"]], "prepare_inputs() (in module neural_compressor.onnxrt.algorithms.weight_only.utility)": [[390, "neural_compressor.onnxrt.algorithms.weight_only.utility.prepare_inputs"]], "qdq_tensor() (in module neural_compressor.onnxrt.algorithms.weight_only.utility)": [[390, "neural_compressor.onnxrt.algorithms.weight_only.utility.qdq_tensor"]], "quant_tensor() (in module neural_compressor.onnxrt.algorithms.weight_only.utility)": [[390, "neural_compressor.onnxrt.algorithms.weight_only.utility.quant_tensor"]], "neural_compressor.onnxrt": [[391, "module-neural_compressor.onnxrt"]], "awq_quantize_entry() (in module neural_compressor.onnxrt.quantization.algorithm_entry)": [[392, "neural_compressor.onnxrt.quantization.algorithm_entry.awq_quantize_entry"]], "gptq_quantize_entry() (in module neural_compressor.onnxrt.quantization.algorithm_entry)": [[392, "neural_compressor.onnxrt.quantization.algorithm_entry.gptq_quantize_entry"]], "neural_compressor.onnxrt.quantization.algorithm_entry": [[392, "module-neural_compressor.onnxrt.quantization.algorithm_entry"]], "rtn_quantize_entry() (in module neural_compressor.onnxrt.quantization.algorithm_entry)": [[392, "neural_compressor.onnxrt.quantization.algorithm_entry.rtn_quantize_entry"]], "smooth_quant_entry() (in module neural_compressor.onnxrt.quantization.algorithm_entry)": [[392, "neural_compressor.onnxrt.quantization.algorithm_entry.smooth_quant_entry"]], "calibrationdatareader (class in neural_compressor.onnxrt.quantization.calibrate)": [[393, "neural_compressor.onnxrt.quantization.calibrate.CalibrationDataReader"]], "neural_compressor.onnxrt.quantization.calibrate": [[393, "module-neural_compressor.onnxrt.quantization.calibrate"]], "awqconfig (class in neural_compressor.onnxrt.quantization.config)": [[394, "neural_compressor.onnxrt.quantization.config.AWQConfig"]], "gptqconfig (class in neural_compressor.onnxrt.quantization.config)": [[394, "neural_compressor.onnxrt.quantization.config.GPTQConfig"]], "rtnconfig (class in neural_compressor.onnxrt.quantization.config)": [[394, "neural_compressor.onnxrt.quantization.config.RTNConfig"]], "smoohquantconfig (class in neural_compressor.onnxrt.quantization.config)": [[394, "neural_compressor.onnxrt.quantization.config.SmoohQuantConfig"]], "get_default_awq_config() (in module neural_compressor.onnxrt.quantization.config)": [[394, "neural_compressor.onnxrt.quantization.config.get_default_awq_config"]], "get_default_gptq_config() (in module neural_compressor.onnxrt.quantization.config)": [[394, "neural_compressor.onnxrt.quantization.config.get_default_gptq_config"]], "get_default_rtn_config() (in module neural_compressor.onnxrt.quantization.config)": [[394, "neural_compressor.onnxrt.quantization.config.get_default_rtn_config"]], "get_default_sq_config() (in module neural_compressor.onnxrt.quantization.config)": [[394, "neural_compressor.onnxrt.quantization.config.get_default_sq_config"]], "neural_compressor.onnxrt.quantization.config": [[394, "module-neural_compressor.onnxrt.quantization.config"]], "neural_compressor.onnxrt.quantization": [[395, "module-neural_compressor.onnxrt.quantization"]], "neural_compressor.onnxrt.quantization.quantize": [[396, "module-neural_compressor.onnxrt.quantization.quantize"]], "neural_compressor.onnxrt.utils": [[397, "module-neural_compressor.onnxrt.utils"]], "onnxmodel (class in neural_compressor.onnxrt.utils.onnx_model)": [[398, "neural_compressor.onnxrt.utils.onnx_model.ONNXModel"]], "neural_compressor.onnxrt.utils.onnx_model": [[398, "module-neural_compressor.onnxrt.utils.onnx_model"]], "find_by_name() (in module neural_compressor.onnxrt.utils.utility)": [[399, "neural_compressor.onnxrt.utils.utility.find_by_name"]], "get_qrange_for_qtype() (in module neural_compressor.onnxrt.utils.utility)": [[399, "neural_compressor.onnxrt.utils.utility.get_qrange_for_qType"]], "is_b_transposed() (in module neural_compressor.onnxrt.utils.utility)": [[399, "neural_compressor.onnxrt.utils.utility.is_B_transposed"]], "neural_compressor.onnxrt.utils.utility": [[399, "module-neural_compressor.onnxrt.utils.utility"]], "quantize_data() (in module neural_compressor.onnxrt.utils.utility)": [[399, "neural_compressor.onnxrt.utils.utility.quantize_data"]], "register_algo() (in module neural_compressor.onnxrt.utils.utility)": [[399, "neural_compressor.onnxrt.utils.utility.register_algo"]], "simple_progress_bar() (in module neural_compressor.onnxrt.utils.utility)": [[399, "neural_compressor.onnxrt.utils.utility.simple_progress_bar"]], "neural_compressor.profiling": [[400, "module-neural_compressor.profiling"]], "parserfactory (class in neural_compressor.profiling.parser.factory)": [[401, "neural_compressor.profiling.parser.factory.ParserFactory"]], "neural_compressor.profiling.parser.factory": [[401, "module-neural_compressor.profiling.parser.factory"]], "neural_compressor.profiling.parser": [[402, "module-neural_compressor.profiling.parser"]], "onnxrtparserfactory (class in neural_compressor.profiling.parser.onnx_parser.factory)": [[403, "neural_compressor.profiling.parser.onnx_parser.factory.OnnxrtParserFactory"]], "neural_compressor.profiling.parser.onnx_parser.factory": [[403, "module-neural_compressor.profiling.parser.onnx_parser.factory"]], "neural_compressor.profiling.parser.onnx_parser": [[404, "module-neural_compressor.profiling.parser.onnx_parser"]], "onnxprofilingparser (class in neural_compressor.profiling.parser.onnx_parser.parser)": [[405, "neural_compressor.profiling.parser.onnx_parser.parser.OnnxProfilingParser"]], "neural_compressor.profiling.parser.onnx_parser.parser": [[405, "module-neural_compressor.profiling.parser.onnx_parser.parser"]], "profilingparser (class in neural_compressor.profiling.parser.parser)": [[406, "neural_compressor.profiling.parser.parser.ProfilingParser"]], "neural_compressor.profiling.parser.parser": [[406, "module-neural_compressor.profiling.parser.parser"]], "profilingresult (class in neural_compressor.profiling.parser.result)": [[407, "neural_compressor.profiling.parser.result.ProfilingResult"]], "neural_compressor.profiling.parser.result": [[407, "module-neural_compressor.profiling.parser.result"]], "tensorflowparserfactory (class in neural_compressor.profiling.parser.tensorflow_parser.factory)": [[408, "neural_compressor.profiling.parser.tensorflow_parser.factory.TensorFlowParserFactory"]], "neural_compressor.profiling.parser.tensorflow_parser.factory": [[408, "module-neural_compressor.profiling.parser.tensorflow_parser.factory"]], "neural_compressor.profiling.parser.tensorflow_parser": [[409, "module-neural_compressor.profiling.parser.tensorflow_parser"]], "tensorflowprofilingparser (class in neural_compressor.profiling.parser.tensorflow_parser.parser)": [[410, "neural_compressor.profiling.parser.tensorflow_parser.parser.TensorFlowProfilingParser"]], "neural_compressor.profiling.parser.tensorflow_parser.parser": [[410, "module-neural_compressor.profiling.parser.tensorflow_parser.parser"]], "profilerfactory (class in neural_compressor.profiling.profiler.factory)": [[411, "neural_compressor.profiling.profiler.factory.ProfilerFactory"]], "neural_compressor.profiling.profiler.factory": [[411, "module-neural_compressor.profiling.profiler.factory"]], "neural_compressor.profiling.profiler": [[412, "module-neural_compressor.profiling.profiler"]], "profilerfactory (class in neural_compressor.profiling.profiler.onnxrt_profiler.factory)": [[413, "neural_compressor.profiling.profiler.onnxrt_profiler.factory.ProfilerFactory"]], "neural_compressor.profiling.profiler.onnxrt_profiler.factory": [[413, "module-neural_compressor.profiling.profiler.onnxrt_profiler.factory"]], "neural_compressor.profiling.profiler.onnxrt_profiler": [[414, "module-neural_compressor.profiling.profiler.onnxrt_profiler"]], "profiler (class in neural_compressor.profiling.profiler.onnxrt_profiler.profiler)": [[415, "neural_compressor.profiling.profiler.onnxrt_profiler.profiler.Profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.profiler": [[415, "module-neural_compressor.profiling.profiler.onnxrt_profiler.profiler"]], "create_onnx_config() (in module neural_compressor.profiling.profiler.onnxrt_profiler.utils)": [[416, "neural_compressor.profiling.profiler.onnxrt_profiler.utils.create_onnx_config"]], "neural_compressor.profiling.profiler.onnxrt_profiler.utils": [[416, "module-neural_compressor.profiling.profiler.onnxrt_profiler.utils"]], "profiler (class in neural_compressor.profiling.profiler.profiler)": [[417, "neural_compressor.profiling.profiler.profiler.Profiler"]], "neural_compressor.profiling.profiler.profiler": [[417, "module-neural_compressor.profiling.profiler.profiler"]], "profilerfactory (class in neural_compressor.profiling.profiler.tensorflow_profiler.factory)": [[418, "neural_compressor.profiling.profiler.tensorflow_profiler.factory.ProfilerFactory"]], "neural_compressor.profiling.profiler.tensorflow_profiler.factory": [[418, "module-neural_compressor.profiling.profiler.tensorflow_profiler.factory"]], "neural_compressor.profiling.profiler.tensorflow_profiler": [[419, "module-neural_compressor.profiling.profiler.tensorflow_profiler"]], "profiler (class in neural_compressor.profiling.profiler.tensorflow_profiler.profiler)": [[420, "neural_compressor.profiling.profiler.tensorflow_profiler.profiler.Profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.profiler": [[420, "module-neural_compressor.profiling.profiler.tensorflow_profiler.profiler"]], "create_tf_config() (in module neural_compressor.profiling.profiler.tensorflow_profiler.utils)": [[421, "neural_compressor.profiling.profiler.tensorflow_profiler.utils.create_tf_config"]], "delete_assign() (in module neural_compressor.profiling.profiler.tensorflow_profiler.utils)": [[421, "neural_compressor.profiling.profiler.tensorflow_profiler.utils.delete_assign"]], "neural_compressor.profiling.profiler.tensorflow_profiler.utils": [[421, "module-neural_compressor.profiling.profiler.tensorflow_profiler.utils"]], "set_eager_execution() (in module neural_compressor.profiling.profiler.tensorflow_profiler.utils)": [[421, "neural_compressor.profiling.profiler.tensorflow_profiler.utils.set_eager_execution"]], "fit() (in module neural_compressor.quantization)": [[422, "neural_compressor.quantization.fit"]], "neural_compressor.quantization": [[422, "module-neural_compressor.quantization"]], "autotunestrategy (class in neural_compressor.strategy.auto)": [[423, "neural_compressor.strategy.auto.AutoTuneStrategy"]], "neural_compressor.strategy.auto": [[423, "module-neural_compressor.strategy.auto"]], "automixedprecisiontunestrategy (class in neural_compressor.strategy.auto_mixed_precision)": [[424, "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[424, "module-neural_compressor.strategy.auto_mixed_precision"]], "basictunestrategy (class in neural_compressor.strategy.basic)": [[425, "neural_compressor.strategy.basic.BasicTuneStrategy"]], "neural_compressor.strategy.basic": [[425, "module-neural_compressor.strategy.basic"]], "bayesianoptimization (class in neural_compressor.strategy.bayesian)": [[426, "neural_compressor.strategy.bayesian.BayesianOptimization"]], "bayesiantunestrategy (class in neural_compressor.strategy.bayesian)": [[426, "neural_compressor.strategy.bayesian.BayesianTuneStrategy"]], "targetspace (class in neural_compressor.strategy.bayesian)": [[426, "neural_compressor.strategy.bayesian.TargetSpace"]], "acq_max() (in module neural_compressor.strategy.bayesian)": [[426, "neural_compressor.strategy.bayesian.acq_max"]], "neural_compressor.strategy.bayesian": [[426, "module-neural_compressor.strategy.bayesian"]], "conservativetunestrategy (class in neural_compressor.strategy.conservative)": [[427, "neural_compressor.strategy.conservative.ConservativeTuneStrategy"]], "neural_compressor.strategy.conservative": [[427, "module-neural_compressor.strategy.conservative"]], "exhaustivetunestrategy (class in neural_compressor.strategy.exhaustive)": [[428, "neural_compressor.strategy.exhaustive.ExhaustiveTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[428, "module-neural_compressor.strategy.exhaustive"]], "hawq_v2tunestrategy (class in neural_compressor.strategy.hawq_v2)": [[429, "neural_compressor.strategy.hawq_v2.HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[429, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy": [[430, "module-neural_compressor.strategy"]], "msetunestrategy (class in neural_compressor.strategy.mse)": [[431, "neural_compressor.strategy.mse.MSETuneStrategy"]], "neural_compressor.strategy.mse": [[431, "module-neural_compressor.strategy.mse"]], "mse_v2tunestrategy (class in neural_compressor.strategy.mse_v2)": [[432, "neural_compressor.strategy.mse_v2.MSE_V2TuneStrategy"]], "neural_compressor.strategy.mse_v2": [[432, "module-neural_compressor.strategy.mse_v2"]], "randomtunestrategy (class in neural_compressor.strategy.random)": [[433, "neural_compressor.strategy.random.RandomTuneStrategy"]], "neural_compressor.strategy.random": [[433, "module-neural_compressor.strategy.random"]], "tunestrategy (class in neural_compressor.strategy.strategy)": [[434, "neural_compressor.strategy.strategy.TuneStrategy"]], "tunestrategymeta (class in neural_compressor.strategy.strategy)": [[434, "neural_compressor.strategy.strategy.TuneStrategyMeta"]], "neural_compressor.strategy.strategy": [[434, "module-neural_compressor.strategy.strategy"]], "strategy_registry() (in module neural_compressor.strategy.strategy)": [[434, "neural_compressor.strategy.strategy.strategy_registry"]], "neural_compressor.strategy.utils.constant": [[435, "module-neural_compressor.strategy.utils.constant"]], "neural_compressor.strategy.utils": [[436, "module-neural_compressor.strategy.utils"]], "blockfallbacktuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[437, "neural_compressor.strategy.utils.tuning_sampler.BlockFallbackTuningSampler"]], "fallbacktuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[437, "neural_compressor.strategy.utils.tuning_sampler.FallbackTuningSampler"]], "lowerbitssampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[437, "neural_compressor.strategy.utils.tuning_sampler.LowerBitsSampler"]], "modelwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[437, "neural_compressor.strategy.utils.tuning_sampler.ModelWiseTuningSampler"]], "optypewisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[437, "neural_compressor.strategy.utils.tuning_sampler.OpTypeWiseTuningSampler"]], "opwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[437, "neural_compressor.strategy.utils.tuning_sampler.OpWiseTuningSampler"]], "smoothquantsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[437, "neural_compressor.strategy.utils.tuning_sampler.SmoothQuantSampler"]], "tuningorder (class in neural_compressor.strategy.utils.tuning_sampler)": [[437, "neural_compressor.strategy.utils.tuning_sampler.TuningOrder"]], "tuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[437, "neural_compressor.strategy.utils.tuning_sampler.TuningSampler"]], "weightonlyquantsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[437, "neural_compressor.strategy.utils.tuning_sampler.WeightOnlyQuantSampler"]], "neural_compressor.strategy.utils.tuning_sampler": [[437, "module-neural_compressor.strategy.utils.tuning_sampler"]], "tuningitem (class in neural_compressor.strategy.utils.tuning_space)": [[438, "neural_compressor.strategy.utils.tuning_space.TuningItem"]], "tuningspace (class in neural_compressor.strategy.utils.tuning_space)": [[438, "neural_compressor.strategy.utils.tuning_space.TuningSpace"]], "initial_tuning_cfg_with_quant_mode() (in module neural_compressor.strategy.utils.tuning_space)": [[438, "neural_compressor.strategy.utils.tuning_space.initial_tuning_cfg_with_quant_mode"]], "neural_compressor.strategy.utils.tuning_space": [[438, "module-neural_compressor.strategy.utils.tuning_space"]], "pattern_to_internal() (in module neural_compressor.strategy.utils.tuning_space)": [[438, "neural_compressor.strategy.utils.tuning_space.pattern_to_internal"]], "pattern_to_path() (in module neural_compressor.strategy.utils.tuning_space)": [[438, "neural_compressor.strategy.utils.tuning_space.pattern_to_path"]], "quant_mode_from_pattern() (in module neural_compressor.strategy.utils.tuning_space)": [[438, "neural_compressor.strategy.utils.tuning_space.quant_mode_from_pattern"]], "optuningconfig (class in neural_compressor.strategy.utils.tuning_structs)": [[439, "neural_compressor.strategy.utils.tuning_structs.OpTuningConfig"]], "neural_compressor.strategy.utils.tuning_structs": [[439, "module-neural_compressor.strategy.utils.tuning_structs"]], "classregister (class in neural_compressor.strategy.utils.utility)": [[440, "neural_compressor.strategy.utils.utility.ClassRegister"]], "ordereddefaultdict (class in neural_compressor.strategy.utils.utility)": [[440, "neural_compressor.strategy.utils.utility.OrderedDefaultDict"]], "quantoptions (class in neural_compressor.strategy.utils.utility)": [[440, "neural_compressor.strategy.utils.utility.QuantOptions"]], "quanttype (class in neural_compressor.strategy.utils.utility)": [[440, "neural_compressor.strategy.utils.utility.QuantType"]], "build_slave_faker_model() (in module neural_compressor.strategy.utils.utility)": [[440, "neural_compressor.strategy.utils.utility.build_slave_faker_model"]], "extract_data_type() (in module neural_compressor.strategy.utils.utility)": [[440, "neural_compressor.strategy.utils.utility.extract_data_type"]], "get_adaptor_name() (in module neural_compressor.strategy.utils.utility)": [[440, "neural_compressor.strategy.utils.utility.get_adaptor_name"]], "neural_compressor.strategy.utils.utility": [[440, "module-neural_compressor.strategy.utils.utility"]], "preprocess_user_cfg() (in module neural_compressor.strategy.utils.utility)": [[440, "neural_compressor.strategy.utils.utility.preprocess_user_cfg"]], "reverted_data_type() (in module neural_compressor.strategy.utils.utility)": [[440, "neural_compressor.strategy.utils.utility.reverted_data_type"]], "exampleclass (class in neural_compressor.template.api_doc_example)": [[441, "neural_compressor.template.api_doc_example.ExampleClass"]], "attr1 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[441, "neural_compressor.template.api_doc_example.ExampleClass.attr1"]], "attr2 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[441, "neural_compressor.template.api_doc_example.ExampleClass.attr2"]], "attr5 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[441, "neural_compressor.template.api_doc_example.ExampleClass.attr5"]], "attribute1 (in module neural_compressor.template.api_doc_example)": [[441, "neural_compressor.template.api_doc_example.attribute1"]], "function1() (in module neural_compressor.template.api_doc_example)": [[441, "neural_compressor.template.api_doc_example.function1"]], "function2() (in module neural_compressor.template.api_doc_example)": [[441, "neural_compressor.template.api_doc_example.function2"]], "function3() (in module neural_compressor.template.api_doc_example)": [[441, "neural_compressor.template.api_doc_example.function3"]], "generator1() (in module neural_compressor.template.api_doc_example)": [[441, "neural_compressor.template.api_doc_example.generator1"]], "module_debug_level1 (in module neural_compressor.template.api_doc_example)": [[441, "neural_compressor.template.api_doc_example.module_debug_level1"]], "neural_compressor.template.api_doc_example": [[441, "module-neural_compressor.template.api_doc_example"]], "neural_compressor.template": [[442, "module-neural_compressor.template"]], "neural_compressor.tensorflow.algorithms": [[443, "module-neural_compressor.tensorflow.algorithms"]], "smoothquantcalibration (class in neural_compressor.tensorflow.algorithms.smoother.calibration)": [[444, "neural_compressor.tensorflow.algorithms.smoother.calibration.SmoothQuantCalibration"]], "smoothquantcalibrationllm (class in neural_compressor.tensorflow.algorithms.smoother.calibration)": [[444, "neural_compressor.tensorflow.algorithms.smoother.calibration.SmoothQuantCalibrationLLM"]], "neural_compressor.tensorflow.algorithms.smoother.calibration": [[444, "module-neural_compressor.tensorflow.algorithms.smoother.calibration"]], "smoothquant (class in neural_compressor.tensorflow.algorithms.smoother.core)": [[445, "neural_compressor.tensorflow.algorithms.smoother.core.SmoothQuant"]], "neural_compressor.tensorflow.algorithms.smoother.core": [[445, "module-neural_compressor.tensorflow.algorithms.smoother.core"]], "neural_compressor.tensorflow.algorithms.smoother": [[446, "module-neural_compressor.tensorflow.algorithms.smoother"]], "smoothquantscaler (class in neural_compressor.tensorflow.algorithms.smoother.scaler)": [[447, "neural_compressor.tensorflow.algorithms.smoother.scaler.SmoothQuantScaler"]], "smoothquantscalerllm (class in neural_compressor.tensorflow.algorithms.smoother.scaler)": [[447, "neural_compressor.tensorflow.algorithms.smoother.scaler.SmoothQuantScalerLLM"]], "neural_compressor.tensorflow.algorithms.smoother.scaler": [[447, "module-neural_compressor.tensorflow.algorithms.smoother.scaler"]], "neural_compressor.tensorflow.algorithms.static_quant": [[448, "module-neural_compressor.tensorflow.algorithms.static_quant"]], "kerasadaptor (class in neural_compressor.tensorflow.algorithms.static_quant.keras)": [[449, "neural_compressor.tensorflow.algorithms.static_quant.keras.KerasAdaptor"]], "kerasconfigconverter (class in neural_compressor.tensorflow.algorithms.static_quant.keras)": [[449, "neural_compressor.tensorflow.algorithms.static_quant.keras.KerasConfigConverter"]], "kerasquery (class in neural_compressor.tensorflow.algorithms.static_quant.keras)": [[449, "neural_compressor.tensorflow.algorithms.static_quant.keras.KerasQuery"]], "neural_compressor.tensorflow.algorithms.static_quant.keras": [[449, "module-neural_compressor.tensorflow.algorithms.static_quant.keras"]], "neural_compressor.tensorflow.algorithms.static_quant.keras_utils.conv2d": [[450, "module-neural_compressor.tensorflow.algorithms.static_quant.keras_utils.conv2d"]], "neural_compressor.tensorflow.algorithms.static_quant.keras_utils.dense": [[451, "module-neural_compressor.tensorflow.algorithms.static_quant.keras_utils.dense"]], "neural_compressor.tensorflow.algorithms.static_quant.keras_utils.depthwise_conv2d": [[452, "module-neural_compressor.tensorflow.algorithms.static_quant.keras_utils.depthwise_conv2d"]], "neural_compressor.tensorflow.algorithms.static_quant.keras_utils": [[453, "module-neural_compressor.tensorflow.algorithms.static_quant.keras_utils"]], "neural_compressor.tensorflow.algorithms.static_quant.keras_utils.pool2d": [[454, "module-neural_compressor.tensorflow.algorithms.static_quant.keras_utils.pool2d"]], "neural_compressor.tensorflow.algorithms.static_quant.keras_utils.quantizer": [[455, "module-neural_compressor.tensorflow.algorithms.static_quant.keras_utils.quantizer"]], "neural_compressor.tensorflow.algorithms.static_quant.keras_utils.separable_conv2d": [[456, "module-neural_compressor.tensorflow.algorithms.static_quant.keras_utils.separable_conv2d"]], "neural_compressor.tensorflow": [[457, "module-neural_compressor.tensorflow"]], "neural_compressor.tensorflow.quantization.algorithm_entry": [[458, "module-neural_compressor.tensorflow.quantization.algorithm_entry"]], "static_quantize_entry() (in module neural_compressor.tensorflow.quantization.algorithm_entry)": [[458, "neural_compressor.tensorflow.quantization.algorithm_entry.static_quantize_entry"]], "smoothquantconfig (class in neural_compressor.tensorflow.quantization.config)": [[459, "neural_compressor.tensorflow.quantization.config.SmoothQuantConfig"]], "staticquantconfig (class in neural_compressor.tensorflow.quantization.config)": [[459, "neural_compressor.tensorflow.quantization.config.StaticQuantConfig"]], "get_all_registered_configs() (in module neural_compressor.tensorflow.quantization.config)": [[459, "neural_compressor.tensorflow.quantization.config.get_all_registered_configs"]], "get_default_sq_config() (in module neural_compressor.tensorflow.quantization.config)": [[459, "neural_compressor.tensorflow.quantization.config.get_default_sq_config"]], "get_default_static_quant_config() (in module neural_compressor.tensorflow.quantization.config)": [[459, "neural_compressor.tensorflow.quantization.config.get_default_static_quant_config"]], "neural_compressor.tensorflow.quantization.config": [[459, "module-neural_compressor.tensorflow.quantization.config"]], "neural_compressor.tensorflow.quantization": [[460, "module-neural_compressor.tensorflow.quantization"]], "neural_compressor.tensorflow.quantization.quantize": [[461, "module-neural_compressor.tensorflow.quantization.quantize"]], "quantize_model() (in module neural_compressor.tensorflow.quantization.quantize)": [[461, "neural_compressor.tensorflow.quantization.quantize.quantize_model"]], "convertaddtobiasaddoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_add_to_biasadd)": [[462, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_add_to_biasadd.ConvertAddToBiasAddOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_add_to_biasadd": [[462, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_add_to_biasadd"]], "convertlayoutoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_layout)": [[463, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_layout.ConvertLayoutOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_layout": [[463, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_layout"]], "convertleakyreluoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_leakyrelu)": [[464, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_leakyrelu.ConvertLeakyReluOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_leakyrelu": [[464, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_leakyrelu"]], "convertnantorandom (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_nan_to_random)": [[465, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_nan_to_random.ConvertNanToRandom"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_nan_to_random": [[465, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_nan_to_random"]], "convertplaceholdertoconst (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_placeholder_to_const)": [[466, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_placeholder_to_const": [[466, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_placeholder_to_const"]], "dilatedcontraction (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dilated_contraction)": [[467, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dilated_contraction.DilatedContraction"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dilated_contraction": [[467, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dilated_contraction"]], "injectdummybiasaddoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dummy_biasadd)": [[468, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dummy_biasadd.InjectDummyBiasAddOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dummy_biasadd": [[468, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dummy_biasadd"]], "expanddimsoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.expanddims_optimizer)": [[469, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.expanddims_optimizer.ExpandDimsOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.expanddims_optimizer": [[469, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.expanddims_optimizer"]], "fetchweightfromreshapeoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fetch_weight_from_reshape)": [[470, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fetch_weight_from_reshape.FetchWeightFromReshapeOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fetch_weight_from_reshape": [[470, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "foldbatchnormnodesoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_batch_norm)": [[471, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_batch_norm": [[471, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_batch_norm"]], "graphfoldconstantoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_constant)": [[472, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_constant": [[472, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_constant"]], "fusebiasaddandaddoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_biasadd_add)": [[473, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_biasadd_add.FuseBiasAddAndAddOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_biasadd_add": [[473, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_biasadd_add"]], "fusecolumnwisemuloptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_column_wise_mul)": [[474, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_column_wise_mul.FuseColumnWiseMulOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_column_wise_mul": [[474, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_column_wise_mul"]], "fuseconvwithmathoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_conv_with_math)": [[475, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_conv_with_math.FuseConvWithMathOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_conv_with_math": [[475, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_conv_with_math"]], "fusedecomposedbnoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn)": [[476, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn.FuseDecomposedBNOptimizer"]], "bypass_reshape() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn)": [[476, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn.bypass_reshape"]], "get_const_dim_count() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn)": [[476, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn.get_const_dim_count"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn": [[476, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn"]], "node_from_map() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn)": [[476, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn.node_from_map"]], "node_name_from_input() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn)": [[476, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn.node_name_from_input"]], "valid_reshape_inputs() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn)": [[476, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn.valid_reshape_inputs"]], "values_from_const() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn)": [[476, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn.values_from_const"]], "fusedecomposedinoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in)": [[477, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in.FuseDecomposedINOptimizer"]], "bypass_reshape() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in)": [[477, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in.bypass_reshape"]], "get_const_dim_count() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in)": [[477, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in.get_const_dim_count"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in": [[477, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in"]], "node_from_map() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in)": [[477, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in.node_from_map"]], "node_name_from_input() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in)": [[477, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in.node_name_from_input"]], "valid_reshape_inputs() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in)": [[477, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in.valid_reshape_inputs"]], "values_from_const() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in)": [[477, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in.values_from_const"]], "fusegeluoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_gelu)": [[478, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_gelu.FuseGeluOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_gelu": [[478, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_gelu"]], "fuselayernormoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm)": [[479, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm.FuseLayerNormOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm": [[479, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm"]], "node_from_map() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm)": [[479, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm.node_from_map"]], "node_name_from_input() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm)": [[479, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm.node_name_from_input"]], "values_from_const() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm)": [[479, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm.values_from_const"]], "fusepadwithconv2doptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_conv)": [[480, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_conv.FusePadWithConv2DOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_conv": [[480, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_conv"]], "fusepadwithfp32conv2doptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_fp32_conv)": [[481, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[481, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "fusetransposereshapeoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_reshape_transpose)": [[482, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_reshape_transpose.FuseTransposeReshapeOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_reshape_transpose": [[482, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_reshape_transpose"]], "graphcseoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.graph_cse_optimizer)": [[483, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.graph_cse_optimizer.GraphCseOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.graph_cse_optimizer": [[483, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.graph_cse_optimizer"]], "grappleroptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.grappler_pass)": [[484, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.grappler_pass.GrapplerOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.grappler_pass": [[484, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic": [[485, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic"]], "insertprintminmaxnode (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.insert_print_node)": [[486, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.insert_print_node.InsertPrintMinMaxNode"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.insert_print_node": [[486, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.insert_print_node"]], "movesqueezeafterreluoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.move_squeeze_after_relu)": [[487, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.move_squeeze_after_relu.MoveSqueezeAfterReluOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.move_squeeze_after_relu": [[487, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.move_squeeze_after_relu"]], "preoptimization (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.pre_optimize)": [[488, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.pre_optimize.PreOptimization"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.pre_optimize": [[488, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.pre_optimize"]], "removetrainingnodesoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.remove_training_nodes)": [[489, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.remove_training_nodes.RemoveTrainingNodesOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.remove_training_nodes": [[489, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.remove_training_nodes"]], "renamebatchnormoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.rename_batch_norm)": [[490, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.rename_batch_norm.RenameBatchNormOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.rename_batch_norm": [[490, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.rename_batch_norm"]], "splitsharedinputoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.split_shared_input)": [[491, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.split_shared_input.SplitSharedInputOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.split_shared_input": [[491, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.split_shared_input"]], "stripequivalentnodesoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_equivalent_nodes)": [[492, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_equivalent_nodes.StripEquivalentNodesOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_equivalent_nodes": [[492, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_equivalent_nodes"]], "stripunusednodesoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_unused_nodes)": [[493, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_unused_nodes.StripUnusedNodesOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_unused_nodes": [[493, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_unused_nodes"]], "switchoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.switch_optimizer)": [[494, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.switch_optimizer.SwitchOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.switch_optimizer": [[494, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.switch_optimizer"]], "graphrewriterbase (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.graph_base)": [[495, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.graph_base.GraphRewriterBase"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.graph_base": [[495, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.graph_base"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter": [[496, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter"]], "graphanalyzer (class in neural_compressor.tensorflow.quantization.utils.graph_util)": [[497, "neural_compressor.tensorflow.quantization.utils.graph_util.GraphAnalyzer"]], "graphrewriterhelper (class in neural_compressor.tensorflow.quantization.utils.graph_util)": [[497, "neural_compressor.tensorflow.quantization.utils.graph_util.GraphRewriterHelper"]], "neural_compressor.tensorflow.quantization.utils.graph_util": [[497, "module-neural_compressor.tensorflow.quantization.utils.graph_util"]], "neural_compressor.tensorflow.quantization.utils": [[498, "module-neural_compressor.tensorflow.quantization.utils"]], "quantizegraphhelper (class in neural_compressor.tensorflow.quantization.utils.quantize_graph_common)": [[499, "neural_compressor.tensorflow.quantization.utils.quantize_graph_common.QuantizeGraphHelper"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph_common": [[499, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph_common"]], "apply_inlining() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[500, "neural_compressor.tensorflow.quantization.utils.utility.apply_inlining"]], "collate_tf_preds() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[500, "neural_compressor.tensorflow.quantization.utils.utility.collate_tf_preds"]], "construct_function_from_graph_def() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[500, "neural_compressor.tensorflow.quantization.utils.utility.construct_function_from_graph_def"]], "disable_random() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[500, "neural_compressor.tensorflow.quantization.utils.utility.disable_random"]], "fix_ref_type_of_graph_def() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[500, "neural_compressor.tensorflow.quantization.utils.utility.fix_ref_type_of_graph_def"]], "generate_feed_dict() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[500, "neural_compressor.tensorflow.quantization.utils.utility.generate_feed_dict"]], "get_graph_def() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[500, "neural_compressor.tensorflow.quantization.utils.utility.get_graph_def"]], "get_input_output_node_names() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[500, "neural_compressor.tensorflow.quantization.utils.utility.get_input_output_node_names"]], "get_model_input_shape() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[500, "neural_compressor.tensorflow.quantization.utils.utility.get_model_input_shape"]], "get_tensor_by_name() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[500, "neural_compressor.tensorflow.quantization.utils.utility.get_tensor_by_name"]], "get_tensor_val_from_graph_node() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[500, "neural_compressor.tensorflow.quantization.utils.utility.get_tensor_val_from_graph_node"]], "get_weight_from_input_tensor() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[500, "neural_compressor.tensorflow.quantization.utils.utility.get_weight_from_input_tensor"]], "int8_node_name_reverse() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[500, "neural_compressor.tensorflow.quantization.utils.utility.int8_node_name_reverse"]], "is_ckpt_format() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[500, "neural_compressor.tensorflow.quantization.utils.utility.is_ckpt_format"]], "is_saved_model_format() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[500, "neural_compressor.tensorflow.quantization.utils.utility.is_saved_model_format"]], "iterator_sess_run() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[500, "neural_compressor.tensorflow.quantization.utils.utility.iterator_sess_run"]], "neural_compressor.tensorflow.quantization.utils.utility": [[500, "module-neural_compressor.tensorflow.quantization.utils.utility"]], "parse_saved_model() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[500, "neural_compressor.tensorflow.quantization.utils.utility.parse_saved_model"]], "read_graph() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[500, "neural_compressor.tensorflow.quantization.utils.utility.read_graph"]], "reconstruct_saved_model() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[500, "neural_compressor.tensorflow.quantization.utils.utility.reconstruct_saved_model"]], "strip_equivalent_nodes() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[500, "neural_compressor.tensorflow.quantization.utils.utility.strip_equivalent_nodes"]], "strip_unused_nodes() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[500, "neural_compressor.tensorflow.quantization.utils.utility.strip_unused_nodes"]], "tf_diagnosis_helper() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[500, "neural_compressor.tensorflow.quantization.utils.utility.tf_diagnosis_helper"]], "write_graph() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[500, "neural_compressor.tensorflow.quantization.utils.utility.write_graph"]], "neural_compressor.tensorflow.utils.constants": [[501, "module-neural_compressor.tensorflow.utils.constants"]], "basedataloader (class in neural_compressor.tensorflow.utils.data)": [[502, "neural_compressor.tensorflow.utils.data.BaseDataLoader"]], "dummydataset (class in neural_compressor.tensorflow.utils.data)": [[502, "neural_compressor.tensorflow.utils.data.DummyDataset"]], "dummydatasetv2 (class in neural_compressor.tensorflow.utils.data)": [[502, "neural_compressor.tensorflow.utils.data.DummyDatasetV2"]], "neural_compressor.tensorflow.utils.data": [[502, "module-neural_compressor.tensorflow.utils.data"]], "neural_compressor.tensorflow.utils": [[503, "module-neural_compressor.tensorflow.utils"]], "model (class in neural_compressor.tensorflow.utils.model)": [[504, "neural_compressor.tensorflow.utils.model.Model"]], "neural_compressor.tensorflow.utils.model": [[504, "module-neural_compressor.tensorflow.utils.model"]], "basemodel (class in neural_compressor.tensorflow.utils.model_wrappers)": [[505, "neural_compressor.tensorflow.utils.model_wrappers.BaseModel"]], "kerasmodel (class in neural_compressor.tensorflow.utils.model_wrappers)": [[505, "neural_compressor.tensorflow.utils.model_wrappers.KerasModel"]], "tensorflowbasemodel (class in neural_compressor.tensorflow.utils.model_wrappers)": [[505, "neural_compressor.tensorflow.utils.model_wrappers.TensorflowBaseModel"]], "tensorflowcheckpointmodel (class in neural_compressor.tensorflow.utils.model_wrappers)": [[505, "neural_compressor.tensorflow.utils.model_wrappers.TensorflowCheckpointModel"]], "tensorflowllmmodel (class in neural_compressor.tensorflow.utils.model_wrappers)": [[505, "neural_compressor.tensorflow.utils.model_wrappers.TensorflowLLMModel"]], "tensorflowmodel (class in neural_compressor.tensorflow.utils.model_wrappers)": [[505, "neural_compressor.tensorflow.utils.model_wrappers.TensorflowModel"]], "tensorflowqatmodel (class in neural_compressor.tensorflow.utils.model_wrappers)": [[505, "neural_compressor.tensorflow.utils.model_wrappers.TensorflowQATModel"]], "tensorflowsavedmodelmodel (class in neural_compressor.tensorflow.utils.model_wrappers)": [[505, "neural_compressor.tensorflow.utils.model_wrappers.TensorflowSavedModelModel"]], "checkpoint_session() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[505, "neural_compressor.tensorflow.utils.model_wrappers.checkpoint_session"]], "estimator_session() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[505, "neural_compressor.tensorflow.utils.model_wrappers.estimator_session"]], "frozen_pb_session() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[505, "neural_compressor.tensorflow.utils.model_wrappers.frozen_pb_session"]], "get_model_type() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[505, "neural_compressor.tensorflow.utils.model_wrappers.get_model_type"]], "graph_def_session() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[505, "neural_compressor.tensorflow.utils.model_wrappers.graph_def_session"]], "graph_session() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[505, "neural_compressor.tensorflow.utils.model_wrappers.graph_session"]], "keras_session() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[505, "neural_compressor.tensorflow.utils.model_wrappers.keras_session"]], "load_saved_model() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[505, "neural_compressor.tensorflow.utils.model_wrappers.load_saved_model"]], "neural_compressor.tensorflow.utils.model_wrappers": [[505, "module-neural_compressor.tensorflow.utils.model_wrappers"]], "saved_model_session() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[505, "neural_compressor.tensorflow.utils.model_wrappers.saved_model_session"]], "slim_session() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[505, "neural_compressor.tensorflow.utils.model_wrappers.slim_session"]], "validate_and_inference_input_output() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[505, "neural_compressor.tensorflow.utils.model_wrappers.validate_and_inference_input_output"]], "validate_graph_node() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[505, "neural_compressor.tensorflow.utils.model_wrappers.validate_graph_node"]], "tfslimnetsfactory (class in neural_compressor.tensorflow.utils.nets_factory)": [[506, "neural_compressor.tensorflow.utils.nets_factory.TFSlimNetsFactory"]], "neural_compressor.tensorflow.utils.nets_factory": [[506, "module-neural_compressor.tensorflow.utils.nets_factory"]], "captureoutputtofile (class in neural_compressor.tensorflow.utils.utility)": [[507, "neural_compressor.tensorflow.utils.utility.CaptureOutputToFile"]], "cpuinfo (class in neural_compressor.tensorflow.utils.utility)": [[507, "neural_compressor.tensorflow.utils.utility.CpuInfo"]], "dequantize() (in module neural_compressor.tensorflow.utils.utility)": [[507, "neural_compressor.tensorflow.utils.utility.Dequantize"]], "lazyimport (class in neural_compressor.tensorflow.utils.utility)": [[507, "neural_compressor.tensorflow.utils.utility.LazyImport"]], "statistics (class in neural_compressor.tensorflow.utils.utility)": [[507, "neural_compressor.tensorflow.utils.utility.Statistics"]], "combine_histogram() (in module neural_compressor.tensorflow.utils.utility)": [[507, "neural_compressor.tensorflow.utils.utility.combine_histogram"]], "deep_get() (in module neural_compressor.tensorflow.utils.utility)": [[507, "neural_compressor.tensorflow.utils.utility.deep_get"]], "dequantize_weight() (in module neural_compressor.tensorflow.utils.utility)": [[507, "neural_compressor.tensorflow.utils.utility.dequantize_weight"]], "disable_random() (in module neural_compressor.tensorflow.utils.utility)": [[507, "neural_compressor.tensorflow.utils.utility.disable_random"]], "dump_data_to_local() (in module neural_compressor.tensorflow.utils.utility)": [[507, "neural_compressor.tensorflow.utils.utility.dump_data_to_local"]], "dump_elapsed_time() (in module neural_compressor.tensorflow.utils.utility)": [[507, "neural_compressor.tensorflow.utils.utility.dump_elapsed_time"]], "get_all_fp32_data() (in module neural_compressor.tensorflow.utils.utility)": [[507, "neural_compressor.tensorflow.utils.utility.get_all_fp32_data"]], "get_tensor_histogram() (in module neural_compressor.tensorflow.utils.utility)": [[507, "neural_compressor.tensorflow.utils.utility.get_tensor_histogram"]], "itex_installed() (in module neural_compressor.tensorflow.utils.utility)": [[507, "neural_compressor.tensorflow.utils.utility.itex_installed"]], "load_data_from_pkl() (in module neural_compressor.tensorflow.utils.utility)": [[507, "neural_compressor.tensorflow.utils.utility.load_data_from_pkl"]], "neural_compressor.tensorflow.utils.utility": [[507, "module-neural_compressor.tensorflow.utils.utility"]], "register_algo() (in module neural_compressor.tensorflow.utils.utility)": [[507, "neural_compressor.tensorflow.utils.utility.register_algo"]], "singleton() (in module neural_compressor.tensorflow.utils.utility)": [[507, "neural_compressor.tensorflow.utils.utility.singleton"]], "version1_eq_version2() (in module neural_compressor.tensorflow.utils.utility)": [[507, "neural_compressor.tensorflow.utils.utility.version1_eq_version2"]], "version1_gt_version2() (in module neural_compressor.tensorflow.utils.utility)": [[507, "neural_compressor.tensorflow.utils.utility.version1_gt_version2"]], "version1_gte_version2() (in module neural_compressor.tensorflow.utils.utility)": [[507, "neural_compressor.tensorflow.utils.utility.version1_gte_version2"]], "version1_lt_version2() (in module neural_compressor.tensorflow.utils.utility)": [[507, "neural_compressor.tensorflow.utils.utility.version1_lt_version2"]], "version1_lte_version2() (in module neural_compressor.tensorflow.utils.utility)": [[507, "neural_compressor.tensorflow.utils.utility.version1_lte_version2"]], "neural_compressor.torch.algorithms.habana_fp8.fp8_quant": [[508, "module-neural_compressor.torch.algorithms.habana_fp8.fp8_quant"]], "neural_compressor.torch.algorithms.habana_fp8": [[509, "module-neural_compressor.torch.algorithms.habana_fp8"]], "neural_compressor.torch.algorithms.habana_fp8.modules": [[510, "module-neural_compressor.torch.algorithms.habana_fp8.modules"]], "neural_compressor.torch.algorithms.habana_fp8.observer": [[511, "module-neural_compressor.torch.algorithms.habana_fp8.observer"]], "neural_compressor.torch.algorithms": [[512, "module-neural_compressor.torch.algorithms"]], "neural_compressor.torch.algorithms.layer_wise": [[513, "module-neural_compressor.torch.algorithms.layer_wise"]], "load() (in module neural_compressor.torch.algorithms.layer_wise.load)": [[514, "neural_compressor.torch.algorithms.layer_wise.load.load"]], "neural_compressor.torch.algorithms.layer_wise.load": [[514, "module-neural_compressor.torch.algorithms.layer_wise.load"]], "neural_compressor.torch.algorithms.layer_wise.modified_pickle": [[515, "module-neural_compressor.torch.algorithms.layer_wise.modified_pickle"]], "dowload_hf_model() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[516, "neural_compressor.torch.algorithms.layer_wise.utils.dowload_hf_model"]], "get_children() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[516, "neural_compressor.torch.algorithms.layer_wise.utils.get_children"]], "get_module() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[516, "neural_compressor.torch.algorithms.layer_wise.utils.get_module"]], "get_named_children() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[516, "neural_compressor.torch.algorithms.layer_wise.utils.get_named_children"]], "get_super_module_by_name() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[516, "neural_compressor.torch.algorithms.layer_wise.utils.get_super_module_by_name"]], "load_empty_model() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[516, "neural_compressor.torch.algorithms.layer_wise.utils.load_empty_model"]], "load_layer_wise_quantized_model() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[516, "neural_compressor.torch.algorithms.layer_wise.utils.load_layer_wise_quantized_model"]], "load_tensor() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[516, "neural_compressor.torch.algorithms.layer_wise.utils.load_tensor"]], "load_tensor_from_shard() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[516, "neural_compressor.torch.algorithms.layer_wise.utils.load_tensor_from_shard"]], "neural_compressor.torch.algorithms.layer_wise.utils": [[516, "module-neural_compressor.torch.algorithms.layer_wise.utils"]], "update_module() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[516, "neural_compressor.torch.algorithms.layer_wise.utils.update_module"]], "actawareweightquant (class in neural_compressor.torch.algorithms.weight_only.awq)": [[517, "neural_compressor.torch.algorithms.weight_only.awq.ActAwareWeightQuant"]], "awq_quantize() (in module neural_compressor.torch.algorithms.weight_only.awq)": [[517, "neural_compressor.torch.algorithms.weight_only.awq.awq_quantize"]], "neural_compressor.torch.algorithms.weight_only.awq": [[517, "module-neural_compressor.torch.algorithms.weight_only.awq"]], "gptq (class in neural_compressor.torch.algorithms.weight_only.gptq)": [[518, "neural_compressor.torch.algorithms.weight_only.gptq.GPTQ"]], "gptquantizer (class in neural_compressor.torch.algorithms.weight_only.gptq)": [[518, "neural_compressor.torch.algorithms.weight_only.gptq.GPTQuantizer"]], "find_layers() (in module neural_compressor.torch.algorithms.weight_only.gptq)": [[518, "neural_compressor.torch.algorithms.weight_only.gptq.find_layers"]], "find_layers_name() (in module neural_compressor.torch.algorithms.weight_only.gptq)": [[518, "neural_compressor.torch.algorithms.weight_only.gptq.find_layers_name"]], "gptq_quantize() (in module neural_compressor.torch.algorithms.weight_only.gptq)": [[518, "neural_compressor.torch.algorithms.weight_only.gptq.gptq_quantize"]], "is_leaf() (in module neural_compressor.torch.algorithms.weight_only.gptq)": [[518, "neural_compressor.torch.algorithms.weight_only.gptq.is_leaf"]], "log_quantizable_layers_per_transformer() (in module neural_compressor.torch.algorithms.weight_only.gptq)": [[518, "neural_compressor.torch.algorithms.weight_only.gptq.log_quantizable_layers_per_transformer"]], "neural_compressor.torch.algorithms.weight_only.gptq": [[518, "module-neural_compressor.torch.algorithms.weight_only.gptq"]], "quantize() (in module neural_compressor.torch.algorithms.weight_only.gptq)": [[518, "neural_compressor.torch.algorithms.weight_only.gptq.quantize"]], "trace_gptq_target_blocks() (in module neural_compressor.torch.algorithms.weight_only.gptq)": [[518, "neural_compressor.torch.algorithms.weight_only.gptq.trace_gptq_target_blocks"]], "neural_compressor.torch.algorithms.weight_only": [[519, "module-neural_compressor.torch.algorithms.weight_only"]], "fakeaffinetensorquantfunction (class in neural_compressor.torch.algorithms.weight_only.modules)": [[520, "neural_compressor.torch.algorithms.weight_only.modules.FakeAffineTensorQuantFunction"]], "mullinear (class in neural_compressor.torch.algorithms.weight_only.modules)": [[520, "neural_compressor.torch.algorithms.weight_only.modules.MulLinear"]], "teqlinearfakequant (class in neural_compressor.torch.algorithms.weight_only.modules)": [[520, "neural_compressor.torch.algorithms.weight_only.modules.TEQLinearFakeQuant"]], "neural_compressor.torch.algorithms.weight_only.modules": [[520, "module-neural_compressor.torch.algorithms.weight_only.modules"]], "neural_compressor.torch.algorithms.weight_only.rtn": [[521, "module-neural_compressor.torch.algorithms.weight_only.rtn"]], "rtn_quantize() (in module neural_compressor.torch.algorithms.weight_only.rtn)": [[521, "neural_compressor.torch.algorithms.weight_only.rtn.rtn_quantize"]], "calibration() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[522, "neural_compressor.torch.algorithms.weight_only.utility.calibration"]], "fetch_module() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[522, "neural_compressor.torch.algorithms.weight_only.utility.fetch_module"]], "get_absorb_layers() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[522, "neural_compressor.torch.algorithms.weight_only.utility.get_absorb_layers"]], "get_block_prefix() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[522, "neural_compressor.torch.algorithms.weight_only.utility.get_block_prefix"]], "get_example_input() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[522, "neural_compressor.torch.algorithms.weight_only.utility.get_example_input"]], "get_hidden_states() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[522, "neural_compressor.torch.algorithms.weight_only.utility.get_hidden_states"]], "get_module() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[522, "neural_compressor.torch.algorithms.weight_only.utility.get_module"]], "get_module_input_output() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[522, "neural_compressor.torch.algorithms.weight_only.utility.get_module_input_output"]], "neural_compressor.torch.algorithms.weight_only.utility": [[522, "module-neural_compressor.torch.algorithms.weight_only.utility"]], "qdq_weight_actor() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[522, "neural_compressor.torch.algorithms.weight_only.utility.qdq_weight_actor"]], "qdq_weight_asym() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[522, "neural_compressor.torch.algorithms.weight_only.utility.qdq_weight_asym"]], "qdq_weight_sym() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[522, "neural_compressor.torch.algorithms.weight_only.utility.qdq_weight_sym"]], "quant_tensor() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[522, "neural_compressor.torch.algorithms.weight_only.utility.quant_tensor"]], "quant_weight_w_scale() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[522, "neural_compressor.torch.algorithms.weight_only.utility.quant_weight_w_scale"]], "quantize_4bit() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[522, "neural_compressor.torch.algorithms.weight_only.utility.quantize_4bit"]], "search_clip() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[522, "neural_compressor.torch.algorithms.weight_only.utility.search_clip"]], "set_module() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[522, "neural_compressor.torch.algorithms.weight_only.utility.set_module"]], "autocast (class in neural_compressor.torch.amp.autocast)": [[523, "neural_compressor.torch.amp.autocast.autocast"]], "neural_compressor.torch.amp.autocast": [[523, "module-neural_compressor.torch.amp.autocast"]], "neural_compressor.torch.amp.fp8.functions": [[524, "module-neural_compressor.torch.amp.fp8.functions"]], "neural_compressor.torch.amp.fp8": [[525, "module-neural_compressor.torch.amp.fp8"]], "neural_compressor.torch.amp": [[526, "module-neural_compressor.torch.amp"]], "neural_compressor.torch": [[527, "module-neural_compressor.torch"]], "neural_compressor.torch.quantization.algorithm_entry": [[528, "module-neural_compressor.torch.quantization.algorithm_entry"]], "rtn_entry() (in module neural_compressor.torch.quantization.algorithm_entry)": [[528, "neural_compressor.torch.quantization.algorithm_entry.rtn_entry"]], "autotune() (in module neural_compressor.torch.quantization.autotune)": [[529, "neural_compressor.torch.quantization.autotune.autotune"]], "neural_compressor.torch.quantization.autotune": [[529, "module-neural_compressor.torch.quantization.autotune"]], "gptqconfig (class in neural_compressor.torch.quantization.config)": [[530, "neural_compressor.torch.quantization.config.GPTQConfig"]], "rtnconfig (class in neural_compressor.torch.quantization.config)": [[530, "neural_compressor.torch.quantization.config.RTNConfig"]], "get_default_gptq_config() (in module neural_compressor.torch.quantization.config)": [[530, "neural_compressor.torch.quantization.config.get_default_gptq_config"]], "get_default_rtn_config() (in module neural_compressor.torch.quantization.config)": [[530, "neural_compressor.torch.quantization.config.get_default_rtn_config"]], "neural_compressor.torch.quantization.config": [[530, "module-neural_compressor.torch.quantization.config"]], "neural_compressor.torch.quantization": [[531, "module-neural_compressor.torch.quantization"]], "neural_compressor.torch.quantization.modules": [[532, "module-neural_compressor.torch.quantization.modules"]], "neural_compressor.torch.quantization.quantize": [[533, "module-neural_compressor.torch.quantization.quantize"]], "quantize() (in module neural_compressor.torch.quantization.quantize)": [[533, "neural_compressor.torch.quantization.quantize.quantize"]], "neural_compressor.torch.utils.constants": [[534, "module-neural_compressor.torch.utils.constants"]], "neural_compressor.torch.utils.environ": [[535, "module-neural_compressor.torch.utils.environ"]], "neural_compressor.torch.utils": [[536, "module-neural_compressor.torch.utils"]], "fetch_module() (in module neural_compressor.torch.utils.utility)": [[537, "neural_compressor.torch.utils.utility.fetch_module"]], "neural_compressor.torch.utils.utility": [[537, "module-neural_compressor.torch.utils.utility"]], "register_algo() (in module neural_compressor.torch.utils.utility)": [[537, "neural_compressor.torch.utils.utility.register_algo"]], "set_module() (in module neural_compressor.torch.utils.utility)": [[537, "neural_compressor.torch.utils.utility.set_module"]], "callbacks (class in neural_compressor.training)": [[538, "neural_compressor.training.CallBacks"]], "compressionmanager (class in neural_compressor.training)": [[538, "neural_compressor.training.CompressionManager"]], "fit() (in module neural_compressor.training)": [[538, "neural_compressor.training.fit"]], "neural_compressor.training": [[538, "module-neural_compressor.training"]], "prepare_compression() (in module neural_compressor.training)": [[538, "neural_compressor.training.prepare_compression"]], "layerhistogramcollector (class in neural_compressor.utils.collect_layer_histogram)": [[539, "neural_compressor.utils.collect_layer_histogram.LayerHistogramCollector"]], "neural_compressor.utils.collect_layer_histogram": [[539, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[540, "module-neural_compressor.utils.constant"]], "create_dataloader() (in module neural_compressor.utils.create_obj_from_config)": [[541, "neural_compressor.utils.create_obj_from_config.create_dataloader"]], "create_dataset() (in module neural_compressor.utils.create_obj_from_config)": [[541, "neural_compressor.utils.create_obj_from_config.create_dataset"]], "create_eval_func() (in module neural_compressor.utils.create_obj_from_config)": [[541, "neural_compressor.utils.create_obj_from_config.create_eval_func"]], "create_train_func() (in module neural_compressor.utils.create_obj_from_config)": [[541, "neural_compressor.utils.create_obj_from_config.create_train_func"]], "get_algorithm() (in module neural_compressor.utils.create_obj_from_config)": [[541, "neural_compressor.utils.create_obj_from_config.get_algorithm"]], "get_func_from_config() (in module neural_compressor.utils.create_obj_from_config)": [[541, "neural_compressor.utils.create_obj_from_config.get_func_from_config"]], "get_metrics() (in module neural_compressor.utils.create_obj_from_config)": [[541, "neural_compressor.utils.create_obj_from_config.get_metrics"]], "get_postprocess() (in module neural_compressor.utils.create_obj_from_config)": [[541, "neural_compressor.utils.create_obj_from_config.get_postprocess"]], "get_preprocess() (in module neural_compressor.utils.create_obj_from_config)": [[541, "neural_compressor.utils.create_obj_from_config.get_preprocess"]], "neural_compressor.utils.create_obj_from_config": [[541, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils": [[542, "module-neural_compressor.utils"]], "kl_divergence (class in neural_compressor.utils.kl_divergence)": [[543, "neural_compressor.utils.kl_divergence.KL_Divergence"]], "neural_compressor.utils.kl_divergence": [[543, "module-neural_compressor.utils.kl_divergence"]], "optimizedmodel (class in neural_compressor.utils.load_huggingface)": [[544, "neural_compressor.utils.load_huggingface.OptimizedModel"]], "export_compressed_model() (in module neural_compressor.utils.load_huggingface)": [[544, "neural_compressor.utils.load_huggingface.export_compressed_model"]], "neural_compressor.utils.load_huggingface": [[544, "module-neural_compressor.utils.load_huggingface"]], "save_for_huggingface_upstream() (in module neural_compressor.utils.load_huggingface)": [[544, "neural_compressor.utils.load_huggingface.save_for_huggingface_upstream"]], "logger (class in neural_compressor.utils.logger)": [[545, "neural_compressor.utils.logger.Logger"]], "debug() (in module neural_compressor.utils.logger)": [[545, "neural_compressor.utils.logger.debug"]], "error() (in module neural_compressor.utils.logger)": [[545, "neural_compressor.utils.logger.error"]], "fatal() (in module neural_compressor.utils.logger)": [[545, "neural_compressor.utils.logger.fatal"]], "info() (in module neural_compressor.utils.logger)": [[545, "neural_compressor.utils.logger.info"]], "log() (in module neural_compressor.utils.logger)": [[545, "neural_compressor.utils.logger.log"]], "neural_compressor.utils.logger": [[545, "module-neural_compressor.utils.logger"]], "warn() (in module neural_compressor.utils.logger)": [[545, "neural_compressor.utils.logger.warn"]], "warning() (in module neural_compressor.utils.logger)": [[545, "neural_compressor.utils.logger.warning"]], "get_model_path() (in module neural_compressor.utils.neural_insights_utils)": [[546, "neural_compressor.utils.neural_insights_utils.get_model_path"]], "neural_compressor.utils.neural_insights_utils": [[546, "module-neural_compressor.utils.neural_insights_utils"]], "register_neural_insights_workload() (in module neural_compressor.utils.neural_insights_utils)": [[546, "neural_compressor.utils.neural_insights_utils.register_neural_insights_workload"]], "update_neural_insights_workload() (in module neural_compressor.utils.neural_insights_utils)": [[546, "neural_compressor.utils.neural_insights_utils.update_neural_insights_workload"]], "update_neural_insights_workload_accuracy_data() (in module neural_compressor.utils.neural_insights_utils)": [[546, "neural_compressor.utils.neural_insights_utils.update_neural_insights_workload_accuracy_data"]], "neural_compressor.utils.options": [[547, "module-neural_compressor.utils.options"]], "onnxrt (class in neural_compressor.utils.options)": [[547, "neural_compressor.utils.options.onnxrt"]], "is_int8_model() (in module neural_compressor.utils.pytorch)": [[548, "neural_compressor.utils.pytorch.is_int8_model"]], "load() (in module neural_compressor.utils.pytorch)": [[548, "neural_compressor.utils.pytorch.load"]], "load_weight_only() (in module neural_compressor.utils.pytorch)": [[548, "neural_compressor.utils.pytorch.load_weight_only"]], "neural_compressor.utils.pytorch": [[548, "module-neural_compressor.utils.pytorch"]], "recover_model_from_json() (in module neural_compressor.utils.pytorch)": [[548, "neural_compressor.utils.pytorch.recover_model_from_json"]], "captureoutputtofile (class in neural_compressor.utils.utility)": [[549, "neural_compressor.utils.utility.CaptureOutputToFile"]], "cpuinfo (class in neural_compressor.utils.utility)": [[549, "neural_compressor.utils.utility.CpuInfo"]], "dequantize() (in module neural_compressor.utils.utility)": [[549, "neural_compressor.utils.utility.Dequantize"]], "dotdict (class in neural_compressor.utils.utility)": [[549, "neural_compressor.utils.utility.DotDict"]], "global_state (class in neural_compressor.utils.utility)": [[549, "neural_compressor.utils.utility.GLOBAL_STATE"]], "lazyimport (class in neural_compressor.utils.utility)": [[549, "neural_compressor.utils.utility.LazyImport"]], "mode (class in neural_compressor.utils.utility)": [[549, "neural_compressor.utils.utility.MODE"]], "opentry (class in neural_compressor.utils.utility)": [[549, "neural_compressor.utils.utility.OpEntry"]], "statistics (class in neural_compressor.utils.utility)": [[549, "neural_compressor.utils.utility.Statistics"]], "alias_param() (in module neural_compressor.utils.utility)": [[549, "neural_compressor.utils.utility.alias_param"]], "calculate_mse() (in module neural_compressor.utils.utility)": [[549, "neural_compressor.utils.utility.calculate_mse"]], "check_key_exist() (in module neural_compressor.utils.utility)": [[549, "neural_compressor.utils.utility.check_key_exist"]], "combine_histogram() (in module neural_compressor.utils.utility)": [[549, "neural_compressor.utils.utility.combine_histogram"]], "compare_objects() (in module neural_compressor.utils.utility)": [[549, "neural_compressor.utils.utility.compare_objects"]], "compute_sparsity() (in module neural_compressor.utils.utility)": [[549, "neural_compressor.utils.utility.compute_sparsity"]], "dequantize_weight() (in module neural_compressor.utils.utility)": [[549, "neural_compressor.utils.utility.dequantize_weight"]], "dump_class_attrs() (in module neural_compressor.utils.utility)": [[549, "neural_compressor.utils.utility.dump_class_attrs"]], "dump_data_to_local() (in module neural_compressor.utils.utility)": [[549, "neural_compressor.utils.utility.dump_data_to_local"]], "dump_elapsed_time() (in module neural_compressor.utils.utility)": [[549, "neural_compressor.utils.utility.dump_elapsed_time"]], "dump_table() (in module neural_compressor.utils.utility)": [[549, "neural_compressor.utils.utility.dump_table"]], "dump_table_to_csv() (in module neural_compressor.utils.utility)": [[549, "neural_compressor.utils.utility.dump_table_to_csv"]], "equal_dicts() (in module neural_compressor.utils.utility)": [[549, "neural_compressor.utils.utility.equal_dicts"]], "fault_tolerant_file() (in module neural_compressor.utils.utility)": [[549, "neural_compressor.utils.utility.fault_tolerant_file"]], "get_all_fp32_data() (in module neural_compressor.utils.utility)": [[549, "neural_compressor.utils.utility.get_all_fp32_data"]], "get_number_of_sockets() (in module neural_compressor.utils.utility)": [[549, "neural_compressor.utils.utility.get_number_of_sockets"]], "get_op_list() (in module neural_compressor.utils.utility)": [[549, "neural_compressor.utils.utility.get_op_list"]], "get_size() (in module neural_compressor.utils.utility)": [[549, "neural_compressor.utils.utility.get_size"]], "get_tensor_histogram() (in module neural_compressor.utils.utility)": [[549, "neural_compressor.utils.utility.get_tensor_histogram"]], "get_tensors_info() (in module neural_compressor.utils.utility)": [[549, "neural_compressor.utils.utility.get_tensors_info"]], "get_tuning_history() (in module neural_compressor.utils.utility)": [[549, "neural_compressor.utils.utility.get_tuning_history"]], "get_weights_details() (in module neural_compressor.utils.utility)": [[549, "neural_compressor.utils.utility.get_weights_details"]], "load_data_from_pkl() (in module neural_compressor.utils.utility)": [[549, "neural_compressor.utils.utility.load_data_from_pkl"]], "mse_metric_gap() (in module neural_compressor.utils.utility)": [[549, "neural_compressor.utils.utility.mse_metric_gap"]], "neural_compressor.utils.utility": [[549, "module-neural_compressor.utils.utility"]], "print_op_list() (in module neural_compressor.utils.utility)": [[549, "neural_compressor.utils.utility.print_op_list"]], "print_table() (in module neural_compressor.utils.utility)": [[549, "neural_compressor.utils.utility.print_table"]], "recover() (in module neural_compressor.utils.utility)": [[549, "neural_compressor.utils.utility.recover"]], "set_random_seed() (in module neural_compressor.utils.utility)": [[549, "neural_compressor.utils.utility.set_random_seed"]], "set_resume_from() (in module neural_compressor.utils.utility)": [[549, "neural_compressor.utils.utility.set_resume_from"]], "set_tensorboard() (in module neural_compressor.utils.utility)": [[549, "neural_compressor.utils.utility.set_tensorboard"]], "set_workspace() (in module neural_compressor.utils.utility)": [[549, "neural_compressor.utils.utility.set_workspace"]], "show_memory_info() (in module neural_compressor.utils.utility)": [[549, "neural_compressor.utils.utility.show_memory_info"]], "singleton() (in module neural_compressor.utils.utility)": [[549, "neural_compressor.utils.utility.singleton"]], "str2array() (in module neural_compressor.utils.utility)": [[549, "neural_compressor.utils.utility.str2array"]], "time_limit() (in module neural_compressor.utils.utility)": [[549, "neural_compressor.utils.utility.time_limit"]], "version1_eq_version2() (in module neural_compressor.utils.utility)": [[549, "neural_compressor.utils.utility.version1_eq_version2"]], "version1_gt_version2() (in module neural_compressor.utils.utility)": [[549, "neural_compressor.utils.utility.version1_gt_version2"]], "version1_gte_version2() (in module neural_compressor.utils.utility)": [[549, "neural_compressor.utils.utility.version1_gte_version2"]], "version1_lt_version2() (in module neural_compressor.utils.utility)": [[549, "neural_compressor.utils.utility.version1_lt_version2"]], "version1_lte_version2() (in module neural_compressor.utils.utility)": [[549, "neural_compressor.utils.utility.version1_lte_version2"]], "weightsdetails (class in neural_compressor.utils.weights_details)": [[550, "neural_compressor.utils.weights_details.WeightsDetails"]], "weightsstatistics (class in neural_compressor.utils.weights_details)": [[550, "neural_compressor.utils.weights_details.WeightsStatistics"]], "neural_compressor.utils.weights_details": [[550, "module-neural_compressor.utils.weights_details"]], "neural_compressor.version": [[551, "module-neural_compressor.version"]]}})