Search.setIndex({"docnames": ["autoapi/block_mask/index", "autoapi/neural_compressor/algorithm/algorithm/index", "autoapi/neural_compressor/algorithm/fast_bias_correction/index", "autoapi/neural_compressor/algorithm/index", "autoapi/neural_compressor/algorithm/smooth_quant/index", "autoapi/neural_compressor/algorithm/weight_correction/index", "autoapi/neural_compressor/benchmark/index", "autoapi/neural_compressor/config/index", "autoapi/neural_compressor/contrib/index", "autoapi/neural_compressor/contrib/strategy/index", "autoapi/neural_compressor/contrib/strategy/sigopt/index", "autoapi/neural_compressor/contrib/strategy/tpe/index", "autoapi/neural_compressor/data/datasets/bert_dataset/index", "autoapi/neural_compressor/data/datasets/coco_dataset/index", "autoapi/neural_compressor/data/datasets/dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/data/datasets/index", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/data/filters/coco_filter/index", "autoapi/neural_compressor/data/filters/filter/index", "autoapi/neural_compressor/data/filters/index", "autoapi/neural_compressor/data/index", "autoapi/neural_compressor/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/data/transforms/index", "autoapi/neural_compressor/data/transforms/postprocess/index", "autoapi/neural_compressor/data/transforms/tokenization/index", "autoapi/neural_compressor/data/transforms/transform/index", "autoapi/neural_compressor/experimental/benchmark/index", "autoapi/neural_compressor/experimental/common/criterion/index", "autoapi/neural_compressor/experimental/common/dataloader/index", "autoapi/neural_compressor/experimental/common/index", "autoapi/neural_compressor/experimental/common/metric/index", "autoapi/neural_compressor/experimental/common/model/index", "autoapi/neural_compressor/experimental/common/optimizer/index", "autoapi/neural_compressor/experimental/common/postprocess/index", "autoapi/neural_compressor/experimental/common/torch_utils/index", "autoapi/neural_compressor/experimental/component/index", "autoapi/neural_compressor/experimental/compression/index", "autoapi/neural_compressor/experimental/contrib/index", "autoapi/neural_compressor/experimental/contrib/strategy/index", "autoapi/neural_compressor/experimental/contrib/strategy/sigopt/index", "autoapi/neural_compressor/experimental/contrib/strategy/tpe/index", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index", "autoapi/neural_compressor/experimental/data/dataloaders/index", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/index", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index", "autoapi/neural_compressor/experimental/data/filters/filter/index", "autoapi/neural_compressor/experimental/data/filters/index", "autoapi/neural_compressor/experimental/data/index", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/experimental/data/transforms/index", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index", "autoapi/neural_compressor/experimental/data/transforms/transform/index", "autoapi/neural_compressor/experimental/distillation/index", "autoapi/neural_compressor/experimental/export/index", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index", "autoapi/neural_compressor/experimental/export/tf2onnx/index", "autoapi/neural_compressor/experimental/export/torch2onnx/index", "autoapi/neural_compressor/experimental/graph_optimization/index", "autoapi/neural_compressor/experimental/index", "autoapi/neural_compressor/experimental/metric/bleu/index", "autoapi/neural_compressor/experimental/metric/bleu_util/index", "autoapi/neural_compressor/experimental/metric/coco_label_map/index", "autoapi/neural_compressor/experimental/metric/coco_tools/index", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index", "autoapi/neural_compressor/experimental/metric/f1/index", "autoapi/neural_compressor/experimental/metric/index", "autoapi/neural_compressor/experimental/metric/metric/index", "autoapi/neural_compressor/experimental/mixed_precision/index", "autoapi/neural_compressor/experimental/model_conversion/index", "autoapi/neural_compressor/experimental/nas/basic_nas/index", "autoapi/neural_compressor/experimental/nas/dynas/index", "autoapi/neural_compressor/experimental/nas/index", "autoapi/neural_compressor/experimental/nas/nas/index", "autoapi/neural_compressor/experimental/nas/nas_utils/index", "autoapi/neural_compressor/experimental/nas/search_algorithms/index", "autoapi/neural_compressor/experimental/pruner_legacy/gradient_sensitivity/index", "autoapi/neural_compressor/experimental/pruner_legacy/group_lasso/index", "autoapi/neural_compressor/experimental/pruner_legacy/index", "autoapi/neural_compressor/experimental/pruner_legacy/magnitude/index", "autoapi/neural_compressor/experimental/pruner_legacy/pattern_lock/index", "autoapi/neural_compressor/experimental/pruner_legacy/pruner/index", "autoapi/neural_compressor/experimental/pruning/index", "autoapi/neural_compressor/experimental/pruning_recipes/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index", "autoapi/neural_compressor/experimental/pruning_v2/index", "autoapi/neural_compressor/experimental/pytorch_pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index", "autoapi/neural_compressor/experimental/quantization/index", "autoapi/neural_compressor/experimental/scheduler/index", "autoapi/neural_compressor/experimental/strategy/auto_mixed_precision/index", "autoapi/neural_compressor/experimental/strategy/basic/index", "autoapi/neural_compressor/experimental/strategy/bayesian/index", "autoapi/neural_compressor/experimental/strategy/exhaustive/index", "autoapi/neural_compressor/experimental/strategy/index", "autoapi/neural_compressor/experimental/strategy/mse/index", "autoapi/neural_compressor/experimental/strategy/mse_v2/index", "autoapi/neural_compressor/experimental/strategy/random/index", "autoapi/neural_compressor/experimental/strategy/strategy/index", "autoapi/neural_compressor/experimental/strategy/utils/constant/index", "autoapi/neural_compressor/experimental/strategy/utils/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_sampler/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_space/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_structs/index", "autoapi/neural_compressor/experimental/strategy/utils/utility/index", "autoapi/neural_compressor/index", "autoapi/neural_compressor/metric/bleu/index", "autoapi/neural_compressor/metric/bleu_util/index", "autoapi/neural_compressor/metric/coco_label_map/index", "autoapi/neural_compressor/metric/coco_tools/index", "autoapi/neural_compressor/metric/evaluate_squad/index", "autoapi/neural_compressor/metric/f1/index", "autoapi/neural_compressor/metric/index", "autoapi/neural_compressor/metric/metric/index", "autoapi/neural_compressor/mix_precision/index", "autoapi/neural_compressor/model/base_model/index", "autoapi/neural_compressor/model/index", "autoapi/neural_compressor/model/keras_model/index", "autoapi/neural_compressor/model/model/index", "autoapi/neural_compressor/model/mxnet_model/index", "autoapi/neural_compressor/model/nets_factory/index", "autoapi/neural_compressor/model/onnx_model/index", "autoapi/neural_compressor/model/tensorflow_model/index", "autoapi/neural_compressor/model/torch_model/index", "autoapi/neural_compressor/objective/index", "autoapi/neural_compressor/profiling/index", "autoapi/neural_compressor/quantization/index", "autoapi/neural_compressor/strategy/auto/index", "autoapi/neural_compressor/strategy/auto_mixed_precision/index", "autoapi/neural_compressor/strategy/basic/index", "autoapi/neural_compressor/strategy/bayesian/index", "autoapi/neural_compressor/strategy/conservative/index", "autoapi/neural_compressor/strategy/exhaustive/index", "autoapi/neural_compressor/strategy/hawq_v2/index", "autoapi/neural_compressor/strategy/index", "autoapi/neural_compressor/strategy/mse/index", "autoapi/neural_compressor/strategy/mse_v2/index", "autoapi/neural_compressor/strategy/random/index", "autoapi/neural_compressor/strategy/strategy/index", "autoapi/neural_compressor/strategy/utils/constant/index", "autoapi/neural_compressor/strategy/utils/index", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index", "autoapi/neural_compressor/strategy/utils/tuning_space/index", "autoapi/neural_compressor/strategy/utils/tuning_structs/index", "autoapi/neural_compressor/strategy/utils/utility/index", "autoapi/neural_compressor/training/index", "autoapi/neural_compressor/utils/collect_layer_histogram/index", "autoapi/neural_compressor/utils/constant/index", "autoapi/neural_compressor/utils/create_obj_from_config/index", "autoapi/neural_compressor/utils/index", "autoapi/neural_compressor/utils/kl_divergence/index", "autoapi/neural_compressor/utils/load_huggingface/index", "autoapi/neural_compressor/utils/logger/index", "autoapi/neural_compressor/utils/neural_insights_utils/index", "autoapi/neural_compressor/utils/options/index", "autoapi/neural_compressor/utils/pytorch/index", "autoapi/neural_compressor/utils/utility/index", "autoapi/neural_compressor/utils/weights_details/index", "autoapi/neural_compressor/version/index", "docs/3x/TF_Quant", "docs/3x/TF_SQ", "docs/3x/TensorFlow", "docs/3x/quantization", "docs/build_docs/source/index", "docs/source/CODE_OF_CONDUCT", "docs/source/CONTRIBUTING", "docs/source/FX", "docs/source/NAS", "docs/source/SECURITY", "docs/source/Welcome", "docs/source/adaptor", "docs/source/add_new_adaptor", "docs/source/add_new_data_type", "docs/source/api-doc/adaptor", "docs/source/api-doc/adaptor/onnxrt", "docs/source/api-doc/adaptor/torch_utils", "docs/source/api-doc/api_doc_example", "docs/source/api-doc/apis", "docs/source/api-doc/benchmark", "docs/source/api-doc/compression", "docs/source/api-doc/config", "docs/source/api-doc/mix_precision", "docs/source/api-doc/model", "docs/source/api-doc/objective", "docs/source/api-doc/quantization", "docs/source/api-doc/strategy", "docs/source/api-doc/training", "docs/source/benchmark", "docs/source/calibration", "docs/source/coding_style", "docs/source/dataloader", "docs/source/dataset", "docs/source/design", "docs/source/diagnosis", "docs/source/distillation", "docs/source/distillation_quantization", "docs/source/distributed", "docs/source/examples_readme", "docs/source/export", "docs/source/faq", "docs/source/framework_yaml", "docs/source/get_started", "docs/source/incompatible_changes", "docs/source/infrastructure", "docs/source/installation_guide", "docs/source/legal_information", "docs/source/llm_recipes", "docs/source/metric", "docs/source/migration", "docs/source/mixed_precision", "docs/source/model", "docs/source/mx_quantization", "docs/source/neural_coder/README", "docs/source/neural_coder/docs/AWSSageMakerSupport", "docs/source/neural_coder/docs/BigDLNanoSupport", "docs/source/neural_coder/docs/IntelCPU_PerformanceSetting", "docs/source/neural_coder/docs/PythonAPI", "docs/source/neural_coder/docs/PythonLauncher", "docs/source/neural_coder/docs/Quantization", "docs/source/neural_coder/docs/SupportMatrix", "docs/source/neural_coder/docs/release_notes/v0.4", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/DEVELOP", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/README", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/RELEASE", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/DEVELOP", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/RELEASE", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/README", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/vsc-extension-quickstart", "docs/source/neural_insights/README", "docs/source/neural_insights/docs/source/onnx_accuracy_debug", "docs/source/neural_insights/docs/source/pytorch_nlp_cli_mode", "docs/source/neural_insights/docs/source/tf_accuracy_debug", "docs/source/neural_insights/gui/README", "docs/source/neural_solution/README", "docs/source/neural_solution/docs/source/README", "docs/source/neural_solution/docs/source/description_api", "docs/source/neural_solution/docs/source/ns_design_doc", "docs/source/neural_solution/docs/source/template/task_request_description", "docs/source/neural_solution/examples/README", "docs/source/neural_solution/examples/custom_models_optimized/tf_example1/README", "docs/source/neural_solution/examples/hf_models/README", "docs/source/neural_solution/examples/hf_models_grpc/README", "docs/source/neural_solution/frontend/README", "docs/source/objective", "docs/source/orchestration", "docs/source/pruning", "docs/source/publication_list", "docs/source/pythonic_style", "docs/source/quantization", "docs/source/quantization_layer_wise", "docs/source/quantization_mixed_precision", "docs/source/quantization_weight_only", "docs/source/releases_info", "docs/source/sigopt_strategy", "docs/source/smooth_quant", "docs/source/tensorboard", "docs/source/transform", "docs/source/tuning_strategies", "docs/source/user_guide", "docs/source/user_yaml", "docs/source/validated_model_list", "index"], "filenames": ["autoapi/block_mask/index.rst", "autoapi/neural_compressor/algorithm/algorithm/index.rst", "autoapi/neural_compressor/algorithm/fast_bias_correction/index.rst", "autoapi/neural_compressor/algorithm/index.rst", "autoapi/neural_compressor/algorithm/smooth_quant/index.rst", "autoapi/neural_compressor/algorithm/weight_correction/index.rst", "autoapi/neural_compressor/benchmark/index.rst", "autoapi/neural_compressor/config/index.rst", "autoapi/neural_compressor/contrib/index.rst", "autoapi/neural_compressor/contrib/strategy/index.rst", "autoapi/neural_compressor/contrib/strategy/sigopt/index.rst", "autoapi/neural_compressor/contrib/strategy/tpe/index.rst", "autoapi/neural_compressor/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/data/datasets/index.rst", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/data/filters/filter/index.rst", "autoapi/neural_compressor/data/filters/index.rst", "autoapi/neural_compressor/data/index.rst", "autoapi/neural_compressor/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/data/transforms/index.rst", "autoapi/neural_compressor/data/transforms/postprocess/index.rst", "autoapi/neural_compressor/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/benchmark/index.rst", "autoapi/neural_compressor/experimental/common/criterion/index.rst", "autoapi/neural_compressor/experimental/common/dataloader/index.rst", "autoapi/neural_compressor/experimental/common/index.rst", "autoapi/neural_compressor/experimental/common/metric/index.rst", "autoapi/neural_compressor/experimental/common/model/index.rst", "autoapi/neural_compressor/experimental/common/optimizer/index.rst", "autoapi/neural_compressor/experimental/common/postprocess/index.rst", "autoapi/neural_compressor/experimental/common/torch_utils/index.rst", "autoapi/neural_compressor/experimental/component/index.rst", "autoapi/neural_compressor/experimental/compression/index.rst", "autoapi/neural_compressor/experimental/contrib/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/sigopt/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/tpe/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/index.rst", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/index.rst", "autoapi/neural_compressor/experimental/data/index.rst", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/experimental/data/transforms/index.rst", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/experimental/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/distillation/index.rst", "autoapi/neural_compressor/experimental/export/index.rst", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index.rst", "autoapi/neural_compressor/experimental/export/tf2onnx/index.rst", "autoapi/neural_compressor/experimental/export/torch2onnx/index.rst", "autoapi/neural_compressor/experimental/graph_optimization/index.rst", "autoapi/neural_compressor/experimental/index.rst", "autoapi/neural_compressor/experimental/metric/bleu/index.rst", "autoapi/neural_compressor/experimental/metric/bleu_util/index.rst", "autoapi/neural_compressor/experimental/metric/coco_label_map/index.rst", "autoapi/neural_compressor/experimental/metric/coco_tools/index.rst", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/experimental/metric/f1/index.rst", "autoapi/neural_compressor/experimental/metric/index.rst", "autoapi/neural_compressor/experimental/metric/metric/index.rst", "autoapi/neural_compressor/experimental/mixed_precision/index.rst", "autoapi/neural_compressor/experimental/model_conversion/index.rst", "autoapi/neural_compressor/experimental/nas/basic_nas/index.rst", "autoapi/neural_compressor/experimental/nas/dynas/index.rst", "autoapi/neural_compressor/experimental/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas_utils/index.rst", "autoapi/neural_compressor/experimental/nas/search_algorithms/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/gradient_sensitivity/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/group_lasso/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/magnitude/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/pattern_lock/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/pruner/index.rst", "autoapi/neural_compressor/experimental/pruning/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_v2/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index.rst", "autoapi/neural_compressor/experimental/quantization/index.rst", "autoapi/neural_compressor/experimental/scheduler/index.rst", "autoapi/neural_compressor/experimental/strategy/auto_mixed_precision/index.rst", "autoapi/neural_compressor/experimental/strategy/basic/index.rst", "autoapi/neural_compressor/experimental/strategy/bayesian/index.rst", "autoapi/neural_compressor/experimental/strategy/exhaustive/index.rst", "autoapi/neural_compressor/experimental/strategy/index.rst", "autoapi/neural_compressor/experimental/strategy/mse/index.rst", "autoapi/neural_compressor/experimental/strategy/mse_v2/index.rst", "autoapi/neural_compressor/experimental/strategy/random/index.rst", "autoapi/neural_compressor/experimental/strategy/strategy/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/constant/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_sampler/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_space/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_structs/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/utility/index.rst", "autoapi/neural_compressor/index.rst", "autoapi/neural_compressor/metric/bleu/index.rst", "autoapi/neural_compressor/metric/bleu_util/index.rst", "autoapi/neural_compressor/metric/coco_label_map/index.rst", "autoapi/neural_compressor/metric/coco_tools/index.rst", "autoapi/neural_compressor/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/metric/f1/index.rst", "autoapi/neural_compressor/metric/index.rst", "autoapi/neural_compressor/metric/metric/index.rst", "autoapi/neural_compressor/mix_precision/index.rst", "autoapi/neural_compressor/model/base_model/index.rst", "autoapi/neural_compressor/model/index.rst", "autoapi/neural_compressor/model/keras_model/index.rst", "autoapi/neural_compressor/model/model/index.rst", "autoapi/neural_compressor/model/mxnet_model/index.rst", "autoapi/neural_compressor/model/nets_factory/index.rst", "autoapi/neural_compressor/model/onnx_model/index.rst", "autoapi/neural_compressor/model/tensorflow_model/index.rst", "autoapi/neural_compressor/model/torch_model/index.rst", "autoapi/neural_compressor/objective/index.rst", "autoapi/neural_compressor/profiling/index.rst", "autoapi/neural_compressor/quantization/index.rst", "autoapi/neural_compressor/strategy/auto/index.rst", "autoapi/neural_compressor/strategy/auto_mixed_precision/index.rst", "autoapi/neural_compressor/strategy/basic/index.rst", "autoapi/neural_compressor/strategy/bayesian/index.rst", "autoapi/neural_compressor/strategy/conservative/index.rst", "autoapi/neural_compressor/strategy/exhaustive/index.rst", "autoapi/neural_compressor/strategy/hawq_v2/index.rst", "autoapi/neural_compressor/strategy/index.rst", "autoapi/neural_compressor/strategy/mse/index.rst", "autoapi/neural_compressor/strategy/mse_v2/index.rst", "autoapi/neural_compressor/strategy/random/index.rst", "autoapi/neural_compressor/strategy/strategy/index.rst", "autoapi/neural_compressor/strategy/utils/constant/index.rst", "autoapi/neural_compressor/strategy/utils/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_space/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_structs/index.rst", "autoapi/neural_compressor/strategy/utils/utility/index.rst", "autoapi/neural_compressor/training/index.rst", "autoapi/neural_compressor/utils/collect_layer_histogram/index.rst", "autoapi/neural_compressor/utils/constant/index.rst", "autoapi/neural_compressor/utils/create_obj_from_config/index.rst", "autoapi/neural_compressor/utils/index.rst", "autoapi/neural_compressor/utils/kl_divergence/index.rst", "autoapi/neural_compressor/utils/load_huggingface/index.rst", "autoapi/neural_compressor/utils/logger/index.rst", "autoapi/neural_compressor/utils/neural_insights_utils/index.rst", "autoapi/neural_compressor/utils/options/index.rst", "autoapi/neural_compressor/utils/pytorch/index.rst", "autoapi/neural_compressor/utils/utility/index.rst", "autoapi/neural_compressor/utils/weights_details/index.rst", "autoapi/neural_compressor/version/index.rst", "docs/3x/TF_Quant.md", "docs/3x/TF_SQ.md", "docs/3x/TensorFlow.md", "docs/3x/quantization.md", "docs/build_docs/source/index.rst", "docs/source/CODE_OF_CONDUCT.md", "docs/source/CONTRIBUTING.md", "docs/source/FX.md", "docs/source/NAS.md", "docs/source/SECURITY.md", "docs/source/Welcome.md", "docs/source/adaptor.md", "docs/source/add_new_adaptor.md", "docs/source/add_new_data_type.md", "docs/source/api-doc/adaptor.rst", "docs/source/api-doc/adaptor/onnxrt.rst", "docs/source/api-doc/adaptor/torch_utils.rst", "docs/source/api-doc/api_doc_example.rst", "docs/source/api-doc/apis.rst", "docs/source/api-doc/benchmark.rst", "docs/source/api-doc/compression.rst", "docs/source/api-doc/config.rst", "docs/source/api-doc/mix_precision.rst", "docs/source/api-doc/model.rst", "docs/source/api-doc/objective.rst", "docs/source/api-doc/quantization.rst", "docs/source/api-doc/strategy.rst", "docs/source/api-doc/training.rst", "docs/source/benchmark.md", "docs/source/calibration.md", "docs/source/coding_style.md", "docs/source/dataloader.md", "docs/source/dataset.md", "docs/source/design.md", "docs/source/diagnosis.md", "docs/source/distillation.md", "docs/source/distillation_quantization.md", "docs/source/distributed.md", "docs/source/examples_readme.md", "docs/source/export.md", "docs/source/faq.md", "docs/source/framework_yaml.md", "docs/source/get_started.md", "docs/source/incompatible_changes.md", "docs/source/infrastructure.md", "docs/source/installation_guide.md", "docs/source/legal_information.md", "docs/source/llm_recipes.md", "docs/source/metric.md", "docs/source/migration.md", "docs/source/mixed_precision.md", "docs/source/model.md", "docs/source/mx_quantization.md", "docs/source/neural_coder/README.md", "docs/source/neural_coder/docs/AWSSageMakerSupport.md", "docs/source/neural_coder/docs/BigDLNanoSupport.md", "docs/source/neural_coder/docs/IntelCPU_PerformanceSetting.md", "docs/source/neural_coder/docs/PythonAPI.md", "docs/source/neural_coder/docs/PythonLauncher.md", "docs/source/neural_coder/docs/Quantization.md", "docs/source/neural_coder/docs/SupportMatrix.md", "docs/source/neural_coder/docs/release_notes/v0.4.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/DEVELOP.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/README.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/RELEASE.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/DEVELOP.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/RELEASE.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/README.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/vsc-extension-quickstart.md", "docs/source/neural_insights/README.md", "docs/source/neural_insights/docs/source/onnx_accuracy_debug.md", "docs/source/neural_insights/docs/source/pytorch_nlp_cli_mode.md", "docs/source/neural_insights/docs/source/tf_accuracy_debug.md", "docs/source/neural_insights/gui/README.md", "docs/source/neural_solution/README.md", "docs/source/neural_solution/docs/source/README.md", "docs/source/neural_solution/docs/source/description_api.md", "docs/source/neural_solution/docs/source/ns_design_doc.md", "docs/source/neural_solution/docs/source/template/task_request_description.md", "docs/source/neural_solution/examples/README.md", "docs/source/neural_solution/examples/custom_models_optimized/tf_example1/README.md", "docs/source/neural_solution/examples/hf_models/README.md", "docs/source/neural_solution/examples/hf_models_grpc/README.md", "docs/source/neural_solution/frontend/README.md", "docs/source/objective.md", "docs/source/orchestration.md", "docs/source/pruning.md", "docs/source/publication_list.md", "docs/source/pythonic_style.md", "docs/source/quantization.md", "docs/source/quantization_layer_wise.md", "docs/source/quantization_mixed_precision.md", "docs/source/quantization_weight_only.md", "docs/source/releases_info.md", "docs/source/sigopt_strategy.md", "docs/source/smooth_quant.md", "docs/source/tensorboard.md", "docs/source/transform.md", "docs/source/tuning_strategies.md", "docs/source/user_guide.md", "docs/source/user_yaml.md", "docs/source/validated_model_list.md", "index.rst"], "titles": ["block_mask", "neural_compressor.algorithm.algorithm", "neural_compressor.algorithm.fast_bias_correction", "neural_compressor.algorithm", "neural_compressor.algorithm.smooth_quant", "neural_compressor.algorithm.weight_correction", "neural_compressor.benchmark", "neural_compressor.config", "neural_compressor.contrib", "neural_compressor.contrib.strategy", "neural_compressor.contrib.strategy.sigopt", "neural_compressor.contrib.strategy.tpe", "neural_compressor.data.datasets.bert_dataset", "neural_compressor.data.datasets.coco_dataset", "neural_compressor.data.datasets.dataset", "neural_compressor.data.datasets.dummy_dataset", "neural_compressor.data.datasets.dummy_dataset_v2", "neural_compressor.data.datasets.imagenet_dataset", "neural_compressor.data.datasets", "neural_compressor.data.datasets.style_transfer_dataset", "neural_compressor.data.filters.coco_filter", "neural_compressor.data.filters.filter", "neural_compressor.data.filters", "neural_compressor.data", "neural_compressor.data.transforms.imagenet_transform", "neural_compressor.data.transforms", "neural_compressor.data.transforms.postprocess", "neural_compressor.data.transforms.tokenization", "neural_compressor.data.transforms.transform", "neural_compressor.experimental.benchmark", "neural_compressor.experimental.common.criterion", "neural_compressor.experimental.common.dataloader", "neural_compressor.experimental.common", "neural_compressor.experimental.common.metric", "neural_compressor.experimental.common.model", "neural_compressor.experimental.common.optimizer", "neural_compressor.experimental.common.postprocess", "neural_compressor.experimental.common.torch_utils", "neural_compressor.experimental.component", "neural_compressor.experimental.compression", "neural_compressor.experimental.contrib", "neural_compressor.experimental.contrib.strategy", "neural_compressor.experimental.contrib.strategy.sigopt", "neural_compressor.experimental.contrib.strategy.tpe", "neural_compressor.experimental.data.dataloaders.base_dataloader", "neural_compressor.experimental.data.dataloaders.dataloader", "neural_compressor.experimental.data.dataloaders.default_dataloader", "neural_compressor.experimental.data.dataloaders.fetcher", "neural_compressor.experimental.data.dataloaders", "neural_compressor.experimental.data.dataloaders.mxnet_dataloader", "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader", "neural_compressor.experimental.data.dataloaders.pytorch_dataloader", "neural_compressor.experimental.data.dataloaders.sampler", "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader", "neural_compressor.experimental.data.datasets.bert_dataset", "neural_compressor.experimental.data.datasets.coco_dataset", "neural_compressor.experimental.data.datasets.dataset", "neural_compressor.experimental.data.datasets.dummy_dataset", "neural_compressor.experimental.data.datasets.dummy_dataset_v2", "neural_compressor.experimental.data.datasets.imagenet_dataset", "neural_compressor.experimental.data.datasets", "neural_compressor.experimental.data.datasets.style_transfer_dataset", "neural_compressor.experimental.data.filters.coco_filter", "neural_compressor.experimental.data.filters.filter", "neural_compressor.experimental.data.filters", "neural_compressor.experimental.data", "neural_compressor.experimental.data.transforms.imagenet_transform", "neural_compressor.experimental.data.transforms", "neural_compressor.experimental.data.transforms.tokenization", "neural_compressor.experimental.data.transforms.transform", "neural_compressor.experimental.distillation", "neural_compressor.experimental.export", "neural_compressor.experimental.export.qlinear2qdq", "neural_compressor.experimental.export.tf2onnx", "neural_compressor.experimental.export.torch2onnx", "neural_compressor.experimental.graph_optimization", "neural_compressor.experimental", "neural_compressor.experimental.metric.bleu", "neural_compressor.experimental.metric.bleu_util", "neural_compressor.experimental.metric.coco_label_map", "neural_compressor.experimental.metric.coco_tools", "neural_compressor.experimental.metric.evaluate_squad", "neural_compressor.experimental.metric.f1", "neural_compressor.experimental.metric", "neural_compressor.experimental.metric.metric", "neural_compressor.experimental.mixed_precision", "neural_compressor.experimental.model_conversion", "neural_compressor.experimental.nas.basic_nas", "neural_compressor.experimental.nas.dynas", "neural_compressor.experimental.nas", "neural_compressor.experimental.nas.nas", "neural_compressor.experimental.nas.nas_utils", "neural_compressor.experimental.nas.search_algorithms", "neural_compressor.experimental.pruner_legacy.gradient_sensitivity", "neural_compressor.experimental.pruner_legacy.group_lasso", "neural_compressor.experimental.pruner_legacy", "neural_compressor.experimental.pruner_legacy.magnitude", "neural_compressor.experimental.pruner_legacy.pattern_lock", "neural_compressor.experimental.pruner_legacy.pruner", "neural_compressor.experimental.pruning", "neural_compressor.experimental.pruning_recipes", "neural_compressor.experimental.pruning_recipes.patterns", "neural_compressor.experimental.pruning_recipes.patterns.pattern", "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern", "neural_compressor.experimental.pruning_v2", "neural_compressor.experimental.pytorch_pruner", "neural_compressor.experimental.pytorch_pruner.logger", "neural_compressor.experimental.pytorch_pruner.patterns", "neural_compressor.experimental.pytorch_pruner.prune_utils", "neural_compressor.experimental.pytorch_pruner.pruner", "neural_compressor.experimental.pytorch_pruner.pruning", "neural_compressor.experimental.pytorch_pruner.scheduler", "neural_compressor.experimental.quantization", "neural_compressor.experimental.scheduler", "neural_compressor.experimental.strategy.auto_mixed_precision", "neural_compressor.experimental.strategy.basic", "neural_compressor.experimental.strategy.bayesian", "neural_compressor.experimental.strategy.exhaustive", "neural_compressor.experimental.strategy", "neural_compressor.experimental.strategy.mse", "neural_compressor.experimental.strategy.mse_v2", "neural_compressor.experimental.strategy.random", "neural_compressor.experimental.strategy.strategy", "neural_compressor.experimental.strategy.utils.constant", "neural_compressor.experimental.strategy.utils", "neural_compressor.experimental.strategy.utils.tuning_sampler", "neural_compressor.experimental.strategy.utils.tuning_space", "neural_compressor.experimental.strategy.utils.tuning_structs", "neural_compressor.experimental.strategy.utils.utility", "neural_compressor", "neural_compressor.metric.bleu", "neural_compressor.metric.bleu_util", "neural_compressor.metric.coco_label_map", "neural_compressor.metric.coco_tools", "neural_compressor.metric.evaluate_squad", "neural_compressor.metric.f1", "neural_compressor.metric", "neural_compressor.metric.metric", "neural_compressor.mix_precision", "neural_compressor.model.base_model", "neural_compressor.model", "neural_compressor.model.keras_model", "neural_compressor.model.model", "neural_compressor.model.mxnet_model", "neural_compressor.model.nets_factory", "neural_compressor.model.onnx_model", "neural_compressor.model.tensorflow_model", "neural_compressor.model.torch_model", "neural_compressor.objective", "neural_compressor.profiling", "neural_compressor.quantization", "neural_compressor.strategy.auto", "neural_compressor.strategy.auto_mixed_precision", "neural_compressor.strategy.basic", "neural_compressor.strategy.bayesian", "neural_compressor.strategy.conservative", "neural_compressor.strategy.exhaustive", "neural_compressor.strategy.hawq_v2", "neural_compressor.strategy", "neural_compressor.strategy.mse", "neural_compressor.strategy.mse_v2", "neural_compressor.strategy.random", "neural_compressor.strategy.strategy", "neural_compressor.strategy.utils.constant", "neural_compressor.strategy.utils", "neural_compressor.strategy.utils.tuning_sampler", "neural_compressor.strategy.utils.tuning_space", "neural_compressor.strategy.utils.tuning_structs", "neural_compressor.strategy.utils.utility", "neural_compressor.training", "neural_compressor.utils.collect_layer_histogram", "neural_compressor.utils.constant", "neural_compressor.utils.create_obj_from_config", "neural_compressor.utils", "neural_compressor.utils.kl_divergence", "neural_compressor.utils.load_huggingface", "neural_compressor.utils.logger", "neural_compressor.utils.neural_insights_utils", "neural_compressor.utils.options", "neural_compressor.utils.pytorch", "neural_compressor.utils.utility", "neural_compressor.utils.weights_details", "neural_compressor.version", "TensorFlow Quantization", "Smooth Quant", "TensorFlow", "Quantization", "Intel\u00ae Neural Compressor Documentation", "Contributor Covenant Code of Conduct", "Contribution Guidelines", "FX", "Neural Architecture Search", "Security Policy", "Intel\u00ae Neural Compressor", "Adaptor", "How to Add An Adaptor", "How to Support New Data Type, Like Int4, with a Few Line Changes", "Adaptor", "ONNX Runtime", "Torch Utils", "API Document Example", "APIs", "Benchmark", "Compression", "Config", "Mix Precision", "Model", "Objective", "Quantization", "Strategy", "Training", "Benchmarking", "Calibration Algorithms in Quantization", "INC Coding Conventions", "DataLoader", "Dataset", "Design", "Diagnosis", "Distillation", "Distillation for Quantization", "Distributed Training and Inference (Evaluation)", "Examples", "Export", "Frequently Asked Questions", "Framework YAML Configuration Files", "Getting Started", "Incompatible changes between v1.2 and v1.1", "Infrastructure of Intel\u00ae Neural Compressor", "Installation", "Legal Information", "LLMs Quantization Recipes", "Metrics", "Code Migration from Intel Neural Compressor 1.X to Intel Neural Compressor 2.X", "Mixed Precision", "Model", "Microscaling Quantization", "Neural Coder", "AWS Amazon SageMaker Support", "BigDL Nano Support", "Intel CPU Platforms: Best Performance Setting", "Neural Coder as Python API", "Python Launcher", "Neural Coder for Quantization", "Supported Optimization Features", "v0.4", "Changelog", "neural_compressor_ext_lab", "Intel\u00ae Neural Compressor as JupyterLab Extension", "Making a new release of neural_compressor_ext_lab", "Changelog", "neural_compressor_ext_lab_alibaba", "Making a new release of neural_compressor_ext_lab_alibaba", "Change Log", "Neural Coder", "Welcome to your VS Code Extension", "Neural Insights", "Step by step example how to debug accuracy with Neural Insights", "Step by step example how to dump weights data for PyTorch model with Neural Insights", "Step by step example how to debug accuracy with Neural Insights", "Getting Started with Create React App", "What\u2019s Neural Solution?", "Get started", "Neural Solution API", "Design Doc for Optimization as a Service [WIP]", "Task request description", "Examples List", "An end-to-end example: quantize a custom model with Neural Solution", "An end-to-end example: quantize a Hugging Face model with Neural Solution", "An end-to-end example: quantize a Hugging Face model with Neural Solution gRPC API", "Client", "Objective", "Optimization Orchestration", "Pruning", "Full Publications/Events (80)", "Pythonic Style Access for Configurations", "Quantization", "Layer Wise Quantization (LWQ)", "Turn OFF Auto Mixed Precision during Quantization", "Weight Only Quantization (WOQ)", "Release", "SigOpt Strategy", "Smooth Quant", "TensorBoard", "Transform", "Tuning Strategies", "User Guide", "User YAML Configuration Files", "Validated Models", "Intel\u00ae Neural Compressor Documentation"], "terms": {"block": [0, 107, 148, 227, 235, 270, 272, 278, 284], "mask": [0, 12, 54, 80, 109, 133, 272, 287], "regist": [1, 14, 21, 28, 30, 35, 56, 63, 69, 84, 91, 98, 102, 107, 109, 111, 122, 125, 137, 148, 162, 168, 177, 191, 194, 213, 215, 220, 231, 232, 254, 270, 281, 284], "algorithm_registri": 1, "algorithm_typ": 1, "locat": [1, 28, 69, 185, 220, 239, 246, 250, 253, 261, 275, 279, 283, 286], "sourc": [1, 2, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 42, 43, 44, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 66, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 96, 97, 98, 99, 102, 103, 104, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 165, 166, 167, 168, 169, 170, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 185, 190, 193, 229, 232, 246, 248, 250, 251, 253, 273], "decor": [1, 28, 35, 69, 84, 91, 98, 102, 107, 109, 111, 122, 125, 137, 148, 162, 180, 190, 191, 194, 284], "all": [1, 3, 6, 7, 14, 21, 28, 29, 35, 38, 44, 52, 56, 63, 69, 74, 77, 80, 82, 84, 91, 98, 102, 103, 107, 113, 122, 125, 130, 133, 135, 137, 139, 148, 162, 168, 172, 180, 185, 186, 188, 189, 193, 194, 195, 196, 213, 214, 215, 220, 224, 228, 232, 236, 244, 247, 248, 251, 252, 253, 254, 255, 258, 259, 261, 262, 266, 267, 268, 271, 272, 273, 275, 277, 278, 281, 283, 284], "subclass": [1, 14, 21, 28, 35, 49, 53, 56, 63, 69, 84, 91, 98, 102, 107, 109, 111, 122, 125, 137, 148, 162, 194], "paramet": [1, 6, 7, 10, 11, 12, 14, 21, 24, 28, 30, 35, 42, 43, 53, 54, 56, 63, 66, 69, 70, 72, 73, 74, 75, 77, 78, 80, 81, 82, 84, 86, 87, 88, 90, 91, 92, 93, 94, 96, 97, 98, 99, 102, 104, 107, 108, 109, 110, 111, 112, 116, 122, 126, 128, 130, 131, 133, 134, 135, 137, 138, 142, 146, 148, 150, 154, 162, 166, 168, 169, 172, 175, 176, 177, 179, 180, 184, 185, 190, 195, 214, 215, 218, 220, 227, 231, 232, 235, 247, 253, 254, 255, 256, 261, 266, 267, 272, 275, 276, 278, 280, 281, 283, 284, 286], "cl": [1, 14, 21, 28, 30, 35, 56, 63, 69, 91, 98, 102, 107, 109, 111, 122, 137, 148, 162, 180, 213], "The": [1, 6, 7, 10, 11, 12, 13, 14, 15, 16, 20, 21, 28, 30, 33, 35, 38, 42, 43, 44, 54, 55, 56, 57, 58, 62, 63, 69, 70, 75, 77, 78, 79, 81, 82, 84, 86, 87, 88, 90, 91, 93, 94, 96, 97, 98, 99, 102, 104, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 119, 120, 121, 122, 126, 128, 130, 131, 132, 134, 135, 137, 138, 146, 148, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 166, 168, 169, 170, 172, 174, 175, 179, 180, 181, 183, 184, 185, 186, 188, 190, 191, 194, 195, 196, 197, 199, 203, 206, 209, 211, 212, 213, 214, 215, 217, 218, 220, 222, 224, 226, 227, 228, 230, 231, 232, 233, 234, 235, 238, 239, 241, 244, 246, 247, 248, 250, 251, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287], "str": [1, 7, 12, 13, 14, 21, 24, 28, 30, 34, 35, 54, 55, 56, 63, 66, 69, 73, 74, 77, 78, 80, 82, 84, 91, 102, 125, 128, 130, 131, 133, 135, 137, 165, 168, 172, 175, 177, 180, 181, 185, 213, 214, 215, 231, 264, 274, 282, 283], "registr": [1, 14, 21, 28, 56, 63, 69, 102], "name": [1, 6, 7, 12, 13, 14, 17, 21, 26, 28, 29, 33, 36, 37, 54, 55, 56, 59, 63, 69, 72, 73, 74, 79, 84, 102, 107, 109, 111, 126, 128, 132, 137, 142, 146, 148, 150, 166, 168, 170, 172, 177, 180, 183, 189, 190, 196, 213, 215, 217, 220, 222, 224, 229, 231, 232, 234, 235, 239, 246, 250, 254, 255, 261, 272, 275, 279, 280, 282, 284, 286, 287], "call": [1, 80, 109, 133, 185, 186, 190, 191, 194, 214, 226, 242, 244, 254, 272, 275, 281, 282, 283], "return": [1, 6, 10, 11, 14, 21, 24, 28, 29, 30, 35, 42, 43, 56, 63, 66, 69, 74, 77, 78, 80, 81, 82, 84, 90, 91, 98, 102, 107, 108, 109, 111, 116, 122, 126, 128, 130, 131, 133, 134, 135, 137, 138, 142, 146, 148, 150, 154, 162, 166, 168, 169, 172, 177, 179, 180, 183, 190, 191, 195, 196, 214, 215, 220, 231, 234, 266, 267, 268, 270, 272, 275, 278, 281, 282, 284], "type": [1, 7, 12, 14, 21, 28, 30, 35, 52, 54, 56, 63, 69, 74, 77, 78, 80, 84, 91, 98, 102, 107, 109, 111, 116, 122, 126, 128, 130, 131, 133, 137, 146, 148, 154, 155, 162, 166, 168, 179, 180, 183, 185, 186, 194, 195, 215, 217, 220, 222, 224, 227, 232, 233, 235, 254, 256, 261, 262, 266, 267, 275, 276, 278, 280, 283, 284, 285, 286], "build": [1, 2, 4, 5, 87, 90, 141, 143, 145, 146, 147, 185, 194, 195, 196, 228, 234, 246, 248, 250, 251, 254, 273, 284], "dict": [1, 6, 7, 10, 11, 29, 35, 42, 43, 53, 72, 74, 79, 80, 81, 82, 84, 87, 90, 91, 92, 99, 102, 104, 107, 108, 109, 110, 111, 116, 119, 125, 128, 132, 133, 134, 135, 137, 138, 146, 150, 165, 168, 169, 170, 172, 179, 180, 183, 190, 195, 213, 222, 231, 272, 274, 275, 281, 282, 284], "algorithmschedul": 1, "conf": [1, 6, 7, 10, 11, 29, 42, 43, 86, 93, 94, 96, 97, 98, 99, 104, 114, 116, 119, 120, 122, 126, 138, 148, 150, 151, 152, 154, 155, 159, 160, 162, 166, 169, 190, 191, 193, 196, 211, 218, 225, 226, 232, 233, 234, 255, 257, 258, 271, 275, 276, 277, 278, 280, 281, 284], "control": [1, 7, 190, 232, 259, 272, 284], "differ": [1, 5, 7, 14, 28, 30, 47, 56, 69, 75, 84, 90, 92, 101, 112, 137, 146, 148, 174, 185, 186, 188, 190, 191, 195, 214, 215, 217, 218, 220, 221, 226, 227, 231, 232, 234, 246, 250, 255, 258, 261, 270, 272, 275, 278, 281, 282, 283, 284], "phase": [1, 185, 186, 191, 232, 272, 275, 277, 284], "base": [1, 7, 12, 14, 21, 28, 38, 44, 47, 52, 54, 56, 63, 69, 84, 90, 92, 98, 99, 102, 104, 109, 119, 122, 126, 137, 139, 146, 147, 148, 159, 162, 166, 191, 193, 194, 195, 196, 213, 215, 219, 220, 224, 232, 233, 241, 242, 244, 253, 256, 261, 264, 267, 268, 272, 273, 275, 278, 280, 281, 282, 284, 287], "fastbiascorrect": [2, 5], "threshold": [2, 170, 174, 231], "2": [2, 4, 6, 7, 13, 29, 55, 80, 82, 84, 109, 116, 133, 135, 137, 148, 154, 180, 183, 184, 185, 186, 190, 193, 194, 212, 214, 215, 217, 218, 224, 227, 228, 229, 230, 231, 233, 235, 257, 263, 264, 266, 267, 268, 270, 272, 273, 275, 276, 278, 279, 280, 281, 283, 284, 285], "0": [2, 4, 7, 12, 15, 16, 19, 24, 28, 30, 31, 44, 46, 50, 51, 53, 54, 57, 58, 61, 66, 69, 74, 75, 84, 91, 99, 104, 112, 137, 148, 150, 155, 175, 184, 186, 190, 193, 213, 214, 215, 218, 220, 222, 223, 224, 228, 229, 230, 231, 232, 233, 235, 239, 241, 246, 250, 256, 266, 267, 272, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 286], "channel_axi": [2, 5], "1": [2, 4, 5, 6, 7, 12, 13, 15, 16, 19, 20, 24, 28, 29, 30, 31, 44, 46, 50, 51, 53, 54, 55, 57, 58, 61, 62, 66, 69, 75, 80, 81, 82, 84, 99, 104, 109, 112, 113, 133, 134, 135, 137, 148, 150, 168, 172, 175, 180, 183, 184, 185, 186, 188, 190, 193, 194, 196, 212, 214, 215, 217, 218, 222, 224, 225, 228, 230, 231, 233, 235, 237, 239, 255, 256, 263, 264, 266, 267, 268, 270, 271, 272, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286], "fetch": [3, 47, 195, 215, 266, 267, 268], "file": [3, 7, 10, 11, 12, 13, 14, 17, 27, 28, 34, 37, 42, 43, 54, 55, 56, 59, 68, 69, 70, 75, 80, 86, 87, 88, 90, 99, 104, 108, 110, 112, 113, 133, 138, 148, 150, 179, 180, 189, 191, 194, 195, 196, 220, 223, 226, 229, 231, 232, 234, 239, 248, 251, 252, 253, 254, 256, 257, 258, 259, 261, 262, 266, 267, 268, 270, 274, 275, 278, 282, 283], "init": [3, 215, 231, 284], "fast_bias_correct": [3, 7, 275], "smooth_quant": [3, 7, 213, 275, 281], "weight_correct": [3, 7, 275], "smoothquant": [4, 184, 193, 230, 273, 278, 285], "alpha": [4, 213, 275, 284], "5": [4, 7, 16, 24, 30, 58, 66, 84, 137, 150, 184, 194, 215, 222, 224, 228, 231, 232, 258, 263, 266, 267, 272, 274, 275, 278, 281, 283, 284, 286, 287], "fake": [4, 168, 186, 232, 275, 278, 281], "input": [4, 7, 10, 11, 12, 13, 14, 16, 24, 27, 28, 33, 42, 43, 54, 55, 56, 58, 66, 68, 69, 72, 73, 74, 137, 138, 142, 146, 150, 169, 175, 177, 179, 180, 191, 194, 195, 211, 212, 214, 215, 217, 218, 219, 220, 222, 224, 226, 231, 232, 233, 234, 236, 241, 272, 274, 275, 278, 281, 282, 283, 286], "channel": [4, 5, 7, 24, 28, 66, 69, 107, 175, 193, 194, 196, 227, 228, 235, 236, 238, 243, 258, 272, 278, 283, 287], "quantiz": [4, 6, 7, 10, 11, 24, 31, 38, 42, 43, 66, 74, 75, 76, 86, 113, 119, 125, 129, 155, 157, 159, 168, 169, 170, 174, 175, 179, 180, 184, 194, 201, 213, 214, 215, 220, 221, 224, 226, 227, 231, 234, 236, 241, 243, 244, 247, 260, 262, 263, 265, 271, 273, 279, 282, 283, 284, 285, 286], "more": [4, 28, 69, 107, 185, 191, 192, 193, 195, 212, 213, 215, 218, 220, 222, 225, 227, 228, 230, 232, 233, 235, 236, 244, 248, 251, 256, 261, 270, 271, 272, 277, 278, 281, 284, 285, 287], "detail": [4, 28, 69, 180, 181, 183, 184, 185, 186, 188, 193, 195, 196, 212, 213, 218, 224, 225, 226, 230, 231, 232, 233, 236, 244, 253, 261, 262, 272, 278, 279, 280, 281, 282, 284, 285], "pleas": [4, 7, 12, 13, 14, 17, 54, 55, 56, 59, 107, 109, 110, 137, 150, 183, 184, 186, 190, 191, 192, 193, 194, 211, 212, 215, 219, 220, 222, 228, 230, 231, 233, 236, 237, 241, 244, 260, 261, 262, 272, 275, 277, 278, 279, 280, 281, 284, 285], "refer": [4, 7, 12, 54, 77, 78, 84, 107, 109, 110, 130, 131, 137, 150, 183, 184, 185, 186, 190, 193, 194, 195, 211, 214, 215, 217, 219, 220, 222, 226, 228, 229, 231, 232, 233, 236, 241, 244, 255, 256, 258, 260, 261, 262, 270, 274, 276, 279, 283, 284], "accur": [4, 272, 278, 281], "effici": [4, 191, 193, 212, 214, 218, 236, 261, 271, 272, 273, 278, 281, 284], "post": [4, 7, 10, 11, 42, 43, 150, 184, 188, 193, 194, 195, 217, 219, 220, 222, 227, 228, 235, 236, 242, 253, 263, 272, 273, 276, 278, 281, 282, 284], "train": [4, 7, 10, 11, 12, 14, 28, 38, 42, 43, 54, 56, 69, 70, 86, 109, 129, 150, 172, 184, 191, 193, 194, 195, 201, 215, 217, 218, 219, 222, 227, 233, 235, 236, 242, 253, 258, 266, 271, 273, 276, 278, 280, 281, 284, 286], "larg": [4, 184, 193, 214, 218, 232, 235, 273, 276, 278, 281, 287], "languag": [4, 77, 130, 184, 185, 188, 193, 222, 235, 257, 273, 276, 278, 281], "model": [4, 6, 7, 10, 11, 12, 14, 28, 29, 32, 33, 42, 43, 50, 53, 54, 56, 69, 70, 72, 73, 74, 75, 76, 84, 85, 86, 87, 90, 93, 94, 96, 97, 98, 99, 104, 108, 109, 110, 111, 112, 113, 114, 116, 119, 120, 122, 129, 137, 138, 148, 150, 151, 152, 154, 155, 159, 160, 162, 168, 169, 175, 177, 179, 180, 182, 183, 184, 185, 186, 189, 190, 191, 193, 194, 196, 201, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 226, 227, 229, 231, 233, 236, 241, 243, 244, 247, 253, 255, 260, 262, 263, 264, 265, 270, 271, 273, 275, 279, 280, 282, 283, 284, 285, 286], "spiq": [4, 281], "data": [4, 7, 10, 11, 29, 31, 42, 43, 74, 76, 116, 126, 128, 129, 138, 150, 154, 166, 168, 169, 172, 177, 180, 185, 186, 193, 194, 212, 214, 215, 220, 224, 225, 228, 231, 232, 233, 235, 255, 256, 258, 261, 266, 267, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285], "free": [4, 10, 11, 42, 43, 150, 184, 188, 242, 247, 255, 263, 270, 280, 281], "per": [4, 6, 7, 29, 174, 194, 196, 214, 235, 261, 272, 277, 278, 287], "static": [4, 7, 74, 126, 150, 166, 194, 195, 196, 217, 222, 227, 232, 236, 241, 242, 243, 244, 247, 253, 256, 264, 266, 267, 268, 276, 281, 284, 287], "For": [4, 7, 14, 28, 56, 69, 81, 82, 84, 107, 110, 134, 135, 137, 138, 150, 183, 184, 186, 188, 190, 192, 194, 196, 218, 219, 220, 222, 224, 227, 236, 238, 239, 241, 244, 255, 256, 261, 272, 277, 278, 281, 282, 284, 286, 287], "torch": [4, 7, 74, 138, 150, 175, 179, 190, 193, 196, 197, 218, 220, 222, 232, 233, 234, 235, 236, 241, 244, 256, 275, 278, 281, 282], "backend": [4, 7, 8, 9, 12, 13, 15, 16, 17, 18, 19, 23, 25, 28, 34, 35, 40, 41, 45, 46, 48, 50, 54, 55, 57, 58, 59, 60, 61, 65, 67, 69, 85, 120, 138, 139, 140, 142, 160, 190, 196, 217, 220, 226, 227, 232, 233, 242, 261, 266, 267, 268, 274, 278, 283, 284, 286], "we": [4, 5, 6, 7, 29, 31, 53, 77, 80, 130, 133, 157, 184, 185, 186, 188, 190, 194, 195, 196, 213, 214, 217, 220, 222, 224, 230, 231, 232, 240, 241, 244, 248, 251, 253, 254, 256, 259, 266, 267, 268, 270, 271, 272, 274, 275, 276, 278, 279, 280, 281, 282, 284, 285], "onli": [4, 5, 6, 7, 12, 29, 31, 35, 54, 74, 86, 107, 109, 120, 150, 160, 168, 180, 194, 195, 196, 211, 212, 213, 214, 217, 218, 220, 223, 224, 230, 232, 233, 241, 254, 272, 273, 274, 275, 276, 281, 282, 284, 285, 286], "handl": [4, 176, 190, 192, 213, 214, 261, 281], "layer": [4, 7, 30, 37, 107, 108, 170, 172, 180, 193, 194, 195, 196, 219, 227, 256, 272, 278, 279, 285], "whose": [4, 108, 146, 226, 281, 284], "smooth": [4, 7, 125, 213, 272, 284], "scale": [4, 5, 24, 28, 66, 69, 185, 186, 235, 275, 278, 280, 281, 283, 284], "could": [4, 10, 11, 14, 42, 43, 56, 113, 138, 150, 169, 183, 185, 186, 188, 190, 219, 232, 271, 272, 275, 278, 281, 285], "absorb": [4, 278], "support": [4, 7, 10, 11, 12, 14, 21, 24, 28, 30, 31, 32, 35, 42, 43, 53, 54, 56, 63, 66, 69, 76, 84, 86, 91, 107, 109, 113, 120, 126, 129, 137, 138, 142, 148, 150, 160, 166, 169, 172, 174, 175, 180, 182, 183, 186, 193, 195, 213, 230, 232, 236, 241, 244, 247, 253, 260, 261, 264, 273, 277, 280, 284, 285], "other": [4, 53, 82, 135, 146, 185, 186, 188, 190, 195, 196, 213, 217, 224, 227, 229, 232, 234, 235, 256, 270, 272, 275, 281, 283, 284, 287], "later": [4, 213, 260, 261, 282], "onnx": [4, 7, 50, 72, 73, 74, 138, 145, 178, 189, 193, 194, 195, 197, 214, 217, 221, 222, 224, 225, 227, 233, 234, 235, 238, 243, 244, 256, 273, 274, 278, 279, 281, 284], "insert": [4, 184, 186, 190, 195, 214, 227, 232, 236, 272, 275, 277, 278, 281, 282], "mul": [4, 222, 278, 281], "befor": [4, 7, 12, 54, 107, 109, 111, 186, 189, 196, 214, 215, 218, 219, 220, 223, 224, 228, 232, 248, 251, 257, 258, 275, 278, 280, 282, 284], "conv": [4, 7, 190, 195, 196, 232, 272, 274, 275, 284], "linear": [4, 7, 107, 190, 218, 222, 232, 272, 278, 281, 284], "op": [4, 7, 74, 119, 126, 127, 155, 157, 159, 166, 167, 168, 174, 180, 186, 193, 194, 195, 196, 217, 224, 232, 233, 257, 258, 272, 275, 277, 279, 281, 282, 284, 286], "fuse": [4, 190, 281, 282], "kernel": [4, 7, 194, 195, 284], "futur": [4, 10, 11, 31, 42, 43, 227, 230, 232, 244, 266, 267, 268, 285], "weightcorrect": 5, "ep": [5, 233], "1e": [5, 281, 286], "05": [5, 7, 84, 137, 231, 281, 287], "correct": [5, 7, 80, 81, 82, 84, 108, 133, 134, 135, 137, 188, 236], "int8": [5, 6, 7, 24, 66, 72, 73, 74, 126, 128, 166, 168, 179, 180, 183, 185, 186, 189, 190, 193, 194, 195, 196, 211, 215, 219, 224, 230, 232, 233, 235, 238, 241, 243, 244, 247, 253, 256, 258, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 286], "weight": [5, 7, 74, 107, 109, 126, 137, 150, 157, 166, 168, 180, 181, 183, 184, 185, 186, 194, 195, 196, 212, 217, 219, 224, 226, 230, 232, 255, 266, 270, 272, 273, 274, 275, 276, 281, 282, 284, 285, 286], "distribut": [5, 7, 31, 44, 46, 47, 50, 51, 52, 53, 174, 185, 186, 193, 195, 214, 218, 228, 248, 251, 255, 258, 266, 273, 275, 278, 279, 281, 285, 287], "close": [5, 212, 262], "fp32": [5, 7, 10, 11, 42, 43, 73, 74, 84, 119, 126, 137, 155, 159, 166, 172, 175, 179, 180, 183, 185, 186, 189, 194, 196, 217, 224, 225, 230, 231, 232, 233, 243, 255, 256, 257, 258, 274, 275, 277, 278, 279, 280, 281, 282, 284, 286, 287], "r": [5, 183, 185, 186, 217, 228, 254, 255, 257, 258, 260, 261, 275, 287], "w_int8": 5, "u": [5, 236, 255, 260], "w_fp32": 5, "i": [5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 19, 21, 24, 28, 29, 31, 35, 37, 38, 42, 43, 44, 52, 53, 54, 55, 56, 57, 58, 61, 63, 66, 69, 77, 80, 82, 84, 86, 91, 99, 104, 108, 109, 113, 120, 130, 133, 135, 137, 138, 148, 150, 155, 160, 168, 169, 175, 179, 180, 184, 185, 186, 188, 189, 190, 191, 193, 194, 195, 196, 197, 199, 203, 206, 209, 211, 212, 213, 214, 215, 217, 218, 219, 220, 222, 223, 224, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 244, 246, 247, 248, 250, 251, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 266, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287], "varianc": [5, 217], "ratio": [5, 7, 24, 28, 66, 69, 109, 215, 230, 232, 256, 272, 283, 287], "between": [5, 7, 28, 69, 81, 84, 134, 137, 180, 185, 186, 190, 194, 195, 196, 212, 217, 218, 227, 231, 232, 235, 244, 275, 278, 279, 280, 281, 283, 284], "wise": [5, 7, 116, 119, 154, 155, 159, 193, 195, 227, 258, 272, 278, 281, 282, 284, 285, 286], "": [5, 7, 14, 27, 28, 29, 31, 33, 53, 56, 68, 69, 82, 107, 109, 135, 137, 138, 142, 150, 177, 180, 183, 185, 186, 188, 189, 191, 195, 196, 213, 217, 218, 220, 222, 224, 227, 232, 233, 241, 244, 246, 250, 253, 256, 258, 261, 271, 272, 273, 274, 275, 278, 279, 280, 281, 284, 285, 286, 287], "equal": [5, 180, 235, 272, 278], "minim": [5, 116, 154, 185, 186, 195, 196, 212, 218, 221, 231, 232, 246, 250, 272, 275, 284], "round": [5, 186, 193, 273, 275, 278, 281], "scale_c": 5, "shift": [5, 24, 66, 254, 283], "notic": [5, 29, 229, 233, 256, 279], "can": [5, 7, 10, 11, 14, 28, 29, 31, 42, 43, 53, 56, 69, 80, 82, 84, 107, 109, 111, 133, 135, 137, 138, 148, 150, 169, 180, 183, 184, 185, 186, 190, 191, 193, 194, 195, 196, 211, 213, 214, 215, 217, 218, 219, 220, 222, 224, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 244, 246, 247, 248, 250, 251, 253, 254, 256, 258, 259, 260, 261, 263, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287], "chang": [5, 7, 109, 111, 157, 180, 189, 195, 214, 220, 223, 229, 232, 236, 246, 247, 250, 253, 259, 272, 282, 283, 284], "first": [5, 7, 12, 54, 80, 126, 133, 155, 166, 180, 186, 190, 191, 193, 194, 195, 196, 215, 217, 228, 233, 235, 238, 247, 248, 251, 254, 256, 257, 258, 274, 275, 277, 278, 280, 281, 282, 284, 286], "an": [5, 7, 14, 28, 32, 37, 47, 52, 56, 69, 76, 77, 81, 82, 90, 91, 113, 129, 130, 134, 135, 138, 150, 169, 180, 182, 184, 185, 188, 190, 191, 193, 194, 196, 212, 214, 215, 216, 217, 222, 230, 231, 232, 233, 235, 236, 240, 241, 244, 253, 256, 257, 258, 261, 264, 270, 272, 273, 275, 278, 280, 281, 282, 283, 284], "empir": 5, "solut": [5, 184, 193, 194, 195, 223, 238, 242, 247, 273, 278, 279, 281, 284, 285], "make": [5, 52, 107, 109, 111, 180, 184, 188, 194, 195, 211, 213, 214, 224, 231, 232, 241, 246, 250, 253, 255, 272, 275, 276, 277, 278, 280, 281, 284], "thi": [5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 19, 28, 31, 37, 38, 42, 43, 53, 54, 55, 56, 57, 58, 59, 61, 69, 77, 80, 81, 82, 84, 93, 94, 96, 97, 98, 99, 104, 107, 109, 111, 112, 113, 116, 119, 130, 133, 134, 135, 137, 138, 148, 150, 154, 159, 168, 169, 179, 180, 183, 184, 185, 186, 188, 189, 190, 191, 194, 195, 196, 212, 213, 214, 215, 218, 219, 220, 222, 223, 224, 227, 229, 230, 231, 232, 233, 234, 236, 238, 239, 241, 242, 244, 246, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 266, 267, 268, 272, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285], "don": [5, 7, 190, 259, 272, 284], "t": [5, 7, 28, 31, 69, 82, 135, 185, 190, 194, 213, 217, 218, 220, 232, 233, 254, 259, 272, 275, 278, 284, 286], "min": [5, 7, 180, 185, 186, 217, 235, 256, 258, 272, 275, 278, 281, 283, 284], "max": [5, 7, 28, 69, 81, 82, 116, 134, 135, 154, 180, 185, 186, 193, 217, 228, 232, 235, 256, 258, 272, 275, 278, 281, 283, 284], "valu": [5, 6, 7, 10, 11, 12, 15, 16, 24, 28, 29, 42, 43, 54, 57, 58, 66, 69, 80, 84, 108, 116, 119, 126, 133, 137, 138, 150, 154, 159, 166, 168, 169, 170, 172, 180, 184, 185, 186, 190, 195, 196, 212, 215, 217, 224, 231, 232, 233, 235, 239, 256, 258, 264, 270, 272, 274, 275, 278, 279, 281, 283, 284, 286], "us": [6, 7, 10, 11, 12, 13, 14, 15, 16, 19, 27, 28, 29, 30, 35, 42, 43, 52, 53, 54, 55, 56, 57, 58, 61, 68, 69, 73, 74, 75, 77, 78, 80, 84, 85, 86, 91, 98, 99, 102, 104, 107, 109, 110, 111, 112, 113, 116, 119, 122, 125, 126, 130, 131, 133, 137, 148, 150, 154, 157, 159, 162, 166, 168, 169, 170, 171, 172, 173, 175, 180, 183, 185, 186, 188, 189, 190, 191, 193, 194, 195, 211, 212, 213, 215, 217, 218, 219, 220, 222, 224, 226, 228, 229, 232, 233, 234, 235, 236, 237, 238, 240, 241, 244, 246, 248, 250, 251, 253, 255, 256, 257, 258, 259, 266, 267, 268, 270, 272, 273, 274, 275, 276, 277, 278, 279, 280, 282, 283, 284, 286, 287], "evalu": [6, 10, 11, 12, 29, 42, 43, 54, 70, 77, 80, 81, 82, 84, 86, 130, 133, 134, 135, 137, 138, 148, 150, 169, 172, 184, 185, 186, 191, 194, 195, 213, 215, 218, 219, 226, 227, 230, 231, 232, 233, 236, 242, 244, 247, 253, 270, 272, 275, 280, 281, 282, 284, 286], "perform": [6, 7, 12, 24, 29, 54, 66, 75, 99, 104, 112, 119, 137, 148, 150, 155, 159, 183, 185, 186, 189, 190, 191, 194, 195, 211, 215, 216, 217, 219, 221, 222, 227, 228, 231, 232, 233, 234, 236, 238, 242, 244, 247, 253, 259, 270, 271, 272, 273, 274, 275, 276, 277, 278, 281, 282, 284, 286, 287], "set_env_var": [6, 29], "env_var": [6, 29], "overwrite_exist": [6, 29], "fals": [6, 7, 12, 14, 24, 28, 29, 30, 31, 37, 44, 46, 50, 51, 53, 54, 56, 66, 69, 80, 84, 133, 137, 148, 150, 172, 175, 179, 180, 183, 185, 194, 195, 214, 215, 224, 231, 232, 246, 250, 256, 264, 267, 268, 274, 275, 278, 281, 282, 283, 284, 286], "set": [6, 7, 10, 11, 12, 14, 17, 28, 29, 34, 35, 42, 43, 44, 54, 56, 59, 69, 80, 86, 99, 104, 108, 113, 133, 137, 138, 146, 150, 169, 177, 180, 183, 184, 186, 188, 191, 193, 195, 211, 214, 215, 218, 220, 222, 224, 226, 227, 228, 231, 232, 233, 236, 238, 240, 254, 255, 256, 257, 258, 259, 263, 266, 272, 274, 275, 278, 280, 281, 284, 286], "specifi": [6, 7, 10, 11, 28, 29, 42, 43, 69, 75, 80, 84, 86, 87, 90, 99, 104, 112, 113, 133, 137, 138, 150, 169, 179, 180, 186, 195, 196, 220, 224, 231, 232, 241, 255, 261, 265, 266, 267, 268, 270, 272, 274, 278, 283, 284, 286], "environ": [6, 29, 188, 193, 211, 246, 250, 253, 261, 264, 266, 267, 268, 284], "variabl": [6, 7, 14, 29, 56, 116, 154, 168, 228, 272, 284], "new": [6, 14, 28, 29, 44, 56, 69, 108, 148, 183, 189, 195, 220, 232, 233, 247, 253, 254, 255, 256, 262, 263, 266, 267, 272, 273, 275, 278, 279, 280, 283, 285, 286], "env": [6, 29, 223, 266, 267, 268], "two": [6, 14, 19, 29, 56, 61, 80, 107, 111, 113, 120, 133, 160, 180, 184, 186, 189, 190, 191, 213, 214, 215, 218, 220, 222, 224, 232, 233, 235, 260, 261, 263, 272, 275, 277, 278, 280, 281, 284, 286], "case": [6, 7, 27, 28, 29, 53, 68, 69, 75, 99, 104, 112, 148, 185, 196, 213, 214, 218, 219, 220, 224, 226, 231, 237, 241, 253, 254, 255, 258, 264, 267, 268, 270, 272, 273, 275, 278, 279, 281, 283, 285, 286, 287], "exist": [6, 29, 146, 180, 222, 231, 240, 284], "alreadi": [6, 14, 27, 29, 56, 68, 194, 215, 227, 248, 251, 255, 264, 284], "param": [6, 29, 35, 44, 84, 116, 137, 154, 180, 194, 234, 284], "true": [6, 7, 12, 14, 15, 27, 28, 29, 52, 54, 56, 57, 68, 69, 74, 78, 84, 102, 125, 131, 137, 148, 150, 165, 172, 175, 179, 180, 183, 185, 193, 195, 214, 215, 217, 220, 224, 231, 232, 236, 239, 240, 255, 256, 257, 258, 264, 266, 274, 275, 276, 278, 281, 282, 283, 284, 286], "set_all_env_var": [6, 29], "configur": [6, 7, 10, 11, 14, 17, 29, 34, 42, 43, 56, 59, 70, 74, 75, 86, 87, 88, 90, 99, 104, 108, 112, 113, 119, 137, 138, 148, 150, 159, 168, 169, 171, 172, 178, 179, 190, 191, 194, 195, 215, 217, 232, 240, 254, 261, 266, 267, 268, 270, 272, 275, 278, 279, 281, 283, 284, 287], "neural": [6, 7, 24, 25, 28, 29, 32, 35, 38, 66, 67, 69, 71, 76, 83, 84, 86, 99, 104, 107, 110, 112, 113, 118, 124, 129, 136, 137, 138, 142, 149, 150, 157, 158, 164, 177, 182, 183, 185, 186, 189, 194, 195, 196, 211, 212, 213, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 229, 230, 233, 234, 235, 237, 238, 241, 243, 244, 246, 248, 250, 251, 252, 264, 270, 271, 273, 275, 278, 279, 281, 282, 283, 284, 286, 287], "compressor": [6, 7, 24, 25, 28, 29, 32, 35, 38, 66, 67, 69, 71, 76, 83, 84, 86, 107, 110, 112, 113, 118, 124, 129, 136, 137, 138, 142, 149, 150, 158, 164, 177, 182, 183, 185, 186, 189, 191, 194, 195, 196, 211, 212, 213, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 229, 230, 233, 234, 235, 236, 237, 241, 243, 244, 246, 248, 250, 251, 252, 255, 256, 257, 258, 260, 261, 268, 270, 271, 272, 273, 275, 278, 279, 281, 282, 283, 284, 285, 286, 287], "physic": [6, 29, 188, 211, 261], "core": [6, 7, 29, 189, 211, 229, 246, 250, 261, 287], "get_architectur": [6, 29], "get": [6, 7, 28, 29, 35, 37, 47, 69, 74, 107, 109, 111, 119, 126, 128, 137, 146, 150, 159, 166, 168, 172, 175, 177, 180, 186, 195, 212, 223, 227, 228, 230, 232, 239, 256, 258, 266, 267, 273, 278, 281, 284, 285, 288], "architectur": [6, 29, 87, 90, 193, 211, 218, 232, 260, 272, 273, 278, 285], "system": [6, 29, 180, 185, 211, 235, 239, 272, 287], "get_threads_per_cor": [6, 29], "thread": [6, 7, 29, 214, 263], "get_thread": [6, 29], "list": [6, 7, 10, 11, 12, 24, 28, 29, 42, 43, 47, 54, 66, 69, 73, 74, 77, 78, 80, 81, 82, 84, 91, 99, 104, 107, 110, 125, 130, 131, 133, 134, 135, 137, 138, 146, 150, 165, 169, 170, 180, 184, 185, 190, 193, 194, 215, 222, 224, 228, 230, 232, 236, 241, 243, 246, 247, 250, 258, 261, 263, 264, 270, 272, 274, 275, 277, 281, 282, 284], "get_physical_id": [6, 29], "socket": [6, 29, 180, 261, 263, 287], "get_core_id": [6, 29], "id": [6, 27, 29, 68, 77, 79, 80, 81, 82, 130, 132, 133, 134, 135, 193, 231, 261, 262, 266, 267, 268, 280, 284], "get_bounded_thread": [6, 29], "core_id": [6, 29], "bind": [6, 29], "instanc": [6, 7, 10, 11, 29, 42, 43, 81, 82, 84, 87, 90, 93, 94, 96, 97, 98, 116, 128, 134, 135, 137, 138, 150, 154, 168, 169, 177, 180, 188, 189, 190, 194, 211, 232, 238, 244, 278, 284, 286, 287], "run_inst": 6, "b_dataload": [6, 7, 211, 232], "none": [6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 19, 24, 28, 29, 30, 31, 38, 42, 43, 44, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 66, 69, 70, 73, 74, 75, 80, 84, 85, 86, 87, 90, 99, 104, 108, 112, 114, 116, 119, 120, 122, 126, 133, 137, 138, 148, 150, 151, 152, 154, 155, 159, 160, 162, 166, 169, 170, 172, 175, 177, 179, 180, 185, 193, 194, 195, 214, 215, 231, 235, 256, 275, 278, 282, 283, 284], "b_func": [6, 211], "run": [6, 7, 10, 11, 27, 29, 42, 43, 53, 68, 108, 109, 116, 138, 150, 154, 169, 185, 186, 193, 194, 211, 220, 223, 224, 232, 236, 238, 240, 241, 242, 244, 246, 247, 248, 250, 251, 253, 261, 262, 263, 264, 266, 267, 268, 273, 275, 278, 279, 280, 282, 284, 286], "object": [6, 7, 10, 11, 12, 13, 14, 28, 29, 31, 42, 43, 44, 54, 55, 56, 69, 70, 75, 80, 88, 90, 93, 94, 96, 97, 98, 99, 104, 107, 108, 109, 110, 111, 112, 116, 129, 133, 137, 138, 146, 147, 150, 154, 168, 169, 172, 179, 180, 185, 190, 191, 195, 201, 211, 213, 214, 215, 223, 231, 232, 234, 271, 272, 274, 275, 283, 284, 285, 287], "benchmarkconfig": [6, 7, 211, 217, 232], "contain": [6, 7, 10, 11, 12, 13, 14, 42, 43, 54, 55, 56, 70, 74, 75, 80, 81, 82, 86, 99, 102, 104, 107, 108, 109, 110, 111, 112, 133, 134, 135, 138, 150, 169, 172, 179, 185, 193, 212, 215, 218, 227, 231, 254, 261, 266, 267, 268, 272, 278, 282, 284, 285], "accuraci": [6, 7, 10, 11, 42, 43, 70, 75, 84, 99, 104, 112, 137, 138, 148, 150, 155, 169, 177, 185, 190, 193, 195, 196, 212, 214, 215, 217, 219, 220, 221, 222, 231, 232, 235, 244, 253, 255, 262, 263, 266, 267, 270, 271, 272, 273, 274, 278, 279, 280, 281, 282, 285, 286, 287], "goal": [6, 70, 75, 99, 104, 112, 138, 150, 186, 195, 214, 271, 275, 284], "tune": [6, 7, 10, 11, 12, 14, 42, 43, 54, 56, 75, 112, 114, 115, 116, 117, 119, 120, 121, 122, 125, 126, 127, 128, 138, 148, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 165, 166, 167, 168, 169, 180, 194, 195, 212, 213, 214, 215, 217, 220, 227, 229, 232, 233, 253, 257, 260, 262, 263, 270, 272, 273, 277, 279, 280, 282, 286], "prefer": [6, 75, 112, 150, 272, 278], "calibr": [6, 7, 10, 11, 42, 43, 75, 112, 150, 174, 185, 186, 194, 196, 215, 226, 227, 272, 275, 278, 284, 285, 286], "space": [6, 7, 10, 11, 42, 43, 75, 82, 87, 90, 91, 92, 112, 116, 119, 126, 135, 138, 150, 154, 159, 166, 186, 188, 189, 191, 194, 195, 196, 213, 272, 275, 281, 286], "etc": [6, 27, 68, 70, 75, 82, 99, 104, 112, 135, 138, 150, 179, 185, 193, 218, 227, 255, 259, 272, 280, 284], "dataload": [6, 10, 11, 12, 23, 32, 42, 43, 54, 65, 70, 99, 104, 113, 150, 169, 172, 185, 190, 193, 194, 195, 217, 218, 219, 220, 225, 226, 232, 233, 255, 256, 271, 272, 275, 276, 277, 278, 281, 282, 283, 285, 286], "framework": [6, 8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 21, 23, 25, 28, 30, 31, 35, 40, 41, 45, 46, 48, 50, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 65, 67, 69, 75, 84, 85, 112, 120, 126, 137, 138, 139, 140, 142, 160, 166, 172, 185, 186, 193, 194, 196, 212, 213, 217, 220, 221, 225, 226, 227, 228, 231, 232, 233, 255, 256, 272, 273, 275, 279, 282, 283, 284, 285, 286, 287], "custom": [6, 7, 113, 137, 148, 179, 211, 218, 219, 236, 259, 260, 261, 265, 267, 268, 272, 273, 278, 280], "If": [6, 7, 10, 11, 14, 28, 42, 43, 56, 69, 108, 138, 150, 169, 185, 186, 189, 190, 195, 211, 213, 214, 215, 220, 228, 229, 231, 232, 239, 247, 248, 251, 253, 259, 264, 270, 272, 275, 278, 280, 281, 282, 283, 284], "user": [6, 7, 10, 11, 14, 17, 21, 28, 29, 35, 42, 43, 56, 59, 63, 69, 75, 99, 104, 110, 112, 113, 137, 138, 148, 150, 155, 168, 169, 180, 183, 184, 186, 190, 191, 193, 194, 195, 196, 201, 211, 213, 214, 218, 219, 222, 224, 227, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 244, 247, 253, 260, 261, 262, 263, 266, 267, 268, 270, 271, 272, 273, 275, 276, 277, 279, 281, 282, 283, 284, 288], "pass": [6, 137, 150, 179, 180, 186, 189, 190, 194, 211, 215, 218, 219, 220, 226, 231, 232, 254, 261, 272, 274, 275, 277, 281, 286], "need": [6, 7, 10, 11, 14, 21, 28, 31, 33, 34, 42, 43, 44, 52, 53, 56, 63, 69, 74, 113, 119, 137, 138, 148, 150, 159, 169, 179, 180, 184, 186, 190, 194, 213, 214, 215, 217, 218, 220, 227, 232, 236, 238, 239, 242, 246, 247, 248, 250, 251, 253, 254, 255, 256, 257, 258, 260, 264, 266, 272, 274, 275, 276, 277, 278, 279, 281, 283, 284, 286], "generate_prefix": 6, "core_list": 6, "gener": [6, 10, 11, 14, 15, 16, 17, 28, 42, 43, 44, 53, 56, 57, 58, 59, 69, 77, 85, 116, 130, 138, 150, 154, 169, 183, 186, 189, 190, 194, 196, 214, 218, 231, 232, 233, 235, 236, 241, 246, 248, 250, 251, 253, 255, 256, 270, 272, 273, 275, 277, 278, 281, 282, 283, 284], "command": [6, 29, 169, 217, 220, 236, 238, 241, 246, 250, 254, 255, 257, 258, 259, 261], "prefix": [6, 236, 241, 282], "numactl": [6, 223, 239, 247], "index": [6, 7, 14, 47, 52, 56, 91, 180, 215, 231, 254, 258, 278, 281], "bound": [6, 28, 69, 80, 116, 133, 154, 231, 283], "specif": [6, 7, 12, 13, 14, 15, 19, 21, 35, 54, 55, 56, 57, 61, 63, 93, 94, 96, 97, 98, 137, 150, 177, 185, 188, 191, 194, 195, 212, 213, 214, 217, 218, 224, 226, 230, 231, 232, 233, 234, 235, 236, 240, 241, 243, 247, 253, 255, 261, 270, 272, 274, 278, 284, 286], "call_on": 6, "cmd": 6, "log_fil": 6, "execut": [6, 7, 109, 113, 115, 150, 151, 153, 169, 172, 179, 180, 186, 217, 218, 219, 232, 233, 238, 239, 246, 247, 253, 254, 255, 256, 260, 263, 271, 272, 275, 278, 280, 284, 287], "one": [6, 28, 38, 69, 77, 80, 84, 86, 107, 110, 111, 130, 133, 137, 185, 186, 191, 194, 212, 218, 219, 220, 224, 227, 228, 231, 232, 233, 236, 237, 241, 242, 244, 246, 247, 250, 253, 254, 255, 258, 259, 260, 261, 263, 270, 271, 272, 274, 275, 276, 278, 279, 281, 283, 284], "dump": [6, 74, 180, 185, 186, 189, 258, 275, 279, 282], "log": [6, 176, 190, 244, 266, 267, 268, 280, 282, 284], "window": [6, 211, 228, 253, 254], "config_inst": 6, "raw_cmd": 6, "multi": [6, 80, 133, 137, 150, 185, 191, 214, 215, 227, 232, 270, 272, 275, 284], "trigger": [6, 109], "sub": [6, 29, 191, 213, 284], "process": [6, 7, 10, 11, 12, 13, 14, 24, 28, 29, 42, 43, 54, 55, 56, 66, 69, 107, 109, 111, 115, 116, 138, 150, 151, 153, 154, 169, 179, 180, 184, 185, 186, 191, 194, 195, 196, 212, 214, 215, 218, 219, 220, 222, 232, 235, 237, 258, 260, 261, 263, 271, 272, 275, 276, 278, 281, 282, 283, 286], "raw": [6, 13, 17, 20, 55, 59, 62, 119, 159, 231, 257, 284], "summary_benchmark": 6, "summari": [6, 169, 217, 248, 251, 282, 287], "profil": [6, 7, 129], "benchmark_with_raw_cmd": 6, "string": [6, 7, 14, 30, 35, 56, 70, 75, 77, 80, 86, 87, 88, 90, 91, 99, 104, 107, 108, 109, 110, 111, 112, 130, 133, 142, 146, 172, 177, 180, 185, 231, 283], "exampl": [6, 7, 12, 13, 14, 24, 28, 54, 55, 56, 66, 69, 80, 81, 82, 84, 110, 133, 134, 135, 137, 138, 148, 150, 168, 169, 179, 180, 185, 188, 193, 195, 196, 201, 226, 227, 236, 239, 240, 241, 244, 261, 264, 277, 279, 283, 284, 285, 288], "accord": [6, 7, 12, 13, 14, 28, 54, 55, 56, 69, 119, 157, 159, 172, 185, 191, 194, 215, 220, 256, 261, 266, 267, 268, 272, 277, 281, 283, 284], "config": [6, 10, 11, 12, 42, 43, 54, 93, 94, 96, 97, 98, 99, 104, 107, 108, 109, 110, 111, 126, 127, 129, 138, 166, 167, 168, 169, 172, 179, 180, 183, 191, 193, 195, 196, 201, 211, 213, 214, 217, 218, 219, 220, 222, 225, 227, 231, 232, 233, 234, 255, 256, 271, 272, 274, 275, 277, 278, 280, 282, 284], "from": [6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 19, 24, 30, 31, 34, 42, 43, 44, 47, 51, 54, 55, 56, 57, 58, 59, 61, 66, 70, 72, 73, 74, 77, 80, 81, 82, 86, 91, 107, 108, 109, 111, 126, 128, 130, 133, 134, 135, 138, 146, 148, 150, 166, 168, 169, 172, 175, 179, 180, 183, 184, 185, 186, 188, 189, 190, 191, 194, 196, 211, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 225, 227, 230, 231, 233, 234, 235, 236, 240, 241, 242, 244, 254, 256, 258, 259, 263, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285], "import": [6, 7, 86, 138, 148, 150, 169, 180, 183, 184, 185, 190, 191, 193, 196, 211, 214, 215, 217, 218, 219, 220, 222, 225, 231, 232, 233, 234, 235, 236, 240, 242, 255, 256, 264, 270, 271, 272, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285], "fit_with_raw_cmd": 6, "iter": [6, 7, 10, 11, 14, 15, 31, 42, 43, 47, 52, 56, 57, 109, 111, 138, 150, 169, 172, 185, 190, 191, 194, 211, 214, 215, 232, 272, 274, 275, 281, 282, 284, 286], "100": [6, 7, 14, 56, 185, 186, 211, 215, 220, 226, 228, 232, 258, 274, 275, 283, 284, 286, 287], "cores_per_inst": [6, 7, 211, 232, 274], "4": [6, 7, 21, 24, 28, 63, 66, 69, 77, 78, 80, 130, 131, 133, 168, 188, 193, 194, 196, 211, 220, 221, 224, 227, 228, 231, 232, 235, 241, 261, 263, 267, 272, 275, 278, 281, 283, 284, 287], "num_of_inst": [6, 7, 211, 232, 274], "7": [6, 7, 148, 184, 186, 196, 211, 223, 224, 232, 272, 275, 279, 281, 284, 287], "test": [6, 7, 28, 69, 189, 193, 217, 228, 261, 266, 287], "py": [6, 7, 78, 80, 81, 82, 109, 131, 133, 134, 135, 183, 190, 194, 213, 217, 220, 228, 232, 238, 240, 241, 242, 248, 251, 255, 257, 258, 260, 261, 263, 264, 266, 267, 268, 275, 279, 282], "fit": [6, 7, 116, 138, 150, 154, 169, 190, 193, 211, 214, 215, 217, 220, 225, 226, 231, 232, 233, 234, 255, 256, 272, 275, 276, 277, 278], "pb": [6, 7, 138, 146, 150, 185, 211, 220, 225, 232, 234, 255, 258, 266, 282, 287], "eval_dataload": [6, 7, 10, 11, 42, 43, 113, 114, 116, 119, 120, 122, 138, 150, 151, 152, 154, 155, 159, 160, 162, 169, 211, 226, 231, 232, 255, 275, 276, 284], "x": [7, 28, 53, 69, 116, 154, 186, 212, 213, 217, 220, 233, 234, 261, 262, 266, 267, 269, 275, 276, 281, 282, 283, 285], "dotdict": [7, 148, 180], "access": [7, 175, 180, 248, 251, 255], "yaml": [7, 10, 11, 12, 14, 29, 42, 43, 54, 56, 70, 75, 86, 87, 88, 90, 99, 104, 112, 113, 179, 180, 194, 196, 226, 231, 232, 270, 274, 282, 283], "attribut": [7, 180, 194, 214, 224, 226, 232, 274, 286], "instead": [7, 53, 180, 239, 241, 244, 259, 272, 278], "dictionari": [7, 27, 68, 80, 87, 90, 92, 133, 180], "notat": [7, 180], "option": [7, 10, 11, 12, 28, 42, 43, 54, 69, 73, 74, 80, 86, 107, 113, 126, 133, 137, 138, 150, 166, 168, 169, 173, 175, 180, 185, 195, 196, 213, 214, 215, 224, 228, 232, 247, 261, 264, 266, 267, 268, 272, 275, 278, 280, 281, 283, 284, 286], "random_se": [7, 116, 154, 232, 286], "1978": 7, "workspac": [7, 179, 180, 234, 261, 266, 267, 268], "default_workspac": 7, "resume_from": [7, 180], "tensorboard": [7, 172, 180, 194, 232, 256], "global": [7, 93, 94, 96, 97, 98, 107, 168, 180, 183, 190, 232, 272, 274, 284], "creat": [7, 12, 14, 31, 44, 54, 56, 80, 90, 91, 126, 133, 166, 168, 172, 186, 188, 191, 194, 215, 234, 246, 248, 250, 251, 254, 266, 267, 268, 272, 275, 280, 282, 284, 285], "you": [7, 12, 52, 54, 109, 137, 150, 189, 190, 195, 213, 214, 215, 217, 220, 228, 229, 231, 233, 236, 238, 239, 241, 246, 250, 253, 254, 255, 256, 257, 258, 259, 261, 272, 275, 278, 279, 280, 281, 282, 285], "want": [7, 12, 52, 54, 109, 155, 169, 190, 194, 214, 215, 220, 232, 241, 253, 254, 261, 270, 275, 278, 280, 282, 284], "should": [7, 10, 11, 12, 14, 28, 33, 42, 43, 52, 54, 56, 69, 74, 78, 131, 137, 138, 150, 169, 180, 183, 184, 185, 186, 190, 191, 194, 195, 196, 215, 218, 220, 231, 232, 239, 248, 251, 253, 255, 256, 270, 272, 275, 278, 283, 284, 286], "function": [7, 10, 11, 13, 42, 43, 55, 87, 90, 99, 104, 173, 185, 189, 190, 191, 194, 195, 196, 211, 214, 218, 219, 222, 226, 227, 228, 230, 231, 232, 233, 244, 254, 260, 261, 272, 275, 278, 279, 280, 281, 282, 284, 285], "util": [7, 37, 78, 108, 118, 129, 131, 158, 185, 195, 196, 197, 212, 213, 220, 232, 236, 256, 272, 275, 284, 285], "set_random_se": [7, 180], "seed": [7, 92, 180, 232, 286], "int": [7, 12, 13, 24, 28, 53, 54, 55, 66, 69, 73, 74, 78, 80, 84, 91, 131, 133, 137, 168, 175, 180, 185, 193, 213, 214, 215, 231, 232, 264, 274, 278, 283], "set_workspac": [7, 180], "set_resume_from": [7, 180], "set_tensorboard": [7, 180], "bool": [7, 12, 14, 24, 28, 54, 56, 66, 69, 74, 78, 84, 107, 125, 131, 137, 165, 175, 179, 180, 214, 215, 231, 264, 274, 283], "random": [7, 24, 28, 66, 69, 92, 116, 118, 154, 158, 180, 191, 232, 272, 274, 283, 286], "default": [7, 10, 11, 12, 13, 14, 24, 28, 42, 43, 46, 54, 55, 56, 66, 69, 73, 74, 77, 86, 108, 128, 130, 137, 146, 168, 172, 175, 180, 185, 190, 194, 213, 214, 215, 224, 227, 228, 231, 232, 233, 235, 241, 244, 246, 250, 258, 261, 266, 267, 268, 270, 272, 274, 275, 277, 278, 280, 281, 283, 284, 286], "directori": [7, 13, 14, 55, 56, 146, 175, 177, 179, 180, 215, 220, 223, 246, 248, 250, 251, 257, 259, 282], "where": [7, 80, 84, 133, 137, 168, 180, 196, 212, 217, 218, 246, 250, 254, 281, 282], "intermedi": [7, 30, 186, 190, 227, 275], "histori": [7, 179, 180, 253, 257, 284], "ar": [7, 12, 28, 54, 69, 80, 84, 91, 107, 108, 109, 113, 115, 116, 133, 137, 151, 153, 154, 168, 172, 179, 180, 184, 185, 186, 188, 189, 190, 191, 194, 195, 213, 214, 215, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 239, 241, 244, 247, 253, 255, 256, 258, 259, 260, 261, 264, 270, 271, 272, 273, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286], "store": [7, 14, 56, 102, 109, 226], "nc_workspac": [7, 256, 257], "format": [7, 12, 13, 14, 54, 55, 56, 74, 80, 86, 126, 133, 166, 175, 186, 193, 195, 196, 213, 215, 220, 222, 231, 232, 233, 234, 235, 236, 258, 261, 273, 275, 278, 279], "datetim": 7, "now": [7, 28, 69, 190, 191, 196, 215, 220, 244, 274, 283, 284], "strftime": 7, "y": [7, 28, 69, 116, 154, 213, 217, 223, 239, 281, 283], "m": [7, 107, 189, 218, 228, 236, 238, 241, 244, 248, 251, 261, 272, 287], "d_": 7, "h": [7, 28, 69, 220, 261, 262, 266, 267, 268, 283], "resum": [7, 10, 11, 42, 43, 114, 120, 122, 151, 152, 154, 155, 159, 160, 162], "wa": [7, 194, 232, 235, 258, 259, 262, 273, 284], "automat": [7, 14, 17, 24, 56, 59, 66, 75, 85, 112, 185, 190, 193, 211, 215, 227, 232, 233, 236, 238, 241, 242, 244, 246, 247, 248, 250, 251, 253, 260, 263, 271, 272, 275, 281, 283, 284], "save": [7, 14, 56, 73, 74, 113, 146, 150, 169, 170, 175, 180, 183, 190, 194, 226, 232, 233, 234, 237, 241, 246, 250, 256, 261, 266, 267, 268, 271, 275, 276, 278, 281], "dure": [7, 107, 111, 148, 180, 186, 195, 217, 232, 234, 260, 270, 271, 272, 275, 281, 282, 286], "last": [7, 186, 214, 233, 236, 238, 243, 247, 275, 278, 281], "flag": [7, 78, 131, 217], "indic": [7, 12, 47, 52, 54, 70, 80, 91, 133, 185, 190, 214, 223, 256, 261, 282], "whether": [7, 12, 24, 28, 52, 54, 66, 69, 78, 80, 84, 107, 131, 133, 137, 172, 175, 179, 180, 194, 215, 231, 275, 278, 281, 283], "each": [7, 14, 17, 24, 28, 52, 56, 59, 66, 69, 78, 80, 81, 82, 119, 131, 133, 134, 135, 159, 180, 184, 189, 194, 195, 196, 213, 215, 217, 218, 219, 224, 232, 238, 244, 247, 253, 261, 263, 270, 272, 276, 278, 280, 282, 283, 284, 285], "visual": [7, 193, 244, 253, 280, 282, 284, 285], "displai": [7, 125, 126, 165, 166, 180, 253, 256], "2022": [7, 229, 272, 278, 281], "workspace_path": 7, "output": [7, 10, 11, 33, 37, 42, 43, 73, 74, 77, 107, 130, 137, 138, 146, 150, 169, 175, 176, 180, 183, 190, 194, 195, 218, 219, 220, 222, 224, 226, 231, 232, 234, 244, 253, 254, 256, 261, 262, 266, 267, 268, 271, 272, 274, 275, 278, 279, 281, 282, 283, 284, 286], "devic": [7, 175, 193, 195, 214, 218, 232, 233, 236, 239, 244, 253, 272, 274, 276, 278], "cpu": [7, 175, 180, 185, 193, 195, 211, 212, 227, 232, 233, 236, 238, 244, 253, 261, 273, 274, 275, 276, 277, 278, 282], "warmup": [7, 211, 232, 274], "model_nam": [7, 193], "inter_num_of_thread": [7, 232, 274], "intra_num_of_thread": [7, 232, 274], "diagnosi": [7, 232, 256, 257, 258, 273, 279, 285], "ni_workload_nam": 7, "benchmark": [7, 31, 76, 113, 129, 148, 180, 193, 201, 234, 236, 240, 244, 247, 253, 256, 284, 285, 286, 287], "A": [7, 14, 28, 31, 33, 34, 56, 69, 70, 77, 80, 81, 82, 84, 87, 90, 91, 92, 99, 102, 104, 107, 108, 109, 110, 111, 116, 130, 133, 134, 135, 137, 138, 142, 146, 154, 169, 180, 189, 193, 195, 213, 214, 215, 221, 224, 231, 232, 234, 246, 247, 250, 253, 261, 272, 273, 275, 278, 281, 283, 284, 286], "empti": [7, 239, 276], "includ": [7, 12, 14, 21, 28, 30, 54, 56, 63, 69, 75, 85, 107, 112, 180, 185, 188, 194, 195, 196, 214, 215, 217, 228, 229, 230, 231, 232, 236, 239, 242, 247, 259, 263, 266, 267, 268, 272, 275, 277, 278, 282, 284], "itex": [7, 73, 185, 233, 275, 281], "ipex": [7, 179, 227, 230, 232, 233, 238, 242, 243, 281], "onnxrt_trt_ep": [7, 233, 275], "onnxrt_cuda_ep": [7, 233, 275], "onnxrt_dnnl_ep": [7, 233, 275], "onnxrt_dml_ep": [7, 275], "number": [7, 13, 24, 28, 52, 55, 66, 69, 81, 82, 84, 107, 116, 134, 135, 137, 154, 172, 180, 186, 211, 214, 215, 220, 231, 261, 263, 272, 275, 278, 280, 281, 283, 284], "inter": 7, "oper": [7, 24, 66, 107, 183, 184, 186, 190, 211, 214, 217, 222, 253, 259, 272, 275, 278, 281, 283, 284], "intra": 7, "accuracycriterion": [7, 232, 284], "higher_is_bett": [7, 137, 150, 284, 286], "criterion": [7, 32, 35, 218, 219, 232, 272, 275, 281, 284, 286], "rel": [7, 148, 232, 256, 274, 284, 286, 287], "tolerable_loss": [7, 232, 284], "01": [7, 230, 232, 274, 278, 284, 286, 287], "metric": [7, 10, 11, 32, 42, 43, 70, 75, 76, 91, 99, 104, 112, 113, 129, 138, 150, 169, 172, 184, 191, 194, 195, 215, 217, 220, 232, 233, 255, 275, 280, 281, 282, 284, 285, 286, 287], "higher": [7, 10, 11, 42, 43, 91, 138, 150, 169, 186, 190, 217, 218, 222, 231, 256, 272, 275, 278, 280], "better": [7, 10, 11, 42, 43, 91, 138, 150, 169, 186, 213, 219, 231, 233, 272, 273, 275, 278, 280, 281, 284], "loss": [7, 30, 75, 84, 99, 104, 112, 137, 169, 185, 186, 212, 217, 218, 219, 220, 221, 230, 231, 232, 233, 244, 256, 258, 271, 272, 273, 275, 278, 281, 284, 286], "absolut": [7, 84, 137, 186, 231, 232, 235, 272, 275, 284], "float": [7, 12, 24, 54, 66, 78, 80, 81, 82, 109, 131, 133, 134, 135, 165, 177, 180, 183, 184, 186, 213, 215, 231, 235, 274, 275, 281, 283], "how": [7, 28, 69, 70, 107, 183, 184, 185, 189, 190, 192, 194, 214, 215, 218, 219, 220, 226, 231, 232, 247, 248, 251, 252, 253, 255, 266, 267, 268, 272, 273, 275, 281, 283, 284, 285, 286], "much": [7, 28, 69, 70, 218, 247, 281, 283], "accept": [7, 188, 211, 213, 214, 255, 278], "accuracy_criterion": [7, 148, 232, 257, 270, 274, 284, 286], "avail": [7, 142, 193, 197, 199, 203, 206, 209, 213, 221, 223, 225, 227, 246, 250, 255, 260, 261, 262, 266, 267, 268, 272, 284, 287], "tuningcriterion": [7, 232, 270, 280, 284], "strategi": [7, 8, 14, 40, 56, 76, 129, 186, 193, 194, 195, 196, 201, 212, 213, 214, 220, 227, 232, 241, 253, 258, 273, 274, 275, 277, 278, 279, 285, 286], "basic": [7, 27, 68, 87, 107, 118, 122, 125, 158, 162, 165, 169, 227, 228, 232, 235, 255, 274, 280], "strategy_kwarg": [7, 280, 284], "timeout": [7, 232, 274, 284, 286], "max_trial": [7, 232, 284], "doc": [7, 107, 125, 126, 137, 150, 165, 166, 180, 231, 232, 248, 251, 259], "tuning_strategi": 7, "md": [7, 107, 137, 150], "constraint": [7, 75, 112, 232, 272, 280, 284, 286], "guarante": [7, 185, 232], "models": [7, 148, 232, 270, 274], "footprint": [7, 75, 99, 104, 112, 148, 219, 232, 270, 272, 274, 276], "second": [7, 12, 54, 155, 180, 217, 232, 246, 250, 254, 266, 267, 278, 281, 284, 286], "which": [7, 12, 13, 14, 24, 29, 54, 55, 56, 66, 77, 82, 91, 93, 94, 96, 97, 98, 102, 107, 108, 109, 111, 116, 130, 135, 137, 142, 148, 150, 154, 180, 183, 185, 186, 188, 190, 191, 193, 194, 195, 196, 212, 214, 215, 217, 218, 220, 223, 224, 227, 231, 232, 233, 234, 237, 241, 244, 247, 253, 254, 255, 258, 261, 266, 267, 268, 271, 272, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286], "mean": [7, 24, 28, 66, 69, 82, 84, 107, 119, 135, 137, 159, 183, 190, 195, 196, 214, 217, 220, 224, 231, 232, 239, 258, 272, 275, 276, 278, 281, 283, 284, 286, 287], "earli": [7, 186, 232, 275, 284, 286], "stop": [7, 232, 284, 285, 286], "time": [7, 28, 69, 84, 116, 137, 148, 154, 180, 184, 186, 195, 214, 217, 220, 223, 232, 241, 243, 246, 250, 253, 254, 259, 262, 266, 267, 270, 272, 273, 275, 278, 280, 281, 282, 283, 284], "combin": [7, 10, 11, 24, 38, 42, 43, 66, 138, 150, 169, 180, 184, 190, 194, 227, 232, 271, 273, 275, 277, 278, 283, 284], "field": [7, 14, 56, 80, 133, 190, 194, 196, 220, 232, 235, 280, 284, 286], "decid": [7, 78, 109, 131, 185, 194, 195, 232, 275, 279, 284], "when": [7, 12, 13, 21, 28, 54, 55, 63, 69, 78, 108, 109, 131, 150, 169, 185, 186, 188, 191, 195, 213, 214, 215, 232, 244, 246, 247, 250, 254, 255, 258, 259, 260, 262, 266, 272, 275, 278, 281, 283, 284], "exit": [7, 115, 151, 153, 232, 261, 266, 267, 268, 286], "tuning_criterion": [7, 232, 270, 280, 284], "posttrainingquantconfig": [7, 150, 190, 193, 196, 214, 217, 222, 225, 231, 232, 234, 255, 256, 257, 258, 275, 276, 277, 278, 280, 281, 284], "domain": [7, 272, 284], "auto": [7, 114, 152, 158, 180, 190, 212, 236, 239, 241, 243, 244, 272, 275, 278], "recip": [7, 75, 112, 193, 232, 235, 276, 278, 281, 284], "quant_format": [7, 74, 222, 256], "approach": [7, 87, 88, 90, 190, 191, 193, 212, 215, 218, 227, 232, 241, 253, 256, 264, 266, 267, 268, 272, 273, 274, 276, 278, 284, 286], "calibration_sampling_s": [7, 232, 258], "op_type_dict": [7, 193, 196, 274, 275, 278, 284], "op_name_dict": [7, 217, 232, 256, 258, 275, 284], "reduce_rang": [7, 196, 274], "example_input": [7, 74, 179, 222], "excluded_precis": [7, 277], "quant_level": [7, 256, 278, 281, 284], "gpu": [7, 185, 193, 211, 227, 232, 233, 238, 244, 253, 274, 275, 276], "npu": [7, 275], "xpu": [7, 185, 244, 275], "cv": [7, 272], "object_detect": [7, 80, 133], "nlp": [7, 110, 186, 241, 257, 272, 275], "recommendation_system": 7, "adaptor": [7, 128, 168, 172, 193, 196, 227, 276, 277, 279, 281, 282, 285], "explicitli": [7, 226, 272], "overrid": [7, 180, 213], "detect": [7, 80, 84, 133, 137, 142, 189, 190, 236, 243, 244, 272, 284], "quantiztaion": 7, "below": [7, 113, 137, 150, 185, 186, 189, 190, 193, 194, 195, 196, 214, 217, 218, 220, 226, 231, 235, 236, 238, 246, 247, 250, 253, 256, 261, 270, 271, 272, 274, 275, 278, 280, 281, 282, 284, 285], "do": [7, 12, 53, 54, 70, 74, 77, 80, 110, 130, 133, 179, 188, 195, 213, 215, 220, 224, 227, 231, 232, 248, 251, 272, 277, 279, 281, 284], "quant": [7, 126, 166, 190, 213, 230, 232, 275], "smooth_quant_arg": [7, 275, 281], "layer_wise_qu": [7, 276], "fast": [7, 272, 273, 278], "bia": [7, 278, 282], "gemm_to_matmul": [7, 275], "convert": [7, 12, 24, 27, 28, 54, 66, 68, 69, 73, 80, 86, 108, 126, 133, 166, 184, 186, 190, 195, 232, 233, 238, 275, 277, 278, 281, 283, 284], "gemm": 7, "matmul": [7, 107, 224, 256, 278, 284], "add": [7, 12, 14, 35, 54, 56, 108, 126, 166, 180, 189, 190, 193, 196, 214, 215, 220, 222, 224, 231, 232, 248, 251, 255, 256, 263, 266, 267, 280, 281, 282, 284, 285], "valid": [7, 14, 56, 80, 108, 109, 133, 146, 191, 193, 194, 215, 217, 218, 221, 224, 227, 229, 232, 244, 258, 272, 275, 278, 279], "graph_optimization_level": [7, 274, 275], "disable_al": [7, 274], "enable_bas": 7, "enable_extend": 7, "enable_al": 7, "first_conv_or_matmul_quant": [7, 275], "last_conv_or_matmul_quant": [7, 275], "pre_post_process_quant": [7, 275], "preprocess": [7, 12, 28, 54, 69, 168, 172, 220, 283], "postprocess": [7, 25, 28, 32, 69, 137, 150, 172, 194, 232, 282, 283], "add_qdq_pair_to_weight": [7, 275], "qdq": [7, 72, 73, 74, 184, 194, 217, 222, 227, 243, 244, 275, 279, 281], "pair": [7, 195, 214, 232, 233, 279], "optypes_to_exclude_output_qu": [7, 275], "optyp": [7, 72, 195], "dedicated_qdq_pair": [7, 275], "dedic": 7, "qoper": [7, 222, 256], "requir": [7, 113, 146, 185, 186, 190, 194, 195, 211, 212, 214, 217, 219, 220, 224, 232, 233, 234, 237, 247, 253, 255, 260, 261, 264, 267, 268, 272, 275, 278, 279, 280, 281, 282, 284, 286], "onnxruntim": [7, 14, 21, 50, 56, 63, 85, 194, 212, 214, 227, 228, 233, 256, 274], "tensorflow": [7, 12, 13, 14, 17, 19, 21, 28, 35, 53, 54, 55, 56, 59, 61, 63, 69, 73, 74, 75, 78, 80, 84, 85, 86, 112, 120, 131, 133, 137, 138, 146, 150, 160, 180, 184, 189, 191, 193, 194, 195, 212, 213, 214, 217, 218, 219, 221, 224, 225, 227, 228, 232, 233, 234, 235, 243, 244, 255, 258, 272, 273, 274, 280, 281, 284, 286], "method": [7, 12, 14, 21, 28, 31, 47, 52, 53, 54, 56, 63, 69, 90, 91, 92, 126, 166, 168, 172, 173, 175, 176, 183, 185, 186, 190, 191, 193, 212, 213, 214, 215, 217, 218, 219, 231, 232, 271, 272, 275, 277, 278, 281, 283, 284], "dynam": [7, 44, 74, 126, 166, 194, 214, 218, 222, 227, 232, 236, 241, 242, 243, 244, 247, 253, 273, 284, 287], "weight_onli": [7, 179, 193, 213, 235, 276, 278], "ptq": [7, 150, 184, 185, 190, 217, 220, 227, 232, 258, 275, 281, 282, 284], "both": [7, 183, 186, 188, 191, 194, 219, 232, 237, 256, 258, 260, 272, 274, 275, 278, 281, 284], "tri": [7, 213, 284], "meet": [7, 113, 115, 151, 153, 183, 185, 190, 195, 270, 273, 274, 275, 278, 282, 284], "criteria": [7, 75, 99, 104, 107, 109, 112, 190, 253, 281], "bayesian": [7, 92, 118, 158, 191, 272, 274], "mse": [7, 84, 118, 137, 150, 158, 180, 217, 231, 258, 274, 278, 279], "mse_v2": [7, 118, 158], "hawq_v2": [7, 158], "exhaust": [7, 92, 118, 158, 274], "els": [7, 52, 148, 177, 241, 278, 282], "sampl": [7, 12, 13, 14, 24, 28, 47, 52, 54, 55, 56, 66, 69, 84, 91, 116, 137, 154, 185, 186, 191, 214, 215, 221, 227, 254, 275, 278, 281, 283, 284, 286, 287], "advanc": [7, 183, 185, 186, 188, 193, 195, 201, 230, 235, 272, 275, 278, 286], "reduc": [7, 184, 186, 194, 212, 219, 232, 233, 253, 254, 272, 273, 275, 276, 277, 278, 281, 284, 286], "dtype": [7, 15, 16, 24, 28, 57, 58, 66, 69, 175, 193, 195, 196, 215, 217, 222, 224, 236, 258, 274, 275, 278, 281, 282, 283, 286], "activ": [7, 37, 126, 166, 168, 184, 185, 186, 194, 195, 196, 212, 217, 219, 224, 232, 254, 255, 258, 266, 267, 268, 274, 275, 278, 281, 282, 286], "layer1": [7, 232, 272, 275], "conv1": [7, 183, 275, 286], "bit": [7, 168, 186, 193, 196, 212, 219, 233, 235, 273, 275, 278, 281], "precis": [7, 10, 11, 42, 43, 75, 82, 84, 85, 112, 114, 126, 135, 137, 138, 148, 152, 155, 166, 180, 185, 186, 193, 194, 195, 201, 211, 212, 219, 220, 224, 227, 235, 236, 242, 243, 244, 273, 274, 275, 278, 281, 284, 285], "exclud": [7, 194, 212, 277], "enabl": [7, 109, 195, 196, 220, 228, 233, 236, 238, 241, 242, 244, 255, 257, 258, 260, 263, 272, 273, 281, 284], "mix": [7, 114, 126, 138, 152, 166, 193, 194, 201, 227, 236, 242, 243, 244, 285], "bf16": [7, 126, 166, 194, 195, 224, 232, 238, 243, 247, 253, 277, 284, 287], "disabl": [7, 188, 253, 258, 277, 278, 281], "conserv": [7, 158], "In": [7, 38, 53, 80, 107, 109, 133, 148, 185, 188, 190, 191, 193, 194, 195, 214, 215, 217, 218, 219, 220, 231, 232, 243, 246, 247, 250, 256, 257, 258, 259, 266, 267, 268, 270, 271, 272, 275, 277, 278, 280, 281, 282, 283, 284, 285], "docstr": 7, "workload": [7, 177, 180, 255, 273], "insight": [7, 177, 193, 217, 273, 279, 284, 285], "quantizationawaretrainingconfig": [7, 169, 190, 219, 222, 232, 275, 277, 284], "awar": [7, 38, 86, 107, 157, 169, 194, 195, 196, 212, 219, 220, 222, 227, 253, 263, 271, 273, 278, 284], "qat": [7, 86, 146, 219, 220, 227, 232, 275], "copi": [7, 108, 180, 214, 259], "deepcopi": 7, "model_origin": [7, 150, 277], "qat_op_name_dict": 7, "compression_manag": [7, 169, 190, 218, 219, 232, 271, 272, 275], "prepare_compress": [7, 169, 190, 218, 219, 232, 271, 272, 275], "weightpruningconfig": [7, 232, 271, 272], "pruning_config": [7, 232, 272], "target_spars": [7, 232, 272, 274, 286], "9": [7, 190, 228, 232, 272, 274, 281, 284, 286, 287], "pruning_typ": [7, 232, 272], "snip_momentum": [7, 232, 272], "pattern": [7, 14, 56, 97, 98, 100, 105, 109, 126, 166, 184, 194, 213, 215, 224, 227, 232, 254, 271, 274, 281, 284, 287], "4x1": [7, 103, 232, 272, 287], "op_nam": [7, 127, 167, 180, 181, 195, 232, 272, 282], "excluded_op_nam": [7, 232, 272], "start_step": [7, 109, 232, 272, 274], "end_step": [7, 109, 232, 272, 274], "pruning_scop": [7, 232, 272], "pruning_frequ": [7, 232, 272], "min_sparsity_ratio_per_op": [7, 232, 272], "max_sparsity_ratio_per_op": [7, 232, 272], "98": [7, 232, 272, 274, 287], "sparsity_decay_typ": [7, 232, 272], "exp": [7, 232, 235, 272], "pruning_op_typ": [7, 232, 272], "low_memory_usag": 7, "kwarg": [7, 14, 26, 28, 33, 36, 56, 69, 125, 127, 137, 138, 139, 141, 143, 145, 146, 147, 150, 165, 167, 169, 175, 176, 179, 180, 214], "prune": [7, 38, 39, 76, 93, 94, 96, 97, 98, 102, 104, 105, 107, 108, 109, 111, 113, 180, 193, 220, 221, 224, 225, 227, 271, 273, 285, 286], "defin": [7, 10, 11, 42, 43, 87, 88, 90, 91, 92, 99, 104, 107, 108, 109, 111, 138, 150, 169, 179, 183, 185, 186, 188, 191, 194, 195, 214, 215, 218, 219, 224, 227, 231, 232, 254, 271, 272, 275, 278, 280, 281, 282, 284, 286], "singl": [7, 12, 28, 47, 54, 69, 80, 109, 111, 133, 137, 150, 190, 215, 217, 228, 259, 272, 276, 281], "sequenc": [7, 12, 27, 28, 54, 68, 69, 78, 82, 107, 131, 135, 194, 215, 224, 272, 278, 283], "local": [7, 107, 180, 183, 246, 250, 255, 262, 263, 272, 280], "link": [7, 12, 54, 137, 150, 212, 215, 222, 246, 250, 253, 278, 287], "out": [7, 12, 13, 14, 54, 55, 56, 75, 107, 112, 183, 185, 186, 189, 190, 193, 215, 236, 241, 246, 247, 248, 250, 251, 253, 259, 272, 274, 275, 278], "By": [7, 77, 130, 195, 196, 231, 234, 246, 247, 250, 272, 273, 278, 284], "correspond": [7, 12, 54, 77, 80, 84, 130, 133, 137, 172, 180, 186, 194, 224, 232, 272, 274, 275, 280, 284], "sparsiti": [7, 109, 111, 180, 193, 215, 227, 232, 285, 287], "reach": [7, 111, 189, 214, 255, 272, 284], "after": [7, 12, 24, 28, 31, 54, 66, 69, 109, 155, 175, 180, 184, 186, 191, 193, 195, 215, 217, 218, 219, 222, 227, 231, 232, 246, 247, 250, 254, 258, 270, 271, 272, 275, 277, 278, 280, 281, 282, 283, 284], "90": [7, 230, 276, 286, 287], "magnitud": [7, 84, 95, 137, 227, 272], "snip": [7, 109, 227, 272, 287], "magnitude_progress": 7, "snip_progress": 7, "snip_momentum_progress": 7, "pattern_lock": [7, 95], "most": [7, 84, 137, 185, 217, 232, 233, 272, 275, 278, 281, 284, 287], "feasibl": 7, "under": [7, 14, 56, 175, 179, 189, 191, 193, 215, 229, 231, 232, 236, 241, 242, 253, 261, 271, 272, 273, 276, 278, 282, 284], "situat": [7, 220, 272], "structur": [7, 109, 127, 167, 180, 186, 227, 252, 254, 257, 266, 272, 273, 275, 282, 285, 287], "unstructur": [7, 103, 227, 272, 287], "nxm": [7, 103, 107, 272], "e": [7, 188, 189, 193, 218, 221, 225, 236, 241, 242, 246, 250, 272, 278, 281, 284], "g": [7, 189, 218, 221, 225, 236, 241, 272, 278, 279, 281, 284], "8x1": 7, "channelx1": [7, 272], "1xchannel": [7, 272], "n": [7, 13, 28, 55, 69, 78, 107, 131, 196, 213, 215, 217, 218, 261, 272, 275, 281, 283], "directli": [7, 53, 80, 84, 108, 133, 137, 183, 193, 231, 232, 240, 272, 274, 275, 282], "our": [7, 191, 193, 222, 232, 235, 254, 255, 258, 280, 285], "itrex": [7, 281], "some": [7, 12, 54, 108, 186, 195, 196, 213, 215, 217, 222, 228, 231, 232, 255, 256, 257, 258, 261, 270, 272, 275, 277, 278, 281, 282, 284, 285], "step": [7, 107, 109, 111, 169, 195, 196, 217, 218, 219, 220, 232, 248, 251, 253, 266, 267, 268, 271, 272, 274, 277, 278, 280, 281, 282, 284], "start": [7, 28, 69, 80, 133, 155, 228, 258, 273, 283, 284, 285, 288], "integ": [7, 70, 80, 84, 91, 107, 109, 133, 137, 184, 186, 194, 196, 212, 275, 278, 281, 284], "end": [7, 12, 27, 28, 54, 68, 69, 109, 115, 151, 153, 185, 194, 195, 196, 218, 219, 224, 228, 232, 247, 263, 270, 272, 278, 282, 283, 284], "determin": [7, 174, 188, 190, 212, 272, 275], "score": [7, 77, 78, 80, 81, 82, 84, 109, 130, 131, 133, 134, 135, 137, 157, 172, 190, 231, 256, 270, 272, 280, 284], "gather": [7, 107], "togeth": [7, 28, 69, 218, 228, 240, 273, 282, 283], "sort": [7, 119, 159, 217, 256, 278, 284], "sinc": [7, 75, 77, 99, 104, 112, 130, 218, 222, 228, 231, 247, 253, 258, 271, 278, 279], "lead": [7, 185, 213, 218, 232, 233, 258, 272, 278, 281], "less": [7, 180, 211, 218, 232, 260, 272], "frequenc": [7, 70, 109, 232, 272, 286], "minimum": [7, 196, 212, 217, 232, 235, 244, 272, 281, 284], "restrict": [7, 272, 280], "everi": [7, 107, 109, 194, 214, 241, 246, 250, 276, 278, 284], "maximum": [7, 12, 28, 54, 69, 78, 109, 116, 131, 146, 154, 186, 196, 212, 215, 217, 232, 272, 275, 281, 283], "schedul": [7, 76, 105, 109, 232, 260, 261, 263, 271], "increas": [7, 216, 227, 235, 236, 253, 258, 278, 284], "cube": [7, 272], "current": [7, 86, 93, 94, 96, 97, 98, 107, 109, 116, 120, 154, 160, 180, 190, 191, 194, 196, 212, 213, 220, 224, 232, 236, 240, 253, 261, 270, 272, 275, 278, 281, 284], "local_config": [7, 93, 94, 96, 97, 98], "6": [7, 184, 186, 224, 235, 275, 281, 284, 287], "queri": [7, 186, 195, 196, 263, 275], "kei": [7, 91, 108, 146, 170, 172, 180, 193, 195, 255, 256, 262, 273, 278, 282, 284], "self": [7, 148, 194, 195, 214, 215, 227, 231, 255, 280, 282, 284], "attent": [7, 12, 54, 188, 218, 272], "dens": [7, 111, 256, 272, 287], "8": [7, 27, 68, 190, 195, 212, 213, 224, 228, 235, 260, 261, 272, 273, 278, 281, 284, 287], "update_config": 7, "10": [7, 14, 56, 116, 154, 193, 211, 215, 222, 228, 230, 232, 255, 256, 272, 274, 283, 284, 287], "hpoconfig": 7, "search_spac": [7, 87, 90, 91, 92], "searcher": [7, 92], "xgb": 7, "loss_typ": [7, 30, 232, 286], "reg": 7, "min_train_sampl": 7, "42": [7, 92, 230, 287], "hyperparamet": [7, 125, 280, 281, 284], "optim": [7, 32, 38, 75, 92, 112, 116, 154, 169, 170, 177, 180, 184, 185, 186, 191, 193, 211, 213, 217, 218, 219, 220, 224, 225, 227, 228, 230, 232, 234, 236, 238, 240, 241, 244, 247, 255, 258, 259, 260, 262, 264, 273, 274, 275, 277, 278, 280, 281, 282, 284, 286], "search": [7, 10, 11, 42, 43, 75, 77, 87, 90, 91, 92, 112, 116, 130, 154, 180, 184, 193, 213, 227, 231, 236, 237, 247, 272, 273, 278, 281, 282, 284, 285], "algorithm": [7, 77, 84, 92, 129, 130, 137, 172, 174, 185, 186, 191, 193, 194, 195, 196, 213, 218, 219, 224, 227, 230, 242, 247, 272, 275, 282, 286], "grid": [7, 92, 191, 272], "bo": 7, "knowledgedistillationlossconfig": [7, 218, 219, 232, 271], "temperatur": [7, 30, 232, 286], "ce": [7, 30, 232, 286], "loss_weight": [7, 30, 232, 286], "knowledg": [7, 30, 70, 184, 219, 221, 225, 227, 232, 234, 286], "distil": [7, 30, 37, 38, 76, 193, 221, 225, 227, 271, 285, 286], "entropi": [7, 212, 284], "probabl": [7, 174, 278], "length": [7, 12, 28, 54, 69, 80, 133, 186, 215, 231, 273, 275, 278, 283], "item": [7, 27, 68, 108, 126, 166, 212, 220, 272, 281, 284], "student": [7, 12, 37, 54, 70, 215, 218, 219, 287], "groundtruth": [7, 80, 133], "label": [7, 10, 11, 12, 14, 15, 16, 17, 20, 24, 28, 33, 42, 43, 54, 56, 57, 58, 59, 62, 66, 69, 77, 79, 84, 130, 132, 137, 138, 150, 169, 185, 190, 214, 215, 217, 231, 232, 275, 283], "teacher": [7, 70, 218, 219, 232, 287], "kl": [7, 170, 174, 195, 196, 212, 224, 232, 284, 286], "sum": [7, 84, 137, 217, 218], "multipli": [7, 235, 278], "distillationconfig": [7, 169, 218, 219, 232, 271], "criterion_conf": 7, "d_conf": [7, 219, 232, 271], "teacher_model": [7, 30, 218, 219, 232], "intermediatelayersknowledgedistillationlossconfig": [7, 218], "layer_map": [7, 30, 218], "add_origin_loss": [7, 30], "map": [7, 28, 69, 72, 74, 75, 79, 81, 82, 84, 99, 104, 109, 112, 132, 134, 135, 137, 186, 213, 215, 220, 231, 232, 246, 250, 258, 272, 275, 278], "relationship": [7, 255], "student_layer_nam": 7, "student_layer_output_process": 7, "teacher_layer_nam": 7, "teacher_layer_output_process": 7, "bert": [7, 12, 28, 50, 53, 54, 69, 193, 215, 218, 231, 233, 241, 264, 267, 268, 272, 283, 287], "desir": [7, 24, 28, 66, 69, 195, 196, 272, 281, 283], "its": [7, 14, 28, 50, 56, 69, 72, 78, 79, 109, 116, 131, 132, 154, 188, 215, 218, 229, 231, 233, 244, 246, 250, 253, 254, 272, 278, 280, 283, 284], "either": [7, 80, 133, 185, 186, 237, 241, 261, 271, 274, 275], "take": [7, 10, 11, 28, 33, 42, 43, 47, 69, 107, 116, 137, 138, 150, 154, 169, 185, 188, 190, 191, 214, 217, 218, 224, 232, 253, 272, 275, 277, 278, 283, 284, 286], "serv": [7, 146, 185, 186, 261, 266, 267, 268], "tupl": [7, 10, 11, 24, 28, 42, 43, 66, 69, 74, 125, 138, 150, 165, 169, 179, 185, 195, 213, 215, 231, 232, 275, 283], "numer": [7, 84, 137, 185, 196, 233, 235, 273, 275, 278], "abbrevi": 7, "same": [7, 12, 28, 54, 69, 80, 133, 180, 194, 196, 211, 214, 215, 218, 220, 224, 232, 235, 237, 241, 246, 250, 272, 274, 275, 278, 281, 282, 283, 284], "further": [7, 186, 188, 193, 233, 234, 236, 238, 247, 253, 275], "layer_nam": [7, 272], "student_model": [7, 30, 232], "l1": 7, "len": [7, 28, 69, 215, 220, 283], "origin": [7, 12, 28, 29, 54, 69, 93, 94, 96, 97, 98, 108, 109, 128, 155, 168, 175, 180, 183, 185, 186, 189, 215, 241, 272, 275, 278, 283, 284, 286], "selfknowledgedistillationlossconfig": [7, 218, 232], "like": [7, 10, 11, 14, 42, 43, 44, 56, 75, 84, 109, 112, 113, 137, 146, 150, 169, 185, 186, 189, 190, 191, 194, 195, 217, 218, 219, 227, 241, 256, 258, 271, 272, 275, 278, 279, 281, 284], "student1_layer_name1": 7, "teacher_layer_name1": 7, "student2_layer_name1": 7, "student1_layer_name2": 7, "teacher_layer_name2": 7, "student2_layer_name2": 7, "calcul": [7, 15, 16, 57, 58, 81, 82, 107, 109, 119, 134, 135, 159, 170, 180, 185, 186, 212, 215, 231, 232, 244, 256, 270, 272, 275, 278, 280, 281, 284, 286], "soft": 7, "l2": [7, 272], "hard": [7, 214, 217], "resblock": 7, "featur": [7, 12, 13, 24, 28, 54, 55, 66, 69, 183, 186, 189, 193, 211, 214, 216, 218, 232, 233, 234, 236, 240, 241, 244, 253, 255, 259, 272, 273, 279, 283], "deepst": 7, "fc": [7, 272], "3": [7, 14, 28, 56, 69, 80, 133, 180, 183, 185, 186, 190, 191, 193, 212, 213, 214, 215, 218, 220, 222, 224, 225, 228, 231, 232, 233, 235, 236, 240, 244, 246, 250, 255, 260, 261, 263, 264, 266, 270, 272, 273, 274, 275, 278, 279, 280, 281, 283, 284, 287], "02": [7, 287], "nn": [7, 74, 138, 150, 175, 179, 190, 218, 232, 234, 278, 281, 282], "crossentropyloss": [7, 218, 232], "sgd": [7, 35, 218, 232, 274, 286], "lr": [7, 218, 220, 232], "0001": [7, 218, 232, 274], "learning_r": [7, 232, 274, 286], "callabl": [7, 82, 135, 169, 185, 213, 214], "altern": [7, 150], "distil_loss": [7, 232], "mixedprecisionconfig": [7, 138, 232, 233], "mixedprecis": [7, 85, 232], "target": [7, 108, 111, 116, 154, 175, 215, 220, 232, 272, 282, 283, 284, 286], "convers": [7, 86, 186, 189, 194, 195, 232, 233, 275, 277, 281], "fp16": [7, 126, 166, 186, 275], "fallback": [7, 119, 120, 157, 159, 160, 222, 233, 256, 277, 284], "won": [7, 275, 278], "work": [7, 75, 112, 192, 195, 213, 214, 218, 248, 251, 259, 277, 278, 279, 281, 282], "tensor": [7, 28, 69, 72, 74, 107, 109, 119, 146, 159, 175, 179, 180, 185, 186, 190, 196, 213, 214, 215, 217, 235, 272, 275, 279, 282, 283, 284], "trace": [7, 74, 157, 190, 243, 284], "mix_precis": [7, 129, 232, 233], "converted_model": [7, 138, 232, 233], "exportconfig": 7, "opset_vers": [7, 73, 74, 222], "14": [7, 73, 74, 193, 222, 228, 268, 287], "input_nam": [7, 73, 74, 146, 222], "output_nam": [7, 73, 74, 146, 222], "dynamic_ax": [7, 74, 222], "common": [7, 26, 76, 86, 90, 91, 92, 172, 183, 184, 185, 186, 188, 213, 215, 219, 220, 222, 226, 228, 232, 275, 281], "export": [7, 76, 80, 133, 193, 225, 239, 254, 256, 282, 285], "select": [7, 12, 54, 175, 186, 190, 191, 212, 227, 228, 253, 272, 275, 278, 282, 284], "opset": [7, 73, 74, 222], "version": [7, 73, 74, 129, 188, 190, 194, 213, 224, 228, 229, 232, 246, 248, 250, 251, 273, 281, 284, 285], "qlinear": [7, 14, 21, 56, 63, 84, 137, 194, 243], "ax": [7, 74], "inform": [7, 10, 11, 31, 33, 34, 42, 43, 107, 109, 110, 111, 113, 137, 180, 185, 188, 189, 192, 193, 194, 195, 196, 197, 199, 203, 206, 209, 212, 213, 218, 224, 232, 234, 235, 248, 251, 254, 255, 258, 259, 261, 262, 266, 267, 272, 277, 278, 279, 281, 282, 286, 287, 288], "onnxqlinear2qdqconfig": 7, "onnxqlinear2qdq": 7, "torch2onnxconfig": [7, 222], "torch2onnx": [7, 71], "qdq_op_fp32_bia": 7, "qdq_op_int32_bia": 7, "qdq_op_fp32_bias_qdq": 7, "resnet50": [7, 183, 193, 217, 220, 222, 233, 236, 240, 272, 275, 280, 287], "int8_onnx_config": [7, 222], "randn": [7, 222], "224": [7, 24, 66, 193, 215, 220, 222, 225, 232, 236, 255, 283, 286], "batch_siz": [7, 12, 13, 31, 44, 46, 50, 51, 52, 53, 54, 55, 74, 191, 214, 215, 220, 222, 226, 232, 236, 275], "q_model": [7, 86, 150, 184, 190, 214, 215, 217, 220, 222, 225, 226, 231, 232, 234, 255, 256, 275, 276, 277, 278], "tf2onnxconfig": [7, 222], "tf2onnx": [7, 71], "axi": 7, "addit": [7, 169, 195, 196, 218, 247, 255, 261, 278, 279, 284], "keyword": 7, "argument": [7, 185, 191, 217, 257, 258, 261, 264, 266, 267, 268, 278], "output_graph": 7, "nasconfig": [7, 88, 90, 191], "search_algorithm": [7, 89, 191], "dyna": [7, 89, 191, 227, 274], "na": [7, 76, 142, 227, 230, 287], "mxnet": [7, 14, 17, 21, 28, 49, 53, 56, 59, 63, 69, 75, 84, 112, 137, 138, 143, 150, 189, 193, 194, 195, 212, 214, 221, 224, 227, 232, 233, 234, 274, 284, 286], "kera": [7, 14, 21, 35, 56, 63, 141, 146, 183, 185, 195, 214, 220, 234, 243, 244], "pytorch": [7, 12, 14, 17, 21, 28, 30, 35, 37, 53, 54, 56, 59, 63, 69, 74, 75, 84, 85, 105, 107, 110, 112, 120, 137, 138, 147, 150, 160, 173, 180, 185, 189, 190, 191, 193, 194, 195, 196, 212, 213, 214, 218, 219, 221, 224, 227, 228, 230, 232, 233, 234, 235, 236, 238, 241, 242, 243, 244, 253, 255, 264, 267, 268, 272, 273, 274, 278, 279, 281, 284, 286], "built": [8, 9, 12, 13, 18, 20, 22, 23, 24, 25, 28, 33, 35, 40, 41, 45, 48, 50, 54, 55, 60, 62, 64, 65, 66, 67, 69, 113, 137, 140, 148, 150, 169, 191, 194, 215, 220, 232, 246, 250, 270, 275, 280, 283, 284, 286], "multipl": [8, 9, 12, 13, 15, 16, 17, 18, 19, 23, 25, 28, 35, 40, 41, 45, 46, 48, 54, 55, 57, 58, 59, 60, 61, 65, 67, 69, 85, 138, 139, 140, 142, 148, 185, 211, 215, 222, 232, 260, 263, 271, 272, 280, 281, 284], "sigopt": [9, 41, 273], "tpe": [9, 41], "provid": [10, 11, 28, 42, 43, 69, 75, 80, 99, 104, 112, 113, 133, 138, 150, 169, 173, 175, 183, 184, 185, 186, 191, 193, 194, 195, 196, 211, 214, 217, 219, 220, 221, 227, 228, 230, 231, 232, 233, 234, 236, 240, 244, 247, 253, 254, 255, 261, 262, 272, 274, 275, 278, 281, 282, 284, 285, 286, 287], "sigopttunestrategi": [10, 42], "q_dataload": [10, 11, 42, 43, 114, 116, 119, 120, 122, 151, 152, 154, 155, 159, 160, 162, 226, 284], "q_func": [10, 11, 42, 43, 114, 116, 119, 120, 122, 151, 152, 154, 155, 159, 160, 162, 194, 195, 232, 284], "eval_func": [10, 11, 42, 43, 113, 114, 116, 119, 120, 122, 138, 150, 151, 152, 154, 155, 159, 160, 162, 169, 190, 214, 215, 217, 218, 219, 220, 232, 256, 275, 276, 277, 278, 284, 286], "eval_metr": [10, 11, 138, 150, 151, 152, 154, 155, 159, 160, 162, 169, 231, 255, 275], "q_hook": [10, 11, 42, 43, 114, 116, 119, 120, 122, 151, 152, 154, 155, 159, 160, 162], "hpo": [10, 42, 272], "low": [10, 11, 15, 16, 42, 43, 57, 58, 75, 85, 112, 138, 186, 194, 195, 211, 212, 215, 220, 232, 233, 258, 273, 275, 278, 281, 284], "initi": [10, 11, 12, 30, 42, 43, 51, 54, 108, 109, 126, 150, 166, 169, 185, 191, 196, 215, 231, 252, 272, 275, 281, 284], "loader": [10, 11, 42, 43, 138, 150, 169, 175, 214, 275], "mandatori": [10, 11, 42, 43, 150, 232, 286], "It": [10, 11, 37, 42, 43, 82, 84, 91, 107, 112, 119, 135, 137, 138, 150, 155, 159, 169, 183, 185, 186, 194, 195, 196, 212, 217, 218, 232, 235, 239, 242, 247, 253, 254, 255, 256, 258, 259, 261, 272, 275, 278, 279, 280, 284, 286], "yield": [10, 11, 31, 42, 43, 52, 116, 138, 150, 154, 169, 186, 214, 275, 284], "dataset": [10, 11, 23, 31, 42, 43, 44, 46, 47, 50, 51, 52, 53, 65, 80, 81, 82, 84, 113, 133, 134, 135, 137, 138, 150, 169, 172, 183, 184, 185, 186, 191, 193, 194, 195, 214, 220, 225, 231, 232, 241, 255, 256, 266, 272, 275, 278, 279, 281, 284, 286, 287], "_": [10, 11, 42, 43, 150, 185, 186, 190, 191, 193, 194, 195, 212, 217, 218, 220, 222, 224, 232, 233, 234, 236, 242, 246, 248, 250, 251, 258, 261, 262, 270, 272, 275, 278, 279, 280, 281, 282, 284, 286], "depend": [10, 11, 29, 42, 43, 138, 150, 169, 185, 189, 223, 224, 259, 274, 275, 284], "implement": [10, 11, 12, 14, 42, 43, 49, 52, 53, 54, 56, 77, 130, 138, 148, 150, 157, 169, 196, 214, 215, 231, 232, 244, 254, 272, 275, 278, 279, 282, 284, 286], "well": [10, 11, 42, 43, 138, 150, 169, 185, 186, 191, 193, 213, 215, 235, 272, 275, 279, 281, 286], "taken": [10, 11, 42, 43, 138, 150, 169, 275], "reserv": [10, 11, 42, 43], "abl": [10, 11, 42, 43, 138, 150, 169, 185, 186, 244, 253, 275], "pre": [10, 11, 12, 42, 43, 54, 138, 150, 169, 186, 213, 215, 218, 219, 232, 241, 258, 272, 273, 275, 278, 282, 284], "through": [10, 11, 42, 43, 137, 138, 150, 193, 211, 224, 226, 227, 231, 239, 260, 270, 271, 272, 274, 275, 278], "tuner": [10, 11, 42, 43, 75, 112, 138, 150, 169, 275], "encapsul": [10, 11, 42, 43, 138, 150, 169, 234], "scalar": [10, 11, 42, 43, 138, 150, 169, 231, 275, 284], "pseudo": [10, 11, 42, 43, 150, 169, 278, 282], "code": [10, 11, 29, 42, 43, 86, 110, 113, 150, 169, 183, 190, 193, 194, 195, 196, 215, 218, 219, 220, 226, 227, 229, 231, 236, 238, 240, 241, 242, 244, 247, 253, 257, 258, 260, 261, 262, 270, 271, 272, 273, 274, 275, 280, 281, 282, 283], "someth": [10, 11, 14, 42, 43, 56, 150, 169], "def": [10, 11, 42, 43, 150, 169, 183, 185, 190, 194, 213, 214, 215, 218, 219, 220, 231, 232, 275, 281, 282, 284], "fefin": [11, 43], "tpetunestrategi": [11, 43], "pytorchbertdataset": [12, 54], "task": [12, 19, 54, 61, 84, 137, 215, 218, 219, 222, 227, 231, 232, 256, 260, 263, 272, 276, 278, 281, 287], "model_typ": [12, 54, 180, 215], "transform": [12, 13, 14, 15, 16, 17, 19, 21, 23, 54, 55, 56, 57, 58, 59, 61, 63, 65, 184, 190, 191, 193, 212, 215, 218, 219, 220, 221, 225, 230, 232, 236, 241, 242, 243, 244, 256, 264, 267, 268, 272, 273, 277, 278, 281, 282, 284, 286], "filter": [12, 13, 14, 15, 16, 17, 19, 23, 54, 55, 56, 57, 58, 59, 61, 65, 180, 196, 215, 227, 272, 282], "construct": [12, 15, 16, 19, 26, 31, 33, 34, 36, 54, 57, 58, 61, 137, 142, 146, 168, 172, 188, 195, 196, 215, 220, 272, 284], "tensordataset": [12, 54, 215], "full": [12, 13, 14, 54, 55, 56, 175, 180, 193, 212, 215, 217, 223, 229, 254, 259, 272, 278, 279], "repo": [12, 54, 187, 189, 215, 221, 246, 248, 250, 251, 288], "http": [12, 14, 54, 56, 77, 78, 80, 81, 82, 107, 109, 110, 130, 131, 133, 134, 135, 137, 150, 190, 215, 217, 225, 228, 229, 232, 242, 248, 251, 255, 257, 258, 259, 260, 261, 264, 266, 267, 268, 272, 279], "github": [12, 54, 77, 78, 81, 82, 107, 110, 130, 131, 134, 135, 137, 150, 189, 193, 215, 217, 221, 228, 229, 232, 242, 248, 251, 255, 257, 258, 259, 260, 261, 264, 267, 268, 279], "com": [12, 54, 77, 78, 81, 82, 107, 110, 130, 131, 134, 135, 137, 150, 188, 213, 215, 217, 225, 228, 229, 232, 236, 242, 255, 257, 258, 260, 261, 264, 267, 268, 279, 280, 287], "huggingfac": [12, 54, 175, 215, 221, 225, 235, 241, 242, 243, 244, 264, 265, 267, 268, 281, 287], "your": [12, 52, 54, 189, 193, 213, 214, 215, 217, 220, 229, 232, 236, 239, 240, 241, 246, 247, 248, 250, 251, 253, 255, 259, 261, 266, 267, 268, 272, 273, 280, 282, 284, 285], "todo": [12, 15, 54, 57, 80, 126, 133, 166], "easi": [12, 54, 112, 185, 222, 232, 256, 260, 273, 275, 278, 280], "ad": [12, 54, 77, 116, 130, 154, 195, 196, 217, 233, 236, 241, 244, 248, 251, 261, 272, 278, 282], "load": [12, 27, 28, 54, 68, 69, 138, 146, 150, 179, 180, 185, 195, 214, 246, 250, 254, 256, 274, 275, 276, 281], "arg": [12, 13, 14, 54, 55, 56, 107, 116, 154, 175, 176, 215, 220, 232, 235, 242, 272, 275, 278, 281, 282, 283], "classifi": [12, 54, 84, 137, 215, 218], "squad": [12, 28, 54, 69, 81, 82, 84, 134, 135, 137, 215, 231, 272, 283, 287], "distilbert": [12, 54, 215, 233, 273, 287], "xlnet": [12, 54, 215], "xlm": [12, 54, 215, 287], "condit": [12, 13, 14, 28, 54, 55, 56, 69, 115, 151, 153, 215, 229, 283, 284], "101": [12, 54, 84, 137, 231, 262, 281, 287], "2043": [12, 54], "2001": [12, 54], "onnxrtbertdataset": [12, 54], "data_dir": [12, 54, 215], "model_name_or_path": [12, 54, 215, 232, 241, 242, 257, 264, 267, 268, 276], "max_seq_length": [12, 28, 54, 69, 215, 283], "128": [12, 15, 16, 28, 54, 57, 58, 69, 186, 215, 232, 275, 278, 283, 287], "do_lower_cas": [12, 27, 28, 54, 68, 69, 215, 283], "mrpc": [12, 54, 84, 137, 215, 231, 241, 264, 267, 268, 272, 284, 287], "dynamic_length": [12, 54, 215], "onnxrt": [12, 14, 21, 28, 54, 56, 63, 69, 84, 137, 178, 194, 217, 233, 255, 275, 287], "dir": [12, 54, 175, 179, 215, 223, 226], "path": [12, 13, 14, 28, 54, 55, 56, 69, 70, 73, 74, 75, 86, 87, 88, 90, 99, 104, 108, 110, 112, 113, 126, 138, 146, 150, 166, 175, 177, 180, 190, 191, 194, 215, 217, 220, 226, 231, 232, 233, 234, 239, 242, 253, 256, 258, 261, 266, 267, 268, 271, 278, 283, 286], "shortcut": [12, 54, 215], "token": [12, 25, 28, 54, 67, 69, 77, 78, 130, 131, 175, 193, 215, 231, 232, 255, 256, 278, 280, 281, 283, 284], "longer": [12, 28, 54, 69, 215, 283], "than": [12, 28, 54, 69, 180, 186, 191, 193, 211, 215, 226, 235, 258, 266, 270, 271, 272, 275, 278, 280, 283, 284], "truncat": [12, 28, 54, 69, 215, 283], "shorter": [12, 28, 54, 69, 215, 283], "pad": [12, 28, 54, 69, 215, 283], "lowercas": [12, 54, 215], "fine": [12, 54, 213, 215, 239, 272, 273, 275], "choic": [12, 54, 185, 194, 215, 231, 259, 281], "qqp": [12, 54, 215, 231, 287], "qnli": [12, 54, 215, 231, 287], "rte": [12, 54, 215, 231, 287], "st": [12, 54, 215, 231], "b": [12, 54, 180, 189, 212, 215, 231, 272, 278, 281, 284], "cola": [12, 54, 215, 231, 287], "mnli": [12, 54, 215, 231, 287], "wnli": [12, 54, 215, 231], "mobilebert": [12, 54, 215, 218], "roberta": [12, 54, 215, 287], "fix": [12, 54, 109, 214, 215, 240, 272, 275, 278, 284], "uncas": [12, 28, 54, 69, 215, 283, 287], "load_and_cache_exampl": [12, 54], "cach": [12, 54, 186, 223, 275, 278], "helper": [12, 13, 14, 27, 54, 55, 56, 68, 72, 73, 74, 146, 178], "convert_examples_to_featur": [12, 28, 54, 69], "max_length": [12, 54], "label_list": [12, 54, 84, 137], "output_mod": [12, 54], "classif": [12, 28, 54, 69, 84, 110, 137, 218, 222, 231, 242, 256, 264, 267, 268, 272, 273], "pad_token": [12, 54], "pad_token_segment_id": [12, 54], "mask_padding_with_zero": [12, 54], "inputfeatur": [12, 28, 54, 69], "properti": [12, 54, 168, 229], "input_id": [12, 28, 54, 69, 232], "vocabulari": [12, 27, 28, 54, 68, 69, 283], "attention_mask": [12, 54, 232], "avoid": [12, 54, 190, 213, 282], "usual": [12, 54, 185, 186, 195, 217, 218, 258, 271, 272, 275, 276, 281], "NOT": [12, 54, 224], "token_type_id": [12, 54, 232], "segment": [12, 54, 78, 80, 131, 133, 189], "portion": [12, 54], "them": [12, 54, 190, 196, 214, 217, 222, 224, 226, 256, 259, 271, 272, 278, 284], "problem": [12, 54, 84, 137, 231, 233, 254], "regress": [12, 54, 189, 217], "seq_length": [12, 54], "tensorflowbertdataset": [12, 54], "root": [12, 13, 14, 17, 54, 55, 56, 59, 84, 137, 215, 220, 231, 232, 286], "label_fil": [12, 28, 54, 69, 215, 283], "tfrecord": [12, 13, 14, 54, 55, 56, 215], "guid": [12, 54, 185, 190, 193, 213, 215, 218, 228, 236, 244, 253, 288], "parsedecodebert": [12, 54], "tensorflowmodelzoobertdataset": [12, 13, 54, 55], "pars": [12, 13, 24, 28, 54, 55, 66, 69, 195, 196, 283], "num_cor": [12, 13, 17, 54, 55, 59, 215], "28": [12, 13, 17, 54, 55, 59, 215, 287], "three": [12, 54, 115, 151, 153, 186, 190, 194, 195, 212, 228, 233, 247, 261, 271, 275, 277, 280, 281, 282], "tf": [12, 13, 14, 28, 53, 54, 55, 56, 69, 144, 146, 183, 185, 213, 220, 228, 234, 273, 277, 283], "record": [12, 13, 14, 20, 30, 37, 54, 55, 56, 62, 180, 215, 258, 278, 280, 282, 284], "resiz": [12, 13, 24, 28, 54, 55, 66, 69, 215, 283], "coco": [13, 20, 55, 62, 80, 84, 133, 137, 231, 272], "parsedecodecoco": [13, 55], "cocorecorddataset": [13, 55], "interleav": [13, 55, 215], "parallel": [13, 55, 215, 232, 260, 263, 284], "cocoraw": [13, 55, 215], "img_dir": [13, 55, 215], "val2017": [13, 55, 215], "anno_dir": [13, 55, 215], "annot": [13, 55, 80, 133, 195, 196, 215, 231, 272, 284], "instances_val2017": [13, 55, 215], "json": [13, 28, 55, 69, 179, 215, 234, 254, 261, 262, 266, 267, 268, 278, 283], "arrang": [13, 14, 17, 55, 56, 59, 215, 272], "wai": [13, 14, 17, 55, 56, 59, 146, 184, 186, 191, 196, 214, 215, 217, 231, 232, 236, 239, 254, 255, 259, 260, 261, 271, 272, 275, 278, 281, 284, 286], "jpg": [13, 17, 19, 55, 59, 61, 193, 215], "imag": [13, 14, 17, 19, 24, 28, 55, 56, 59, 61, 66, 69, 80, 133, 193, 215, 220, 222, 272, 274, 281, 282, 283, 287], "coconpi": [13, 55, 215], "npy_dir": [13, 55, 215], "npy": [13, 55, 215], "tensorflowdataset": [14, 56], "pytorchdataset": [14, 56], "mxnetdataset": [14, 56], "onnxrtqldataset": [14, 56], "onnxrtitdataset": [14, 56], "IT": [14, 21, 56, 63, 273], "pytorchmxnetwrapdataset": [14, 56], "datafunc": [14, 56], "pytorchmxnetwrapfunct": [14, 28, 56, 69], "framework_dataset": [14, 56], "convent": [14, 56, 80, 133, 189, 218, 235], "imageclassifi": [14, 56], "choos": [14, 56, 175, 227, 241, 273, 279, 281, 284, 286], "tensorflow_itex": [14, 17, 19, 21, 56, 59, 61, 63, 214, 274], "onnxrt_qdq": [14, 21, 56, 63, 274], "onnxrt_qlinearop": [14, 21, 28, 56, 63, 69, 274], "onnxrt_integerop": [14, 21, 28, 56, 63, 69, 274], "pytorch_ipex": [14, 21, 56, 63, 232, 274, 286], "pytorch_fx": [14, 21, 56, 63, 232, 274], "dataset_registri": [14, 56], "dataset_typ": [14, 56], "dataset_format": [14, 56], "data_format": [14, 24, 56, 66], "eg": [14, 56, 215, 274], "raw_imag": [14, 56], "overwrit": [14, 56, 246, 250], "__getitem__": [14, 28, 52, 56, 69, 214, 215, 232], "__len__": [14, 52, 56, 215], "size": [14, 20, 24, 28, 46, 47, 53, 56, 62, 66, 69, 107, 146, 148, 180, 188, 195, 214, 215, 220, 223, 232, 235, 253, 254, 270, 272, 275, 276, 278, 281, 283, 286, 287], "iterabledataset": [14, 52, 56], "also": [14, 28, 53, 56, 69, 77, 130, 137, 148, 150, 183, 184, 186, 189, 191, 194, 195, 196, 214, 217, 221, 225, 227, 231, 232, 236, 241, 246, 247, 250, 253, 254, 255, 258, 259, 270, 272, 273, 275, 277, 278, 281, 284], "__iter__": [14, 52, 56, 214, 215, 232], "over": [14, 56, 84, 137, 195, 221, 225, 227, 231, 244, 253, 259, 263, 272, 274, 281, 284], "download_url": [14, 56], "url": [14, 56, 189, 229, 264, 265, 272], "filenam": [14, 56, 180, 215, 259], "md5": [14, 56], "download": [14, 56, 215, 217, 228, 258, 264, 279], "address": [14, 56, 188, 213, 233, 255, 258, 261, 273], "gen_bar_updat": [14, 56], "progress": [14, 56, 247, 253, 255, 272, 275], "bar": [14, 56, 253, 273], "check_integr": [14, 56], "fpath": [14, 56], "check": [14, 56, 72, 108, 179, 180, 185, 193, 217, 220, 228, 237, 239, 241, 248, 251, 252, 256, 259, 262, 263, 279], "checksum": [14, 56], "calculate_md5": [14, 56], "chunk_siz": [14, 56], "1024": [14, 56, 239], "cifar10": [14, 56, 215], "cifar100": [14, 56, 215], "databas": [14, 56, 261], "extract": [14, 56, 128, 168, 215], "otherwis": [14, 28, 56, 69, 180, 188, 195, 215, 248, 251, 274, 278, 283], "www": [14, 56, 215, 287], "c": [14, 56, 180, 185, 215, 223, 228, 278, 284], "toronto": [14, 56, 215], "edu": [14, 56, 215], "kriz": [14, 56, 215], "cifar": [14, 56, 215, 287], "python": [14, 32, 56, 76, 129, 180, 182, 185, 190, 193, 213, 215, 217, 220, 223, 228, 232, 238, 244, 247, 253, 257, 258, 260, 261, 263, 266, 268, 272, 273, 283], "tar": [14, 56, 215, 217, 248, 251], "gz": [14, 56, 215, 217, 248, 251], "manual": [14, 56, 215, 236, 242, 244, 247, 261, 266, 267, 268, 272], "subset": [14, 17, 56, 59, 215, 258], "internet": [14, 56, 215, 255], "put": [14, 56, 215, 218], "again": [14, 56, 215, 256, 258, 277], "pytorchcifar10": [14, 56], "mxnetcifar10": [14, 56], "tensorflowcifar10": [14, 56], "pytorchcifar100": [14, 56], "mxnetcifar100": [14, 56], "tensorflowcifar100": [14, 56], "mnist": [14, 56, 215, 220], "modifi": [14, 56, 168, 190, 196, 220, 224, 257, 258, 272, 286], "nation": [14, 56, 188], "institut": [14, 56], "standard": [14, 28, 56, 69, 189, 195, 213, 217, 222, 231, 283, 284], "technologi": [14, 56, 230, 232, 235], "fashionmnist": [14, 56, 215], "npz": [14, 56, 215], "idx1": [14, 56, 215], "ubyt": [14, 56, 215], "idx3": [14, 56, 215], "t10k": [14, 56, 215], "pytorchmnist": [14, 56], "mxnetmnist": [14, 56], "tensorflowmnist": [14, 56], "pytorchfashionmnist": [14, 56], "mxnetfashionmnist": [14, 56], "tensorflowfashionmnist": [14, 56], "imagefold": [14, 56, 215, 220, 232], "expect": [14, 56, 183, 186, 188, 189, 223, 230, 253, 275, 278, 284], "folder": [14, 19, 56, 61, 138, 150, 179, 215, 241, 246, 250, 259, 266, 267, 268, 278, 282], "subfold": [14, 56, 256], "repres": [14, 19, 56, 61, 80, 82, 84, 133, 135, 137, 185, 186, 188, 196, 212, 215, 222, 261, 272, 275, 276, 284], "belong": [14, 56, 142, 186, 275], "class_1": [14, 56, 215], "xxx": [14, 56, 215, 232], "png": [14, 56, 215], "xxy": [14, 56, 215], "xxz": [14, 56, 215], "class_n": [14, 56, 215], "123": [14, 56, 215, 283], "nsdf3": [14, 56, 215], "asd932_": [14, 56, 215], "categori": [14, 56, 79, 132, 211, 215, 243], "mxnetimagefold": [14, 56], "tensorflowtfrecorddataset": [14, 56], "tensorflowimagerecord": [14, 56], "imagenet": [14, 17, 24, 56, 59, 66, 183, 191, 217, 232, 242, 258, 272, 282, 283, 286, 287], "000": [14, 56, 193, 215], "001": [14, 56, 215, 220, 281, 286], "099": [14, 56, 215], "follow": [14, 56, 77, 80, 130, 133, 184, 188, 189, 190, 191, 193, 194, 195, 196, 213, 214, 215, 218, 219, 220, 224, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 246, 250, 255, 257, 258, 261, 266, 271, 272, 274, 275, 278, 281, 282, 284], "tensorflowvocrecord": [14, 56], "pascal": [14, 56], "voc": [14, 56, 84, 137], "2012": [14, 56], "val": [14, 17, 56, 59, 108, 217, 232, 258], "00000": [14, 56], "00004": [14, 56], "00001": [14, 56], "00003": [14, 56], "dummi": [15, 16, 57, 58, 84, 137, 185, 193, 215, 225, 231, 232, 255], "dummydataset": [15, 16, 57, 58, 185], "shape": [15, 16, 24, 28, 57, 58, 66, 69, 80, 133, 185, 193, 215, 224, 225, 232, 255, 256, 278, 281, 283], "high": [15, 16, 57, 58, 185, 215, 217, 228, 258, 273, 284], "127": [15, 16, 57, 58, 186, 215, 275, 281], "float32": [15, 16, 28, 57, 58, 69, 80, 133, 175, 186, 194, 211, 215, 232, 275, 278, 281, 283], "rang": [15, 16, 28, 57, 58, 69, 169, 175, 185, 186, 193, 194, 196, 212, 215, 217, 218, 219, 220, 232, 235, 256, 258, 271, 272, 275, 278, 281, 283], "stand_norm": [15, 16, 57, 58, 215], "real": [15, 31, 57, 186, 195, 212, 220, 255, 262, 273, 275], "dummy_v2": [16, 58, 215], "sparse_dummy_v2": [16, 58, 215], "input_shap": [16, 58, 215], "label_shap": [16, 58, 215], "sparsedummydataset": [16, 58], "dense_shap": [16, 58, 215], "sparse_ratio": [16, 58, 215], "imagenetraw": [17, 59, 215], "data_path": [17, 59, 215], "image_list": [17, 59, 215], "img1": [17, 59, 215], "img2": [17, 59, 215], "imgx": [17, 59, 215], "read": [17, 28, 59, 69, 108, 215, 277, 280], "val_map": [17, 59, 215], "txt": [17, 59, 215, 217, 228, 255, 257, 258, 260, 261], "pytorchimagenetraw": [17, 59], "mxnetimagenetraw": [17, 59], "tensorflowimagenetraw": [17, 59], "inteltensorflow": [17, 19, 59, 61, 228], "tensorflowimagenetdataset": [17, 59], "onnxrtimagenetdataset": [17, 59], "class": [18, 60, 91, 138, 150, 183, 185, 190, 191, 195, 213, 214, 215, 218, 231, 232, 244, 270, 271, 275, 279, 282, 284, 286], "bert_dataset": [18, 60], "coco_dataset": [18, 60], "dummy_dataset": [18, 60], "dummy_dataset_v2": [18, 60], "imagenet_dataset": [18, 60], "style_transfer_dataset": [18, 60], "style": [19, 47, 61, 213, 215, 226], "transfer": [19, 61, 70, 215, 218, 219, 232, 281], "styletransferdataset": [19, 61], "content_fold": [19, 61, 215], "style_fold": [19, 61, 215], "crop_ratio": [19, 61, 215], "resize_shap": [19, 61, 215], "256": [19, 24, 61, 66, 215, 220, 232, 283], "image_format": [19, 61, 215], "holder": [19, 61, 215], "labelbalancecocorecordfilt": [20, 62], "balanc": [20, 62, 185, 235, 278, 281], "labelbalancecocorawfilt": [20, 62], "tensorflowfilt": [21, 63], "onnxrtqlfilt": [21, 63], "mode": [21, 63, 80, 126, 133, 146, 166, 177, 179, 180, 194, 195, 217, 227, 246, 250, 258, 259, 275, 277, 278, 284], "onnxrtitfilt": [21, 63], "pytorchfilt": [21, 63], "mxnetfilt": [21, 63], "filter_registri": [21, 63], "filter_typ": [21, 63], "__call__": [21, 63], "write": [21, 63, 180, 220, 226, 232, 236, 282], "coco_filt": [22, 64], "quantizedinput": [24, 66, 283], "uint8": [24, 66, 80, 128, 133, 168, 185, 186, 194, 215, 224, 274, 275, 283, 286], "point": [24, 66, 81, 82, 91, 116, 134, 135, 154, 180, 184, 186, 231, 235, 253, 258, 259, 275, 278, 281, 283, 284], "labelshift": [24, 66, 283], "label_shift": [24, 66, 283], "parsedecodeimagenet": [24, 66, 283], "proto": [24, 28, 66, 69, 283], "parsedecodeimagenettransform": [24, 66], "decod": [24, 66, 77, 130, 231, 283], "v1": [24, 66, 81, 82, 84, 134, 135, 137, 146, 220, 222, 223, 231, 234, 257, 272, 279, 280, 281, 287], "tensorflowtransposelastchannel": 24, "transpos": [24, 28, 69, 73, 107, 278, 283], "nhwc": 24, "nchw": 24, "tensorflowshiftrescal": 24, "rescal": [24, 28, 69, 283], "tensorflowresizecropimagenettransform": [24, 66], "height": [24, 28, 66, 69, 107, 220, 283, 286], "width": [24, 28, 66, 69, 107, 186, 212, 220, 272, 275, 283, 286], "random_crop": [24, 66, 283], "resize_sid": [24, 66, 283], "resize_method": [24, 66], "bilinear": [24, 28, 66, 69, 283], "random_flip_left_right": [24, 66, 283], "mean_valu": [24, 66, 283], "channels_last": [24, 66, 236], "subpixel": [24, 66], "rgb": [24, 66], "seri": [24, 66, 193, 228, 232, 283], "applic": [24, 66, 183, 185, 196, 222, 236, 253, 255, 261, 262, 266, 267, 273, 278, 281, 282, 283, 285], "result": [24, 28, 66, 69, 77, 80, 81, 82, 84, 130, 133, 134, 135, 137, 150, 157, 169, 179, 180, 184, 186, 188, 191, 193, 214, 217, 218, 220, 227, 229, 231, 232, 241, 242, 253, 254, 257, 261, 262, 263, 264, 270, 272, 273, 275, 278, 280, 281, 282, 283, 284, 285, 287], "crop": [24, 28, 66, 69, 215, 283], "flip": [24, 28, 66, 69, 283], "left": [24, 28, 66, 69, 247, 253, 281, 283], "right": [24, 66, 80, 133, 188, 189, 190, 253, 259, 281, 283], "std": [24, 28, 66, 69, 232, 283], "bilinearimagenettransform": [24, 66], "central_fract": [24, 66, 283], "875": [24, 66, 283], "fraction": [24, 66, 283], "onnxbilinearimagenettransform": [24, 66], "onnxresizecropimagenettransform": [24, 66], "std_valu": [24, 66], "229": [24, 66, 232], "225": [24, 66, 232, 287], "resizewithaspectratio": [24, 66], "87": [24, 66, 287], "inter_pol": [24, 66], "cv2": [24, 66], "inter_area": [24, 66], "aspect": [24, 28, 66, 69, 283], "imagenet_transform": [25, 67], "postprocess_cl": [26, 36, 232], "user_postprocess": [26, 36], "just": [26, 28, 31, 33, 34, 36, 44, 69, 148, 185, 191, 232, 243, 247, 253, 261, 271, 275, 281, 283, 284], "collect": [26, 28, 31, 33, 34, 36, 69, 82, 84, 135, 137, 170, 180, 185, 186, 195, 275, 282, 284], "info": [26, 31, 36, 107, 142, 175, 176, 180, 190, 213, 217, 234, 263, 268], "convert_to_unicod": [27, 68], "text": [27, 28, 68, 69, 77, 82, 110, 130, 135, 222, 229, 235, 242, 264, 267, 268, 272, 273, 278, 281, 283, 287], "unicod": [27, 68], "assum": [27, 68, 80, 91, 133, 194, 224, 253], "utf": [27, 68], "load_vocab": [27, 68], "vocab_fil": [27, 28, 68, 69, 283], "convert_by_vocab": [27, 68], "vocab": [27, 68], "whitespace_token": [27, 68], "whitespac": [27, 68, 82, 135], "clean": [27, 68, 232], "split": [27, 28, 68, 69, 190, 276, 278, 281, 283], "piec": [27, 68, 77, 130, 231, 278], "fulltoken": [27, 68], "tokenzi": [27, 68], "basictoken": [27, 68], "punctuat": [27, 68, 77, 82, 130, 135], "lower": [27, 28, 68, 69, 82, 135, 155, 185, 186, 219, 235, 272, 273, 275, 281, 283, 284], "wordpiecetoken": [27, 68], "unk_token": [27, 68], "unk": [27, 68], "max_input_chars_per_word": [27, 68], "200": [27, 68, 190, 262, 284], "wordpiec": [27, 28, 68, 69, 283], "concat_gener": [28, 69], "inc": [28, 69, 183, 184, 185, 188, 193, 195, 230, 236, 243, 253, 255, 260, 273, 274, 279, 284], "abstract": [28, 69, 70, 75, 112, 194, 196, 226], "own": [28, 52, 69, 148, 191, 195, 214, 215, 227, 231, 255, 259, 270, 278, 280, 285], "inherit": [28, 30, 38, 51, 69, 109, 111, 191, 194, 195, 215], "tensorflowtransform": [28, 69], "mxnettransform": [28, 69], "pytorchtransform": [28, 69], "onnxrtqltransform": [28, 69], "onnxrtittransform": [28, 69], "transform_registri": [28, 69], "transform_typ": [28, 69], "basetransform": [28, 69], "tensorflowwrapfunct": [28, 69], "transform_func": [28, 69], "wrapper": [28, 30, 31, 33, 34, 53, 69, 80, 84, 133, 137, 142, 146, 185, 277], "pytorchmxnettransform": [28, 69], "get_torchvision_map": [28, 69], "interpol": [28, 69, 231, 272, 283], "torchvis": [28, 69, 193, 221, 225, 236, 242, 256], "composetransform": [28, 69], "transform_list": [28, 69, 283], "compos": [28, 69, 172, 283], "sever": [28, 69, 111, 113, 191, 217, 218, 219, 227, 232, 233, 235, 246, 250, 261, 272, 274, 276, 281, 283, 284, 286], "croptoboundingbox": [28, 69, 283], "offset_height": [28, 69, 283], "offset_width": [28, 69, 283], "target_height": [28, 69, 283], "target_width": [28, 69, 283], "box": [28, 69, 80, 84, 133, 137, 190, 231, 236, 247, 253, 282, 283, 284], "vertic": [28, 69, 107, 283], "coordin": [28, 69, 116, 154, 260, 283, 284], "top": [28, 69, 75, 84, 99, 104, 112, 137, 189, 231, 253, 256, 258, 283], "corner": [28, 69, 189, 194, 196, 283], "horizont": [28, 69, 283], "mxnetcroptoboundingbox": [28, 69], "onnxrtcroptoboundingbox": [28, 69], "tensorflowcroptoboundingbox": [28, 69], "resizewithratio": [28, 69, 283], "min_dim": [28, 69, 283], "800": [28, 69, 283], "max_dim": [28, 69, 283], "1365": [28, 69, 283], "constant_valu": [28, 69], "np": [28, 69, 116, 154, 220, 263, 281, 283, 284], "arrai": [28, 69, 80, 91, 133, 180, 283], "smaller": [28, 69, 218, 232, 235, 272, 283], "dimens": [28, 46, 69, 215, 218, 278, 283], "ensur": [28, 69, 116, 154, 183, 220, 275, 283], "longest": [28, 69, 283], "side": [28, 69, 215, 247, 283], "doesn": [28, 69, 185, 194, 220, 232, 233, 254, 286], "exce": [28, 69, 278, 283], "zero": [28, 69, 109, 180, 186, 193, 235, 258, 272, 275, 278, 281, 283, 284], "so": [28, 69, 168, 185, 186, 190, 194, 217, 223, 227, 233, 235, 239, 241, 257, 258, 259, 275, 277, 278, 281, 282, 283, 285], "tensorflowresizewithratio": [28, 69], "perm": [28, 69, 283], "permut": [28, 69, 283], "tensorflowtranspos": [28, 69], "mxnettranspos": [28, 69], "pytorchtranspos": [28, 69], "randomverticalflip": [28, 69, 283], "given": [28, 69, 80, 133, 150, 191, 196, 272, 281, 283], "randomli": [28, 69, 92, 116, 154, 191, 281, 283, 284], "tensorflowrandomverticalflip": [28, 69], "randomhorizontalflip": [28, 69, 232, 283], "tensorflowrandomhorizontalflip": [28, 69], "toarrai": [28, 69, 283], "pil": [28, 69, 283], "ndarrai": [28, 69, 170, 223, 283], "numpi": [28, 69, 80, 91, 133, 223, 281, 283], "casttftransform": [28, 69], "castonnxtransform": [28, 69], "castpytorchtransform": [28, 69], "centercroptftransform": [28, 69], "center": [28, 69, 192, 193, 228, 283, 284], "paddedcentercroptransform": [28, 69], "crop_pad": [28, 69], "resizetftransform": [28, 69], "nearest": [28, 69, 278, 283], "bicub": [28, 69, 283], "resizepytorchtransform": [28, 69], "randomcroptftransform": [28, 69], "randomresizedcroppytorchtransform": [28, 69], "08": [28, 69, 230, 283, 287], "randomresizedcropmxnettransform": [28, 69], "randomresizedcroptftransform": [28, 69], "normalizetftransform": [28, 69], "normal": [28, 69, 82, 135, 232, 262, 270, 278, 281, 283], "deviat": [28, 69, 217, 283], "broadcast": [28, 69, 220, 283], "rescalekeraspretraintransform": [28, 69], "rescaletftransform": [28, 69], "rescaletransform": [28, 69], "alignimagechanneltransform": [28, 69], "dim": [28, 69, 281, 283], "align": [28, 69, 188, 278, 283], "w": [28, 69, 272, 281, 283], "must": [28, 69, 80, 133, 189, 190, 195, 211, 214, 228, 275, 283], "pytorchalignimagechannel": [28, 69], "tondarraytransform": [28, 69], "resizemxnettransform": [28, 69], "resizetransform": [28, 69], "cropresizetftransform": [28, 69], "boundari": [28, 69, 283], "area": [28, 69, 80, 133, 231, 235, 283], "pytorchcropresizetransform": [28, 69], "mxnetcropresizetransform": [28, 69], "cropresizetransform": [28, 69], "centercroptransform": [28, 69], "mxnetnormalizetransform": [28, 69], "pytorchnormalizetransform": [28, 69], "normalizetransform": [28, 69], "randomcroptransform": [28, 69], "randomresizedcroptransform": [28, 69], "get_final_text": [28, 69], "pred_text": [28, 69], "orig_text": [28, 69], "project": [28, 69, 187, 188, 189, 259, 273, 280, 284, 288], "predict": [28, 33, 69, 77, 81, 82, 84, 130, 134, 135, 137, 150, 191, 218, 231, 244, 278, 281, 282, 283], "back": [28, 34, 69, 217, 253, 259], "squadexampl": [28, 69], "qas_id": [28, 69], "question_text": [28, 69], "doc_token": [28, 69], "orig_answer_text": [28, 69], "start_posit": [28, 69], "end_posit": [28, 69], "is_imposs": [28, 69], "simpl": [28, 69, 185, 228, 232, 272, 280, 281, 284], "without": [28, 69, 109, 128, 168, 186, 188, 218, 220, 232, 235, 244, 255, 258, 272, 273, 274, 275, 284, 285], "answer": [28, 69, 81, 82, 134, 135, 188, 258, 272, 283, 287], "posit": [28, 69, 188, 231, 236, 261, 266, 267, 268], "unique_id": [28, 69], "example_index": [28, 69], "doc_span_index": [28, 69], "token_to_orig_map": [28, 69], "token_is_max_context": [28, 69], "input_mask": [28, 69, 232], "segment_id": [28, 69, 232], "read_squad_exampl": [28, 69], "input_fil": [28, 69], "doc_strid": [28, 69, 283], "max_query_length": [28, 69, 283], "output_fn": [28, 69], "inputbatch": [28, 69], "collecttransform": [28, 69], "10833": [28, 69], "tfsquadv1posttransform": [28, 69], "n_best_siz": [28, 69, 283], "20": [28, 69, 258, 261, 266, 267, 268, 272, 283, 286, 287], "384": [28, 69, 283], "64": [28, 69, 191, 230, 278, 281, 283, 287], "max_answer_length": [28, 69, 283], "30": [28, 69, 221, 225, 227, 283, 287], "total": [28, 69, 84, 109, 137, 215, 217, 272, 278, 283, 287], "best": [28, 69, 70, 75, 112, 119, 159, 183, 184, 188, 191, 193, 213, 228, 236, 242, 253, 259, 270, 275, 278, 281, 283, 284], "nbest_predict": [28, 69, 283], "question": [28, 69, 81, 82, 134, 135, 188, 189, 193, 194, 228, 236, 260, 272, 281, 283, 287], "becaus": [28, 69, 107, 184, 186, 190, 258, 275, 281, 283, 284], "anoth": [28, 69, 77, 86, 130, 180, 217, 218, 246, 250, 283, 284], "up": [28, 69, 108, 186, 193, 220, 221, 224, 227, 244, 248, 251, 253, 272, 273, 274, 275, 280, 283, 284, 286], "long": [28, 69, 213, 223, 278, 283], "document": [28, 69, 183, 184, 186, 195, 196, 201, 220, 230, 233, 238, 248, 251, 252, 259, 260, 262, 272, 279, 283, 285], "chunk": [28, 69, 283], "stride": [28, 69, 283], "tfmodelzoocollecttransform": [28, 69], "zoo": [28, 53, 69, 193, 221, 225, 287], "tfsquadv1modelzooposttransform": [28, 69], "squadv1": [28, 69, 283], "see": [28, 69, 77, 130, 188, 189, 190, 192, 213, 229, 232, 246, 247, 250, 253, 254, 258, 259, 278, 281, 282, 284], "parsedecodevoctransform": [28, 69], "measur": [29, 138, 174, 185, 191, 194, 211, 217, 218, 231, 232, 278, 282, 284], "conf_fname_or_obj": [29, 38, 70, 75, 85, 86, 87, 88, 90, 99, 104, 112], "thei": [29, 188, 213, 218, 224, 232, 241, 256, 259, 270], "ha": [29, 77, 107, 109, 130, 183, 185, 186, 189, 191, 194, 195, 196, 214, 222, 227, 232, 233, 239, 253, 258, 259, 261, 264, 272, 274, 275, 277, 280, 281, 284], "possibl": [29, 217, 255, 271, 272, 276, 277, 284], "unnecessari": [29, 232], "critet": 30, "tensorflowcrossentropyloss": 30, "pytorchcrossentropyloss": 30, "tensorflowknowledgedistillationloss": 30, "pytorchknowledgedistillationloss": [30, 232], "pytorchintermediatelayersknowledgedistillationloss": 30, "tensorflowcriterion": 30, "pytorchcriterion": 30, "integr": [30, 194, 232, 254, 255, 260, 278], "criterion_registri": 30, "criterion_typ": 30, "registry_criterion": 30, "knowledgedistillationframework": 30, "knowledgedistillationloss": [30, 232, 286], "pytorchknowledgedistillationlosswrapp": 30, "param_dict": [30, 35], "wrap": [30, 80, 133, 190, 220, 248, 251], "tensorflowknowledgedistillationlossextern": 30, "intermediatelayersknowledgedistillationloss": 30, "pytorchintermediatelayersknowledgedistillationlosswrapp": 30, "selfknowledgedistillationloss": 30, "selfknowledg": 30, "collate_fn": [31, 44, 46, 47, 50, 51, 53, 214, 215], "last_batch": [31, 44, 46, 50, 51, 53, 214], "rollov": [31, 44, 46, 50, 51, 53, 214], "sampler": [31, 44, 46, 48, 50, 51, 53, 125, 165, 214, 220], "batch_sampl": [31, 44, 46, 50, 51, 53, 214], "num_work": [31, 44, 46, 50, 51, 53, 214, 232, 275], "pin_memori": [31, 44, 46, 50, 51, 53, 214], "shuffl": [31, 44, 46, 50, 51, 53, 214, 232, 275], "batch": [31, 44, 46, 47, 52, 53, 169, 214, 218, 219, 232, 271, 272, 275, 281, 283, 284, 287], "setter": 31, "calib_dataload": [31, 113, 150, 183, 184, 185, 190, 193, 214, 215, 217, 225, 226, 231, 232, 255, 256, 275, 276, 277, 278], "reason": [31, 188, 195, 214, 258, 278, 282, 284], "have": [31, 52, 77, 80, 107, 109, 130, 133, 137, 150, 168, 186, 188, 189, 195, 196, 213, 214, 215, 217, 220, 224, 229, 231, 232, 233, 235, 236, 253, 256, 259, 261, 266, 267, 268, 270, 272, 275, 276, 278, 281, 284, 285], "know": [31, 213, 220, 279], "known": [31, 116, 154, 232, 235, 272, 275, 282, 284], "intel": [32, 35, 71, 76, 83, 84, 107, 110, 118, 124, 129, 136, 137, 149, 150, 158, 164, 182, 183, 185, 186, 188, 189, 191, 192, 194, 195, 196, 212, 215, 216, 218, 219, 221, 222, 224, 225, 229, 230, 233, 234, 236, 241, 243, 244, 255, 256, 257, 258, 260, 261, 270, 271, 272, 273, 275, 277, 278, 279, 281, 282, 284, 285, 286, 287], "open": [32, 76, 129, 172, 182, 185, 188, 193, 222, 223, 232, 248, 251, 254, 255, 259, 260, 261, 273], "librari": [32, 76, 129, 182, 185, 193, 228, 232, 233, 238, 247, 253, 273, 275], "torch_util": [32, 193, 276, 281], "metric_cl": [33, 137, 150, 232], "user_metr": [33, 137, 150], "alwai": [33, 80, 133, 137, 150, 217, 231, 232, 258, 278], "recommend": [33, 137, 185, 193, 194, 215, 224, 244, 247, 252, 254, 272, 274, 284], "design": [33, 38, 53, 137, 155, 185, 191, 193, 232, 241, 244, 272, 275, 285], "set_backend": 34, "tensorflowoptim": 35, "onc": [35, 111, 115, 151, 153, 195, 196, 214, 253, 259, 272, 273, 284, 287], "pytorchoptim": 35, "main": [35, 110, 183, 185, 186, 190, 214, 217, 220, 232, 240, 242, 254, 263, 272, 275, 278], "entri": [35, 75, 113, 180, 213, 229], "optimizer_registri": 35, "optimizer_typ": 35, "cross": [35, 84, 137, 226, 284], "tensorflowsgd": 35, "tensorflowadamw": 35, "tensorflow_addon": 35, "adamw": 35, "pytorchsgd": 35, "record_output": 37, "output_process": 37, "help": [37, 86, 213, 230, 234, 236, 242, 253, 261, 266, 267, 268, 278, 284, 285], "get_activ": 37, "hook": [37, 38, 99, 104, 172, 218, 219, 232, 272, 281, 282], "mainli": [38, 111, 186, 193, 232, 272, 275], "shot": [38, 109, 111, 185, 191, 227, 232, 272, 273, 278], "appli": [38, 78, 131, 184, 185, 186, 188, 195, 196, 232, 235, 236, 238, 244, 253, 257, 258, 263, 271, 272, 275, 277, 280, 281, 284, 285, 286], "api": [39, 75, 80, 112, 125, 126, 133, 137, 150, 165, 166, 180, 183, 184, 186, 190, 193, 197, 199, 203, 206, 209, 217, 222, 227, 228, 232, 238, 242, 243, 244, 260, 261, 265, 279, 280, 284, 288], "basedatalod": 44, "basedataload": [44, 49, 51], "_generate_dataload": 44, "default_col": 46, "merg": [46, 126, 166, 248, 251, 282, 284], "outer": 46, "defaultdataload": [46, 53], "definit": [47, 52], "drop_last": [47, 52], "iterablefetch": 47, "next": [47, 191, 195, 196, 214, 274, 278, 284], "indexfetch": 47, "base_dataload": 48, "default_dataload": 48, "fetcher": 48, "mxnet_dataload": 48, "onnxrt_dataload": 48, "pytorch_dataload": 48, "tensorflow_dataload": 48, "mxnetdataload": 49, "onnxrtbertdataload": 50, "variant": 50, "onnxrtdataload": 50, "pytorchdataload": 51, "data_sourc": [52, 172], "matter": [52, 277], "iterablesampl": 52, "squential": 52, "clear": [52, 194, 224, 231, 232], "what": [52, 137, 150, 169, 185, 188, 273], "try": [52, 146, 185, 186, 190, 193, 217, 256, 272, 275, 281, 284], "indexdataset": 52, "intern": [52, 126, 166, 214, 215, 231, 272], "element": [52, 80, 107, 133, 180, 215, 227, 231, 235, 272, 278, 281], "retriev": [52, 272], "act": [52, 188], "placehold": [52, 213], "sequentialsampl": 52, "sequenti": [52, 113, 115, 151, 153, 284], "batchsampl": 52, "tfdatadataload": 53, "tensorflow1": 53, "coupl": 53, "graph": [53, 75, 139, 146, 186, 190, 194, 215, 218, 220, 226, 234, 236, 255, 258, 275, 276, 277, 282], "feed_dict": 53, "session": [53, 146, 232, 282], "satisfi": [53, 217, 228, 259], "usag": [53, 80, 86, 113, 133, 183, 186, 195, 215, 220, 221, 236, 244, 255, 261, 266, 267, 268, 270, 274, 278, 283], "feed": [53, 218, 272], "tf1": [53, 234], "although": [53, 280], "obj": [53, 70, 75, 86, 87, 88, 90, 99, 104, 108, 112, 138, 148, 150, 169, 172, 180], "tensorflowbertdataload": 53, "tensorflowmodelzoobertdataload": 53, "tensorflowdataload": 53, "tensorflowimagefold": 56, "deriv": [70, 107, 109, 111], "compon": [70, 76, 113, 190, 213, 217, 220, 228, 229, 236, 253, 261, 271, 272], "pipelin": [70, 87, 88, 113, 189, 219, 232, 271], "distillation_conf": 70, "relat": [70, 80, 99, 104, 107, 133, 168, 172, 196, 236, 260, 261, 272, 278, 286], "_epoch_ran": 70, "epoch": [70, 109, 169, 214, 218, 219, 220, 232, 271, 272, 286], "ran": 70, "eval_frequ": 70, "term": [70, 189, 212, 218, 229, 231, 270, 271, 284], "best_scor": 70, "best_model": [70, 179, 183, 184, 185, 278], "found": [70, 193, 213, 218, 230, 233, 241, 258, 262, 281, 284, 287], "qlinear2qdq": 71, "qlinearop": [72, 217, 227, 244, 275, 287], "check_model": 72, "modelproto": [72, 138, 234], "onnx_qlinear_to_qdq": 72, "input_name_to_nod": 72, "destin": [72, 86], "node": [72, 74, 146, 194, 217, 220, 256, 260, 263, 266, 267, 268, 276, 282, 284, 287], "tf_to_fp32_onnx": 73, "graph_def": [73, 138, 146, 150], "save_path": [73, 74, 194, 234], "inputs_as_nchw": 73, "tool": [73, 180, 185, 186, 193, 194, 232, 246, 250, 256, 259, 260, 261, 272, 273, 275], "tf_to_int8_onnx": 73, "int8_model": [73, 74, 194], "get_node_map": 74, "fp32_model": [74, 180, 184, 185, 194, 276, 278], "fp32_onnx_path": 74, "module_node_map": 74, "get_quantizable_onnx_op": 74, "quantize_nod": 74, "dynamic_quant_export": 74, "pt_fp32_model": 74, "pt_int8_model": 74, "q_config": [74, 194], "weight_typ": 74, "s8": 74, "static_quant_export": 74, "_quantiz": 74, "torch_to_fp32_onnx": 74, "do_constant_fold": 74, "verbos": [74, 116, 154], "constant": [74, 116, 124, 154, 164, 173, 213, 214, 224, 256, 283], "fold": [74, 224, 278, 281], "torch_to_int8_onnx": 74, "infer": [75, 112, 146, 148, 150, 169, 184, 185, 186, 193, 194, 195, 212, 218, 219, 232, 233, 253, 270, 272, 273, 275, 278, 281, 282, 284], "achiev": [75, 112, 183, 186, 222, 230, 232, 256, 271, 272, 273, 275, 281, 282, 284], "within": [75, 80, 112, 133, 146, 188, 190, 196, 212, 233, 246, 250, 253, 261, 272, 273, 278, 281, 284], "across": [75, 85, 112, 138, 216, 232, 235, 260, 263, 272, 276, 281, 284], "variou": [75, 85, 112, 138, 196, 227, 235, 236, 263, 272, 274, 276], "dl": [75, 85, 99, 104, 112, 138, 217, 226, 240, 253, 273, 287], "bring": [75, 112, 247, 260, 281], "unifi": [75, 112, 194, 195, 196, 214, 226, 227, 231, 232, 234], "vari": [75, 99, 104, 112, 258, 272, 281, 287], "roc": [75, 84, 99, 104, 112, 137], "memori": [75, 99, 104, 112, 148, 180, 184, 186, 212, 214, 219, 232, 233, 235, 236, 270, 272, 275, 276, 278, 281, 284, 287], "flexibl": [75, 99, 104, 112, 185, 193, 218, 260, 272, 278], "interfac": [75, 99, 104, 112, 113, 172, 185, 186, 227, 232, 244, 262, 275, 279], "via": [75, 99, 104, 112, 188, 193, 220, 227, 232, 236, 253, 272, 273], "graph_optimization_conf": 75, "popular": [76, 129, 182, 186, 193, 194, 195, 212, 218, 221, 222, 225, 230, 232, 272, 275, 278, 284, 285], "compress": [76, 99, 104, 129, 148, 169, 175, 182, 184, 186, 193, 201, 218, 227, 232, 253, 255, 270, 271, 272, 273, 275, 281, 285, 287], "techniqu": [76, 129, 182, 185, 186, 193, 227, 232, 236, 255, 271, 272, 273, 274, 275, 285, 286, 287], "contrib": [76, 129], "pruner_legaci": 76, "pruning_recip": 76, "pytorch_prun": 76, "graph_optim": 76, "mixed_precis": [76, 138, 232], "model_convers": 76, "pruning_v2": 76, "script": [77, 78, 81, 82, 130, 131, 134, 135, 189, 193, 220, 227, 236, 240, 243, 244, 247, 264, 266, 273], "unicoderegex": [77, 130], "hoc": [77, 130], "hack": [77, 130], "recogn": [77, 130, 284], "symbol": [77, 130, 138, 150, 190, 234], "nondigit_punct_r": [77, 130], "compil": [77, 130, 232], "regular": [77, 108, 130], "express": [77, 130, 188], "preced": [77, 130, 281, 284], "digit": [77, 130, 180, 273], "punct_nondigit_r": [77, 130], "symbol_r": [77, 130], "bleu_token": [77, 130], "offici": [77, 81, 82, 130, 134, 135, 188, 281], "mose": [77, 130], "smt": [77, 130], "mosesdecod": [77, 130], "blob": [77, 78, 81, 82, 107, 130, 131, 134, 135, 137, 150, 232, 242, 264, 267, 268], "master": [77, 78, 81, 82, 107, 110, 130, 131, 134, 135, 137, 150, 232, 284], "mteval": [77, 130], "v14": [77, 130], "pl": [77, 130], "l954": [77, 130], "l983": [77, 130], "comput": [77, 78, 81, 82, 84, 130, 131, 134, 135, 137, 169, 180, 185, 186, 212, 214, 219, 222, 231, 232, 233, 235, 236, 247, 256, 272, 273, 275, 278, 281, 284], "bilingu": [77, 130], "understudi": [77, 130], "qualiti": [77, 130, 213], "been": [77, 107, 109, 130, 185, 191, 196, 213, 218, 232, 233, 253, 278, 281], "machin": [77, 130, 185, 222, 228, 239, 253, 255, 261, 273, 281, 282], "translat": [77, 78, 130, 131, 235, 272, 284], "natur": [77, 130, 185, 222], "approxim": [77, 78, 130, 131, 195, 231, 278], "glue": [77, 84, 130, 137, 215, 231, 232, 242], "word": [77, 130, 213, 231, 272, 278, 287], "ngram": [77, 130, 231], "order": [77, 78, 113, 116, 119, 128, 130, 131, 154, 159, 168, 190, 217, 231, 256, 274, 278, 281, 282, 284], "breviti": [77, 78, 130, 131, 231], "penalti": [77, 78, 130, 131, 231], "doe": [77, 130, 168, 213, 214, 215, 231, 232, 278, 279, 283], "beam": [77, 130, 231], "bleu": [78, 83, 131, 136, 231, 272], "tensor2tensor": [78, 131], "bleu_hook": [78, 131], "compute_bleu": [78, 131], "reference_corpu": [78, 131], "translation_corpu": [78, 131], "max_ord": [78, 131], "use_bp": [78, 131], "against": [78, 131], "gram": [78, 131], "bleu_scor": [78, 131], "third": [80, 133, 189, 229], "parti": [80, 133, 186, 189, 229, 275], "pycocotool": [80, 133, 223, 228], "note": [80, 120, 133, 160, 184, 186, 191, 193, 195, 196, 213, 214, 217, 220, 222, 224, 228, 230, 232, 238, 241, 246, 250, 253, 255, 259, 261, 263, 272, 275, 278, 281, 282, 284, 285, 286], "noth": [80, 133, 284], "thu": [80, 133, 186, 232, 272, 275], "cannot": [80, 133, 190, 213, 223, 278, 282], "slim": [80, 133, 144, 146, 234, 272], "jonathanhuang": [80, 133], "image_id": [80, 133, 231], "encod": [80, 133, 256, 283], "invok": [80, 133, 195], "groundtruth_dict": [80, 133], "exportgroundtruthtococo": [80, 133], "groundtruth_boxes_list": [80, 133], "groundtruth_classes_list": [80, 133], "max_num_class": [80, 133], "output_path": [80, 133], "detections_list": [80, 133], "exportdetectionstococo": [80, 133], "detection_boxes_list": [80, 133], "detection_scores_list": [80, 133], "detection_classes_list": [80, 133], "cocowrapp": [80, 133], "loadannot": [80, 133], "cocoevalwrapp": [80, 133], "agnostic_mod": [80, 133], "computemetr": [80, 133], "ani": [80, 82, 125, 133, 135, 165, 177, 180, 185, 188, 193, 196, 213, 220, 236, 241, 254, 255, 259, 260, 272, 280, 284], "detection_typ": [80, 133], "bbox": [80, 133, 190, 231], "hold": [80, 116, 133, 154, 215], "being": [80, 133, 196, 261], "iou_typ": [80, 133], "iou_thr": [80, 84, 133, 137, 231], "map_point": [80, 84, 133, 137, 231], "cocoev": [80, 133], "To": [80, 133, 148, 184, 189, 193, 195, 196, 213, 215, 217, 220, 233, 235, 237, 240, 246, 248, 250, 251, 255, 259, 272, 274, 277, 278, 279, 281, 284, 286], "mscoco": [80, 133], "org": [80, 109, 133, 190, 217, 228, 248, 251, 272], "Then": [80, 133, 195, 217, 246, 248, 250, 251, 258, 281, 284], "exportsingleimagegroundtruthtococo": [80, 133], "next_annotation_id": [80, 133], "category_id_set": [80, 133], "groundtruth_box": [80, 133], "groundtruth_class": [80, 133], "groundtruth_mask": [80, 133], "groundtruth_is_crowd": [80, 133], "ingest": [80, 133], "here": [80, 133, 184, 185, 186, 195, 215, 220, 221, 222, 224, 225, 230, 231, 241, 248, 251, 253, 256, 259, 261, 275, 279, 280, 281, 287], "match": [80, 81, 133, 134, 193, 218, 254, 278], "ones": [80, 133, 272], "exportsingleimagedetectionstococo": [80, 133], "associ": [80, 133], "uniqu": [80, 113, 133, 186, 275], "identifi": [80, 133, 146, 261, 272, 278], "assign": [80, 133, 180, 220, 274, 284], "continu": [80, 107, 133, 191, 230, 232, 254, 272, 285], "drop": [80, 108, 133, 189, 232, 233, 247, 272, 278, 281, 287], "num_gt_box": [80, 133], "num_detect": [80, 84, 133, 137, 231, 232, 286], "image_height": [80, 133], "image_width": [80, 133], "detection_mask": [80, 133], "crowd": [80, 133], "rais": [80, 107, 108, 109, 133, 138, 193, 213, 255, 272, 273], "valueerror": [80, 133, 223], "insid": [80, 133, 218, 219, 254, 272, 276, 284], "exportsingleimagedetectionboxestococo": [80, 133], "detection_box": [80, 133, 232, 286], "detection_scor": [80, 133, 232, 286], "detection_class": [80, 133, 232, 286], "exporsingleimagedetectionboxestococo": [80, 133], "exportsingleimagedetectionmaskstococo": [80, 133], "allenai": [81, 82, 134, 135], "bi": [81, 82, 134, 135], "att": [81, 82, 134, 135], "flow": [81, 82, 134, 135, 190, 191, 232], "f1_score": [81, 82, 134, 135], "ground_truth": [81, 82, 134, 135], "f1": [81, 83, 84, 134, 136, 137, 220, 231, 232, 256, 280, 287], "ground": [81, 82, 134, 135], "truth": [81, 82, 134, 135], "metric_max_over_ground_truth": [81, 82, 134, 135], "metric_fn": [81, 82, 134, 135], "exact_match_scor": [81, 134], "exact": [81, 134], "averag": [81, 82, 84, 134, 135, 137, 231, 232, 278, 284, 287], "articl": [81, 82, 134, 135], "paragraph": [81, 82, 134, 135], "qa": [81, 82, 134, 135, 193], "normalize_answ": [82, 135], "remov": [82, 135, 188, 232, 246, 250, 259, 266, 267, 272, 282], "extra": [82, 135, 232, 278], "replac": [82, 135, 213, 220, 232, 235, 244, 279], "newlin": [82, 135, 180], "tab": [82, 135, 253, 282], "abc": [82, 135, 194, 282, 284], "harmon": [82, 84, 135, 137], "recal": [82, 84, 135, 137], "equat": [82, 84, 135, 137, 186, 275, 281], "answer_start": [82, 135], "177": [82, 135, 287], "denver": [82, 135], "bronco": [82, 135], "nfl": [82, 135], "team": [82, 135, 188, 277], "afc": [82, 135], "super": [82, 135, 191], "bowl": [82, 135], "50": [82, 135, 191, 195, 258, 272, 281, 287], "56be4db0acb8001400a502ec": [82, 135], "form": [82, 135, 217, 218, 253], "percentag": [82, 135, 212, 278, 286], "bleu_util": [83, 136], "coco_label_map": [83, 136], "coco_tool": [83, 136], "evaluate_squad": [83, 136], "tensorflowmetr": [84, 137], "maintain": [84, 137, 185, 188, 189, 213, 234, 236, 248, 251, 255, 260, 261, 272, 278, 279], "pytorchmetr": [84, 137], "mxnetmetr": [84, 137], "onnxrtqlmetr": [84, 137], "onnxrtitmetr": [84, 137], "metric_registri": [84, 137], "metric_typ": [84, 137], "decorator_metr": [84, 137], "basemetr": [84, 137, 150], "single_output": [84, 137], "hvd": [84, 137, 220], "wrappytorchmetr": [84, 137], "wrapmxnetmetr": [84, 137], "wraponnxrtmetr": [84, 137], "binari": [84, 137, 223, 231, 248, 251, 279], "proport": [84, 137], "were": [84, 137, 239, 272], "pred_list": [84, 137], "pytorchloss": [84, 137], "print": [84, 137, 180, 220, 231, 232, 255, 256, 272, 281, 284], "mae": [84, 137, 231], "compare_label": [84, 137, 150, 231], "error": [84, 119, 137, 159, 176, 217, 231, 237, 258, 259, 262, 278, 281, 284], "actual": [84, 137, 220], "compar": [84, 137, 180, 186, 219, 231, 235, 256, 272, 275, 278, 280, 282, 284], "pred": [84, 137, 231], "rmse": [84, 137, 231, 284], "squar": [84, 119, 137, 159, 217, 231, 258, 284], "estim": [84, 137, 146, 284], "tensorflowtopk": [84, 137], "k": [84, 137, 150, 231, 255, 272], "among": [84, 137, 235, 247, 281], "outcom": [84, 137], "consid": [84, 137, 188, 212, 213, 218, 254, 284], "find": [84, 91, 116, 137, 154, 180, 194, 217, 230, 239, 246, 250, 253, 254, 256, 258, 272, 278, 280, 281, 282, 284], "num_correct": [84, 137], "num_sampl": [84, 137], "generaltopk": [84, 137], "cocomapv2": [84, 137, 231], "anno_path": [84, 137, 231], "95": [84, 137, 231, 287], "map_kei": [84, 137], "detectionboxes_precis": [84, 137], "output_index_map": [84, 137, 231], "tensorflowmap": [84, 137], "tensorflowcocomap": [84, 137], "tensorflowvocmap": [84, 137], "squadf1": [84, 137, 231], "miou": [84, 137], "num_class": [84, 137], "21": [84, 137, 241, 242, 264, 267, 268, 273, 281, 287], "iou": [84, 137], "intersect": [84, 137, 194, 231], "union": [84, 137, 169, 185, 231, 264], "onnxrtglu": [84, 137], "dlrm": [84, 137], "modelconvers": 86, "typic": [86, 113, 191, 193, 219, 221, 225, 258, 272, 287], "saved_model": [86, 276], "basicna": 87, "model_build": [87, 90], "conf_fnam": 87, "modul": [89, 95, 105, 106, 190, 213, 214, 218, 227, 231, 232, 234, 272, 274, 277, 278, 282, 285], "basic_na": 89, "nas_util": 89, "nasbas": [90, 191], "nas_registri": 91, "nas_method": 91, "create_search_space_pool": 91, "idx": [91, 215], "enumer": [91, 169, 194, 218, 219, 220, 232, 235, 271, 272, 282], "find_pareto_front": 91, "pareto": [91, 191], "front": [91, 191], "n_point": 91, "n_metric": 91, "n_pareto_point": 91, "gridsearch": 92, "whole": [92, 186, 196, 255, 275, 287], "randomsearch": 92, "bayesianoptimizationsearch": 92, "gradient": [93, 193, 227, 232, 272, 273, 287], "sensit": [93, 109, 227, 272], "pruner": [93, 94, 95, 96, 97, 99, 104, 105, 107, 110, 232, 272, 286], "gradientsensitivityprun": 93, "global_config": [93, 94, 96, 97, 98], "pytorchmodel": [93, 94, 96, 97, 98, 147], "mai": [93, 94, 96, 97, 98, 184, 186, 188, 189, 195, 212, 213, 217, 222, 223, 229, 233, 246, 250, 256, 259, 261, 273, 275, 278, 281, 284], "overwritten": [93, 94, 96, 97, 98, 241], "group": [94, 193, 227, 272, 278, 282, 283, 284, 287], "lasso": [94, 227, 272], "grouplassoprun": 94, "legaci": 95, "gradient_sensit": 95, "group_lasso": 95, "basicmagnitudeprun": 96, "lock": [97, 98, 227, 271, 272], "patternlockprun": [97, 109], "pruner_registri": 98, "clase": 98, "pruningconf": [99, 104], "tfpruningcallback": [99, 104], "nc_model": [99, 104], "input_model": [99, 104, 234, 256, 257, 258, 282], "callback": [99, 104, 169, 172, 190, 232, 271, 272, 275], "pure": [99, 104, 272], "tile_pattern": 101, "pattern_registri": 102, "pattern_typ": 102, "patternbas": 102, "mask_shap": [102, 103], "is_contigu": 102, "tile": [103, 213], "tilepatternbas": 103, "parent": [103, 109, 111, 282], "tilepattern_1x1": 103, "1x1": [103, 218, 232, 272], "tilepattern_2x2": 103, "2x2": [103, 281], "tilepattern_1x16": 103, "1x16": 103, "tilepattern_4x1": 103, "tilepattern_1x2": 103, "1x2": [103, 281], "logger": [105, 170, 173, 180], "prune_util": 105, "register_pattern": 107, "registri": [107, 109, 111, 191], "sure": [107, 109, 111, 211, 255], "get_pattern": 107, "assertionerror": [107, 108, 109, 138], "unit": [107, 189, 261, 272], "part": [107, 109, 190, 228, 233, 248, 251, 261, 263, 272, 276, 281, 285], "is_glob": 107, "contrast": [107, 283], "individu": [107, 188, 261, 272, 281], "patternnxm": 107, "kept": 107, "block_siz": [107, 278], "direct": [107, 272], "hidden": [107, 194], "patternninm": 107, "check_config": 108, "prune_config": 108, "everyth": [108, 241], "reset_non_value_to_default": 108, "undefin": 108, "process_and_check_config": 108, "non": [108, 180, 185, 190, 217, 278, 284], "process_config": 108, "obtain": [108, 190, 195, 261, 272, 280, 281, 284], "parse_to_prun": 108, "keep": [108, 155, 190, 194, 213, 252, 253, 279], "parse_not_to_prun": 108, "register_prun": 109, "get_prun": 109, "module_nam": [109, 180], "begin": [109, 213, 214, 218, 219, 232, 272, 284], "current_sparsity_ratio": 109, "global_step": 109, "update_frequency_on_step": [109, 274], "target_sparsity_ratio": 109, "final": [109, 186, 195, 232, 239, 270, 272, 275, 279, 284], "max_sparsity_ratio_per_lay": [109, 274], "magnitudeprun": 109, "snipprun": 109, "network": [109, 157, 186, 191, 212, 218, 219, 222, 232, 235, 255, 273, 275, 281, 284], "connect": [109, 253, 255, 262, 272, 280], "arxiv": [109, 193, 212, 235, 272, 273, 278, 281], "ab": [109, 185, 186, 272, 275, 281], "1810": 109, "02340": 109, "snipmomentumprun": 109, "moreoev": 109, "updat": [109, 137, 150, 177, 223, 230, 231, 232, 239, 244, 247, 263, 272, 278, 281, 284, 285], "momentum": [109, 227, 232, 272, 286], "while": [109, 116, 154, 185, 186, 194, 195, 215, 221, 227, 233, 236, 241, 253, 255, 272, 274, 275, 278, 281], "spars": [109, 215, 273], "least": [110, 189, 232, 272, 284], "templat": [110, 232, 272], "tree": [110, 126, 166, 261], "huggingface_model": [110, 257], "eager": [110, 193, 220, 227, 275, 277, 282], "config_file_path": 110, "pruner_info": 110, "register_schedul": 111, "get_schedul": 111, "gradual": [111, 272], "oneshotschedul": 111, "iterativeschedul": 111, "quantconf": 112, "separ": [113, 188, 213, 226, 229, 261, 263, 271, 274], "append": [113, 116, 154, 190, 219, 232, 271], "There": [113, 115, 151, 153, 184, 213, 217, 218, 224, 227, 232, 236, 258, 260, 261, 278, 281, 284, 286], "opt_model": [113, 232], "fulli": [113, 183, 232, 261, 275, 281], "train_func": [113, 169, 220, 232, 275], "automixedprecisiontunestrategi": [114, 152], "basictunestrategi": [115, 153], "stage": [115, 120, 151, 153, 160, 218, 272, 282, 284], "polici": [115, 119, 151, 153, 159, 188, 193, 286, 288], "bayesiantunestrategi": [116, 154], "acq_max": [116, 154], "ac": [116, 154], "gp": [116, 154], "y_max": [116, 154], "n_warmup": [116, 154], "10000": [116, 154, 272], "n_iter": [116, 154], "acquisit": [116, 154], "gaussian": [116, 154, 284], "relev": [116, 154, 195, 196, 213, 258, 272], "limit": [116, 154, 180, 193, 217, 218, 230, 235, 275, 278, 279, 282], "acq": [116, 154], "randomst": [116, 154], "scipi": [116, 154], "x_max": [116, 154], "targetspac": [116, 154], "pbound": [116, 154], "9527": [116, 154, 232, 286], "allow": [116, 154, 218, 220, 231, 232, 233, 255, 260, 272, 274, 278, 281, 284, 286], "duplic": [116, 154], "bayesianoptim": [116, 154], "exhaustivetunestrategi": [117, 156], "auto_mixed_precis": [118, 158], "msetunestrategi": [119, 159], "those": [119, 159, 180, 185, 186, 217, 218, 219, 226, 232, 233, 271, 272, 275, 284], "mse_v2tunestrategi": [120, 160], "revert": [120, 128, 160, 168, 284], "fx": [120, 160, 227, 233, 242, 243, 257, 273, 275, 277], "randomtunestrategi": [121, 161], "strategy_registri": [122, 162, 284], "tunestrategi": [122, 162, 284], "tuning_sampl": [124, 164], "tuning_spac": [124, 125, 127, 164, 165, 167], "tuning_struct": [124, 125, 126, 164, 165, 166], "tuningsamplerregistri": 125, "tuningsampl": [125, 165], "tuningord": [125, 165], "Not": [125, 126, 165, 166, 180, 191, 213], "tuningspac": [125, 126, 165, 166], "tuning_order_lst": [125, 165], "initial_op_tuning_cfg": [125, 165], "modelwisetuningsampl": [125, 165], "tuning_items_prior": [125, 165], "op_dtype_dict": [125, 165], "optuningconfig": [125, 126, 127, 165, 166, 167], "optypewisetuningsampl": [125, 165], "opwisetuningsampl": [125, 165], "fallbacktuningsampl": [125, 165], "op_dtyp": [125, 165], "accumul": [125, 165, 235, 284], "skip_first": [125, 165], "smoothquantsampl": [125, 165], "tuningitem": [126, 166], "item_typ": [126, 166], "capabl": [126, 166, 186, 195, 196, 211, 224, 232, 233, 244, 255, 260, 272, 274, 275, 284, 286], "pattern_to_intern": [126, 166], "default_dtyp": [126, 166], "pattern_to_path": [126, 166], "quant_mode_from_pattern": [126, 166], "internal_pattern": [126, 166], "initial_tuning_cfg_with_quant_mod": [126, 166], "op_name_typ": [126, 166], "quant_mod": [126, 166, 195, 196], "cfg": [126, 166, 172, 195, 196], "step1": [126, 166], "step2": [126, 166], "complet": [126, 166, 194, 195, 272, 275, 284, 286, 287], "step3": [126, 166], "step4": [126, 166], "step5": [126, 166], "op_typ": [127, 167], "op_quant_mod": [127, 167], "ordereddefaultdict": [128, 168], "extract_data_typ": [128, 168], "data_typ": [128, 168], "sign": [128, 168, 186, 189, 193, 196, 212, 255, 273, 275, 278, 280], "unsign": [128, 168, 196, 278], "reverted_data_typ": [128, 168], "signed_flag": [128, 168], "get_adaptor_nam": [128, 168], "experiment": [129, 191, 215, 219, 220, 222, 228, 232, 272, 274, 275, 279, 283], "sub_class": [137, 150], "register_customer_metr": 137, "mani": [137, 150, 185, 213, 214, 228, 278, 284, 286], "tell": [137, 150, 274], "topk": [137, 150, 220, 231, 232, 255, 275], "matrix": [137, 150, 184, 186, 193, 244, 285], "frozen": [138, 146, 150, 234], "ckpt": [138, 146, 150, 287], "savedmodel": [138, 146, 150], "onnx_ml_pb2": [138, 234], "gluon": [138, 150, 234], "hybirdblock": [138, 150], "basemodel": [139, 185], "plai": [139, 273, 278, 281], "role": [139, 278, 281], "base_model": 140, "keras_model": 140, "mxnet_model": 140, "nets_factori": 140, "onnx_model": [140, 256], "tensorflow_model": [140, 258], "torch_model": 140, "kerasmodel": 141, "get_model_fwk_nam": 142, "fwk": 142, "mxnetmodel": 143, "net": [144, 193], "factori": 144, "tfslimnetsfactori": 144, "onnxmodel": 145, "get_model_typ": 146, "validate_graph_nod": 146, "node_nam": [146, 195], "compat": [146, 185, 189, 220, 234, 248, 251, 253, 272, 279], "graphdef": [146, 234], "validate_and_inference_input_output": 146, "input_tensor_nam": 146, "output_tensor_nam": 146, "graph_sess": 146, "sess": 146, "graph_def_sess": 146, "frozen_pb_sess": 146, "load_saved_model": 146, "saved_model_tag": 146, "signatur": 146, "tag": [146, 281, 282], "metagraphdef": 146, "analyz": [146, 280, 281, 282], "input_tensor": 146, "output_tensor": 146, "try_loading_kera": 146, "keras_sess": 146, "slim_sess": 146, "checkpoint_sess": 146, "estimator_sess": 146, "input_fn": 146, "saved_model_sess": 146, "tensorflowbasemodel": 146, "tensorflowsavedmodelmodel": 146, "tensorflowllmmodel": 146, "exceed": 146, "protobuf": [146, 256], "2gb": 146, "tensorflowqatmodel": 146, "tensorflowcheckpointmodel": 146, "checkpoint": [146, 179, 234], "tensorflowmodel": 146, "pytorchbasemodel": 147, "pytorchfxmodel": 147, "ipexmodel": 147, "driven": [148, 193, 232, 253, 270, 282], "develop": [148, 185, 189, 190, 213, 228, 232, 233, 235, 236, 242, 253, 259, 272, 273, 277, 280], "objective_registri": 148, "objective_custom_registri": 148, "obj_cl": 148, "eural_compressor": 148, "objective_cl": 148, "user_object": 148, "__class__": 148, "__name__": 148, "objective_cfg": 148, "deep_get": 148, "usr_cfg": 148, "deep_set": 148, "user_obj_cfg": 148, "With": [148, 185, 186, 190, 194, 196, 214, 232, 241, 246, 250, 254, 260, 270, 272, 273, 275, 280, 281, 284, 287], "easili": [148, 185, 194, 237, 241, 253, 270, 281], "special": [148, 190, 214, 231, 232, 270, 272, 278, 285], "peak": [148, 270], "multiobject": 148, "metric_criterion": 148, "metric_weight": 148, "obj_criterion": 148, "obj_weight": 148, "is_measur": 148, "calib_func": [150, 277], "entir": [150, 169, 184, 190, 195, 196, 212, 260, 272], "autotunestrategi": 151, "level": [155, 176, 185, 188, 235, 263, 281, 284], "conservativetunestrategi": 155, "o0": [155, 284], "who": [155, 188], "hawq_v2tunestrategi": 157, "hawq": [157, 284], "v2": [157, 214, 220, 222, 223, 228, 230, 242, 279, 281, 284, 285, 287], "hessian": [157, 278, 284], "made": [157, 186, 194, 275, 279, 284], "small": [157, 191, 258, 259, 272, 278, 284, 287], "impact": [157, 272, 279, 284], "tunestrategymeta": 162, "metaclass": 162, "lowerbitssampl": 165, "blockfallbacktuningsampl": 165, "op_block_lst": 165, "target_dtyp": 165, "alpha_list": 165, "weightonlyquantsampl": 165, "quanttyp": 168, "quantopt": 168, "quant_typ": 168, "quant_opt": 168, "preprocess_user_cfg": 168, "op_user_cfg": 168, "op_user_cfg_modifi": 168, "group_siz": [168, 278], "32": [168, 185, 220, 226, 235, 278, 287], "build_slave_faker_model": 168, "slave": [168, 284], "virtual": [168, 273], "classregist": 168, "loop": [169, 190, 191, 195, 196, 224, 263, 280, 284], "compressionmanag": 169, "deal": 169, "pruningconfig": 169, "orchestr": [169, 193, 227, 285], "on_train_begin": [169, 190, 218, 219, 232, 271, 272, 275], "train_loop": [169, 232, 271], "on_epoch_begin": [169, 172, 218, 219, 232, 271], "on_step_begin": [169, 172, 218, 219, 232, 271, 272], "on_after_compute_loss": [169, 218, 219, 232, 271], "backward": [169, 185, 186, 218, 219, 220, 232, 271, 272, 275, 279], "on_before_optimizer_step": [169, 218, 219, 232, 271, 272], "on_step_end": [169, 172, 218, 219, 232, 271], "on_epoch_end": [169, 172, 218, 219, 232, 271], "on_train_end": [169, 218, 219, 232, 271, 272, 275], "path_to_sav": 169, "manag": [169, 172, 232, 236, 237, 247], "top1": [169, 231, 255, 272, 275, 287], "callbacks_list": 169, "layerhistogramcollector": 170, "histogram": [170, 180, 255, 282], "num_bin": 170, "8001": [170, 261, 266, 267, 268], "layer_tensor": 170, "include_lay": 170, "collector": 170, "diverg": [170, 174, 196, 212, 218, 284], "get_func_from_config": 172, "func_dict": 172, "get_preprocess": 172, "get_metr": 172, "get_postprocess": 172, "get_algorithm": 172, "algo": 172, "create_dataset": 172, "cfg_preprocess": 172, "cfg_filter": 172, "create_dataload": 172, "dataloader_cfg": 172, "create_eval_func": 172, "postprocess_cfg": 172, "fp32_baselin": [172, 194], "baselin": [172, 280, 281, 282], "create_train_func": 172, "train_cfg": 172, "Their": 172, "auxiliari": 173, "collect_layer_histogram": 173, "create_obj_from_config": 173, "kl_diverg": 173, "load_huggingfac": [173, 232], "neural_insights_util": 173, "weights_detail": 173, "pretrain": [175, 236, 242], "optimizedmodel": 175, "from_pretrain": [175, 193, 232], "save_for_huggingface_upstream": [175, 232], "output_dir": [175, 232, 241, 242, 257, 258, 264, 267, 268], "export_compressed_model": [175, 278], "saved_dir": [175, 278], "use_optimum_format": [175, 278], "enable_full_rang": [175, 276, 278], "compression_dtyp": [175, 278], "int32": [175, 215, 278], "compression_dim": [175, 278], "scale_dtyp": [175, 278], "_type_": 175, "leverag": [175, 183, 191, 193, 218, 222, 236, 253, 271, 275, 278, 284], "symmetr": [175, 185, 186, 196, 275, 278, 283, 284], "comoress": 175, "float16": [175, 215, 278], "msg": [176, 262, 266, 267], "debug": [176, 217, 246, 250, 254, 284, 285], "fatal": 176, "warn": [176, 213], "alia": [176, 180, 238, 243], "register_neural_insights_workload": 177, "workload_loc": [177, 180], "workload_mod": 177, "workload_nam": 177, "uuid": 177, "update_neural_insights_workload": 177, "workload_uuid": 177, "statu": [177, 188, 214, 235, 263, 266, 267, 268, 270, 272], "update_neural_insights_workload_accuracy_data": 177, "baseline_accuraci": 177, "optimized_accuraci": 177, "get_model_path": 177, "is_int8_model": 179, "load_weight_onli": 179, "checkpoint_dir": 179, "layer_wis": [179, 276], "qconfig": [179, 278, 282], "pt": [179, 228, 234, 257, 273, 275, 277, 278], "history_cfg": 179, "best_configur": 179, "best_model_weight": 179, "snapshot": [179, 257], "recover_model_from_json": 179, "json_file_path": 179, "recov": [179, 180, 194, 219], "cfg_from_fil": 180, "yaml_fil": [180, 215, 220], "version1_lt_version2": 180, "version1": 180, "version2": 180, "version1_gt_version2": 180, "greater": [180, 185, 266, 272, 284], "version1_eq_version2": 180, "version1_gte_version2": 180, "version1_lte_version2": 180, "lazyimport": 180, "lazi": 180, "till": [180, 284], "singleton": 180, "time_limit": 180, "context": [180, 274, 278], "get_siz": 180, "seen": [180, 194], "recurs": 180, "compute_spars": 180, "fault_tolerant_fil": 180, "temporari": [180, 188], "equal_dict": 180, "d1": 180, "d2": 180, "compare_kei": 180, "ignore_kei": 180, "except": [180, 213, 259, 275, 276], "ignor": [180, 212, 215, 278, 281, 284], "cpuinfo": 180, "dump_elapsed_tim": [180, 194], "customized_msg": 180, "elaps": 180, "combine_histogram": 180, "old_hist": 180, "arr": 180, "old": [180, 232, 279], "get_tensor_histogram": 180, "tensor_data": [180, 181], "bin": [180, 223], "2048": [180, 193, 278], "get_all_fp32_data": 180, "get_tuning_histori": 180, "tuning_history_path": 180, "num": 180, "offlin": [180, 184, 185, 186, 188, 232, 275, 281], "str2arrai": 180, "dequantize_weight": 180, "weight_tensor": 180, "min_filter_tensor": 180, "max_filter_tensor": 180, "dequant": [180, 190, 195, 281, 282], "scale_info": 180, "captureoutputtofil": 180, "tmp_file_path": 180, "stream": [180, 287], "sy": [180, 213, 239], "stderr": 180, "captur": 180, "statist": [180, 181], "header": [180, 223], "field_nam": 180, "output_handl": 180, "printer": 180, "global_st": 180, "load_data_from_pkl": 180, "pkl": [180, 257], "dump_data_to_loc": 180, "show_memory_info": 180, "hint": 180, "show": [180, 188, 218, 220, 232, 235, 239, 254, 255, 256, 258, 261, 266, 267, 268, 281, 284, 285], "dump_class_attr": 180, "compare_object": 180, "obj1": 180, "obj2": 180, "ignore_attr": 180, "comparison": [180, 278, 279, 282], "alias_param": 180, "param_nam": 180, "param_alia": 180, "alias": [180, 213], "print_tabl": 180, "column_map": 180, "table_entri": 180, "titl": [180, 229, 254, 284], "insert_newlin": 180, "tabl": [180, 196, 217, 222, 235, 256, 258, 287], "prettyt": 180, "column": [180, 278, 281], "func": [180, 275, 286], "handler": [180, 284], "row": [180, 217, 256, 281], "decim": 180, "get_tensors_info": 180, "about": [180, 188, 213, 214, 232, 258, 259, 272, 277, 284, 285, 287], "get_weights_detail": 180, "weightdetail": 180, "dump_tabl": 180, "filepath": [180, 213], "file_typ": 180, "csv": [180, 191, 256, 257], "extens": [180, 186, 191, 193, 194, 213, 224, 227, 228, 230, 232, 233, 234, 237, 242, 243, 244, 248, 251, 252, 256, 272, 273, 275, 278, 281, 284, 285, 286], "dump_table_to_csv": 180, "get_number_of_socket": 180, "platform": [180, 185, 186, 193, 227, 236, 244, 263, 273, 275], "opentri": 180, "activation_min": 180, "activation_max": 180, "print_op_list": 180, "get_op_list": 180, "minmax_file_path": 180, "input_model_tensor": 180, "optimized_model_tensor": 180, "activation_min_max": 180, "calculate_ms": 180, "mse_metric_gap": 180, "fp32_tensor": 180, "dequantize_tensor": 180, "euclidean": [180, 218], "distanc": [180, 218], "check_key_exist": 180, "weightsdetail": 181, "input_tensor_data": 181, "optimized_tensor_data": 181, "weightsstatist": 181, "3x": [183, 184], "fundament": [183, 184, 212, 232], "respons": [183, 266, 267, 268, 275], "val_dataset": [183, 232, 275], "val_dataload": [183, 232, 275], "mydataload": [183, 185], "neural_compressor": [183, 184, 185, 190, 191, 193, 196, 211, 213, 214, 215, 217, 218, 219, 220, 222, 225, 226, 231, 232, 233, 234, 235, 255, 256, 270, 271, 272, 274, 275, 276, 277, 279, 280, 281, 283, 284, 286], "quantize_model": [183, 184, 185, 186], "staticquantconfig": [183, 184, 185], "quant_config": [183, 184, 185, 235], "qmodel": [183, 185], "good": [183, 188, 275, 284], "eval_fn": [183, 184, 185], "eval_arg": [183, 185], "eval_acc_fn": [183, 185], "acc": [183, 191, 230, 263, 272, 282, 287], "base_tun": [183, 185], "tuningconfig": [183, 184, 185], "autotun": [183, 184, 185, 186, 213], "custom_tune_config": [183, 184, 185], "weight_sym": [183, 185], "act_sym": [183, 185], "config_set": [183, 184, 185], "tune_config": [183, 184, 185, 195], "set_loc": 183, "abov": [183, 194, 195, 196, 218, 255, 256, 258, 261, 272, 275, 281, 284], "purpos": [183, 224, 233, 253, 255, 274, 275], "static_qu": [183, 213], "weight_dtyp": 183, "weight_granular": 183, "per_tensor": [183, 195, 196, 224, 275, 286], "act_dtyp": [183, 235], "act_granular": 183, "from_dict": 183, "conv2d_config": 183, "acceler": [184, 193, 218, 232, 236, 244, 253, 256, 260, 272, 273, 277, 278, 281, 284], "llm": [184, 235, 272, 273, 276, 278, 281], "gigant": [184, 281], "systemat": [184, 281], "outlier": [184, 195, 212, 217, 258, 278, 281], "quantif": [184, 278, 281], "difficult": [184, 194, 281], "migrat": [184, 281, 285], "difficulti": [184, 281], "mathemat": [184, 281], "equival": [184, 193, 235, 273, 278, 281], "smoothquantconfig": [184, 185], "output_graph_def": 184, "sq_config": 184, "static_config": 184, "still": [184, 186, 212, 232, 259, 273, 275, 277], "fusion": [184, 190, 194, 224], "look": [184, 194, 196, 224, 231, 255, 256, 258, 281, 286], "eval_fn_wrapp": 184, "consider": [184, 281], "amount": [184, 281], "learn": [185, 186, 193, 194, 195, 214, 215, 222, 226, 227, 228, 232, 233, 235, 236, 238, 241, 242, 244, 247, 248, 251, 253, 272, 273, 275, 281, 282, 284, 285], "comprehens": [185, 232, 285], "ecosystem": [185, 193, 273], "commun": [185, 188, 255], "resourc": [185, 218, 260, 263, 284], "let": [185, 196, 224, 241, 272, 274, 286], "research": [185, 193, 229, 281, 287], "push": [185, 189, 235, 272, 278, 281], "state": [185, 196, 239, 272], "art": [185, 272], "ml": [185, 273], "deploi": [185, 189, 218, 232, 259, 263, 278, 284], "power": [185, 218, 232, 235, 247, 273], "stabl": [185, 193, 228, 272, 273], "deep": [185, 186, 193, 194, 195, 214, 227, 228, 232, 233, 235, 236, 238, 241, 242, 244, 247, 253, 273, 275, 284, 285], "jax": 185, "effortlessli": [185, 260], "vision": [185, 193, 222, 240, 281], "audio": 185, "timeseri": 185, "forecast": 185, "philosophi": [185, 275], "calib_iter": [185, 195], "offer": [185, 215, 235], "straightforward": [185, 272, 278, 281], "baseconfig": [185, 213], "rule": [185, 217, 236, 272], "partial": [185, 272, 275], "hand": [185, 191], "particularli": 185, "critic": [185, 188], "factor": [185, 278, 281, 287], "toler": [185, 258], "And": [185, 189, 190, 211, 213, 232, 239, 281], "supplement": 185, "baseline_model": 185, "asymmetr": [185, 186, 196, 275, 278, 284], "onednn": [185, 228, 233, 275], "rmin": [185, 186, 235, 275], "rmax": [185, 186, 275], "sq": [185, 230, 281], "unseen": [185, 186, 275], "zeropoint": [185, 186, 275], "prepar": [185, 186, 190, 215, 220, 225, 255, 266, 267, 268, 272, 275], "enough": [185, 186, 275], "unlik": 185, "tradit": [185, 239, 272], "signific": [185, 272, 273, 276, 281], "focus": [185, 188, 194, 235], "refin": [185, 226, 272], "instal": [185, 220, 223, 225, 236, 238, 241, 244, 248, 251, 253, 254, 256, 257, 258, 288], "veri": [186, 232, 254, 258, 275, 278, 284, 285], "invent": [186, 275], "improv": [186, 189, 212, 213, 232, 236, 253, 254, 256, 272, 273, 275, 277, 278, 284, 285, 287], "speed": [186, 212, 232, 244, 272, 273, 275, 284], "represent": [186, 188, 190, 212, 219, 235, 272, 275], "int4": [186, 193, 230, 275, 287], "miss": [186, 272, 275], "rate": [186, 232, 272, 275], "cost": [186, 235, 275, 278], "On": [186, 275, 287], "3rd": [186, 233, 273, 275, 277], "gen": [186, 230, 233, 273, 275, 277], "xeon": [186, 193, 228, 229, 230, 233, 273, 275, 277, 287], "scalabl": [186, 193, 228, 230, 233, 273, 275, 277], "processor": [186, 193, 230, 233, 261, 273, 275, 277], "4x": [186, 191, 275], "theoret": [186, 275, 278], "speedup": [186, 221, 227, 275], "4th": [186, 230, 273, 275], "affin": [186, 275], "math": [186, 275], "255": [186, 275, 281], "f": [186, 213, 218, 220, 275, 278, 281], "sometim": [186, 190, 217, 275], "overflow": [186, 275], "issu": [186, 188, 189, 192, 193, 228, 256, 258, 275, 282], "due": [186, 196, 222, 272, 275, 281, 282], "dot": [186, 233, 275], "product": [186, 193, 227, 233, 236, 237, 253, 259, 273, 275, 280, 284], "avx512": [186, 233, 275], "vnni": [186, 221, 227, 274, 275], "instruct": [186, 195, 196, 218, 228, 233, 248, 251, 255, 256, 257, 258, 272, 273, 274, 275, 281, 287], "introduc": [186, 194, 195, 196, 224, 232, 275, 278, 279, 281, 285], "solv": [186, 189, 275, 279], "runtim": [186, 189, 193, 194, 195, 197, 214, 217, 221, 224, 227, 233, 235, 238, 243, 244, 274, 278, 279, 284], "wide": [186, 193, 221, 233, 272, 275], "major": [186, 226, 258, 275, 281], "peopl": [186, 275], "emul": [186, 232, 275], "forward": [186, 195, 232, 255, 272, 274, 275, 278, 281, 282], "mimic": [186, 275], "done": [186, 190, 218, 219, 237, 253, 262, 266, 267, 272, 275], "adjust": [186, 244, 275, 281], "fact": [186, 275], "ultim": [186, 275], "therefor": [186, 190, 232, 256, 258, 272, 275, 276, 279, 281], "pain": [186, 275], "brought": [186, 234, 237, 244, 275], "lossi": [186, 275], "met": [186, 191, 224, 275, 282], "respect": [186, 188, 224, 272, 281, 286], "chart": [186, 258, 275, 280, 282], "understand": [186, 259, 275, 282, 285], "welcom": [187, 188, 189, 193, 255, 262, 288], "interest": [188, 193, 255, 282], "foster": 188, "particip": [188, 263], "harass": 188, "experi": [188, 236, 258, 280, 281, 284], "everyon": 188, "regardless": 188, "ag": 188, "bodi": 188, "ethnic": 188, "sex": 188, "characterist": 188, "gender": 188, "ident": [188, 218], "educ": 188, "socio": 188, "econom": 188, "person": [188, 273], "appear": [188, 247, 253, 255], "race": 188, "religion": 188, "sexual": 188, "orient": 188, "behavior": [188, 194, 195, 196, 224, 234, 278, 282, 284, 286], "contribut": [188, 193, 272], "inclus": 188, "Being": 188, "viewpoint": 188, "gracefulli": 188, "empathi": 188, "toward": [188, 218], "member": [188, 194], "unaccept": 188, "imageri": 188, "unwelcom": 188, "troll": 188, "insult": 188, "derogatori": 188, "comment": [188, 195, 215, 231, 232, 278, 283], "polit": 188, "attack": 188, "public": [188, 248, 251], "privat": 188, "publish": [188, 229, 230, 233, 254, 281], "electron": 188, "explicit": 188, "permiss": 188, "inappropri": 188, "profession": 188, "clarifi": 188, "appropri": [188, 212, 281], "fair": 188, "action": [188, 248, 251], "edit": 188, "reject": 188, "commit": [188, 189], "wiki": 188, "ban": 188, "temporarili": 188, "perman": [188, 272], "deem": 188, "threaten": 188, "offens": 188, "harm": 188, "mail": 188, "social": [188, 273], "media": [188, 273], "account": [188, 280, 284], "appoint": 188, "onlin": [188, 280], "event": [188, 282], "abus": 188, "report": [188, 189, 193, 263, 280], "contact": [188, 279, 280], "complaint": 188, "review": [188, 189, 193, 273], "investig": [188, 213, 258], "necessari": [188, 191, 195, 234, 254, 272, 280, 284], "circumst": [188, 274], "oblig": [188, 259], "confidenti": [188, 255], "regard": [188, 277], "incid": 188, "faith": 188, "face": [188, 193, 201, 236, 240, 260, 262, 273, 279, 287], "repercuss": 188, "leadership": 188, "adapt": [188, 195, 215, 235, 244, 273], "faq": [188, 193], "page": [188, 189, 255, 258, 259], "send": [189, 195], "view": [189, 193, 221, 244, 253, 259, 279], "star": 189, "repositori": [189, 248, 251], "button": [189, 227, 247, 253], "fork": [189, 248, 251], "clone": [189, 217, 228, 246, 250, 255, 257, 258, 260, 261], "pc": 189, "git": [189, 217, 223, 228, 255, 257, 258, 260, 261], "branch": 189, "modif": [189, 194, 224, 241, 260], "checkout": 189, "my": 189, "messag": [189, 261, 262, 266, 267, 268, 284], "consist": [189, 190, 213, 261, 281, 284], "cover": [189, 222, 226, 273], "would": [189, 232, 257, 272, 275, 281], "adopt": [189, 236, 272, 273, 281], "certif": [189, 255], "agre": 189, "off": [189, 278], "pr": [189, 214, 231, 248, 251, 279], "At": [189, 195, 235, 259, 263, 284], "approv": 189, "licens": 189, "azur": [189, 193, 273], "devop": 189, "ci": 189, "cloud": [189, 193, 235, 263, 273], "e16": 189, "v5": 189, "scope": [189, 195, 232], "scan": [189, 193], "pylint": 189, "bandit": 189, "copyright": [189, 229], "docstyl": 189, "spellcheck": 189, "dco": 189, "pytest": 189, "No": [189, 213, 223, 232, 261, 262, 273], "failur": [189, 190], "fault": 189, "coverag": 189, "submit": [189, 260, 263, 273], "bug": [189, 193], "intend": 189, "safe": 189, "collabor": [189, 193, 238, 244], "adher": 189, "toolkit": [190, 228, 236, 244, 273, 285], "tracer": 190, "graphmodul": [190, 277], "resolv": [190, 192], "floatfunct": 190, "cat": [190, 222, 239, 266, 267, 268], "relu": [190, 224, 281, 282], "batchnorm": [190, 281], "descript": [190, 195, 196, 214, 261, 265, 281], "10004": [190, 191, 194, 214, 218, 219, 220, 224, 227, 233, 235, 271, 274, 276, 278, 286], "eval": [190, 213, 214, 217, 236, 275, 282], "fail": [190, 214, 222, 262], "conduct": [190, 232, 241, 253, 284, 285], "imper": 190, "lot": [190, 258, 281], "As": [190, 195, 214, 218, 231, 232, 247, 258, 272, 278, 284], "might": [190, 213, 255, 284], "successfulli": [190, 193, 220, 262, 266, 267, 268, 273], "suggest": [190, 213, 280], "traceabl": 190, "proxi": 190, "tutori": [190, 244, 273, 285], "prototyp": 190, "html": [190, 193, 195, 212, 220, 227, 248, 251, 254, 256, 262, 266, 275], "highlight": 190, "untrac": 190, "move": [190, 259, 274, 278, 279], "ssd": [190, 222, 287], "resnet34": [190, 287], "r34": 190, "bboxes_labels_scor": 190, "prob": 190, "45": [190, 230, 287], "max_output": 190, "zip": [190, 262, 266, 267], "squeez": 190, "dbox": 190, "dlabel": 190, "dscore": 190, "decode_singl": 190, "autom": [191, 236, 253, 254, 273, 281], "artifici": 191, "ann": 191, "par": [191, 263], "outperform": 191, "propos": [191, 194, 218, 233, 278, 281], "potenti": [191, 217], "procedur": [191, 272, 284], "lie": [191, 212], "predictor": 191, "shown": [191, 214, 217, 218, 231, 232, 235, 247, 256, 258, 270, 271, 272, 276, 281, 284], "figur": [191, 246, 247, 250, 276], "popul": 191, "inner": 191, "evolutionari": 191, "cycl": 191, "until": [191, 195, 284], "conclud": 191, "count": [191, 215, 278], "yet": [191, 248, 251, 254, 261, 275], "simplest": [191, 212, 239], "launcher": [191, 193, 218, 219, 244, 285], "agent": 191, "nsga2": 191, "supernet": 191, "ofa_mbv3_d234_e346_k357_w1": 191, "mac": [191, 254], "num_ev": 191, "250": [191, 272], "results_csv_path": 191, "search_result": 191, "dataset_path": 191, "ilsvrc2012": 191, "aim": [191, 193, 230, 236, 272, 281, 284, 285], "mobilenetv3": 191, "lt": [191, 215], "wmt": 191, "en": 191, "de": 191, "guidelin": [192, 193], "mainstream": [193, 285], "workflow": [193, 195, 196, 217, 218, 222, 228, 233, 235, 248, 251, 255, 282, 285], "particular": [193, 272, 278], "hardwar": [193, 194, 218, 227, 232, 235, 253, 272, 273, 274], "flex": [193, 228], "amd": [193, 228, 287], "arm": [193, 227, 228, 287], "nvidia": [193, 212, 227, 228, 287], "llama2": 193, "falcon": [193, 230, 272, 281, 287], "gpt": [193, 230, 257, 272, 281, 287], "j": [193, 230, 257, 272, 281, 287], "bloom": [193, 230, 272, 281, 287], "opt": [193, 230, 241, 272, 281, 284, 287], "broad": [193, 227, 242, 285], "diffus": [193, 273], "hub": [193, 221, 225, 244], "hug": [193, 260, 273], "coder": [193, 227, 237, 238, 241, 244, 247, 260, 264, 273], "marketplac": [193, 254, 273], "googl": [193, 213, 233, 273], "amazon": [193, 236, 244], "web": [193, 255, 261, 266, 267, 268, 282], "servic": [193, 253, 260, 273], "softwar": [193, 229, 272, 273, 279], "alibaba": [193, 243, 250, 251, 273], "tencent": [193, 273], "taco": [193, 273], "microsoft": [193, 194, 235], "oliv": [193, 273], "ai": [193, 235, 236, 273, 277, 285], "lightn": [193, 243], "2024": [193, 287], "03": [193, 287], "sota": [193, 273], "autoround": [193, 230], "gaudi2": 193, "pip": [193, 217, 220, 223, 225, 228, 238, 241, 246, 248, 250, 251, 255, 256, 257, 258, 279], "34": [193, 230, 268, 287], "packag": [193, 194, 213, 223, 228, 253, 254, 273, 279, 284], "program": [193, 220, 229, 236, 253], "demonstr": [193, 221, 235, 236, 266, 267, 268, 282], "gauid2": 193, "docker": 193, "gaudi": 193, "stack": 193, "setup": [193, 217, 224, 228, 248, 251, 255, 257, 258, 260, 261, 272], "habana": 193, "habana_visible_devic": 193, "ompi_mca_btl_vader_single_copy_mechan": 193, "cap": 193, "sys_nic": 193, "host": [193, 220, 261, 263, 266, 267, 268], "ipc": 193, "vault": 193, "ubuntu22": 193, "04": [193, 228, 230, 287], "habanalab": 193, "latest": [193, 228, 273, 279], "p": [193, 254, 255, 278], "login": [193, 248, 251, 280], "exec": 193, "container_id": 193, "bash": [193, 258, 282], "optimum": [193, 243, 244, 256, 278], "upgrad": [193, 232], "auto_round": 193, "automodel": 193, "autotoken": [193, 232], "get_dataload": 193, "eleutherai": [193, 230, 257, 281, 287], "neo": [193, 287], "125m": [193, 281], "float_model": 193, "trust_remote_cod": 193, "seqlen": 193, "woq_conf": 193, "quantized_model": [193, 262, 266, 267], "resnet18": [193, 233, 238, 287], "static_quant_conf": 193, "overview": [193, 284], "jupyterlab": [193, 236, 242, 244, 246, 250, 285], "studio": [193, 244, 253, 263, 285], "topic": 193, "fp4": [193, 235, 278], "nf4": [193, 278], "fp8": [193, 235, 273], "innov": [193, 244, 273], "blog": [193, 273], "meta": [193, 230, 273, 287], "llama": [193, 230, 272, 273, 276, 278, 281, 287], "effect": [193, 194, 272, 273], "oct": [193, 273], "2023": [193, 235, 268, 272, 278, 281], "emnlp": [193, 273], "teq": [193, 273, 276, 278], "trainabl": [193, 273, 278], "sep": [193, 273], "descent": [193, 273], "releas": [193, 228, 242, 244, 246, 250, 252, 264, 267, 268, 288], "legal": [193, 288], "secur": [193, 255, 273, 288], "request": [193, 261, 262, 263, 266, 267, 268, 275], "ask": [193, 228], "email": 193, "idea": [193, 255, 272, 281, 284], "discord": 193, "join": [193, 256, 261, 266, 267], "technic": 193, "discuss": 193, "wechat": [193, 273], "img": 193, "bridg": [194, 195, 227], "vanilla": [194, 195, 227], "adaptor_registri": 194, "abcadaptor": 194, "__init__": [194, 213, 214, 215, 231, 284], "framework_specific_info": 194, "tune_cfg": [194, 196, 284], "query_fw_cap": [194, 196], "query_fused_pattern": 194, "he": 194, "besid": [194, 218, 258, 278], "describ": [194, 196, 213, 217, 224, 255, 282], "past": [194, 278], "mainten": 194, "abil": [194, 195, 215, 224, 235, 281], "fragment": 194, "scenario": [194, 211, 218, 232, 272, 278], "granular": [194, 195, 196, 224, 227, 235, 239, 275, 281, 286], "scheme": [194, 195, 196, 214, 224, 244, 278, 284, 286], "semant": [194, 224], "querybackendcap": [194, 195], "tensorflowqueri": 194, "mla": [194, 233, 275], "becom": [194, 222, 272, 278], "explor": [194, 235], "qtype": 194, "onnxrt_qlinearopsadaptor": 194, "data_load": 194, "inspect_tensor": 194, "op_list": [194, 282], "iteration_list": 194, "inspect_typ": 194, "save_to_disk": 194, "quantization_cfg": 194, "set_tensor": 194, "tensor_dict": 194, "input_graph": 194, "diagnosis_help": 194, "fw": 195, "outlin": [195, 196], "extend": [195, 196], "accommod": [195, 196], "incorpor": [195, 196, 219, 272, 284], "give": [195, 253, 284], "diagram": [195, 196, 217, 284], "illustr": [195, 196, 219, 284], "sequencediagram": [195, 196, 263], "autonumb": [195, 196], "query_framework_cap": 195, "opwis": 195, "optypewis": 195, "travers": [195, 196, 278, 284], "\u2776": 195, "\u2777": 195, "\u2778": 195, "\u2779": 195, "\u277a": 195, "\u277b": 195, "previou": [195, 196, 232, 272, 279, 281, 282, 284, 285, 287], "\u277c": 195, "These": [195, 227, 256], "chapter": 195, "node_op": 195, "confirm": 195, "chosen": [195, 212], "conv2d": [195, 196, 217, 222, 224, 258, 281, 282, 284], "int8_conv_config": 195, "optype_wise_": 195, "minmax": [195, 196, 212, 224, 275, 286], "per_channel": [195, 196, 224, 275, 286], "sym": [195, 196, 224, 275, 278, 286], "tuning_cfg_to_fw": 195, "Its": [195, 212, 272], "quantize_config": 195, "op_wise_config": 195, "dispatch": [195, 227, 260, 263], "is_perchannel": 195, "is_asymmetr": 195, "weight_bit": 195, "bf16_op": [195, 277], "convert_bf16": 195, "got": [195, 223, 282], "subsequ": [195, 236, 253], "calib": 195, "larger": [195, 272, 278, 281], "caus": [195, 214, 237, 256, 258, 272, 278], "somewhat": 195, "distort": 195, "line": [195, 213, 220, 227, 236, 241, 242, 261, 282], "explain": [196, 217, 281], "overal": [196, 261, 278, 286], "drive": 196, "section": [196, 213, 217, 218, 219, 253, 256, 259, 272, 274, 278, 286], "uint4": 196, "asym": [196, 224, 278, 286], "independ": 196, "kullback": [196, 218], "leibler": [196, 218], "pytorch_cpu": 196, "1_11_capabl": 196, "cap_s8_1_11": 196, "conv1d": 196, "cap_s8_1_11_conv1d": 196, "per_channel_symmetr": 196, "addition": [196, 220, 272, 284], "per_tensor_symmetr": 196, "One": [196, 213, 215, 220, 227, 258, 272, 273, 284], "nativ": 196, "simul": 196, "observ": [196, 278, 280, 282, 284], "with_arg": 196, "qscheme": 196, "torch_dtyp": 196, "quant_min": 196, "quant_max": 196, "linux": [211, 223, 228, 247, 253], "x86_64": 211, "aarch64": 211, "prove": [212, 278, 281], "benefici": 212, "uniform": [212, 278], "\u03b2": 212, "\u03b1": 212, "preserv": [212, 235, 272, 278], "primari": [212, 284], "focu": [212, 284], "essenti": [212, 223], "percentil": 212, "remaind": 212, "enhanc": [212, 236, 272, 273, 277], "resolut": 212, "extrem": 212, "retain": 212, "noteworthi": 212, "vanhouck": 212, "vincent": 212, "andrew": 212, "senior": 212, "mark": 212, "z": [212, 213, 218, 281], "mao": 212, "2011": 212, "szymon": 212, "migacz": 212, "tensorrt": [212, 233, 275], "2017": 212, "mckinstri": 212, "jeffrei": 212, "l": [212, 218, 282, 284], "et": [212, 235, 278, 281], "al": [212, 235, 278, 281], "discov": [212, 282], "embed": [212, 272], "preprint": [212, 235, 272, 278, 281], "1809": 212, "04191": 212, "2018": 212, "mostli": 213, "summar": [213, 218], "conflict": [213, 223], "overli": 213, "argu": 213, "decis": [213, 231], "prioriti": [213, 264], "pep": 213, "o": [213, 228, 238, 256], "sub_modul": 213, "namespac": 213, "pollut": 213, "subprocess": [213, 214], "popen": 213, "statement": 213, "pipe": 213, "long_str": 213, "extran": 213, "__version__": 213, "pager": 213, "getenv": 213, "readabl": 213, "seem": 213, "worth": [213, 272], "4f": 213, "65421": 213, "sentenc": 213, "register_config": 213, "framework_nam": 213, "algo_nam": 213, "eval_result": 213, "declar": [213, 254], "complex": [213, 232, 233, 272], "typealia": 213, "_lossandgradi": 213, "complextfmap": 213, "xx_func": 213, "ordereddict": 213, "pylanc": 213, "cheeseshopaddress": 213, "chees": 213, "shop": 213, "outofcheeseerror": 213, "crbug": 213, "192795": 213, "cpufreq": [213, 239], "deprec": [213, 248, 251, 279, 283], "facilit": [213, 236], "__all__": 213, "get_all_config_set_from_config_registri": 213, "composableconfig": 213, "fwk_name": 213, "algorithm_entri": 213, "gptq": [213, 230, 276, 278], "rtn": [213, 276, 278], "snippet": [213, 227], "register_algo": 213, "rtn_algo_entri": 213, "smooth_quant_entri": 213, "vscode": [213, 252, 254], "settings_recommend": 213, "often": [214, 218, 258, 271, 272], "encount": 214, "consum": 214, "previous": 214, "lack": [214, 223], "faster": [214, 216, 222, 273, 284, 287], "treat": 214, "Of": 214, "evenli": 214, "divid": [214, 263, 281, 284], "discard": 214, "throw": 214, "awai": 214, "draw": [214, 280, 284], "pin": [214, 246, 250], "reshuffl": 214, "manner": [214, 218, 234], "newdataload": 214, "input_data": 214, "customis": [214, 215, 231], "ensp": [215, 283], "imagerecord": [215, 220, 286], "image_nam": 215, "cocorecord": 215, "gt": [215, 281, 283], "int64": 215, "style_transf": 215, "content": [215, 261, 262, 266, 267, 268], "tfrecorddataset": 215, "post_training_static_qu": [215, 232, 274, 284], "labelbal": 215, "300": [215, 272], "16": [215, 228, 266, 278, 287], "helloworld": [215, 233, 283], "aid": 216, "deploy": [216, 236, 253, 273, 276, 281], "infrastructur": 216, "gap": [217, 234], "diagnos": 217, "gui": [217, 227, 258, 272], "termin": [217, 246, 247, 250, 256], "repeat": [217, 284], "durat": [217, 262, 266, 267, 280], "cd": [217, 220, 228, 255, 257, 258, 260, 261, 266, 267, 268], "ilsvr2012": 217, "wget": [217, 223, 225, 255, 258], "caff": 217, "berkeleyvis": 217, "caffe_ilsvrc12": 217, "xvzf": 217, "image_recognit": [217, 258, 282], "resnet50_torchvis": 217, "ptq_static": [217, 257], "model_path": [217, 266], "resnet50_v1": [217, 220, 232], "dataset_loc": [217, 258, 266, 282], "label_path": 217, "present": [217, 261, 273, 281], "quantiti": 217, "big": [217, 278], "vec": 217, "mu": 217, "frac": [217, 235, 281], "sigma": 217, "sqrt": 217, "var": 217, "happen": 217, "dispers": [217, 256], "trust": [217, 255], "v0": [217, 230, 258, 281, 282], "cg": [217, 258, 282], "conv0": [217, 258, 282], "expens": [218, 232, 284], "mobil": [218, 232, 287], "produc": 218, "logit": 218, "softmax": 218, "kd": 218, "d": [218, 226, 254, 256, 262, 272], "patient": 218, "compact": [218, 232, 239, 272], "agnost": 218, "convolut": [218, 273], "ia": 218, "attach": [218, 232, 281], "shallow": 218, "depth": [218, 277], "deepest": 218, "deeper": 218, "paper": [218, 272, 278, 281], "Will": [218, 227], "10006": [218, 219], "student_output": [218, 219], "student_loss": [218, 219], "training_func_for_nc": [218, 219], "distil_loss_conf": 218, "accordingli": [218, 244, 281], "promis": [219, 232, 272], "huge": [219, 258, 272, 276], "heavi": 219, "light": 219, "booster": 219, "degrad": [219, 272, 284], "retrain": 219, "novel": [219, 236, 247, 253], "place": [219, 228, 266, 272, 282, 284], "comb": 219, "distillation_criterion": [219, 232, 271], "q_conf": 219, "horovod": 220, "builtin": 220, "enable_eager_execut": 220, "yaml_file_path": 220, "pre_process": 220, "simpli": [220, 234, 236, 238, 241, 253, 261], "evaluation_result": 220, "evaluation_time_cost": 220, "partit": [220, 272], "distributedsampl": 220, "train_sampl": 220, "train_dataset": [220, 275], "num_replica": 220, "rank": 220, "train_load": 220, "train_kwarg": 220, "adadelta": 220, "distributedoptim": 220, "named_paramet": 220, "broadcast_paramet": 220, "state_dict": [220, 278, 282], "root_rank": 220, "broadcast_optimizer_st": 220, "set_epoch": 220, "batch_idx": 220, "zero_grad": [220, 232, 272], "nll_loss": 220, "log_interv": 220, "0f": 220, "tloss": 220, "6f": 220, "dry_run": 220, "break": [220, 232], "test_func": 220, "num_of_process": 220, "002": 220, "ssh": [220, 253], "prompt": 220, "readm": [220, 266], "exactli": [220, 237], "recognit": [220, 222, 272, 282], "resizecropimagenet": [220, 283], "realiz": [220, 270, 277, 280], "tow": 220, "node1": [220, 266, 267], "node2": [220, 266, 267], "TO": [220, 238, 258], "your_node1_nam": 220, "your_node2_nam": 220, "resnet50_fp32_pretrained_model": 220, "nc_resnet50_v1": 220, "resnet": [220, 287], "varieti": [221, 274, 284], "10k": [221, 225], "2x": [221, 227], "exchang": 222, "hope": 222, "inc_model": [222, 234], "fp32_onnx_config": 222, "verifi": [222, 230], "vgg16": [222, 287], "mobilenet": [222, 280, 287], "rcnn": 222, "torchscript": [222, 276, 281], "unsupport": [222, 232, 272], "add_relu": 222, "conv1d_relu": 222, "conv2d_relu": 222, "group_norm": 222, "hardswish": 222, "instance_norm": 222, "layer_norm": 222, "leaky_relu": 222, "sigmoid": 222, "toolchain": [223, 273], "bare": 223, "metal": 223, "sudo": [223, 239], "apt": [223, 228, 239, 247], "python3": 223, "dev": [223, 246, 250], "distutil": 223, "libgl1": 223, "mesa": 223, "glx": 223, "libglib2": 223, "ln": 223, "sf": 223, "usr": 223, "incompat": 223, "88": [223, 280, 287], "80": [223, 230, 276, 282, 287], "pyobject": 223, "reinstal": 223, "importerror": 223, "libgl": 223, "share": [223, 224, 278, 281, 284], "yum": [223, 228], "opencv": [223, 228, 247], "conda": [223, 228, 239, 247, 266, 267, 268, 279], "13": [223, 228, 230, 255, 279, 281, 287], "pend": [223, 262], "sqlalchemi": 223, "27": [223, 287], "alemb": 223, "forg": [223, 228], "quick": [224, 233, 272, 285, 286], "friendli": [224, 232, 235, 273, 281, 285, 286], "dive": [224, 285], "unless": 224, "syntax": 224, "go": [224, 248, 251, 259, 274, 278, 283], "15": [224, 228, 267], "up1": 224, "up2": 224, "valid_mixed_precis": 224, "concatv2": 224, "maxpool": 224, "avgpool": 224, "depthwiseconv2dn": 224, "relu6": 224, "biasadd": 224, "addn": 224, "addv2": 224, "grappler": 224, "grappler_optim": 224, "constfold": 224, "arithmet": 224, "debug_stripp": 224, "storag": [225, 231, 255, 258, 278, 281], "googleapi": [225, 255, 258], "v1_6": [225, 255, 258], "mobilenet_v1_1": [225, 255, 266], "0_224_frozen": [225, 255, 266], "concept": [226, 280, 285], "rather": [226, 278], "custom_metr": 226, "420": 227, "geomean": 227, "upload": [227, 248, 251], "click": [227, 236, 237, 244, 247, 253, 258, 273, 282], "qintegerop": [227, 275], "plan": 227, "oneapi": [228, 273, 285], "analyt": [228, 273, 285], "success": [228, 255], "11": [228, 230, 231, 233, 255, 281, 284, 287], "frequent": 228, "pypi": [228, 248, 251], "nightli": 228, "headless": [228, 247], "fastai": 228, "esri": 228, "consolid": 228, "eas": [228, 238, 273], "along": [228, 272, 278], "streamlin": [228, 260, 273], "scienc": 228, "websit": 228, "anaconda": [228, 260, 261], "suit": [228, 254, 282], "formerli": 228, "skylak": 228, "cascad": 228, "lake": [228, 233, 273], "cooper": [228, 233, 273], "ic": [228, 273], "sapphir": [228, 230], "rapid": [228, 230], "hbm": 228, "arctic": 228, "sound": 228, "pont": 228, "vecchio": 228, "cento": [228, 287], "ubuntu": 228, "22": [228, 230, 287], "maco": 228, "ventura": 228, "fortensorflow": 228, "forpytorch": 228, "17": [228, 266], "tf_enable_onednn_opt": 228, "newer": 228, "apach": 229, "subject": 229, "accompani": [229, 284], "wish": 229, "bibtex": 229, "misc": 229, "author": 229, "feng": 229, "tian": 229, "hanwen": 229, "haihao": [229, 272], "shen": [229, 272], "suyu": 229, "chen": 229, "howpublish": 229, "year": 229, "logo": 229, "atom": 229, "phi": 229, "pentium": 229, "vtune": 229, "corpor": 229, "subsidiari": 229, "brand": 229, "claim": 229, "woq": [230, 235], "codenam": [230, 233], "quickli": [230, 284, 285], "6b": [230, 257, 281, 287], "facebook": [230, 259, 281, 287], "3b": [230, 281], "30b": [230, 281, 287], "7b": [230, 281, 287], "hf": [230, 281, 287], "13b": [230, 281, 287], "70b": [230, 287], "tiiuae": [230, 281, 287], "40b": 230, "baichuan": 230, "chat": [230, 281, 287], "baichuan2": 230, "bigscienc": [230, 281, 287], "1b7": [230, 281], "databrick": [230, 281, 287], "dolli": [230, 272, 281, 287], "12b": 230, "neox": [230, 287], "20b": [230, 287], "mistralai": 230, "mistral": 230, "thudm": 230, "chatglm2": 230, "wip": 230, "chatglm3": 230, "come": [230, 235, 284], "soon": 230, "lambada_openai": [230, 287], "67": [230, 287], "57": [230, 281, 287], "68": [230, 283, 287], "23": [230, 287], "0098": 230, "0000": [230, 234], "84": [230, 281, 287], "0040": 230, "71": [230, 287], "51": [230, 287], "70": [230, 287], "89": [230, 281, 287], "9913": 230, "53": [230, 287], "0003": [230, 287], "76": [230, 287], "0035": 230, "96": [230, 287], "0043": 230, "59": [230, 281, 287], "9988": 230, "24": [230, 272, 284, 287], "9936": 230, "9963": [230, 287], "46": [230, 287], "47": [230, 287], "99": [230, 287], "0356": 230, "38": [230, 287], "0009": 230, "19": [230, 286, 287], "9968": 230, "35": [230, 272, 287], "9961": [230, 287], "31": [230, 287], "33": [230, 235, 287], "79": [230, 282, 287], "0070": 230, "43": [230, 287], "0018": 230, "72": [230, 281, 287], "25": [230, 272, 287], "9989": 230, "9949": 230, "54": [230, 286, 287], "9940": 230, "58": [230, 267, 287], "0033": 230, "0117": 230, "49": [230, 287], "82": [230, 287], "0046": [230, 287], "0087": 230, "77": [230, 287], "9932": [230, 287], "75": [230, 272, 287], "9997": 230, "0086": [230, 281], "55": [230, 268, 287], "9991": 230, "09": [230, 287], "0057": 230, "97": [230, 232, 287], "0041": 230, "73": [230, 287], "92": [230, 287], "0005": 230, "9942": [230, 287], "9987": 230, "0030": [230, 287], "61": [230, 287], "9962": [230, 287], "9992": 230, "52": [230, 287], "9914": 230, "0023": 230, "9986": 230, "9919": [230, 287], "9977": 230, "94": [230, 283, 287], "0093": 230, "78": [230, 283, 287], "0203": 230, "74": [230, 287], "44": [230, 287], "0237": 230, "0013": 230, "00": [230, 287], "0044": 230, "popularli": 231, "industri": [231, 273], "label_map": 231, "ap": 231, "curv": 231, "turn": [231, 247, 276], "target_boxes_num": 231, "str_label": 231, "int_label": 231, "inturn": 231, "cocomap": 231, "vocmap": 231, "categor": 231, "multiclass": 231, "multilabel": 231, "newmetr": 231, "reset": 231, "reflect": [231, 283], "new_metr": 231, "deliv": [232, 273, 279], "conveni": [232, 260], "kind": 232, "resort": 232, "inject": 232, "automodelforsequenceclassif": 232, "worker": [232, 263, 266, 267, 268, 275], "ping_memori": [232, 275], "formul": 232, "effort": 232, "written": 232, "onnxrt_integ": [232, 286], "onnxrt_qlinear": [232, 286], "image_tensor": [232, 286], "post_training_dynamic_qu": [232, 274, 284], "1000": [232, 262, 286], "2000": 232, "sampling_s": [232, 286], "model_wis": [232, 286], "op_dict": 232, "op_wis": [232, 282, 286], "sigopt_api_token": [232, 280, 284], "sigopt_project_id": [232, 280, 284], "sigopt_experiment_nam": [232, 280, 284], "performance_onli": 232, "demo": 232, "600": [232, 287], "training_arg": 232, "trainer": [232, 244], "similar": [232, 257, 274, 281, 284, 286], "briefli": [232, 281], "maxim": [232, 272, 284], "pruning_func": 232, "num_train_epoch": [232, 272], "train_dataload": [232, 272, 275], "n_gpu": 232, "gradient_accumulation_step": 232, "clip_grad_norm_": 232, "max_grad_norm": 232, "start_epoch": [232, 274, 286], "end_epoch": [232, 274, 286], "newli": [232, 272], "on_after_optimizer_step": [232, 272], "layer3": [232, 272], "layer2": [232, 272, 275], "lr_schedul": [232, 272], "weight_decai": [232, 286], "0004": 232, "nesterov": [232, 286], "randomresizedcrop": [232, 283], "totensor": [232, 283], "485": 232, "456": 232, "406": [232, 287], "nepoch": 232, "cnt": 232, "loss_sum": 232, "iter_bar": 232, "tqdm": 232, "desc": 232, "teacher_logit": 232, "train_fun": 232, "training_func": 232, "recent": [232, 233], "growth": [232, 233, 235, 272], "significantli": [232, 233, 256, 258, 272, 284], "bandwidth": [232, 233, 278], "output_model": [232, 256, 258, 282], "exit_polici": [232, 286], "determinist": 232, "arbitrari": [232, 271], "meaning": [232, 271], "reli": [232, 281], "prune_conf": 232, "quantization_aware_training_conf": 232, "aforement": 232, "inset": 232, "p_conf": [232, 271], "ssd_mobilenet_v1": 232, "benchmarkconf": 232, "bfloat16": [233, 236, 244, 277], "ieee": [233, 281], "half": [233, 244], "sixteen": 233, "launch": [233, 254, 259], "boost": [233, 237, 253, 272, 273], "x86": 233, "vcvtne2ps2bf16": 233, "vcvtneps2bf16": 233, "vdpbf16p": 233, "fbgemm": [233, 275], "cpuexecutionprovid": [233, 275], "tensorrtexecutionprovid": [233, 275], "cudaexecutionprovid": [233, 275], "cuda": [233, 236, 238, 272, 275], "dnnlexecutionprovid": [233, 275], "avx512_bf16": 233, "plu": 233, "persist": 234, "tf2": 234, "h5": 234, "hybridblock": 234, "saved_result": [234, 257, 278], "breakthrough": 235, "emerg": [235, 281], "analysi": [235, 236, 253, 272, 280], "chatbot": [235, 273], "fuel": 235, "nevertheless": 235, "challeng": [235, 276], "explos": 235, "pose": [235, 276], "obstacl": 235, "practic": 235, "mx": 235, "promot": 235, "msfp": 235, "mxfp8": 235, "e5m2": 235, "e8m0": 235, "e4m3": 235, "mxfp6": 235, "fp6": 235, "e3m2": 235, "e2m3": 235, "mxfp4": 235, "e2m1": [235, 278], "mxint8": 235, "occupi": 235, "incur": 235, "energi": 235, "silicon": 235, "seamlessli": [235, 260, 272, 284], "meticul": 235, "craft": 235, "empow": 235, "sacrif": [235, 273], "distinct": 235, "fall": 235, "consumpt": [235, 281], "amax": 235, "blocksiz": 235, "expon": 235, "floor": 235, "log2": 235, "10005": [235, 276], "mxquantconfig": 235, "w_dtype": 235, "user_model": 235, "darvish": 235, "rouhani": 235, "bita": 235, "narrow": 235, "inferenc": 235, "2020": 235, "10271": 235, "10281": 235, "ocp": 235, "2310": 235, "10537": 235, "simplifi": [236, 247, 253, 272, 273], "switch": [236, 282], "acquir": 236, "heurist": [236, 253], "great": 236, "amp": [236, 243, 262, 278], "autocast": 236, "jit": [236, 238, 243, 281, 282], "simultan": [236, 260, 271, 274], "my_model": 236, "no_grad": 236, "memory_format": 236, "freez": [236, 272], "112": 236, "rand": [236, 281], "plugin": [236, 254], "aw": [236, 244, 263, 273, 287], "sagemak": [236, 244], "inlin": [236, 241, 244], "neural_cod": [236, 238, 240, 241, 242, 244], "bench": 236, "superbench": 236, "enjoi": [237, 241, 244], "rebuild": [237, 246, 250], "reload": [237, 254, 256, 259], "modern": [238, 278], "democrat": [238, 273], "programm": [238, 244, 253], "nano_bf16_channels_last": 238, "nano_bf16_ipex_channels_last": 238, "nano_bf16_ipex": 238, "nano_bf16": 238, "nano_fp32_channels_last": 238, "nano_fp32_ipex_channels_last": 238, "nano_fp32_ipex": 238, "nano_gpu_to_cpu": 238, "nano_int8": 238, "nano_jit_bf16_channels_last": 238, "nano_jit_bf16_ipex_channels_last": 238, "nano_jit_bf16_ipex": 238, "nano_jit_bf16": 238, "nano_jit_fp32_channels_last": 238, "nano_jit_fp32_ipex_channels_last": 238, "nano_jit_fp32_ipex": 238, "nano_jit_fp32": 238, "nano_onnxruntime_fp32": 238, "nano_onnxruntime_int8_qlinear": 238, "openvino": 238, "nano_openvino_fp32": 238, "nano_openvino_int8": 238, "bc": [239, 247], "conda_prefix": 239, "echo": 239, "libjemalloc": 239, "libiomp5": 239, "home": 239, "lib": 239, "ld_preload": 239, "malloc_conf": 239, "oversize_threshold": 239, "background_thread": 239, "metadata_thp": 239, "dirty_decay_m": 239, "9000000000": 239, "muzzy_decay_m": 239, "kmp_affin": 239, "kmp_blocktim": 239, "dnnl_primitive_cache_capac": 239, "governor": 239, "scaling_governor": 239, "powersav": 239, "tee": 239, "pytorch_jit_script": [240, 243], "pytorch_channels_last": [240, 243], "run_bench": 240, "patch": [240, 253], "patch_path": 240, "your_patch_path": 240, "sweep": 240, "sweep_object": 240, "bench_config": 240, "bench_featur": 240, "sai": 241, "run_glu": [241, 242, 264, 267, 268], "requisit": 241, "task_nam": [241, 242, 264, 267, 268], "do_ev": [241, 242, 257, 264, 267, 268], "remain": 241, "itself": [241, 272], "run_glue_optim": 241, "static_ipex": 241, "stock": [242, 281], "auto_qu": 242, "v4": [242, 264, 267, 268, 287], "albert": [242, 287], "sst2": 242, "alexnet": [242, 287], "pytorch_amp": 243, "optimize_for_infer": 243, "pytorch_jit_trac": 243, "pytorch_jit_script_ofi": 243, "pytorch_jit_trace_ofi": 243, "torchdynamo": 243, "pytorch_torchdynamo_jit_script": 243, "pytorch_torchdynamo_jit_trac": 243, "pytorch_torchdynamo_jit_script_ofi": 243, "pytorch_torchdynamo_jit_trace_ofi": 243, "pytorch_inc_bf16": 243, "pytorch_inc_static_quant_fx": 243, "pytorch_inc_static_quant_ipex": 243, "pytorch_inc_static_quant_ipex_xpu": 243, "pytorch_inc_dynamic_qu": 243, "pytorch_ipex_fp32": 243, "pytorch_ipex_bf16": 243, "pytorch_ipex_int8_static_qu": 243, "pytorch_ipex_int8_dynamic_qu": 243, "blade": 243, "disc": 243, "pytorch_aliblad": 243, "pytorch_lightning_bf16_cpu": 243, "tensorflow_amp": 243, "keras_amp": 243, "tensorflow_inc": 243, "keras_inc": 243, "onnx_inc_static_quant_qlinear": 243, "onnx_inc_static_quant_qdq": 243, "onnx_inc_dynamic_qu": 243, "pytorch_inc_huggingface_optimum_stat": 243, "pytorch_inc_huggingface_optimum_dynam": 243, "intel_extension_for_transform": 243, "bigdl": [243, 244], "nano": [243, 244], "nano_": 243, "inc_auto": 243, "delight": 244, "announc": 244, "v": [244, 253, 272, 284, 286], "500": [244, 262], "jupyt": [244, 246, 247, 250], "isa": 244, "delta": 244, "acc_delta": 244, "int8_acc": 244, "fp32_acc": 244, "ext": [246, 248, 250, 251, 252], "lab": [246, 247, 248, 250, 251], "nodej": [246, 250], "jlpm": [246, 250], "yarn": [246, 250], "npm": [246, 247, 250], "lieu": [246, 250], "labextens": [246, 247, 250], "typescript": [246, 250], "watch": [246, 250, 259], "immedi": [246, 250, 272], "refresh": [246, 250], "browser": [246, 250, 255, 259], "wait": [246, 250, 253, 263], "rebuilt": [246, 250], "easier": [246, 250, 253, 255, 273], "symlink": [246, 250], "down": 247, "finish": [247, 263], "enter": [247, 253, 261], "leav": 247, "blank": 247, "cell": 247, "gain": [247, 271, 273], "mkl": 247, "jemalloc": 247, "pip3": 247, "pyproject": [248, 251], "toml": [248, 251], "twine": [248, 251], "whl": [248, 251], "dist": [248, 251], "sdist": [248, 251], "bdist_wheel": [248, 251], "frontend": [248, 251, 261, 268], "cut": [248, 251], "admin_github_token": [248, 251], "pypi_token": [248, 251], "npm_token": [248, 251], "secret": [248, 251], "panel": [248, 251, 253], "draft": [248, 251], "changelog": [248, 251, 252], "pkg": [248, 251], "bot": [248, 251], "pick": [248, 251, 254], "feedstock": [248, 251], "hatch": 251, "notabl": 252, "daili": 253, "advantag": [253, 272, 274, 284], "remot": 253, "server": [253, 255, 258, 261, 266, 267, 268], "re": [253, 259, 278], "market": 253, "uninstal": 253, "fill": [253, 280, 283, 284], "upper": 253, "sidebar": 253, "hover": 253, "track": [253, 280], "argpars": 253, "pop": [253, 263], "diff": 253, "manifest": 254, "palett": 254, "src": 254, "registercommand": 254, "amodio": 254, "tsl": 254, "matcher": 254, "dbaeumer": 254, "eslint": [254, 259], "press": 254, "f5": 254, "ctrl": 254, "hello": 254, "world": 254, "breakpoint": 254, "consol": [254, 259], "relaunch": 254, "toolbar": 254, "node_modul": 254, "viewlet": 254, "dropdown": 254, "runner": [254, 259], "startup": 254, "bundl": 254, "neural_insight": [255, 257, 258], "tl": 255, "ui": 255, "12": [255, 287], "5000": 255, "338174d13706855fc6924cec7b3a8ae8": 255, "listen": 255, "port": [255, 262], "firewal": 255, "8080": 255, "cert": 255, "path_to_cert": 255, "crt": 255, "path_to_private_kei": 255, "encrypt": 255, "insecur": 255, "expos": 255, "forfeit": 255, "client": [255, 261, 268], "extern": 255, "threat": 255, "diagnost": 255, "skill": 255, "feel": [255, 259], "layoutlmv3": [256, 287], "seqev": 256, "sentencepiec": 256, "timm": 256, "fvcore": 256, "pillow": 256, "einop": 256, "textdist": 256, "setuptool": 256, "cli": 256, "hypjudi": 256, "finetun": [256, 272, 278], "funsd": [256, 287], "calib_dataset": 256, "incdataset": 256, "eval_dataset": 256, "poor": [256, 282], "9049": 256, "2989": 256, "66": [256, 287], "9631": 256, "glob": 256, "panda": 256, "pd": 256, "set_opt": 256, "max_row": 256, "max_column": 256, "getmtim": 256, "revers": 256, "activations_t": 256, "weights_tabl": [256, 257], "read_csv": 256, "nweight": 256, "descend": 256, "sorted_data": 256, "sort_valu": 256, "ascend": 256, "evid": 256, "tip": 256, "8981": 256, "7502": 256, "run_clm": 257, "dataset_nam": 257, "wikitext": [257, 287], "dataset_config_nam": 257, "do_train": 257, "inspect_sav": 257, "inspect_result": 257, "quan": 257, "model_summari": 257, "incept": [258, 287], "v3": [258, 287], "inception_v3": [258, 282], "inceptionv3_fp32_pretrained_model": [258, 282], "prepare_dataset": 258, "sh": [258, 282], "raw_dir": 258, "img_raw": 258, "delet": [258, 272], "run_tun": 258, "nc_inception_v3": 258, "decreas": [258, 272], "highest": [258, 264, 284], "satisfactori": 258, "webpag": 258, "spike": 258, "bottom": 258, "concentr": 258, "But": 258, "bigger": 258, "bootstrap": 259, "localhost": [259, 261, 266, 267], "3000": 259, "lint": 259, "interact": [259, 280], "correctli": 259, "hash": [259, 262], "readi": [259, 272], "aren": 259, "transit": 259, "webpack": 259, "babel": 259, "tweak": 259, "ever": 259, "curat": 259, "suitabl": 259, "middl": [259, 281], "shouldn": 259, "howev": [259, 272, 278, 281], "wouldn": 259, "couldn": 259, "io": 259, "troubleshoot": 259, "rest": [260, 261, 266, 267, 268], "grpc": [260, 261, 265, 266, 267, 269], "queue": 260, "elimin": 260, "mpi": [260, 261, 284], "neural_solut": [260, 261, 266, 267, 268], "task_monitor_port": [261, 266, 267, 268], "22222": [261, 266, 267, 268], "result_monitor_port": [261, 266, 267, 268], "33333": [261, 266, 267, 268], "restful_api_port": [261, 266, 267, 268], "hostfil": [261, 263, 266, 267, 268], "grpc_api_port": [261, 266, 267, 268], "api_typ": [261, 266, 267, 268], "conda_env": [261, 266, 267, 268], "upload_path": [261, 266, 267, 268], "8000": [261, 266, 267, 268], "monitor": [261, 266, 267, 268], "3333": [261, 266, 267, 268], "2222": [261, 266, 267, 268], "ns_workspac": [261, 266, 267, 268], "hf_model": [261, 265, 267, 268], "curl": [261, 262, 266, 267], "task_id": [261, 266, 267, 268], "usernam": 261, "db": [261, 263], "serve_log": [261, 266, 267, 268], "frontend_grpc": 261, "task_log": 261, "task_bdf0bd1b2cc14bc19bce12d4f9b333c7": 261, "task_workspac": 261, "bdf0bd1b2cc14bc19bce12d4f9b333c7": 261, "aliv": 261, "properli": 261, "commonli": [261, 272], "hostnam": 261, "breakdown": 261, "ip": 261, "hous": 261, "host1": [261, 266, 267], "host2": [261, 266, 267], "query_id": 261, "oaa": 262, "host_ip": 262, "task_request": [262, 266, 267, 268], "tuning_info": [262, 266], "optimization_result": [262, 266], "result_path": [262, 266, 267], "closur": 262, "404": [262, 272, 287], "health": 262, "healthi": 262, "400": 262, "alloc": 263, "incom": 263, "taskmonitor": 263, "cluster": [263, 266, 267, 284], "tasklaunch": 263, "resultmonitor": 263, "receiv": [263, 280], "p1": 263, "notif": 263, "p2": 263, "p3": 263, "mpirun": [263, 284], "perf": 263, "p4": 263, "four": [263, 282, 287], "classdiagram": 263, "taskdb": 263, "get_statu": 263, "update_statu": 263, "task_collect": 263, "append_task": 263, "get_all_pending_task": 263, "update_task_statu": 263, "task_db": 263, "wait_new_task": 263, "schedule_task": 263, "dispatch_task": 263, "launch_task": 263, "query_task_statu": 263, "node_list": 263, "reserve_resourc": 263, "get_node_statu": 263, "pool": 263, "gcp": [263, 273], "script_url": [264, 266, 267, 268], "archiv": 264, "tf_example1": [265, 266, 267], "hf_models_grpc": [265, 268], "00173": 266, "01024": 266, "task_request_distribut": 266, "custom_models_optim": 266, "7602cd63d4c849e7a686a8165a77f69d": [266, 267], "151": 266, "8617": 266, "8213": [266, 287], "number_of_socket": [266, 267], "number_of_thread": [266, 267], "cdf419910f9b4d2a8320d0e420ac1d0a": 267, "optimized_result": 267, "3162": 267, "6488": [267, 287], "06": [268, 286, 287], "d3e10a49326449fb9d0d62f2bfc1cb43": 268, "fastapi": 269, "multi_object": 270, "benefit": 271, "instanti": 271, "neuron": 272, "grown": 272, "unpreced": 272, "increasingli": 272, "crucial": 272, "stand": [272, 284], "consecut": 272, "salient": [272, 278], "shrink": 272, "influenc": 272, "head": 272, "mechan": [272, 280, 285], "contextu": 272, "scene": 272, "haven": 272, "color": [272, 276], "lowest": [272, 284], "formula": [272, 281], "interv": 272, "emsp": 272, "downstream": 272, "prone": 272, "co": 272, "discourag": 272, "penal": 272, "parameter": 272, "coeffici": 272, "sparsegpt": 272, "lightweight": 272, "rearrang": [272, 278], "perceptron": 272, "mlp": 272, "valuabl": [272, 282], "basi": 272, "mha": 272, "billion": 272, "mpt": [272, 281, 287], "lm": 272, "lamini": [272, 281], "mention": [272, 278], "tend": 272, "exemplifi": 272, "complement": 272, "fortieth": 272, "grain": [272, 273, 284], "pruner2": 272, "prepare_prun": 272, "retrain_fre": 272, "few": [272, 273, 281, 284], "lm_head": [272, 278], "yourself": 272, "uncertain": 272, "parse_auto_slim_config": 272, "auto_config": 272, "ffn2_sparsiti": 272, "mha_spars": 272, "quit": 272, "carri": 272, "pruning_pattern": 272, "pruning_start": 272, "pruning_end": 272, "sparse_gpt": 272, "embed_out": 272, "card": 272, "hesit": 272, "causal": 272, "clm": 272, "sst": [272, 287], "63": [272, 287], "flan": 272, "t5": 272, "english": 272, "romanian": 272, "381": 272, "yolov5": 272, "2x1": [272, 287], "801": 272, "7895": 272, "reduct": [272, 276, 286], "xgboost": 272, "namhoon": 272, "lee": 272, "thalaiyasingam": 272, "ajanthan": 272, "philip": 272, "torr": 272, "confer": [272, 281], "2019": 272, "zafrir": 272, "ofir": 272, "ariel": 272, "larei": 272, "boudoukh": 272, "mosh": 272, "wasserblat": 272, "2111": 272, "05754": 272, "2021": 272, "kwon": 272, "kim": 272, "mahonei": 272, "hassoun": 272, "keutzer": 272, "gholami": 272, "pp": 272, "24101": 272, "24116": 272, "frantar": [272, 278], "alistarh": 272, "massiv": 272, "2301": 272, "00774": 272, "apr": 273, "medium": 273, "aug": 273, "juli": 273, "onnxcommunitymeetup2023": 273, "june": 273, "msft": 273, "netflix": 273, "mlperf": [273, 287], "5x": 273, "\u96c6\u6210\u82f1\u7279\u5c14": 273, "\u817e\u8baf\u4e91taco": 273, "kit\u4e3aai\u5e94\u7528\u5e26\u6765\u9ad8\u6548\u5f02\u6784\u52a0\u901f\u670d\u52a1": 273, "mar": 273, "heterogen": 273, "jan": 273, "busi": 273, "amx": 273, "journei": 273, "dec": 273, "mleffici": 273, "deepen": 273, "foundat": 273, "intellig": 273, "vmware": 273, "applianc": 273, "bitnami": 273, "nov": 273, "neurip": 273, "quala": 273, "minilm": [273, 287], "plug": 273, "twitter": 273, "linkedin": 273, "zone": 273, "land": 273, "pat": 273, "keynot": 273, "intelon": 273, "chines": 273, "purif": 273, "jun": 273, "partner": 273, "feb": 273, "joint": 273, "bilibili": 273, "gestalt": 273, "youtub": 273, "doubl": 273, "3d": [273, 281], "reconstruct": 273, "abound": 273, "lpot": [273, 279], "nextplatform": 273, "cern": 273, "gan": 273, "3dgan": 273, "iml": 273, "workshop": 273, "asplo": 273, "18": [273, 287], "highli": [273, 278], "intelcaff": 273, "aris": 274, "henc": 274, "onnxrt_qoper": 274, "quant_aware_train": 274, "use_bf16": 274, "weight_compress": [274, 286], "initial_spars": [274, 286], "prune_typ": [274, 286], "basic_magnitud": [274, 286], "update_frequ": 274, "prune_domain": 274, "tile_pattern_1x1": 274, "neither": 275, "nor": 275, "val_load": 275, "avg": 275, "themselv": 275, "dmlexecutionprovid": 275, "meanwhil": 276, "substanti": 276, "greatli": [276, 278], "even": [276, 278, 281], "constrain": 276, "grei": 276, "blue": 276, "rectangl": 276, "subgraph": [276, 284], "w8a8": [276, 278], "awq": [276, 278], "load_empty_model": 276, "rtn_arg": [276, 278], "lambda": 276, "ouput_dir": 276, "fp32_model_path": 276, "int8_model_path": 276, "ON": 277, "forc": 277, "postposttrainingquantconfig": 277, "datatyp": [277, 284, 287], "cast": [277, 283], "bf16convert": 277, "bf16wrapper": 277, "retrac": 277, "preval": 278, "grow": 278, "demand": 278, "trade": 278, "bottleneck": 278, "roughli": 278, "speak": 278, "capac": [278, 280], "flop": 278, "famou": 278, "approx": 278, "bmm": 278, "100x": 278, "excel": 278, "stai": [278, 281], "think": 278, "intuit": [278, 281], "uniformli": 278, "qlora": 278, "invers": 278, "restor": 278, "protect": 278, "inspir": 278, "c_": 278, "normalfloat": 278, "bnb": 278, "enable_mse_search": 278, "clip": [278, 281], "805": 278, "005": 278, "return_int": 278, "group_dim": 278, "awq_arg": 278, "enable_auto_scal": 278, "91": [278, 281, 287], "gptq_arg": 278, "actord": 278, "diagon": 278, "percdamp": 278, "stabil": 278, "nsampl": 278, "pad_max_length": 278, "use_max_length": 278, "static_group": 278, "mitig": 278, "true_sequenti": 278, "slower": 278, "weightonlylinear": 278, "date": 278, "sym_full_rang": 278, "qweight_config_path": 278, "gptq_config_path": 278, "gptq_config": 278, "use_full_length": 278, "n_block": 278, "compressed_model": 278, "q": [278, 281], "seek": 278, "omit": 278, "rtn_g32asym": 278, "gptq_g32asym": 278, "gptq_g32asym_disable_last_matmul": 278, "gptq_g128asym": 278, "awq_g32asym": 278, "xiao": [278, 281], "guangxuan": [278, 281], "2211": [278, 281], "10438": [278, 281], "wei": [278, 281], "xiui": [278, 281], "suppress": [278, 281], "2209": [278, 281, 287], "13325": [278, 281], "lin": 278, "ji": 278, "2306": 278, "00978": 278, "elia": 278, "2210": 278, "17323": 278, "dettmer": 278, "tim": 278, "2305": 278, "14314": 278, "site": 279, "assist": 279, "inspect": [279, 282], "renam": 279, "sed": 279, "your_script": 279, "backbon": 280, "sigopt_experiment_id": 280, "nc": [280, 284], "certain": 280, "suffici": 280, "ordinari": 280, "latenc": [280, 284], "8266": 280, "8372": 280, "2132": 280, "83": [280, 281, 287], "7495": 280, "8299": 280, "8294": 280, "85": [280, 281, 287], "0837": 280, "8291": 280, "4469": 280, "allevi": 281, "coarsest": 281, "finer": [281, 284], "2d": 281, "matric": 281, "similarli": 281, "finest": 281, "why": [281, 282], "suppos": 281, "6839": 281, "4741": 281, "7451": 281, "9301": 281, "1742": 281, "6835": 281, "num_bit": 281, "q_min": 281, "q_max": 281, "zp": 281, "q_x": 281, "clamp_": 281, "round_": 281, "w_q": 281, "00296431384049356": 281, "172": [281, 287], "192": 281, "w_dq": 281, "2220": 281, "1510": 281, "2420": 281, "2570": 281, "0500": 281, "1890": 281, "mseloss": 281, "1983354538679123": 281, "6848": 281, "4743": 281, "7440": 281, "9308": 281, "1749": 281, "385297635664756e": 281, "07": [281, 286, 287], "dq": 281, "affect": 281, "quantize_per_channel": 281, "x_tmp": 281, "detach": 281, "reshap": 281, "keepdim": 281, "dequantize_per_channel": 281, "0029": [281, 287], "0036": 281, "162": [281, 287], "48": [281, 287], "93": [281, 287], "207": [281, 287], "139": [281, 287], "6837": 281, "4734": 281, "1751": 281, "6821": 281, "637690492221736e": 281, "6376e": 281, "3852e": 281, "cdot": 281, "quantize_per_tensor_absmax": 281, "n_bit": 281, "div_": 281, "0806": 281, "7589": 281, "6038": 281, "3815": 281, "5040": 281, "7174": 281, "5444": 281, "5826": 281, "7772": 281, "5555": 281, "3740": 281, "3253": 281, "0698": 281, "1381": 281, "5972": [281, 287], "0737": 281, "8298": 281, "6883": 281, "2991": 281, "1601": 281, "6506": 281, "8246": 281, "3924": 281, "3845": 281, "8768": 281, "w_scale": 281, "x_q": 281, "x_scale": 281, "120": 281, "0059755356051027775": 281, "119": 281, "006533813662827015": 281, "y_q": 281, "17509": 281, "7608": 281, "4055": 281, "16599": 281, "21020": 281, "10016": 281, "9860": 281, "22444": 281, "y_dq": 281, "6836": 281, "2970": 281, "1583": 281, "6481": 281, "8207": 281, "3911": 281, "3850": 281, "8763": 281, "though": 281, "simplic": 281, "denot": 281, "fp1": 281, "fp2": 281, "subsect": [281, 286], "x1": [281, 284], "x2": [281, 284], "layernorm": 281, "herebi": 281, "optdecoderlay": 281, "blockwis": 281, "waq": 281, "torchsmoothqu": 281, "auto_alpha_arg": 281, "overhead": 281, "leakyrelu": 281, "hardtanh": 281, "instancenorm": 281, "t5norm": 281, "llamanorm": 281, "groupnorm": 281, "lambada": 281, "openai": 281, "sweet": 281, "spot": 281, "region": 281, "560m": 281, "354": 281, "3542": 281, "4634": 281, "4936": 281, "518": 281, "5185": 281, "7b1": [281, 287], "5764": [281, 287], "5977": 281, "bloomz": [281, 287], "3947": 281, "3930": 281, "4828": 281, "4906": 281, "5018": 281, "4980": 281, "5593": [281, 287], "5552": 281, "379": 281, "3757": 281, "350m": 281, "4516": 281, "4533": 281, "5789": 281, "5742": 281, "6365": 281, "6404": 281, "6769": [281, 287], "6804": [281, 287], "6872": 281, "6814": 281, "7149": 281, "7128": 281, "66b": 281, "7398": 281, "7326": 281, "7361": [281, 287], "7357": 281, "7627": [281, 287], "7590": 281, "7759": [281, 287], "7840": 281, "65b": 281, "7908": 281, "7957": 281, "7392": [281, 287], "7335": 281, "7058": [281, 287], "6994": 281, "7677": [281, 287], "7615": [281, 287], "6831": [281, 287], "mbzuai": 281, "124m": 281, "3804": 281, "3887": 281, "774m": 281, "5048": 281, "5057": 281, "5b": 281, "5443": [281, 287], "5436": 281, "mosaicml": [281, 287], "655": [281, 287], "6499": 281, "stabilityai": 281, "stablelm": 281, "4172": 281, "4149": 281, "togethercomput": 281, "redpajama": 281, "incit": 281, "6542": 281, "6735": 281, "6718": 281, "6740": [281, 287], "6569": 281, "6621": 281, "7143": 281, "7221": 281, "6895": 281, "6953": [281, 287], "6866": [281, 287], "6297": 281, "6247": 281, "6437": [281, 287], "6392": 281, "7332": 281, "7632": 281, "asterisk": 281, "arang": 281, "tolist": 281, "default_alpha": 281, "alpha_min": 281, "alpha_max": 281, "alpha_step": 281, "step_siz": 281, "shared_criterion": 281, "do_blockwis": 281, "jason": 281, "transact": 281, "yvinec": 281, "edouard": 281, "proceed": 281, "cvf": 281, "winter": 281, "instrument": 282, "writer": 282, "_pre_eval_hook": 282, "_post_eval_hook": 282, "submodul": 282, "whitelist": 282, "_recordingobserv": 282, "output_tensors_dict": 282, "current_it": 282, "get_tensor_valu": 282, "_observer_forward_hook": 282, "activation_post_process": 282, "_add_observer_": 282, "child": 282, "named_children": 282, "leaf": 282, "add_modul": 282, "register_forward_hook": 282, "dump_tim": 282, "summarywrit": 282, "_acc": 282, "tune_": 282, "add_graph": 282, "get_observer_dict": 282, "observer_dict": 282, "strip": 282, "is_quant": 282, "add_histogram": 282, "shell": 282, "bind_al": 282, "logdir_spec": 282, "tune_0_acc0": 282, "tune_1": 282, "tune_1_acc0": 282, "baseline_acc_0": 282, "776": 282, "tune_1_acc_0": 282, "095": 282, "runs_v3": 282, "run_tuning_dump_tensor": 282, "inceptionv3": 282, "skip": [282, 284], "run_quant": 282, "topologi": 282, "nc_inceptionv3": 282, "inceptionv3_dump_tensor": 282, "eightbit": 282, "requant": 282, "disappear": 282, "centercrop": 283, "randomcrop": 283, "cropres": 283, "decodeimag": 283, "jpeg": 283, "encodejp": 283, "alignimagechannel": 283, "116": 283, "103": [283, 287], "017": 283, "bilinearimagenet": [283, 286], "topilimag": 283, "padding_mod": 283, "border": 283, "pixel": 283, "edg": 283, "colorjitt": 283, "bright": 283, "satur": 283, "hue": 283, "jitter": 283, "tondarrai": 283, "o1": 284, "human": 284, "concret": 284, "aggress": 284, "classic": 284, "flowchart": 284, "htmllabel": 284, "td": 284, "classdef": 284, "itemstyl": 284, "cce5ff": 284, "stroke": 284, "99ccff": 284, "s1": 284, "s2": 284, "s3": 284, "s4": 284, "s5": 284, "s6": 284, "s7": 284, "nbsp": [284, 287], "subgraphstyl": 284, "ffffff": 284, "attempt": 284, "post_training_auto_qu": 284, "trial": 284, "increment": 284, "ii": 284, "confidence_batch": 284, "spent": 284, "hawq_v2_loss": 284, "model_loss": 284, "black": 284, "discret": 284, "compli": 284, "prior": 284, "posterior": 284, "short": 284, "never": 284, "loglevel": 284, "endlessli": 284, "perspect": 284, "smbo": 284, "appl": 284, "surrog": 284, "quantil": 284, "densiti": 284, "parzen": 284, "greatest": 284, "hour": 284, "dai": 284, "next_tune_cfg": 284, "overridden": 284, "replic": 284, "replica": 284, "fed": 284, "synchron": 284, "number_of_process": 284, "run_cmd": 284, "abctunestrategi": 284, "familiar": 285, "notebook": 285, "introduct": 285, "organ": 286, "logic": 286, "mobilenet_v1": 286, "hyper": 286, "40": [286, 287], "adam": 286, "beta_1": 286, "beta_2": 286, "999": 286, "epsilon": 286, "sparsecategoricalcrossentropi": 286, "sum_over_batch_s": 286, "from_logit": 286, "1x": 287, "platinum": 287, "8480": 287, "8ghz": 287, "56": 287, "ht": 287, "turbo": 287, "256gb": 287, "16x16gb": 287, "ddr5": 287, "4800": 287, "mt": 287, "bio": 287, "3a14": 287, "tel2p1": 287, "microcod": 287, "0x2b0001b0": 287, "gcc": 287, "20210514": 287, "red": 287, "hat": 287, "visit": 287, "1s4c14ins1bsthroughput": 287, "sec": 287, "1720": 287, "582": 287, "95x": 287, "1517": 287, "570": 287, "65": 287, "66x": 287, "resnet101": 287, "41": 287, "1058": 287, "382": 287, "77x": 287, "69": 287, "2080": 287, "951": 287, "19x": 287, "1587": 287, "863": 287, "37": 287, "84x": 287, "1052": 287, "434": 287, "42x": 287, "707": 287, "234": 287, "02x": 287, "320": 287, "179": 287, "79x": 287, "4312": 287, "1512": 287, "85x": 287, "2287": 287, "1406": 287, "63x": 287, "1367": 287, "59x": 287, "vgg19": 287, "1244": 287, "176": 287, "04x": 287, "resnetv2": 287, "780": 287, "34x": 287, "494": 287, "329": 287, "50x": 287, "152": 287, "349": 287, "235": 287, "48x": 287, "densenet": 287, "161": 287, "29": 287, "282": 287, "223": 287, "26x": 287, "1284": 287, "756": 287, "70x": 287, "1280": 287, "530": 287, "cnn": 287, "39": 287, "26": 287, "178": 287, "13x": 287, "yolov3": 287, "249": 287, "64x": 287, "28x": 287, "36": 287, "05x": 287, "86": 287, "390": 287, "212": 287, "83x": 287, "vit": 287, "81": 287, "230": 287, "142": 287, "62x": 287, "1989": 287, "31x": 287, "1165": 287, "303": 287, "953": 287, "302": 287, "15x": 287, "resnest50": 287, "365": 287, "21x": 287, "resnext101_32x8d": 287, "548": 287, "104": 287, "27x": 287, "efficientnet_b0": 287, "636": 287, "62": 287, "566": 287, "12x": 287, "efficientnet_b3": 287, "471": 287, "358": 287, "32x": 287, "peleenet": 287, "790": 287, "504": 287, "57x": 287, "yolo": 287, "137": 287, "88x": 287, "175": 287, "23x": 287, "camembert": 287, "393": 287, "174": 287, "783": 287, "344": 287, "684": 287, "99x": 287, "312": 287, "155": 287, "60": 287, "01x": 287, "funnel": 287, "281": 287, "395": 287, "173": 287, "373": 287, "405": 287, "30x": 287, "stsb": 287, "396": 287, "136": 287, "377": 287, "17x": 287, "391": 287, "25x": 287, "135": 287, "61x": 287, "117": 287, "93x": 287, "lvwerra": 287, "pegasu": 287, "samsum": 287, "1981": 287, "598": 287, "1095": 287, "298": 287, "67x": 287, "549": 287, "29x": 287, "375": 287, "hellaswag": 287, "winogrand": 287, "piqa": 287, "word_perplex": 287, "4954": 287, "6409": 287, "7541": 287, "6434": 287, "8816": 287, "gptqw4g128asym": 287, "679": 287, "4895": 287, "6433": 287, "7476": 287, "6399": 287, "9945": 287, "0999": 287, "gptqw4g32asym": 287, "6829": 287, "4923": 287, "6401": 287, "7486": 287, "6410": 287, "0141": 287, "gptqw4g128sym": 287, "685": 287, "4907": 287, "6361": 287, "7443": 287, "6390": 287, "1498": 287, "gptqw4g32sym": 287, "6911": 287, "4899": 287, "6448": 287, "7497": 287, "6439": 287, "0008": 287, "0927": 287, "5049": 287, "6543": 287, "7628": 287, "6497": 287, "2862": 287, "4984": 287, "6535": 287, "7568": 287, "6473": 287, "4193": 287, "6885": 287, "4973": 287, "753": 287, "6455": 287, "9935": 287, "4607": 287, "decapoda": 287, "5642": 287, "6709": 287, "7835": 287, "6887": 287, "4202": 287, "7244": 287, "5603": 287, "6614": 287, "6824": 287, "9909": 287, "5881": 287, "5911": 287, "7009": 287, "7878": 287, "7106": 287, "7518": 287, "5843": 287, "6961": 287, "7911": 287, "4319": 287, "7572": 287, "5898": 287, "7056": 287, "7894": 287, "7105": 287, "9998": 287, "3429": 287, "7596": 287, "5841": 287, "6977": 287, "7905": 287, "7080": 287, "4916": 287, "6266": 287, "7277": 287, "8096": 287, "7350": 287, "2384": 287, "778": 287, "624": 287, "7269": 287, "8047": 287, "7334": 287, "9979": 287, "4237": 287, "7706": 287, "6239": 287, "7285": 287, "8058": 287, "7322": 287, "4697": 287, "7836": 287, "6195": 287, "7337": 287, "9983": 287, "5604": 287, "5732": 287, "648": 287, "7715": 287, "6746": 287, "7107": 287, "6982": 287, "5637": 287, "6527": 287, "7704": 287, "6713": 287, "9950": 287, "9702": 287, "5682": 287, "6575": 287, "7758": 287, "6742": 287, "9994": 287, "9317": 287, "567": 287, "6902": 287, "7353": 287, "6622": 287, "7829": 287, "6862": 287, "9635": 287, "7246": 287, "5617": 287, "6756": 287, "7797": 287, "6854": 287, "9931": 287, "2799": 287, "7312": 287, "6059": 287, "7103": 287, "7077": 287, "2213": 287, "7273": 287, "6018": 287, "7088": 287, "7742": 287, "7030": 287, "9934": 287, "2538": 287, "083": 287, "7283": 287, "6053": 287, "7024": 287, "7764": 287, "7031": 287, "1889": 287, "374": 287, "727": 287, "5997": 287, "7018": 287, "9916": 287, "2504": 287, "497": 287, "7122": 287, "8984": 287, "5933": 287, "689": 287, "7851": 287, "7075": 287, "1556": 287, "448": 287, "7675": 287, "5934": 287, "7856": 287, "7111": 287, "9984": 287, "1514": 287, "927": 287, "7566": 287, "5899": 287, "7032": 287, "9953": 287, "1374": 287, "728": 287, "4628": 287, "6456": 287, "6029": 287, "6438": 287, "5799": 287, "4542": 287, "6004": 287, "9957": 287, "0626": 287, "4789": 287, "6134": 287, "7432": 287, "5525": 287, "4731": 287, "6504": 287, "7617": 287, "6094": 287, "7828": 287, "5098": 287, "7622": 287, "6505": 287, "3242": 287, "6878": 287, "5058": 287, "6393": 287, "7633": 287, "6491": 287, "9978": 287, "5514": 287, "6864": 287, "5084": 287, "6519": 287, "6509": 287, "0006": 287, "4728": 287, "6876": 287, "5045": 287, "6474": 287, "9952": 287, "6379": 287, "5282": 287, "614": 287, "7448": 287, "6312": 287, "6377": 287, "5228": 287, "5991": 287, "6261": 287, "4096": 287, "6224": 287, "4271": 287, "577": 287, "722": 287, "5871": 287, "9359": 287, "6123": 287, "4227": 287, "5738": 287, "7203": 287, "5823": 287, "9917": 287, "3377": 287, "615": 287, "4259": 287, "5714": 287, "7247": 287, "9951": 287, "2083": 287, "6154": 287, "4208": 287, "5777": 287, "7198": 287, "5834": 287, "9937": 287, "3121": 287, "7233": 287, "5359": 287, "7753": 287, "195": 287, "7186": 287, "5328": 287, "7699": 287, "6687": 287, "9922": 287, "3463": 287, "7268": 287, "533": 287, "659": 287, "6726": 287, "2897": 287, "5718": 287, "6859": 287, "7927": 287, "6890": 287, "9324": 287, "7006": 287, "5655": 287, "6803": 287, "7965": 287, "6857": 287, "1515": 287, "5752": 287, "6748": 287, "7845": 287, "6724": 287, "5951": 287, "6472": 287, "5716": 287, "6685": 287, "784": 287, "6678": 287, "8539": 287, "6918": 287, "5819": 287, "678": 287, "6861": 287, "8863": 287, "5765": 287, "6827": 287, "7873": 287, "6832": 287, "9958": 287, "1451": 287, "storywrit": 287, "693": 287, "5477": 287, "663": 287, "6719": 287, "9125": 287, "6661": 287, "7813": 287, "6693": 287, "1137": 287, "rw": 287, "6604": 287, "5419": 287, "6598": 287, "6594": 287, "7616": 287, "6484": 287, "5369": 287, "7807": 287, "6559": 287, "9947": 287, "9411": 287, "6571": 287, "5398": 287, "6582": 287, "6579": 287, "8809": 287, "652": 287, "535": 287, "7682": 287, "6532": 287, "9906": 287, "0048": 287, "5177": 287, "6669": 287, "7824": 287, "5053": 287, "6301": 287, "5142": 287, "6654": 287, "6483": 287, "9933": 287, "8146": 287, "517": 287, "9941": 287, "1666": 287, "734": 287, "1658": 287, "1495": 287, "733": 287, "1661": 287, "732": 287, "1713": 287, "767": 287, "1747": 287, "770": 287, "7519": 287, "4430": 287, "4413": 287, "72x": 287, "7190": 287, "4019": 287, "613": 287, "170": 287, "611": 287, "186": 287, "619": 287, "184": 287, "36x": 287, "623": 287, "5711": 287, "2584": 287, "6136": 287, "2630": 287, "33x": 287, "shufflenet": 287, "6820": 287, "3686": 287, "googlenet": 287, "1971": 287, "1120": 287, "76x": 287, "1838": 287, "1142": 287, "squeezenet": 287, "10163": 287, "5771": 287, "10339": 287, "6002": 287, "caffenet": 287, "2805": 287, "1077": 287, "60x": 287, "4351": 287, "822": 287, "2169": 287, "893": 287, "43x": 287, "2232": 287, "841": 287, "65x": 287, "zfnet": 287, "921": 287, "525": 287, "75x": 287, "925": 287, "534": 287, "73x": 287, "1862": 287, "1161": 287, "1956": 287, "1262": 287, "55x": 287, "efficientnet": 287, "2793": 287, "1383": 287, "beit": 287, "206": 287, "91x": 287, "duc": 287, "74x": 287, "ultra": 287, "8780": 287, "1920": 287, "emot": 287, "ferplu": 287, "6360": 287, "3067": 287, "07x": 287, "arcfac": 287, "449": 287, "511": 287, "484": 287, "222": 287, "18x": 287, "integerop": 287, "635": 287, "1324": 287, "244": 287, "47x": 287, "440": 287, "214": 287, "06x": 287, "715": 287, "201": 287, "03x": 287, "714": 287, "213": 287, "339": 287, "58x": 287, "215": 287, "89x": 287, "712": 287, "217": 287, "l12": 287, "h384": 287, "1209": 287, "588": 287, "1268": 287, "16x": 287, "1253": 287, "399": 287, "14x": 287, "l6": 287, "1139": 287, "94x": 287, "2365": 287, "08x": 287, "718": 287, "35x": 287, "electra": 287, "discrimin": 287, "1951": 287, "71x": 287, "2198": 287, "1129": 287, "mini": 287, "5814": 287, "3388": 287, "6396": 287, "3445": 287, "86x": 287, "bart": 287, "126": 287, "spanbert": 287, "multilingu": 287, "82x": 287, "118": 287, "46x": 287, "layoutlmv2": 287, "perplex": 287, "2788": 287, "7002": 287, "4124": 287, "9921": 287, "3950": 287, "9892": 287, "9163": 287, "7240": 287, "9902": 287, "0438": 287, "7634": 287, "1186": 287, "9944": 287, "1276": 287, "7543": 287, "6181": 287, "rtnw4g32asym": 287, "6496": 287, "9967": 287, "7964": 287, "6612": 287, "rtnw4g32sym": 287, "7941": 287, "7243": 287, "9971": 287, "taskdataset": 287, "accuracyspars": 287, "ratiospars": 287, "commentsbalancedor": 287, "unbalanc": 287, "answeringsquad": 287, "87f1": 287, "momentumunbalanc": 287, "momentumbalanc": 287, "90f1": 287, "59f1": 287, "23f1": 287, "classificationmrpc": 287, "52f1": 287, "26f1": 287, "classificationsst": 287, "61accuraci": 287, "recognitionimagenet": 287, "95top1": 287, "v5s6": 287, "detectioncoco": 287, "ap0": 287, "6ap0": 287, "584": 287, "34f1": 287, "lassounbalanc": 287, "classificationmnli": 287, "mm": 287, "allbalanc": 287, "32accuraci": 287, "sensitivitybalanc": 287, "classificationqqp": 287, "classificationqnli": 287, "54accuraci": 287, "em": 287, "mobilenetv2": 287, "wideresnet40": 287, "9522": 287, "8178": 287, "0213": 287, "8235": 287, "027": 287, "5494": 287, "7153": 287, "5540": 287, "5523": 287, "vgg": 287, "bn": 287, "7022": 287, "7415": 287, "7025": 287, "6739": 287, "7399": 287, "6845": 287, "0106": 287, "blendcnn": 287, "7034": 287, "8382": 287, "bilstm": 287, "8314": 287, "9403": 287, "9048": 287, "0734": 287, "7323": 287, "8256": 287, "8084": 287, "8814": 287, "7442": 287, "8371": 287, "0119": 287, "0115": 287, "tinybert": 287, "8018": 287, "8044": 287, "8363": 287, "8411": 287, "8025": 287, "8074": 287, "0007": 287, "8626": 287, "9091": 287, "8782": 287, "8684": 287, "8259": 287, "0058": 287, "distilroberta": 287, "6057": 287, "6187": 287, "0130": 287, "c6i": 287, "2xlarg": 287, "c6a": 287, "c6g": 287, "a100cuda": 287, "executionprovid": 287}, "objects": {"": [[0, 0, 0, "-", "block_mask"], [129, 0, 0, "-", "neural_compressor"]], "neural_compressor": [[3, 0, 0, "-", "algorithm"], [6, 0, 0, "-", "benchmark"], [7, 0, 0, "-", "config"], [8, 0, 0, "-", "contrib"], [23, 0, 0, "-", "data"], [76, 0, 0, "-", "experimental"], [136, 0, 0, "-", "metric"], [138, 0, 0, "-", "mix_precision"], [140, 0, 0, "-", "model"], [148, 0, 0, "-", "objective"], [149, 0, 0, "-", "profiling"], [150, 0, 0, "-", "quantization"], [158, 0, 0, "-", "strategy"], [169, 0, 0, "-", "training"], [173, 0, 0, "-", "utils"], [182, 0, 0, "-", "version"]], "neural_compressor.algorithm": [[1, 0, 0, "-", "algorithm"], [2, 0, 0, "-", "fast_bias_correction"], [4, 0, 0, "-", "smooth_quant"], [5, 0, 0, "-", "weight_correction"]], "neural_compressor.algorithm.algorithm": [[1, 1, 1, "", "ALGORITHMS"], [1, 1, 1, "", "Algorithm"], [1, 1, 1, "", "AlgorithmScheduler"], [1, 2, 1, "", "algorithm_registry"]], "neural_compressor.algorithm.fast_bias_correction": [[2, 1, 1, "", "FastBiasCorrection"]], "neural_compressor.algorithm.smooth_quant": [[4, 1, 1, "", "SmoothQuant"]], "neural_compressor.algorithm.weight_correction": [[5, 1, 1, "", "WeightCorrection"]], "neural_compressor.benchmark": [[6, 2, 1, "", "benchmark_with_raw_cmd"], [6, 2, 1, "", "call_one"], [6, 2, 1, "", "config_instance"], [6, 2, 1, "", "fit"], [6, 2, 1, "", "generate_prefix"], [6, 2, 1, "", "get_architecture"], [6, 2, 1, "", "get_bounded_threads"], [6, 2, 1, "", "get_core_ids"], [6, 2, 1, "", "get_physical_ids"], [6, 2, 1, "", "get_threads"], [6, 2, 1, "", "get_threads_per_core"], [6, 2, 1, "", "profile"], [6, 2, 1, "", "run_instance"], [6, 2, 1, "", "set_all_env_var"], [6, 2, 1, "", "set_env_var"], [6, 2, 1, "", "summary_benchmark"]], "neural_compressor.config": [[7, 1, 1, "", "AccuracyCriterion"], [7, 1, 1, "", "BenchmarkConfig"], [7, 1, 1, "", "DistillationConfig"], [7, 1, 1, "", "DotDict"], [7, 1, 1, "", "ExportConfig"], [7, 1, 1, "", "HPOConfig"], [7, 1, 1, "", "IntermediateLayersKnowledgeDistillationLossConfig"], [7, 1, 1, "", "Keras"], [7, 1, 1, "", "KnowledgeDistillationLossConfig"], [7, 1, 1, "", "MXNet"], [7, 1, 1, "", "MixedPrecisionConfig"], [7, 1, 1, "", "NASConfig"], [7, 1, 1, "", "ONNX"], [7, 1, 1, "", "ONNXQlinear2QDQConfig"], [7, 1, 1, "", "Options"], [7, 1, 1, "", "PostTrainingQuantConfig"], [7, 1, 1, "", "PyTorch"], [7, 1, 1, "", "QuantizationAwareTrainingConfig"], [7, 1, 1, "", "SelfKnowledgeDistillationLossConfig"], [7, 1, 1, "", "TF2ONNXConfig"], [7, 1, 1, "", "TensorFlow"], [7, 1, 1, "", "Torch2ONNXConfig"], [7, 1, 1, "", "TuningCriterion"], [7, 1, 1, "", "WeightPruningConfig"]], "neural_compressor.contrib": [[9, 0, 0, "-", "strategy"]], "neural_compressor.contrib.strategy": [[10, 0, 0, "-", "sigopt"], [11, 0, 0, "-", "tpe"]], "neural_compressor.contrib.strategy.sigopt": [[10, 1, 1, "", "SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.tpe": [[11, 1, 1, "", "TpeTuneStrategy"]], "neural_compressor.data": [[18, 0, 0, "-", "datasets"], [22, 0, 0, "-", "filters"], [25, 0, 0, "-", "transforms"]], "neural_compressor.data.datasets": [[12, 0, 0, "-", "bert_dataset"], [13, 0, 0, "-", "coco_dataset"], [14, 0, 0, "-", "dataset"], [15, 0, 0, "-", "dummy_dataset"], [16, 0, 0, "-", "dummy_dataset_v2"], [17, 0, 0, "-", "imagenet_dataset"], [19, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.data.datasets.bert_dataset": [[12, 1, 1, "", "InputFeatures"], [12, 1, 1, "", "ONNXRTBertDataset"], [12, 1, 1, "", "ParseDecodeBert"], [12, 1, 1, "", "PytorchBertDataset"], [12, 1, 1, "", "TensorflowBertDataset"], [12, 1, 1, "", "TensorflowModelZooBertDataset"], [12, 2, 1, "", "convert_examples_to_features"], [12, 2, 1, "", "load_and_cache_examples"]], "neural_compressor.data.datasets.coco_dataset": [[13, 1, 1, "", "COCONpy"], [13, 1, 1, "", "COCORaw"], [13, 1, 1, "", "COCORecordDataset"], [13, 1, 1, "", "ParseDecodeCoco"]], "neural_compressor.data.datasets.dataset": [[14, 1, 1, "", "CIFAR10"], [14, 1, 1, "", "CIFAR100"], [14, 1, 1, "", "Dataset"], [14, 1, 1, "", "Datasets"], [14, 1, 1, "", "FashionMNIST"], [14, 1, 1, "", "ImageFolder"], [14, 1, 1, "", "IterableDataset"], [14, 1, 1, "", "MNIST"], [14, 1, 1, "", "MXNetCIFAR10"], [14, 1, 1, "", "MXNetCIFAR100"], [14, 1, 1, "", "MXNetDatasets"], [14, 1, 1, "", "MXNetFashionMNIST"], [14, 1, 1, "", "MXNetImageFolder"], [14, 1, 1, "", "MXNetMNIST"], [14, 1, 1, "", "ONNXRTITDatasets"], [14, 1, 1, "", "ONNXRTQLDatasets"], [14, 1, 1, "", "PyTorchDatasets"], [14, 1, 1, "", "PytorchCIFAR10"], [14, 1, 1, "", "PytorchCIFAR100"], [14, 1, 1, "", "PytorchFashionMNIST"], [14, 1, 1, "", "PytorchMNIST"], [14, 1, 1, "", "PytorchMxnetWrapDataset"], [14, 1, 1, "", "PytorchMxnetWrapFunction"], [14, 1, 1, "", "Tensorflow"], [14, 1, 1, "", "TensorflowCIFAR10"], [14, 1, 1, "", "TensorflowCIFAR100"], [14, 1, 1, "", "TensorflowDatasets"], [14, 1, 1, "", "TensorflowFashionMNIST"], [14, 1, 1, "", "TensorflowImageRecord"], [14, 1, 1, "", "TensorflowMNIST"], [14, 1, 1, "", "TensorflowTFRecordDataset"], [14, 1, 1, "", "TensorflowVOCRecord"], [14, 2, 1, "", "calculate_md5"], [14, 2, 1, "", "check_integrity"], [14, 2, 1, "", "dataset_registry"], [14, 2, 1, "", "download_url"], [14, 3, 1, "", "framework_datasets"], [14, 2, 1, "", "gen_bar_updater"]], "neural_compressor.data.datasets.dummy_dataset": [[15, 1, 1, "", "DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[16, 1, 1, "", "DummyDataset"], [16, 1, 1, "", "SparseDummyDataset"]], "neural_compressor.data.datasets.imagenet_dataset": [[17, 1, 1, "", "ImagenetRaw"], [17, 1, 1, "", "MXNetImagenetRaw"], [17, 1, 1, "", "ONNXRTImagenetDataset"], [17, 1, 1, "", "PytorchImagenetRaw"], [17, 1, 1, "", "TensorflowImagenetDataset"], [17, 1, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.data.datasets.style_transfer_dataset": [[19, 1, 1, "", "StyleTransferDataset"]], "neural_compressor.data.filters": [[20, 0, 0, "-", "coco_filter"], [21, 0, 0, "-", "filter"]], "neural_compressor.data.filters.coco_filter": [[20, 1, 1, "", "LabelBalanceCOCORawFilter"], [20, 1, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.filter": [[21, 1, 1, "", "FILTERS"], [21, 1, 1, "", "Filter"], [21, 1, 1, "", "MXNetFilters"], [21, 1, 1, "", "ONNXRTITFilters"], [21, 1, 1, "", "ONNXRTQLFilters"], [21, 1, 1, "", "PyTorchFilters"], [21, 1, 1, "", "TensorflowFilters"], [21, 2, 1, "", "filter_registry"]], "neural_compressor.data.transforms": [[24, 0, 0, "-", "imagenet_transform"], [26, 0, 0, "-", "postprocess"], [27, 0, 0, "-", "tokenization"], [28, 0, 0, "-", "transform"]], "neural_compressor.data.transforms.imagenet_transform": [[24, 1, 1, "", "BilinearImagenetTransform"], [24, 1, 1, "", "LabelShift"], [24, 1, 1, "", "ONNXResizeCropImagenetTransform"], [24, 1, 1, "", "OnnxBilinearImagenetTransform"], [24, 1, 1, "", "ParseDecodeImagenet"], [24, 1, 1, "", "ParseDecodeImagenetTransform"], [24, 1, 1, "", "QuantizedInput"], [24, 1, 1, "", "ResizeWithAspectRatio"], [24, 1, 1, "", "TensorflowResizeCropImagenetTransform"], [24, 1, 1, "", "TensorflowShiftRescale"], [24, 1, 1, "", "TensorflowTransposeLastChannel"]], "neural_compressor.data.transforms.postprocess": [[26, 1, 1, "", "Postprocess"]], "neural_compressor.data.transforms.tokenization": [[27, 1, 1, "", "BasicTokenizer"], [27, 1, 1, "", "FullTokenizer"], [27, 1, 1, "", "WordpieceTokenizer"], [27, 2, 1, "", "convert_by_vocab"], [27, 2, 1, "", "convert_to_unicode"], [27, 2, 1, "", "load_vocab"], [27, 2, 1, "", "whitespace_tokenize"]], "neural_compressor.data.transforms.transform": [[28, 1, 1, "", "AlignImageChannelTransform"], [28, 1, 1, "", "BaseTransform"], [28, 1, 1, "", "CastONNXTransform"], [28, 1, 1, "", "CastPyTorchTransform"], [28, 1, 1, "", "CastTFTransform"], [28, 1, 1, "", "CenterCropTFTransform"], [28, 1, 1, "", "CenterCropTransform"], [28, 1, 1, "", "CollectTransform"], [28, 1, 1, "", "ComposeTransform"], [28, 1, 1, "", "CropResizeTFTransform"], [28, 1, 1, "", "CropResizeTransform"], [28, 1, 1, "", "CropToBoundingBox"], [28, 1, 1, "", "InputFeatures"], [28, 1, 1, "", "MXNetCropResizeTransform"], [28, 1, 1, "", "MXNetCropToBoundingBox"], [28, 1, 1, "", "MXNetNormalizeTransform"], [28, 1, 1, "", "MXNetTransforms"], [28, 1, 1, "", "MXNetTranspose"], [28, 1, 1, "", "NormalizeTFTransform"], [28, 1, 1, "", "NormalizeTransform"], [28, 1, 1, "", "ONNXRTCropToBoundingBox"], [28, 1, 1, "", "ONNXRTITTransforms"], [28, 1, 1, "", "ONNXRTQLTransforms"], [28, 1, 1, "", "PaddedCenterCropTransform"], [28, 1, 1, "", "ParseDecodeVocTransform"], [28, 1, 1, "", "PyTorchAlignImageChannel"], [28, 1, 1, "", "PyTorchCropResizeTransform"], [28, 1, 1, "", "PyTorchNormalizeTransform"], [28, 1, 1, "", "PyTorchTransforms"], [28, 1, 1, "", "PyTorchTranspose"], [28, 1, 1, "", "PytorchMxnetTransform"], [28, 1, 1, "", "PytorchMxnetWrapFunction"], [28, 1, 1, "", "RandomCropTFTransform"], [28, 1, 1, "", "RandomCropTransform"], [28, 1, 1, "", "RandomHorizontalFlip"], [28, 1, 1, "", "RandomResizedCropMXNetTransform"], [28, 1, 1, "", "RandomResizedCropPytorchTransform"], [28, 1, 1, "", "RandomResizedCropTFTransform"], [28, 1, 1, "", "RandomResizedCropTransform"], [28, 1, 1, "", "RandomVerticalFlip"], [28, 1, 1, "", "RescaleKerasPretrainTransform"], [28, 1, 1, "", "RescaleTFTransform"], [28, 1, 1, "", "RescaleTransform"], [28, 1, 1, "", "ResizeMXNetTransform"], [28, 1, 1, "", "ResizePytorchTransform"], [28, 1, 1, "", "ResizeTFTransform"], [28, 1, 1, "", "ResizeTransform"], [28, 1, 1, "", "ResizeWithRatio"], [28, 1, 1, "", "SquadExample"], [28, 1, 1, "", "TFModelZooCollectTransform"], [28, 1, 1, "", "TFSquadV1ModelZooPostTransform"], [28, 1, 1, "", "TFSquadV1PostTransform"], [28, 1, 1, "", "TRANSFORMS"], [28, 1, 1, "", "TensorflowCropToBoundingBox"], [28, 1, 1, "", "TensorflowRandomHorizontalFlip"], [28, 1, 1, "", "TensorflowRandomVerticalFlip"], [28, 1, 1, "", "TensorflowResizeWithRatio"], [28, 1, 1, "", "TensorflowTransform"], [28, 1, 1, "", "TensorflowTransforms"], [28, 1, 1, "", "TensorflowTranspose"], [28, 1, 1, "", "TensorflowWrapFunction"], [28, 1, 1, "", "ToArray"], [28, 1, 1, "", "ToNDArrayTransform"], [28, 1, 1, "", "Transforms"], [28, 1, 1, "", "Transpose"], [28, 2, 1, "", "convert_examples_to_features"], [28, 2, 1, "", "get_final_text"], [28, 2, 1, "", "get_torchvision_map"], [28, 2, 1, "", "read_squad_examples"], [28, 2, 1, "", "transform_registry"]], "neural_compressor.experimental": [[29, 0, 0, "-", "benchmark"], [32, 0, 0, "-", "common"], [38, 0, 0, "-", "component"], [39, 0, 0, "-", "compression"], [40, 0, 0, "-", "contrib"], [65, 0, 0, "-", "data"], [70, 0, 0, "-", "distillation"], [71, 0, 0, "-", "export"], [75, 0, 0, "-", "graph_optimization"], [83, 0, 0, "-", "metric"], [85, 0, 0, "-", "mixed_precision"], [86, 0, 0, "-", "model_conversion"], [89, 0, 0, "-", "nas"], [95, 0, 0, "-", "pruner_legacy"], [99, 0, 0, "-", "pruning"], [100, 0, 0, "-", "pruning_recipes"], [104, 0, 0, "-", "pruning_v2"], [105, 0, 0, "-", "pytorch_pruner"], [112, 0, 0, "-", "quantization"], [113, 0, 0, "-", "scheduler"], [118, 0, 0, "-", "strategy"]], "neural_compressor.experimental.benchmark": [[29, 1, 1, "", "Benchmark"], [29, 2, 1, "", "get_architecture"], [29, 2, 1, "", "get_bounded_threads"], [29, 2, 1, "", "get_core_ids"], [29, 2, 1, "", "get_physical_ids"], [29, 2, 1, "", "get_threads"], [29, 2, 1, "", "get_threads_per_core"], [29, 2, 1, "", "set_all_env_var"], [29, 2, 1, "", "set_env_var"]], "neural_compressor.experimental.common": [[30, 0, 0, "-", "criterion"], [31, 0, 0, "-", "dataloader"], [33, 0, 0, "-", "metric"], [34, 0, 0, "-", "model"], [35, 0, 0, "-", "optimizer"], [36, 0, 0, "-", "postprocess"], [37, 0, 0, "-", "torch_utils"]], "neural_compressor.experimental.common.criterion": [[30, 1, 1, "", "Criterions"], [30, 1, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [30, 1, 1, "", "KnowledgeDistillationFramework"], [30, 1, 1, "", "KnowledgeDistillationLoss"], [30, 1, 1, "", "PyTorchCriterions"], [30, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLoss"], [30, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"], [30, 1, 1, "", "PyTorchKnowledgeDistillationLoss"], [30, 1, 1, "", "PyTorchKnowledgeDistillationLossWrapper"], [30, 1, 1, "", "SelfKnowledgeDistillationLoss"], [30, 1, 1, "", "TensorflowCriterions"], [30, 1, 1, "", "TensorflowKnowledgeDistillationLossExternal"], [30, 2, 1, "", "criterion_registry"]], "neural_compressor.experimental.common.dataloader": [[31, 1, 1, "", "DataLoader"]], "neural_compressor.experimental.common.metric": [[33, 1, 1, "", "Metric"]], "neural_compressor.experimental.common.model": [[34, 1, 1, "", "Model"], [34, 2, 1, "", "set_backend"]], "neural_compressor.experimental.common.optimizer": [[35, 1, 1, "", "Optimizers"], [35, 1, 1, "", "PyTorchOptimizers"], [35, 1, 1, "", "PyTorchSGD"], [35, 1, 1, "", "TensorFlowAdamW"], [35, 1, 1, "", "TensorFlowSGD"], [35, 1, 1, "", "TensorflowOptimizers"], [35, 2, 1, "", "optimizer_registry"]], "neural_compressor.experimental.common.postprocess": [[36, 1, 1, "", "Postprocess"]], "neural_compressor.experimental.common.torch_utils": [[37, 2, 1, "", "get_activation"], [37, 2, 1, "", "record_output"]], "neural_compressor.experimental.component": [[38, 1, 1, "", "Component"]], "neural_compressor.experimental.contrib": [[41, 0, 0, "-", "strategy"]], "neural_compressor.experimental.contrib.strategy": [[42, 0, 0, "-", "sigopt"], [43, 0, 0, "-", "tpe"]], "neural_compressor.experimental.contrib.strategy.sigopt": [[42, 1, 1, "", "SigOptTuneStrategy"]], "neural_compressor.experimental.contrib.strategy.tpe": [[43, 1, 1, "", "TpeTuneStrategy"]], "neural_compressor.experimental.data": [[48, 0, 0, "-", "dataloaders"], [60, 0, 0, "-", "datasets"], [64, 0, 0, "-", "filters"], [67, 0, 0, "-", "transforms"]], "neural_compressor.experimental.data.dataloaders": [[44, 0, 0, "-", "base_dataloader"], [45, 0, 0, "-", "dataloader"], [46, 0, 0, "-", "default_dataloader"], [47, 0, 0, "-", "fetcher"], [49, 0, 0, "-", "mxnet_dataloader"], [50, 0, 0, "-", "onnxrt_dataloader"], [51, 0, 0, "-", "pytorch_dataloader"], [52, 0, 0, "-", "sampler"], [53, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[44, 1, 1, "", "BaseDataLoader"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[46, 1, 1, "", "DefaultDataLoader"], [46, 2, 1, "", "default_collate"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[47, 1, 1, "", "Fetcher"], [47, 1, 1, "", "IndexFetcher"], [47, 1, 1, "", "IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[49, 1, 1, "", "MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[50, 1, 1, "", "ONNXRTBertDataLoader"], [50, 1, 1, "", "ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[51, 1, 1, "", "PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[52, 1, 1, "", "BatchSampler"], [52, 1, 1, "", "IterableSampler"], [52, 1, 1, "", "Sampler"], [52, 1, 1, "", "SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[53, 1, 1, "", "TFDataDataLoader"], [53, 1, 1, "", "TensorflowBertDataLoader"], [53, 1, 1, "", "TensorflowDataLoader"], [53, 1, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.experimental.data.datasets": [[54, 0, 0, "-", "bert_dataset"], [55, 0, 0, "-", "coco_dataset"], [56, 0, 0, "-", "dataset"], [57, 0, 0, "-", "dummy_dataset"], [58, 0, 0, "-", "dummy_dataset_v2"], [59, 0, 0, "-", "imagenet_dataset"], [61, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[54, 1, 1, "", "InputFeatures"], [54, 1, 1, "", "ONNXRTBertDataset"], [54, 1, 1, "", "ParseDecodeBert"], [54, 1, 1, "", "PytorchBertDataset"], [54, 1, 1, "", "TensorflowBertDataset"], [54, 1, 1, "", "TensorflowModelZooBertDataset"], [54, 2, 1, "", "convert_examples_to_features"], [54, 2, 1, "", "load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[55, 1, 1, "", "COCONpy"], [55, 1, 1, "", "COCORaw"], [55, 1, 1, "", "COCORecordDataset"], [55, 1, 1, "", "ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.dataset": [[56, 1, 1, "", "CIFAR10"], [56, 1, 1, "", "CIFAR100"], [56, 1, 1, "", "Dataset"], [56, 1, 1, "", "Datasets"], [56, 1, 1, "", "FashionMNIST"], [56, 1, 1, "", "ImageFolder"], [56, 1, 1, "", "IterableDataset"], [56, 1, 1, "", "MNIST"], [56, 1, 1, "", "MXNetCIFAR10"], [56, 1, 1, "", "MXNetCIFAR100"], [56, 1, 1, "", "MXNetDatasets"], [56, 1, 1, "", "MXNetFashionMNIST"], [56, 1, 1, "", "MXNetImageFolder"], [56, 1, 1, "", "MXNetMNIST"], [56, 1, 1, "", "ONNXRTITDatasets"], [56, 1, 1, "", "ONNXRTQLDatasets"], [56, 1, 1, "", "PyTorchDatasets"], [56, 1, 1, "", "PytorchCIFAR10"], [56, 1, 1, "", "PytorchCIFAR100"], [56, 1, 1, "", "PytorchFashionMNIST"], [56, 1, 1, "", "PytorchMNIST"], [56, 1, 1, "", "PytorchMxnetWrapDataset"], [56, 1, 1, "", "PytorchMxnetWrapFunction"], [56, 1, 1, "", "TensorflowCIFAR10"], [56, 1, 1, "", "TensorflowCIFAR100"], [56, 1, 1, "", "TensorflowDatasets"], [56, 1, 1, "", "TensorflowFashionMNIST"], [56, 1, 1, "", "TensorflowImageFolder"], [56, 1, 1, "", "TensorflowImageRecord"], [56, 1, 1, "", "TensorflowMNIST"], [56, 1, 1, "", "TensorflowTFRecordDataset"], [56, 1, 1, "", "TensorflowVOCRecord"], [56, 2, 1, "", "calculate_md5"], [56, 2, 1, "", "check_integrity"], [56, 2, 1, "", "dataset_registry"], [56, 2, 1, "", "download_url"], [56, 3, 1, "", "framework_datasets"], [56, 2, 1, "", "gen_bar_updater"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[57, 1, 1, "", "DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[58, 1, 1, "", "DummyDataset"], [58, 1, 1, "", "SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[59, 1, 1, "", "ImagenetRaw"], [59, 1, 1, "", "MXNetImagenetRaw"], [59, 1, 1, "", "ONNXRTImagenetDataset"], [59, 1, 1, "", "PytorchImagenetRaw"], [59, 1, 1, "", "TensorflowImagenetDataset"], [59, 1, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[61, 1, 1, "", "StyleTransferDataset"]], "neural_compressor.experimental.data.filters": [[62, 0, 0, "-", "coco_filter"], [63, 0, 0, "-", "filter"]], "neural_compressor.experimental.data.filters.coco_filter": [[62, 1, 1, "", "LabelBalanceCOCORawFilter"], [62, 1, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.filter": [[63, 1, 1, "", "FILTERS"], [63, 1, 1, "", "Filter"], [63, 1, 1, "", "MXNetFilters"], [63, 1, 1, "", "ONNXRTITFilters"], [63, 1, 1, "", "ONNXRTQLFilters"], [63, 1, 1, "", "PyTorchFilters"], [63, 1, 1, "", "TensorflowFilters"], [63, 2, 1, "", "filter_registry"]], "neural_compressor.experimental.data.transforms": [[66, 0, 0, "-", "imagenet_transform"], [68, 0, 0, "-", "tokenization"], [69, 0, 0, "-", "transform"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[66, 1, 1, "", "BilinearImagenetTransform"], [66, 1, 1, "", "LabelShift"], [66, 1, 1, "", "ONNXResizeCropImagenetTransform"], [66, 1, 1, "", "OnnxBilinearImagenetTransform"], [66, 1, 1, "", "ParseDecodeImagenet"], [66, 1, 1, "", "ParseDecodeImagenetTransform"], [66, 1, 1, "", "QuantizedInput"], [66, 1, 1, "", "ResizeWithAspectRatio"], [66, 1, 1, "", "TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.tokenization": [[68, 1, 1, "", "BasicTokenizer"], [68, 1, 1, "", "FullTokenizer"], [68, 1, 1, "", "WordpieceTokenizer"], [68, 2, 1, "", "convert_by_vocab"], [68, 2, 1, "", "convert_to_unicode"], [68, 2, 1, "", "load_vocab"], [68, 2, 1, "", "whitespace_tokenize"]], "neural_compressor.experimental.data.transforms.transform": [[69, 1, 1, "", "AlignImageChannelTransform"], [69, 1, 1, "", "BaseTransform"], [69, 1, 1, "", "CastONNXTransform"], [69, 1, 1, "", "CastPyTorchTransform"], [69, 1, 1, "", "CastTFTransform"], [69, 1, 1, "", "CenterCropTFTransform"], [69, 1, 1, "", "CenterCropTransform"], [69, 1, 1, "", "CollectTransform"], [69, 1, 1, "", "ComposeTransform"], [69, 1, 1, "", "CropResizeTFTransform"], [69, 1, 1, "", "CropResizeTransform"], [69, 1, 1, "", "CropToBoundingBox"], [69, 1, 1, "", "InputFeatures"], [69, 1, 1, "", "MXNetCropResizeTransform"], [69, 1, 1, "", "MXNetCropToBoundingBox"], [69, 1, 1, "", "MXNetNormalizeTransform"], [69, 1, 1, "", "MXNetTransforms"], [69, 1, 1, "", "MXNetTranspose"], [69, 1, 1, "", "NormalizeTFTransform"], [69, 1, 1, "", "NormalizeTransform"], [69, 1, 1, "", "ONNXRTCropToBoundingBox"], [69, 1, 1, "", "ONNXRTITTransforms"], [69, 1, 1, "", "ONNXRTQLTransforms"], [69, 1, 1, "", "PaddedCenterCropTransform"], [69, 1, 1, "", "ParseDecodeVocTransform"], [69, 1, 1, "", "PyTorchAlignImageChannel"], [69, 1, 1, "", "PyTorchCropResizeTransform"], [69, 1, 1, "", "PyTorchNormalizeTransform"], [69, 1, 1, "", "PyTorchTransforms"], [69, 1, 1, "", "PyTorchTranspose"], [69, 1, 1, "", "PytorchMxnetTransform"], [69, 1, 1, "", "PytorchMxnetWrapFunction"], [69, 1, 1, "", "RandomCropTFTransform"], [69, 1, 1, "", "RandomCropTransform"], [69, 1, 1, "", "RandomHorizontalFlip"], [69, 1, 1, "", "RandomResizedCropMXNetTransform"], [69, 1, 1, "", "RandomResizedCropPytorchTransform"], [69, 1, 1, "", "RandomResizedCropTFTransform"], [69, 1, 1, "", "RandomResizedCropTransform"], [69, 1, 1, "", "RandomVerticalFlip"], [69, 1, 1, "", "RescaleKerasPretrainTransform"], [69, 1, 1, "", "RescaleTFTransform"], [69, 1, 1, "", "RescaleTransform"], [69, 1, 1, "", "ResizeMXNetTransform"], [69, 1, 1, "", "ResizePytorchTransform"], [69, 1, 1, "", "ResizeTFTransform"], [69, 1, 1, "", "ResizeTransform"], [69, 1, 1, "", "ResizeWithRatio"], [69, 1, 1, "", "SquadExample"], [69, 1, 1, "", "TFModelZooCollectTransform"], [69, 1, 1, "", "TFSquadV1ModelZooPostTransform"], [69, 1, 1, "", "TFSquadV1PostTransform"], [69, 1, 1, "", "TRANSFORMS"], [69, 1, 1, "", "TensorflowCropToBoundingBox"], [69, 1, 1, "", "TensorflowRandomHorizontalFlip"], [69, 1, 1, "", "TensorflowRandomVerticalFlip"], [69, 1, 1, "", "TensorflowResizeWithRatio"], [69, 1, 1, "", "TensorflowTransform"], [69, 1, 1, "", "TensorflowTransforms"], [69, 1, 1, "", "TensorflowTranspose"], [69, 1, 1, "", "TensorflowWrapFunction"], [69, 1, 1, "", "ToArray"], [69, 1, 1, "", "ToNDArrayTransform"], [69, 1, 1, "", "Transforms"], [69, 1, 1, "", "Transpose"], [69, 2, 1, "", "convert_examples_to_features"], [69, 2, 1, "", "get_final_text"], [69, 2, 1, "", "get_torchvision_map"], [69, 2, 1, "", "read_squad_examples"], [69, 2, 1, "", "transform_registry"]], "neural_compressor.experimental.distillation": [[70, 1, 1, "", "Distillation"]], "neural_compressor.experimental.distillation.Distillation": [[70, 4, 1, "", "_epoch_ran"], [70, 4, 1, "", "best_model"], [70, 4, 1, "", "best_score"], [70, 4, 1, "", "eval_frequency"]], "neural_compressor.experimental.export": [[72, 0, 0, "-", "qlinear2qdq"], [73, 0, 0, "-", "tf2onnx"], [74, 0, 0, "-", "torch2onnx"]], "neural_compressor.experimental.export.qlinear2qdq": [[72, 2, 1, "", "check_model"], [72, 2, 1, "", "onnx_qlinear_to_qdq"]], "neural_compressor.experimental.export.tf2onnx": [[73, 2, 1, "", "tf_to_fp32_onnx"], [73, 2, 1, "", "tf_to_int8_onnx"]], "neural_compressor.experimental.export.torch2onnx": [[74, 2, 1, "", "dynamic_quant_export"], [74, 2, 1, "", "get_node_mapping"], [74, 2, 1, "", "get_quantizable_onnx_ops"], [74, 2, 1, "", "static_quant_export"], [74, 2, 1, "", "torch_to_fp32_onnx"], [74, 2, 1, "", "torch_to_int8_onnx"]], "neural_compressor.experimental.graph_optimization": [[75, 1, 1, "", "Graph_Optimization"]], "neural_compressor.experimental.metric": [[77, 0, 0, "-", "bleu"], [78, 0, 0, "-", "bleu_util"], [79, 0, 0, "-", "coco_label_map"], [80, 0, 0, "-", "coco_tools"], [81, 0, 0, "-", "evaluate_squad"], [82, 0, 0, "-", "f1"], [84, 0, 0, "-", "metric"]], "neural_compressor.experimental.metric.bleu": [[77, 1, 1, "", "BLEU"], [77, 1, 1, "", "UnicodeRegex"], [77, 2, 1, "", "bleu_tokenize"]], "neural_compressor.experimental.metric.bleu.BLEU": [[77, 4, 1, "", "labels"], [77, 4, 1, "", "predictions"]], "neural_compressor.experimental.metric.bleu.UnicodeRegex": [[77, 4, 1, "", "nondigit_punct_re"], [77, 4, 1, "", "punct_nondigit_re"], [77, 4, 1, "", "symbol_re"]], "neural_compressor.experimental.metric.bleu_util": [[78, 2, 1, "", "compute_bleu"]], "neural_compressor.experimental.metric.coco_tools": [[80, 1, 1, "", "COCOEvalWrapper"], [80, 1, 1, "", "COCOWrapper"], [80, 2, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [80, 2, 1, "", "ExportSingleImageDetectionMasksToCoco"], [80, 2, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.experimental.metric.coco_tools.COCOWrapper": [[80, 4, 1, "", "dataset"], [80, 4, 1, "", "detection_type"]], "neural_compressor.experimental.metric.evaluate_squad": [[81, 2, 1, "", "evaluate"], [81, 2, 1, "", "exact_match_score"], [81, 2, 1, "", "f1_score"], [81, 2, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[82, 2, 1, "", "evaluate"], [82, 2, 1, "", "f1_score"], [82, 2, 1, "", "metric_max_over_ground_truths"], [82, 2, 1, "", "normalize_answer"]], "neural_compressor.experimental.metric.metric": [[84, 1, 1, "", "Accuracy"], [84, 1, 1, "", "BaseMetric"], [84, 1, 1, "", "COCOmAPv2"], [84, 1, 1, "", "F1"], [84, 1, 1, "", "GeneralTopK"], [84, 1, 1, "", "Loss"], [84, 1, 1, "", "MAE"], [84, 1, 1, "", "METRICS"], [84, 1, 1, "", "MSE"], [84, 1, 1, "", "MXNetMetrics"], [84, 1, 1, "", "ONNXRTGLUE"], [84, 1, 1, "", "ONNXRTITMetrics"], [84, 1, 1, "", "ONNXRTQLMetrics"], [84, 1, 1, "", "PyTorchLoss"], [84, 1, 1, "", "PyTorchMetrics"], [84, 1, 1, "", "RMSE"], [84, 1, 1, "", "ROC"], [84, 1, 1, "", "SquadF1"], [84, 1, 1, "", "TensorflowCOCOMAP"], [84, 1, 1, "", "TensorflowMAP"], [84, 1, 1, "", "TensorflowMetrics"], [84, 1, 1, "", "TensorflowTopK"], [84, 1, 1, "", "TensorflowVOCMAP"], [84, 1, 1, "", "WrapMXNetMetric"], [84, 1, 1, "", "WrapONNXRTMetric"], [84, 1, 1, "", "WrapPyTorchMetric"], [84, 1, 1, "", "mIOU"], [84, 2, 1, "", "metric_registry"]], "neural_compressor.experimental.metric.metric.Accuracy": [[84, 4, 1, "", "label_list"], [84, 4, 1, "", "pred_list"], [84, 4, 1, "", "sample"]], "neural_compressor.experimental.metric.metric.GeneralTopK": [[84, 4, 1, "", "k"], [84, 4, 1, "", "num_correct"], [84, 4, 1, "", "num_sample"]], "neural_compressor.experimental.metric.metric.Loss": [[84, 4, 1, "", "sample"], [84, 4, 1, "", "sum"]], "neural_compressor.experimental.metric.metric.MAE": [[84, 4, 1, "", "compare_label"], [84, 4, 1, "", "label_list"], [84, 4, 1, "", "pred_list"]], "neural_compressor.experimental.metric.metric.METRICS": [[84, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.MSE": [[84, 4, 1, "", "compare_label"], [84, 4, 1, "", "label_list"], [84, 4, 1, "", "pred_list"]], "neural_compressor.experimental.metric.metric.MXNetMetrics": [[84, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTITMetrics": [[84, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics": [[84, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.PyTorchMetrics": [[84, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.RMSE": [[84, 4, 1, "", "mse"]], "neural_compressor.experimental.metric.metric.TensorflowMetrics": [[84, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.TensorflowTopK": [[84, 4, 1, "", "k"], [84, 4, 1, "", "num_correct"], [84, 4, 1, "", "num_sample"]], "neural_compressor.experimental.mixed_precision": [[85, 1, 1, "", "MixedPrecision"]], "neural_compressor.experimental.model_conversion": [[86, 1, 1, "", "ModelConversion"]], "neural_compressor.experimental.nas": [[87, 0, 0, "-", "basic_nas"], [88, 0, 0, "-", "dynas"], [90, 0, 0, "-", "nas"], [91, 0, 0, "-", "nas_utils"], [92, 0, 0, "-", "search_algorithms"]], "neural_compressor.experimental.nas.basic_nas": [[87, 1, 1, "", "BasicNAS"]], "neural_compressor.experimental.nas.dynas": [[88, 1, 1, "", "DyNAS"]], "neural_compressor.experimental.nas.nas": [[90, 1, 1, "", "NAS"], [90, 1, 1, "", "NASBase"]], "neural_compressor.experimental.nas.nas_utils": [[91, 2, 1, "", "create_search_space_pool"], [91, 2, 1, "", "find_pareto_front"], [91, 2, 1, "", "nas_registry"]], "neural_compressor.experimental.nas.search_algorithms": [[92, 1, 1, "", "BayesianOptimizationSearcher"], [92, 1, 1, "", "GridSearcher"], [92, 1, 1, "", "RandomSearcher"], [92, 1, 1, "", "Searcher"]], "neural_compressor.experimental.pruner_legacy": [[93, 0, 0, "-", "gradient_sensitivity"], [94, 0, 0, "-", "group_lasso"], [96, 0, 0, "-", "magnitude"], [97, 0, 0, "-", "pattern_lock"], [98, 0, 0, "-", "pruner"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[93, 1, 1, "", "GradientSensitivityPruner"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[94, 1, 1, "", "GroupLassoPruner"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[96, 1, 1, "", "BasicMagnitudePruner"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[97, 1, 1, "", "PatternLockPruner"]], "neural_compressor.experimental.pruner_legacy.pruner": [[98, 1, 1, "", "Pruner"], [98, 2, 1, "", "pruner_registry"]], "neural_compressor.experimental.pruning": [[99, 1, 1, "", "Pruning"], [99, 1, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning.Pruning": [[99, 4, 1, "", "conf"], [99, 4, 1, "", "pruners"]], "neural_compressor.experimental.pruning_recipes": [[101, 0, 0, "-", "patterns"]], "neural_compressor.experimental.pruning_recipes.patterns": [[102, 0, 0, "-", "pattern"], [103, 0, 0, "-", "tile_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[102, 1, 1, "", "PATTERNS"], [102, 1, 1, "", "PatternBase"], [102, 2, 1, "", "pattern_registry"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS": [[102, 4, 1, "", "patterns"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[103, 1, 1, "", "TilePatternBase"], [103, 1, 1, "", "TilePattern_1x1"], [103, 1, 1, "", "TilePattern_1x16"], [103, 1, 1, "", "TilePattern_1x2"], [103, 1, 1, "", "TilePattern_2x2"], [103, 1, 1, "", "TilePattern_4x1"]], "neural_compressor.experimental.pruning_v2": [[104, 1, 1, "", "Pruning"], [104, 1, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning_v2.Pruning": [[104, 4, 1, "", "conf"], [104, 4, 1, "", "pruners"]], "neural_compressor.experimental.pytorch_pruner": [[106, 0, 0, "-", "logger"], [107, 0, 0, "-", "patterns"], [108, 0, 0, "-", "prune_utils"], [109, 0, 0, "-", "pruner"], [110, 0, 0, "-", "pruning"], [111, 0, 0, "-", "scheduler"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[107, 1, 1, "", "Pattern"], [107, 1, 1, "", "PatternNInM"], [107, 1, 1, "", "PatternNxM"], [107, 2, 1, "", "get_pattern"], [107, 2, 1, "", "register_pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.Pattern": [[107, 4, 1, "", "is_global"], [107, 4, 1, "", "pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM": [[107, 4, 1, "", "M"], [107, 4, 1, "", "N"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM": [[107, 4, 1, "", "block_size"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[108, 2, 1, "", "check_config"], [108, 2, 1, "", "parse_not_to_prune"], [108, 2, 1, "", "parse_to_prune"], [108, 2, 1, "", "process_and_check_config"], [108, 2, 1, "", "process_config"], [108, 2, 1, "", "reset_non_value_to_default"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[109, 1, 1, "", "MagnitudePruner"], [109, 1, 1, "", "PatternLockPruner"], [109, 1, 1, "", "Pruner"], [109, 1, 1, "", "SnipMomentumPruner"], [109, 1, 1, "", "SnipPruner"], [109, 2, 1, "", "get_pruner"], [109, 2, 1, "", "register_pruners"]], "neural_compressor.experimental.pytorch_pruner.pruner.Pruner": [[109, 4, 1, "", "config"], [109, 4, 1, "", "current_sparsity_ratio"], [109, 4, 1, "", "end_step"], [109, 4, 1, "", "global_step"], [109, 4, 1, "", "masks"], [109, 4, 1, "", "max_sparsity_ratio_per_layer"], [109, 4, 1, "", "modules"], [109, 4, 1, "", "pattern"], [109, 4, 1, "", "scheduler"], [109, 4, 1, "", "scores"], [109, 4, 1, "", "start_step"], [109, 4, 1, "", "target_sparsity_ratio"], [109, 4, 1, "", "update_frequency_on_step"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[110, 1, 1, "", "Pruning"]], "neural_compressor.experimental.pytorch_pruner.pruning.Pruning": [[110, 4, 1, "", "config_file_path"], [110, 4, 1, "", "model"], [110, 4, 1, "", "pruner_info"], [110, 4, 1, "", "pruners"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[111, 1, 1, "", "IterativeScheduler"], [111, 1, 1, "", "OneshotScheduler"], [111, 1, 1, "", "Scheduler"], [111, 2, 1, "", "get_scheduler"], [111, 2, 1, "", "register_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler": [[111, 4, 1, "", "config"]], "neural_compressor.experimental.quantization": [[112, 1, 1, "", "Quantization"]], "neural_compressor.experimental.scheduler": [[113, 1, 1, "", "Scheduler"]], "neural_compressor.experimental.strategy": [[114, 0, 0, "-", "auto_mixed_precision"], [115, 0, 0, "-", "basic"], [116, 0, 0, "-", "bayesian"], [117, 0, 0, "-", "exhaustive"], [119, 0, 0, "-", "mse"], [120, 0, 0, "-", "mse_v2"], [121, 0, 0, "-", "random"], [122, 0, 0, "-", "strategy"], [124, 0, 0, "-", "utils"]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[114, 1, 1, "", "AutoMixedPrecisionTuneStrategy"]], "neural_compressor.experimental.strategy.basic": [[115, 1, 1, "", "BasicTuneStrategy"]], "neural_compressor.experimental.strategy.bayesian": [[116, 1, 1, "", "BayesianOptimization"], [116, 1, 1, "", "BayesianTuneStrategy"], [116, 1, 1, "", "TargetSpace"], [116, 2, 1, "", "acq_max"]], "neural_compressor.experimental.strategy.exhaustive": [[117, 1, 1, "", "ExhaustiveTuneStrategy"]], "neural_compressor.experimental.strategy.mse": [[119, 1, 1, "", "MSETuneStrategy"]], "neural_compressor.experimental.strategy.mse_v2": [[120, 1, 1, "", "MSE_V2TuneStrategy"]], "neural_compressor.experimental.strategy.random": [[121, 1, 1, "", "RandomTuneStrategy"]], "neural_compressor.experimental.strategy.strategy": [[122, 1, 1, "", "TuneStrategy"], [122, 2, 1, "", "strategy_registry"]], "neural_compressor.experimental.strategy.utils": [[123, 0, 0, "-", "constant"], [125, 0, 0, "-", "tuning_sampler"], [126, 0, 0, "-", "tuning_space"], [127, 0, 0, "-", "tuning_structs"], [128, 0, 0, "-", "utility"]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[125, 1, 1, "", "FallbackTuningSampler"], [125, 1, 1, "", "ModelWiseTuningSampler"], [125, 1, 1, "", "OpTypeWiseTuningSampler"], [125, 1, 1, "", "OpWiseTuningSampler"], [125, 1, 1, "", "SmoothQuantSampler"], [125, 1, 1, "", "TuningOrder"], [125, 1, 1, "", "TuningSampler"], [125, 1, 1, "", "TuningSamplerRegistry"]], "neural_compressor.experimental.strategy.utils.tuning_space": [[126, 1, 1, "", "TuningItem"], [126, 1, 1, "", "TuningSpace"], [126, 2, 1, "", "initial_tuning_cfg_with_quant_mode"], [126, 2, 1, "", "pattern_to_internal"], [126, 2, 1, "", "pattern_to_path"], [126, 2, 1, "", "quant_mode_from_pattern"]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[127, 1, 1, "", "OpTuningConfig"]], "neural_compressor.experimental.strategy.utils.utility": [[128, 1, 1, "", "OrderedDefaultDict"], [128, 2, 1, "", "extract_data_type"], [128, 2, 1, "", "get_adaptor_name"], [128, 2, 1, "", "reverted_data_type"]], "neural_compressor.metric": [[130, 0, 0, "-", "bleu"], [131, 0, 0, "-", "bleu_util"], [132, 0, 0, "-", "coco_label_map"], [133, 0, 0, "-", "coco_tools"], [134, 0, 0, "-", "evaluate_squad"], [135, 0, 0, "-", "f1"], [137, 0, 0, "-", "metric"]], "neural_compressor.metric.bleu": [[130, 1, 1, "", "BLEU"], [130, 1, 1, "", "UnicodeRegex"], [130, 2, 1, "", "bleu_tokenize"]], "neural_compressor.metric.bleu.BLEU": [[130, 4, 1, "", "labels"], [130, 4, 1, "", "predictions"]], "neural_compressor.metric.bleu.UnicodeRegex": [[130, 4, 1, "", "nondigit_punct_re"], [130, 4, 1, "", "punct_nondigit_re"], [130, 4, 1, "", "symbol_re"]], "neural_compressor.metric.bleu_util": [[131, 2, 1, "", "compute_bleu"]], "neural_compressor.metric.coco_tools": [[133, 1, 1, "", "COCOEvalWrapper"], [133, 1, 1, "", "COCOWrapper"], [133, 2, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [133, 2, 1, "", "ExportSingleImageDetectionMasksToCoco"], [133, 2, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.metric.coco_tools.COCOWrapper": [[133, 4, 1, "", "dataset"], [133, 4, 1, "", "detection_type"]], "neural_compressor.metric.evaluate_squad": [[134, 2, 1, "", "evaluate"], [134, 2, 1, "", "exact_match_score"], [134, 2, 1, "", "f1_score"], [134, 2, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[135, 2, 1, "", "evaluate"], [135, 2, 1, "", "f1_score"], [135, 2, 1, "", "metric_max_over_ground_truths"], [135, 2, 1, "", "normalize_answer"]], "neural_compressor.metric.metric": [[137, 1, 1, "", "Accuracy"], [137, 1, 1, "", "BaseMetric"], [137, 1, 1, "", "COCOmAPv2"], [137, 1, 1, "", "F1"], [137, 1, 1, "", "GeneralTopK"], [137, 1, 1, "", "Loss"], [137, 1, 1, "", "MAE"], [137, 1, 1, "", "METRICS"], [137, 1, 1, "", "MSE"], [137, 1, 1, "", "MXNetMetrics"], [137, 1, 1, "", "Metric"], [137, 1, 1, "", "ONNXRTGLUE"], [137, 1, 1, "", "ONNXRTITMetrics"], [137, 1, 1, "", "ONNXRTQLMetrics"], [137, 1, 1, "", "PyTorchLoss"], [137, 1, 1, "", "PyTorchMetrics"], [137, 1, 1, "", "RMSE"], [137, 1, 1, "", "ROC"], [137, 1, 1, "", "SquadF1"], [137, 1, 1, "", "TensorflowCOCOMAP"], [137, 1, 1, "", "TensorflowMAP"], [137, 1, 1, "", "TensorflowMetrics"], [137, 1, 1, "", "TensorflowTopK"], [137, 1, 1, "", "TensorflowVOCMAP"], [137, 1, 1, "", "WrapMXNetMetric"], [137, 1, 1, "", "WrapONNXRTMetric"], [137, 1, 1, "", "WrapPyTorchMetric"], [137, 1, 1, "", "mIOU"], [137, 2, 1, "", "metric_registry"], [137, 2, 1, "", "register_customer_metric"]], "neural_compressor.metric.metric.Accuracy": [[137, 4, 1, "", "label_list"], [137, 4, 1, "", "pred_list"], [137, 4, 1, "", "sample"]], "neural_compressor.metric.metric.GeneralTopK": [[137, 4, 1, "", "k"], [137, 4, 1, "", "num_correct"], [137, 4, 1, "", "num_sample"]], "neural_compressor.metric.metric.Loss": [[137, 4, 1, "", "sample"], [137, 4, 1, "", "sum"]], "neural_compressor.metric.metric.MAE": [[137, 4, 1, "", "compare_label"], [137, 4, 1, "", "label_list"], [137, 4, 1, "", "pred_list"]], "neural_compressor.metric.metric.METRICS": [[137, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.MSE": [[137, 4, 1, "", "compare_label"], [137, 4, 1, "", "label_list"], [137, 4, 1, "", "pred_list"]], "neural_compressor.metric.metric.MXNetMetrics": [[137, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTITMetrics": [[137, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTQLMetrics": [[137, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.PyTorchMetrics": [[137, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.RMSE": [[137, 4, 1, "", "mse"]], "neural_compressor.metric.metric.TensorflowMetrics": [[137, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.TensorflowTopK": [[137, 4, 1, "", "k"], [137, 4, 1, "", "num_correct"], [137, 4, 1, "", "num_sample"]], "neural_compressor.mix_precision": [[138, 2, 1, "", "fit"]], "neural_compressor.model": [[139, 0, 0, "-", "base_model"], [141, 0, 0, "-", "keras_model"], [142, 0, 0, "-", "model"], [143, 0, 0, "-", "mxnet_model"], [144, 0, 0, "-", "nets_factory"], [145, 0, 0, "-", "onnx_model"], [146, 0, 0, "-", "tensorflow_model"], [147, 0, 0, "-", "torch_model"]], "neural_compressor.model.base_model": [[139, 1, 1, "", "BaseModel"]], "neural_compressor.model.keras_model": [[141, 1, 1, "", "KerasModel"]], "neural_compressor.model.model": [[142, 1, 1, "", "Model"], [142, 2, 1, "", "get_model_fwk_name"]], "neural_compressor.model.mxnet_model": [[143, 1, 1, "", "MXNetModel"]], "neural_compressor.model.nets_factory": [[144, 1, 1, "", "TFSlimNetsFactory"]], "neural_compressor.model.onnx_model": [[145, 1, 1, "", "ONNXModel"]], "neural_compressor.model.tensorflow_model": [[146, 1, 1, "", "TensorflowBaseModel"], [146, 1, 1, "", "TensorflowCheckpointModel"], [146, 1, 1, "", "TensorflowLLMModel"], [146, 1, 1, "", "TensorflowModel"], [146, 1, 1, "", "TensorflowQATModel"], [146, 1, 1, "", "TensorflowSavedModelModel"], [146, 2, 1, "", "checkpoint_session"], [146, 2, 1, "", "estimator_session"], [146, 2, 1, "", "frozen_pb_session"], [146, 2, 1, "", "get_model_type"], [146, 2, 1, "", "graph_def_session"], [146, 2, 1, "", "graph_session"], [146, 2, 1, "", "keras_session"], [146, 2, 1, "", "load_saved_model"], [146, 2, 1, "", "saved_model_session"], [146, 2, 1, "", "slim_session"], [146, 2, 1, "", "try_loading_keras"], [146, 2, 1, "", "validate_and_inference_input_output"], [146, 2, 1, "", "validate_graph_node"]], "neural_compressor.model.torch_model": [[147, 1, 1, "", "IPEXModel"], [147, 1, 1, "", "PyTorchBaseModel"], [147, 1, 1, "", "PyTorchFXModel"], [147, 1, 1, "", "PyTorchModel"]], "neural_compressor.objective": [[148, 1, 1, "", "Accuracy"], [148, 1, 1, "", "Footprint"], [148, 1, 1, "", "ModelSize"], [148, 1, 1, "", "MultiObjective"], [148, 1, 1, "", "Objective"], [148, 1, 1, "", "Performance"], [148, 2, 1, "", "objective_custom_registry"], [148, 2, 1, "", "objective_registry"]], "neural_compressor.quantization": [[150, 2, 1, "", "fit"]], "neural_compressor.strategy": [[151, 0, 0, "-", "auto"], [152, 0, 0, "-", "auto_mixed_precision"], [153, 0, 0, "-", "basic"], [154, 0, 0, "-", "bayesian"], [155, 0, 0, "-", "conservative"], [156, 0, 0, "-", "exhaustive"], [157, 0, 0, "-", "hawq_v2"], [159, 0, 0, "-", "mse"], [160, 0, 0, "-", "mse_v2"], [161, 0, 0, "-", "random"], [162, 0, 0, "-", "strategy"], [164, 0, 0, "-", "utils"]], "neural_compressor.strategy.auto": [[151, 1, 1, "", "AutoTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[152, 1, 1, "", "AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.basic": [[153, 1, 1, "", "BasicTuneStrategy"]], "neural_compressor.strategy.bayesian": [[154, 1, 1, "", "BayesianOptimization"], [154, 1, 1, "", "BayesianTuneStrategy"], [154, 1, 1, "", "TargetSpace"], [154, 2, 1, "", "acq_max"]], "neural_compressor.strategy.conservative": [[155, 1, 1, "", "ConservativeTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[156, 1, 1, "", "ExhaustiveTuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[157, 1, 1, "", "HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.mse": [[159, 1, 1, "", "MSETuneStrategy"]], "neural_compressor.strategy.mse_v2": [[160, 1, 1, "", "MSE_V2TuneStrategy"]], "neural_compressor.strategy.random": [[161, 1, 1, "", "RandomTuneStrategy"]], "neural_compressor.strategy.strategy": [[162, 1, 1, "", "TuneStrategy"], [162, 1, 1, "", "TuneStrategyMeta"], [162, 2, 1, "", "strategy_registry"]], "neural_compressor.strategy.utils": [[163, 0, 0, "-", "constant"], [165, 0, 0, "-", "tuning_sampler"], [166, 0, 0, "-", "tuning_space"], [167, 0, 0, "-", "tuning_structs"], [168, 0, 0, "-", "utility"]], "neural_compressor.strategy.utils.tuning_sampler": [[165, 1, 1, "", "BlockFallbackTuningSampler"], [165, 1, 1, "", "FallbackTuningSampler"], [165, 1, 1, "", "LowerBitsSampler"], [165, 1, 1, "", "ModelWiseTuningSampler"], [165, 1, 1, "", "OpTypeWiseTuningSampler"], [165, 1, 1, "", "OpWiseTuningSampler"], [165, 1, 1, "", "SmoothQuantSampler"], [165, 1, 1, "", "TuningOrder"], [165, 1, 1, "", "TuningSampler"], [165, 1, 1, "", "WeightOnlyQuantSampler"]], "neural_compressor.strategy.utils.tuning_space": [[166, 1, 1, "", "TuningItem"], [166, 1, 1, "", "TuningSpace"], [166, 2, 1, "", "initial_tuning_cfg_with_quant_mode"], [166, 2, 1, "", "pattern_to_internal"], [166, 2, 1, "", "pattern_to_path"], [166, 2, 1, "", "quant_mode_from_pattern"]], "neural_compressor.strategy.utils.tuning_structs": [[167, 1, 1, "", "OpTuningConfig"]], "neural_compressor.strategy.utils.utility": [[168, 1, 1, "", "ClassRegister"], [168, 1, 1, "", "OrderedDefaultDict"], [168, 1, 1, "", "QuantOptions"], [168, 1, 1, "", "QuantType"], [168, 2, 1, "", "build_slave_faker_model"], [168, 2, 1, "", "extract_data_type"], [168, 2, 1, "", "get_adaptor_name"], [168, 2, 1, "", "preprocess_user_cfg"], [168, 2, 1, "", "reverted_data_type"]], "neural_compressor.training": [[169, 1, 1, "", "CallBacks"], [169, 1, 1, "", "CompressionManager"], [169, 2, 1, "", "fit"], [169, 2, 1, "", "prepare_compression"]], "neural_compressor.utils": [[170, 0, 0, "-", "collect_layer_histogram"], [171, 0, 0, "-", "constant"], [172, 0, 0, "-", "create_obj_from_config"], [174, 0, 0, "-", "kl_divergence"], [175, 0, 0, "-", "load_huggingface"], [176, 0, 0, "-", "logger"], [177, 0, 0, "-", "neural_insights_utils"], [178, 0, 0, "-", "options"], [179, 0, 0, "-", "pytorch"], [180, 0, 0, "-", "utility"], [181, 0, 0, "-", "weights_details"]], "neural_compressor.utils.collect_layer_histogram": [[170, 1, 1, "", "LayerHistogramCollector"]], "neural_compressor.utils.create_obj_from_config": [[172, 2, 1, "", "create_dataloader"], [172, 2, 1, "", "create_dataset"], [172, 2, 1, "", "create_eval_func"], [172, 2, 1, "", "create_train_func"], [172, 2, 1, "", "get_algorithm"], [172, 2, 1, "", "get_func_from_config"], [172, 2, 1, "", "get_metrics"], [172, 2, 1, "", "get_postprocess"], [172, 2, 1, "", "get_preprocess"]], "neural_compressor.utils.kl_divergence": [[174, 1, 1, "", "KL_Divergence"]], "neural_compressor.utils.load_huggingface": [[175, 1, 1, "", "OptimizedModel"], [175, 2, 1, "", "export_compressed_model"], [175, 2, 1, "", "save_for_huggingface_upstream"]], "neural_compressor.utils.logger": [[176, 1, 1, "", "Logger"], [176, 2, 1, "", "debug"], [176, 2, 1, "", "error"], [176, 2, 1, "", "fatal"], [176, 2, 1, "", "info"], [176, 2, 1, "", "log"], [176, 2, 1, "", "warn"], [176, 2, 1, "", "warning"]], "neural_compressor.utils.neural_insights_utils": [[177, 2, 1, "", "get_model_path"], [177, 2, 1, "", "register_neural_insights_workload"], [177, 2, 1, "", "update_neural_insights_workload"], [177, 2, 1, "", "update_neural_insights_workload_accuracy_data"]], "neural_compressor.utils.options": [[178, 1, 1, "", "onnxrt"]], "neural_compressor.utils.pytorch": [[179, 2, 1, "", "is_int8_model"], [179, 2, 1, "", "load"], [179, 2, 1, "", "load_weight_only"], [179, 2, 1, "", "recover_model_from_json"]], "neural_compressor.utils.utility": [[180, 1, 1, "", "CaptureOutputToFile"], [180, 1, 1, "", "CpuInfo"], [180, 2, 1, "", "Dequantize"], [180, 1, 1, "", "DotDict"], [180, 1, 1, "", "GLOBAL_STATE"], [180, 1, 1, "", "LazyImport"], [180, 1, 1, "", "MODE"], [180, 1, 1, "", "OpEntry"], [180, 1, 1, "", "Statistics"], [180, 2, 1, "", "alias_param"], [180, 2, 1, "", "calculate_mse"], [180, 2, 1, "", "check_key_exist"], [180, 2, 1, "", "combine_histogram"], [180, 2, 1, "", "compare_objects"], [180, 2, 1, "", "compute_sparsity"], [180, 2, 1, "", "dequantize_weight"], [180, 2, 1, "", "dump_class_attrs"], [180, 2, 1, "", "dump_data_to_local"], [180, 2, 1, "", "dump_elapsed_time"], [180, 2, 1, "", "dump_table"], [180, 2, 1, "", "dump_table_to_csv"], [180, 2, 1, "", "equal_dicts"], [180, 2, 1, "", "fault_tolerant_file"], [180, 2, 1, "", "get_all_fp32_data"], [180, 2, 1, "", "get_number_of_sockets"], [180, 2, 1, "", "get_op_list"], [180, 2, 1, "", "get_size"], [180, 2, 1, "", "get_tensor_histogram"], [180, 2, 1, "", "get_tensors_info"], [180, 2, 1, "", "get_tuning_history"], [180, 2, 1, "", "get_weights_details"], [180, 2, 1, "", "load_data_from_pkl"], [180, 2, 1, "", "mse_metric_gap"], [180, 2, 1, "", "print_op_list"], [180, 2, 1, "", "print_table"], [180, 2, 1, "", "recover"], [180, 2, 1, "", "set_random_seed"], [180, 2, 1, "", "set_resume_from"], [180, 2, 1, "", "set_tensorboard"], [180, 2, 1, "", "set_workspace"], [180, 2, 1, "", "show_memory_info"], [180, 2, 1, "", "singleton"], [180, 2, 1, "", "str2array"], [180, 2, 1, "", "time_limit"], [180, 2, 1, "", "version1_eq_version2"], [180, 2, 1, "", "version1_gt_version2"], [180, 2, 1, "", "version1_gte_version2"], [180, 2, 1, "", "version1_lt_version2"], [180, 2, 1, "", "version1_lte_version2"]], "neural_compressor.utils.weights_details": [[181, 1, 1, "", "WeightsDetails"], [181, 1, 1, "", "WeightsStatistics"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:function", "3": "py:data", "4": "py:attribute"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "function", "Python function"], "3": ["py", "data", "Python data"], "4": ["py", "attribute", "Python attribute"]}, "titleterms": {"block_mask": 0, "neural_compressor": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182], "algorithm": [1, 2, 3, 4, 5, 212, 278, 281, 284], "class": [1, 2, 4, 5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 24, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 38, 42, 43, 44, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 66, 68, 69, 70, 75, 77, 80, 84, 85, 86, 87, 88, 90, 92, 93, 94, 96, 97, 98, 99, 102, 103, 104, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 125, 126, 127, 128, 130, 133, 137, 139, 141, 142, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 165, 166, 167, 168, 169, 170, 174, 175, 176, 178, 180, 181, 194, 263], "function": [1, 6, 12, 14, 21, 27, 28, 29, 30, 34, 35, 37, 46, 54, 56, 63, 68, 69, 72, 73, 74, 77, 78, 80, 81, 82, 84, 91, 98, 102, 107, 108, 109, 111, 116, 122, 126, 128, 130, 131, 133, 134, 135, 137, 138, 142, 146, 148, 150, 154, 162, 166, 168, 169, 172, 175, 176, 177, 179, 180, 220], "modul": [1, 2, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 24, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 42, 43, 44, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 66, 68, 69, 70, 72, 73, 74, 75, 77, 78, 80, 81, 82, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 96, 97, 98, 99, 102, 103, 104, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 125, 126, 127, 128, 130, 131, 133, 134, 135, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 165, 166, 167, 168, 169, 170, 172, 174, 175, 176, 177, 178, 179, 180, 181], "content": [1, 2, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 24, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 42, 43, 44, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 66, 68, 69, 70, 72, 73, 74, 75, 77, 78, 80, 81, 82, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 96, 97, 98, 99, 102, 103, 104, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 125, 126, 127, 128, 130, 131, 133, 134, 135, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 165, 166, 167, 168, 169, 170, 172, 174, 175, 176, 177, 178, 179, 180, 181, 193, 263], "fast_bias_correct": 2, "submodul": [3, 9, 18, 22, 25, 32, 41, 48, 60, 64, 67, 71, 76, 83, 89, 95, 101, 105, 118, 124, 129, 136, 140, 158, 164, 173], "smooth_quant": 4, "weight_correct": 5, "benchmark": [6, 29, 202, 211, 217, 232, 274], "config": [7, 204, 215, 270], "contrib": [8, 9, 10, 11, 40, 41, 42, 43], "subpackag": [8, 23, 40, 65, 76, 100, 118, 129, 158], "strategi": [9, 10, 11, 41, 42, 43, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 209, 280, 284], "sigopt": [10, 42, 280, 284], "tpe": [11, 43, 284], "data": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 195, 196, 217, 221, 257], "dataset": [12, 13, 14, 15, 16, 17, 18, 19, 54, 55, 56, 57, 58, 59, 60, 61, 215, 217, 226, 258], "bert_dataset": [12, 54], "coco_dataset": [13, 55], "attribut": [14, 56, 188], "dummy_dataset": [15, 57], "dummy_dataset_v2": [16, 58], "imagenet_dataset": [17, 59], "style_transfer_dataset": [19, 61], "filter": [20, 21, 22, 62, 63, 64], "coco_filt": [20, 62], "transform": [24, 25, 26, 27, 28, 66, 67, 68, 69, 226, 283], "imagenet_transform": [24, 66], "postprocess": [26, 36], "token": [27, 68], "experiment": [29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128], "common": [30, 31, 32, 33, 34, 35, 36, 37, 190, 223], "criterion": 30, "dataload": [31, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 214, 215], "metric": [33, 77, 78, 79, 80, 81, 82, 83, 84, 130, 131, 132, 133, 134, 135, 136, 137, 226, 231], "model": [34, 139, 140, 141, 142, 143, 144, 145, 146, 147, 195, 206, 222, 225, 228, 230, 232, 234, 235, 242, 256, 257, 258, 266, 267, 268, 272, 276, 278, 281, 287], "optim": [35, 243, 253, 263, 266, 267, 268, 271, 272, 285], "torch_util": 37, "compon": 38, "compress": [39, 203, 278], "base_dataload": 44, "default_dataload": 46, "fetcher": 47, "mxnet_dataload": 49, "onnxrt_dataload": 50, "pytorch_dataload": 51, "sampler": 52, "tensorflow_dataload": 53, "distil": [70, 218, 219, 232, 274, 287], "export": [71, 72, 73, 74, 222, 278], "qlinear2qdq": 72, "tf2onnx": 73, "torch2onnx": 74, "graph_optim": 75, "bleu": [77, 130], "bleu_util": [78, 131], "coco_label_map": [79, 132], "coco_tool": [80, 133], "evaluate_squad": [81, 134], "f1": [82, 135], "mixed_precis": 85, "model_convers": 86, "na": [87, 88, 89, 90, 91, 92, 191, 274], "basic_na": 87, "dyna": 88, "nas_util": 91, "search_algorithm": 92, "pruner_legaci": [93, 94, 95, 96, 97, 98], "gradient_sensit": 93, "group_lasso": 94, "magnitud": 96, "pattern_lock": 97, "pruner": [98, 109], "prune": [99, 110, 232, 272, 274, 287], "pruning_recip": [100, 101, 102, 103], "pattern": [101, 102, 103, 107, 272], "tile_pattern": 103, "pruning_v2": 104, "pytorch_prun": [105, 106, 107, 108, 109, 110, 111], "logger": [106, 176, 213], "prune_util": 108, "schedul": [111, 113, 272], "quantiz": [112, 150, 183, 185, 186, 190, 193, 195, 196, 208, 212, 217, 219, 222, 225, 228, 230, 232, 233, 235, 242, 253, 255, 256, 257, 258, 266, 267, 268, 274, 275, 276, 277, 278, 281, 287], "auto_mixed_precis": [114, 152], "basic": [115, 153, 191, 284], "bayesian": [116, 154, 284], "exhaust": [117, 156, 284], "mse": [119, 159, 284], "mse_v2": [120, 160, 284], "random": [121, 161, 284], "util": [123, 124, 125, 126, 127, 128, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 199], "constant": [123, 163, 171], "tuning_sampl": [125, 165], "tuning_spac": [126, 166], "tuning_struct": [127, 167], "mix_precis": 138, "base_model": 139, "keras_model": 141, "mxnet_model": 143, "nets_factori": 144, "onnx_model": 145, "tensorflow_model": 146, "torch_model": 147, "object": [148, 207, 266, 267, 268, 270], "profil": [149, 217], "auto": [151, 184, 247, 253, 277, 281, 284], "conserv": [155, 284], "hawq_v2": [157, 284], "train": [169, 185, 186, 190, 210, 220, 232, 272, 275], "collect_layer_histogram": 170, "create_obj_from_config": 172, "kl_diverg": 174, "load_huggingfac": 175, "neural_insights_util": 177, "option": [178, 220, 241], "pytorch": [179, 186, 215, 220, 222, 231, 257, 275, 276, 277, 282, 283, 287], "weights_detail": 181, "version": 182, "tensorflow": [183, 185, 186, 215, 220, 222, 231, 275, 277, 282, 283, 287], "introduct": [183, 184, 185, 186, 190, 191, 194, 195, 196, 211, 212, 214, 215, 217, 218, 219, 220, 222, 224, 227, 231, 233, 234, 235, 253, 256, 257, 258, 270, 271, 272, 274, 275, 276, 278, 280, 281, 282, 283, 284, 286], "get": [183, 190, 191, 193, 194, 211, 214, 215, 217, 218, 219, 220, 224, 225, 231, 233, 235, 236, 247, 254, 255, 259, 260, 261, 262, 270, 271, 272, 274, 275, 282, 286], "start": [183, 190, 191, 193, 194, 211, 214, 215, 217, 218, 219, 220, 224, 225, 231, 233, 235, 236, 237, 241, 247, 255, 259, 260, 261, 266, 267, 268, 270, 271, 272, 274, 275, 282, 286], "without": 183, "accuraci": [183, 186, 230, 233, 256, 258, 275, 284], "awar": [183, 186, 190, 232, 272, 275], "tune": [183, 184, 186, 196, 275, 278, 281, 284], "With": 183, "specifi": [183, 275], "rule": [183, 213, 275], "exampl": [183, 184, 190, 191, 194, 200, 211, 214, 215, 217, 218, 219, 220, 221, 222, 231, 232, 233, 234, 235, 238, 242, 255, 256, 257, 258, 260, 265, 266, 267, 268, 270, 271, 272, 275, 276, 278, 281, 282, 287], "smooth": [184, 185, 186, 281], "quant": [184, 186, 281], "usag": [184, 191, 242, 253, 262, 281, 282, 284], "us": [184, 196, 214, 231, 260, 261, 281], "fix": [184, 281], "alpha": [184, 281], "determin": [184, 281], "through": [184, 228, 281, 287], "api": [185, 191, 194, 195, 200, 201, 211, 214, 215, 218, 219, 220, 225, 226, 231, 233, 235, 236, 240, 254, 255, 262, 268, 270, 271, 272, 274, 285], "support": [185, 189, 190, 191, 194, 196, 211, 212, 214, 215, 217, 218, 219, 220, 222, 224, 227, 228, 231, 233, 234, 235, 237, 238, 242, 243, 270, 271, 272, 274, 275, 276, 278, 281, 282, 283, 286], "matrix": [185, 190, 191, 194, 211, 212, 214, 215, 217, 218, 219, 220, 222, 224, 227, 231, 233, 234, 235, 238, 270, 271, 272, 274, 275, 276, 278, 281, 282, 286], "scheme": [185, 186, 275], "approach": [185, 186, 275], "post": [185, 186, 190, 232, 262, 275], "static": [185, 186, 190, 193, 275], "backend": [185, 194, 275], "devic": [185, 275], "fundament": [186, 275, 281], "ipex": [186, 275], "dynam": [186, 190, 191, 275], "work": [186, 194, 260, 275], "flow": [186, 194, 275], "woq": [186, 278, 287], "intel": [187, 193, 214, 217, 227, 228, 231, 232, 239, 247, 253, 288], "neural": [187, 190, 191, 193, 214, 217, 227, 228, 231, 232, 236, 240, 242, 247, 253, 255, 256, 257, 258, 260, 261, 262, 266, 267, 268, 272, 280, 285, 288], "compressor": [187, 190, 193, 214, 217, 227, 228, 231, 232, 247, 253, 280, 288], "document": [187, 193, 200, 288], "section": [187, 288], "contributor": [188, 189], "coven": [188, 189], "code": [188, 189, 191, 213, 232, 254, 259, 278, 285], "conduct": [188, 189], "our": [188, 281], "pledg": 188, "standard": 188, "respons": [188, 262], "scope": [188, 272], "enforc": 188, "contribut": [189, 246, 250], "guidelin": 189, "creat": [189, 259], "pull": 189, "request": [189, 233, 264], "step": [189, 255, 256, 257, 258], "checklist": 189, "templat": 189, "accept": 189, "criteria": [189, 272, 284], "statu": [189, 261, 262], "check": 189, "overview": [189, 263, 285], "fx": 190, "mode": [190, 287], "note": [190, 279], "detail": 190, "problem": 190, "architectur": [191, 216, 227, 228], "search": [191, 253], "1": [191, 220, 223, 226, 232, 253, 260, 261, 273, 287], "python": [191, 214, 225, 231, 236, 240, 241, 248, 251, 255, 274, 285], "yaml": [191, 195, 215, 220, 224, 286], "2": [191, 220, 223, 226, 232, 253, 260, 261, 287], "onli": [191, 193, 278], "advanc": [191, 259, 285], "custom": [191, 214, 231, 266, 284], "secur": [192, 220], "polici": [192, 284], "report": 192, "vulner": 192, "what": [193, 236, 254, 260], "": [193, 228, 254, 260], "new": [193, 194, 196, 248, 251, 284], "instal": [193, 217, 228, 237, 239, 246, 247, 250, 255, 260, 261], "from": [193, 195, 228, 232, 255, 260, 261], "pypi": [193, 242, 255], "weight": [193, 256, 257, 258, 278], "llm": [193, 230], "non": 193, "select": [193, 247], "public": [193, 213, 273], "event": [193, 273], "addit": 193, "commun": 193, "adaptor": [194, 195, 197], "queri": [194, 261, 266, 267, 268], "background": [194, 213, 253], "ad": 194, "capabl": [194, 278], "implement": [194, 195], "onnxrtadaptor": 194, "how": [195, 196, 217, 256, 257, 258, 260], "add": [195, 261], "an": [195, 266, 267, 268], "list": [195, 221, 265, 283], "need": 195, "design": [195, 216, 263, 284], "framework": [195, 214, 215, 222, 224, 234, 235, 274, 276, 278, 281], "query_fw_cap": 195, "accord": [195, 196], "tune_cfg": 195, "prepar": [195, 217, 256, 257, 258, 280], "calibr": [195, 212], "fp32": [195, 222], "graph": 195, "run": [195, 217, 254, 256, 257, 258, 259], "sampl": [195, 225], "iter": 195, "oper": [195, 196], "calcul": 195, "rang": 195, "gener": 195, "type": [196, 213, 272], "like": 196, "int4": 196, "few": 196, "line": 196, "chang": [196, 226, 252, 254, 279], "defin": [196, 220], "abil": 196, "specif": [196, 215], "invok": 196, "kernel": 196, "configur": [196, 220, 224, 259, 274, 280, 286], "summari": [196, 256], "onnx": [198, 228, 275, 276, 287], "runtim": [198, 228, 275, 276, 287], "torch": [199, 287], "mix": [205, 232, 233, 277], "precis": [205, 232, 233, 277], "refer": [212, 213, 235, 272, 275, 278, 281], "inc": 213, "convent": 213, "import": 213, "string": 213, "annot": 213, "comment": 213, "todo": 213, "intern": 213, "interfac": 213, "folder": [213, 254], "structur": 213, "recommend": 213, "v": [213, 254], "set": [213, 217, 239, 253], "json": 213, "build": [214, 223, 231, 259, 260, 261], "mxnet": [215, 231, 275, 283], "onnxrt": [215, 231, 283], "file": [215, 224, 286], "user": [215, 220, 226, 274, 278, 285, 286], "workflow": [216, 263], "diagnosi": [217, 255], "featur": [217, 220, 224, 227, 242, 243, 247, 274, 275, 282, 286], "modifi": 217, "script": [217, 259], "see": 217, "do": [217, 236], "paramet": [217, 262], "descript": [217, 262, 264], "suggest": 217, "fallback": 217, "knowledg": [218, 287], "intermedi": 218, "layer": [218, 276, 281], "self": 218, "distribut": [220, 242, 284], "infer": 220, "evalu": 220, "pure": 220, "horovodrun": 220, "execut": 220, "releas": [221, 248, 251, 279], "int8": [222, 287], "appendix": 222, "op": 222, "frequent": 223, "ask": 223, "question": 223, "issu": [223, 279], "3": [223, 237, 253], "4": [223, 244, 253, 273], "quick": [225, 241], "valid": [225, 228, 281, 287], "incompat": [226, 279], "between": 226, "v1": 226, "face": [226, 267, 268], "built": [226, 228, 231], "infrastructur": 227, "prerequisit": [228, 260, 261], "binari": 228, "sourc": [228, 255, 257, 258, 260, 261], "ai": 228, "kit": 228, "system": 228, "requir": [228, 246, 250, 256, 257, 258, 266], "hardwar": [228, 233, 287], "environ": [228, 239], "cpu": [228, 239, 287], "base": [228, 262, 285], "64": 228, "compat": 228, "processor": 228, "gpu": 228, "xe": 228, "multipl": [228, 270, 287], "vendor": 228, "softwar": [228, 233], "legal": 229, "inform": 229, "licens": 229, "citat": 229, "trademark": 229, "recip": [230, 275], "larg": [230, 272], "languag": [230, 272], "migrat": 232, "x": 232, "orchestr": [232, 271], "bf16": 233, "fp16": 233, "dure": [233, 277], "driven": 233, "microsc": 235, "coder": [236, 240, 242, 253, 285], "we": 236, "offer": 236, "jupyt": [236, 237, 248, 251], "lab": [236, 237], "extens": [236, 246, 247, 250, 253, 254, 263], "launcher": [236, 241], "contact": [236, 260], "aw": 237, "amazon": 237, "sagemak": 237, "For": 237, "studio": 237, "notebook": 237, "instanc": 237, "guid": [237, 285], "bigdl": 238, "nano": 238, "platform": [239, 280], "best": [239, 247], "perform": [239, 280], "mkl": 239, "openmp": 239, "jemalloc": 239, "numa": 239, "control": 239, "variabl": 239, "frequenc": 239, "govern": 239, "enabl": [240, 247, 253], "bench": 240, "superbench": 240, "argument": 241, "v0": 244, "highlight": 244, "other": 244, "changelog": [245, 249], "neural_compressor_ext_lab": [246, 248], "uninstal": [246, 250], "develop": [246, 250], "packag": [246, 248, 250, 251], "jupyterlab": 247, "Or": 247, "let": 247, "u": 247, "help": 247, "you": 247, "pre": 247, "requisit": 247, "make": [248, 251, 254, 259], "manual": [248, 251], "npm": [248, 251, 259], "autom": [248, 251], "publish": [248, 251], "conda": [248, 251], "forg": [248, 251], "neural_compressor_ext_lab_alibaba": [250, 251], "log": [252, 261, 262], "unreleas": 252, "vscode": 253, "open": [253, 258], "icon": 253, "5": 253, "welcom": 254, "your": 254, "setup": 254, "up": 254, "straight": 254, "awai": 254, "explor": 254, "test": [254, 259], "go": 254, "further": 254, "insight": [255, 256, 257, 258], "tensor": [255, 281], "dump": [255, 257], "research": 255, "collabor": 255, "debug": [256, 258], "analyz": [256, 258, 259], "result": [256, 258, 266, 267, 268], "activ": 256, "histogram": 258, "react": 259, "app": 259, "avail": 259, "eject": 259, "learn": [259, 260], "more": [259, 260], "split": 259, "bundl": 259, "size": 259, "progress": 259, "web": 259, "deploy": [259, 272], "fail": 259, "minifi": 259, "solut": [260, 261, 262, 266, 267, 268], "why": 260, "doe": 260, "method": [260, 261], "pip": [260, 261], "end": [260, 266, 267, 268], "servic": [261, 263, 266, 267, 268], "submit": [261, 262, 266, 267, 268], "task": [261, 262, 264, 266, 267, 268], "stop": [261, 266, 267, 268], "inspect": 261, "manag": [261, 266, 267], "resourc": [261, 266, 267], "node": 261, "state": 261, "cluster": [261, 262], "remov": 261, "url": 262, "endpoint": 262, "task_id": 262, "websocket": 262, "screen": 262, "ping": 262, "download": [262, 266, 267], "doc": 263, "wip": 263, "oaa": 263, "definit": 263, "diagram": 263, "hug": [267, 268], "grpc": 268, "client": 269, "singl": 270, "One": 271, "shot": 271, "network": 272, "sparsiti": 272, "decai": 272, "regular": 272, "retrain": 272, "free": 272, "spars": 272, "hyperparamet": 272, "full": 273, "80": 273, "2024": 273, "2023": 273, "25": 273, "2022": 273, "35": 273, "2021": 273, "15": [273, 287], "2018": 273, "2020": 273, "style": 274, "access": 274, "wise": 276, "lwq": 276, "turn": 277, "off": 277, "known": 279, "benefit": 280, "comparison": 280, "differ": 280, "per": 281, "channel": 281, "matmul": 281, "limit": 281, "smoothquant": 281, "enhanc": 281, "engin": 281, "entir": 281, "each": 281, "block": 281, "tensorboard": 282, "space": 284, "exit": 284, "process": 284, "zero": 285, "topic": 285, "innov": 285, "product": 285, "0": 287, "ptq": 287, "qat": 287, "17": 287, "qdq": 287}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"block_mask": [[0, "module-block_mask"]], "neural_compressor.algorithm.algorithm": [[1, "module-neural_compressor.algorithm.algorithm"]], "Classes": [[1, "classes"], [2, "classes"], [4, "classes"], [5, "classes"], [7, "classes"], [10, "classes"], [11, "classes"], [12, "classes"], [13, "classes"], [14, "classes"], [15, "classes"], [16, "classes"], [17, "classes"], [19, "classes"], [20, "classes"], [21, "classes"], [24, "classes"], [26, "classes"], [27, "classes"], [28, "classes"], [29, "classes"], [30, "classes"], [31, "classes"], [33, "classes"], [34, "classes"], [35, "classes"], [36, "classes"], [38, "classes"], [42, "classes"], [43, "classes"], [44, "classes"], [46, "classes"], [47, "classes"], [49, "classes"], [50, "classes"], [51, "classes"], [52, "classes"], [53, "classes"], [54, "classes"], [55, "classes"], [56, "classes"], [57, "classes"], [58, "classes"], [59, "classes"], [61, "classes"], [62, "classes"], [63, "classes"], [66, "classes"], [68, "classes"], [69, "classes"], [70, "classes"], [75, "classes"], [77, "classes"], [80, "classes"], [84, "classes"], [85, "classes"], [86, "classes"], [87, "classes"], [88, "classes"], [90, "classes"], [92, "classes"], [93, "classes"], [94, "classes"], [96, "classes"], [97, "classes"], [98, "classes"], [99, "classes"], [102, "classes"], [103, "classes"], [104, "classes"], [107, "classes"], [109, "classes"], [110, "classes"], [111, "classes"], [112, "classes"], [113, "classes"], [114, "classes"], [115, "classes"], [116, "classes"], [117, "classes"], [119, "classes"], [120, "classes"], [121, "classes"], [122, "classes"], [125, "classes"], [126, "classes"], [127, "classes"], [128, "classes"], [130, "classes"], [133, "classes"], [137, "classes"], [139, "classes"], [141, "classes"], [142, "classes"], [143, "classes"], [144, "classes"], [145, "classes"], [146, "classes"], [147, "classes"], [148, "classes"], [151, "classes"], [152, "classes"], [153, "classes"], [154, "classes"], [155, "classes"], [156, "classes"], [157, "classes"], [159, "classes"], [160, "classes"], [161, "classes"], [162, "classes"], [165, "classes"], [166, "classes"], [167, "classes"], [168, "classes"], [169, "classes"], [170, "classes"], [174, "classes"], [175, "classes"], [176, "classes"], [178, "classes"], [180, "classes"], [181, "classes"]], "Functions": [[1, "functions"], [6, "functions"], [12, "functions"], [14, "functions"], [21, "functions"], [27, "functions"], [28, "functions"], [29, "functions"], [30, "functions"], [34, "functions"], [35, "functions"], [37, "functions"], [46, "functions"], [54, "functions"], [56, "functions"], [63, "functions"], [68, "functions"], [69, "functions"], [72, "functions"], [73, "functions"], [74, "functions"], [77, "functions"], [78, "functions"], [80, "functions"], [81, "functions"], [82, "functions"], [84, "functions"], [91, "functions"], [98, "functions"], [102, "functions"], [107, "functions"], [108, "functions"], [109, "functions"], [111, "functions"], [116, "functions"], [122, "functions"], [126, "functions"], [128, "functions"], [130, "functions"], [131, "functions"], [133, "functions"], [134, "functions"], [135, "functions"], [137, "functions"], [138, "functions"], [142, "functions"], [146, "functions"], [148, "functions"], [150, "functions"], [154, "functions"], [162, "functions"], [166, "functions"], [168, "functions"], [169, "functions"], [172, "functions"], [175, "functions"], [176, "functions"], [177, "functions"], [179, "functions"], [180, "functions"]], "Module Contents": [[1, "module-contents"], [2, "module-contents"], [4, "module-contents"], [5, "module-contents"], [6, "module-contents"], [7, "module-contents"], [10, "module-contents"], [11, "module-contents"], [12, "module-contents"], [13, "module-contents"], [14, "module-contents"], [15, "module-contents"], [16, "module-contents"], [17, "module-contents"], [19, "module-contents"], [20, "module-contents"], [21, "module-contents"], [24, "module-contents"], [26, "module-contents"], [27, "module-contents"], [28, "module-contents"], [29, "module-contents"], [30, "module-contents"], [31, "module-contents"], [33, "module-contents"], [34, "module-contents"], [35, "module-contents"], [36, "module-contents"], [37, "module-contents"], [38, "module-contents"], [42, "module-contents"], [43, "module-contents"], [44, "module-contents"], [46, "module-contents"], [47, "module-contents"], [49, "module-contents"], [50, "module-contents"], [51, "module-contents"], [52, "module-contents"], [53, "module-contents"], [54, "module-contents"], [55, "module-contents"], [56, "module-contents"], [57, "module-contents"], [58, "module-contents"], [59, "module-contents"], [61, "module-contents"], [62, "module-contents"], [63, "module-contents"], [66, "module-contents"], [68, "module-contents"], [69, "module-contents"], [70, "module-contents"], [72, "module-contents"], [73, "module-contents"], [74, "module-contents"], [75, "module-contents"], [77, "module-contents"], [78, "module-contents"], [80, "module-contents"], [81, "module-contents"], [82, "module-contents"], [84, "module-contents"], [85, "module-contents"], [86, "module-contents"], [87, "module-contents"], [88, "module-contents"], [90, "module-contents"], [91, "module-contents"], [92, "module-contents"], [93, "module-contents"], [94, "module-contents"], [96, "module-contents"], [97, "module-contents"], [98, "module-contents"], [99, "module-contents"], [102, "module-contents"], [103, "module-contents"], [104, "module-contents"], [107, "module-contents"], [108, "module-contents"], [109, "module-contents"], [110, "module-contents"], [111, "module-contents"], [112, "module-contents"], [113, "module-contents"], [114, "module-contents"], [115, "module-contents"], [116, "module-contents"], [117, "module-contents"], [119, "module-contents"], [120, "module-contents"], [121, "module-contents"], [122, "module-contents"], [125, "module-contents"], [126, "module-contents"], [127, "module-contents"], [128, "module-contents"], [130, "module-contents"], [131, "module-contents"], [133, "module-contents"], [134, "module-contents"], [135, "module-contents"], [137, "module-contents"], [138, "module-contents"], [139, "module-contents"], [141, "module-contents"], [142, "module-contents"], [143, "module-contents"], [144, "module-contents"], [145, "module-contents"], [146, "module-contents"], [147, "module-contents"], [148, "module-contents"], [150, "module-contents"], [151, "module-contents"], [152, "module-contents"], [153, "module-contents"], [154, "module-contents"], [155, "module-contents"], [156, "module-contents"], [157, "module-contents"], [159, "module-contents"], [160, "module-contents"], [161, "module-contents"], [162, "module-contents"], [165, "module-contents"], [166, "module-contents"], [167, "module-contents"], [168, "module-contents"], [169, "module-contents"], [170, "module-contents"], [172, "module-contents"], [174, "module-contents"], [175, "module-contents"], [176, "module-contents"], [177, "module-contents"], [178, "module-contents"], [179, "module-contents"], [180, "module-contents"], [181, "module-contents"]], "neural_compressor.algorithm.fast_bias_correction": [[2, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[3, "module-neural_compressor.algorithm"]], "Submodules": [[3, "submodules"], [9, "submodules"], [18, "submodules"], [22, "submodules"], [25, "submodules"], [32, "submodules"], [41, "submodules"], [48, "submodules"], [60, "submodules"], [64, "submodules"], [67, "submodules"], [71, "submodules"], [76, "submodules"], [83, "submodules"], [89, "submodules"], [95, "submodules"], [101, "submodules"], [105, "submodules"], [118, "submodules"], [124, "submodules"], [129, "submodules"], [136, "submodules"], [140, "submodules"], [158, "submodules"], [164, "submodules"], [173, "submodules"]], "neural_compressor.algorithm.smooth_quant": [[4, "module-neural_compressor.algorithm.smooth_quant"]], "neural_compressor.algorithm.weight_correction": [[5, "module-neural_compressor.algorithm.weight_correction"]], "neural_compressor.benchmark": [[6, "module-neural_compressor.benchmark"]], "neural_compressor.config": [[7, "module-neural_compressor.config"]], "neural_compressor.contrib": [[8, "module-neural_compressor.contrib"]], "Subpackages": [[8, "subpackages"], [23, "subpackages"], [40, "subpackages"], [65, "subpackages"], [76, "subpackages"], [100, "subpackages"], [118, "subpackages"], [129, "subpackages"], [158, "subpackages"]], "neural_compressor.contrib.strategy": [[9, "module-neural_compressor.contrib.strategy"]], "neural_compressor.contrib.strategy.sigopt": [[10, "module-neural_compressor.contrib.strategy.sigopt"]], "neural_compressor.contrib.strategy.tpe": [[11, "module-neural_compressor.contrib.strategy.tpe"]], "neural_compressor.data.datasets.bert_dataset": [[12, "module-neural_compressor.data.datasets.bert_dataset"]], "neural_compressor.data.datasets.coco_dataset": [[13, "module-neural_compressor.data.datasets.coco_dataset"]], "neural_compressor.data.datasets.dataset": [[14, "module-neural_compressor.data.datasets.dataset"]], "Attributes": [[14, "attributes"], [56, "attributes"]], "neural_compressor.data.datasets.dummy_dataset": [[15, "module-neural_compressor.data.datasets.dummy_dataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[16, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "neural_compressor.data.datasets.imagenet_dataset": [[17, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[18, "module-neural_compressor.data.datasets"]], "neural_compressor.data.datasets.style_transfer_dataset": [[19, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "neural_compressor.data.filters.coco_filter": [[20, "module-neural_compressor.data.filters.coco_filter"]], "neural_compressor.data.filters.filter": [[21, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.filters": [[22, "module-neural_compressor.data.filters"]], "neural_compressor.data": [[23, "module-neural_compressor.data"]], "neural_compressor.data.transforms.imagenet_transform": [[24, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[25, "module-neural_compressor.data.transforms"]], "neural_compressor.data.transforms.postprocess": [[26, "module-neural_compressor.data.transforms.postprocess"]], "neural_compressor.data.transforms.tokenization": [[27, "module-neural_compressor.data.transforms.tokenization"]], "neural_compressor.data.transforms.transform": [[28, "module-neural_compressor.data.transforms.transform"]], "neural_compressor.experimental.benchmark": [[29, "module-neural_compressor.experimental.benchmark"]], "neural_compressor.experimental.common.criterion": [[30, "module-neural_compressor.experimental.common.criterion"]], "neural_compressor.experimental.common.dataloader": [[31, "module-neural_compressor.experimental.common.dataloader"]], "neural_compressor.experimental.common": [[32, "module-neural_compressor.experimental.common"]], "neural_compressor.experimental.common.metric": [[33, "module-neural_compressor.experimental.common.metric"]], "neural_compressor.experimental.common.model": [[34, "module-neural_compressor.experimental.common.model"]], "neural_compressor.experimental.common.optimizer": [[35, "module-neural_compressor.experimental.common.optimizer"]], "neural_compressor.experimental.common.postprocess": [[36, "module-neural_compressor.experimental.common.postprocess"]], "neural_compressor.experimental.common.torch_utils": [[37, "module-neural_compressor.experimental.common.torch_utils"]], "neural_compressor.experimental.component": [[38, "module-neural_compressor.experimental.component"]], "neural_compressor.experimental.compression": [[39, "module-neural_compressor.experimental.compression"]], "neural_compressor.experimental.contrib": [[40, "module-neural_compressor.experimental.contrib"]], "neural_compressor.experimental.contrib.strategy": [[41, "module-neural_compressor.experimental.contrib.strategy"]], "neural_compressor.experimental.contrib.strategy.sigopt": [[42, "module-neural_compressor.experimental.contrib.strategy.sigopt"]], "neural_compressor.experimental.contrib.strategy.tpe": [[43, "module-neural_compressor.experimental.contrib.strategy.tpe"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[44, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[45, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[46, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[47, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[48, "module-neural_compressor.experimental.data.dataloaders"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[49, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[50, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[51, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[52, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[53, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[54, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[55, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "neural_compressor.experimental.data.datasets.dataset": [[56, "module-neural_compressor.experimental.data.datasets.dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[57, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[58, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[59, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "neural_compressor.experimental.data.datasets": [[60, "module-neural_compressor.experimental.data.datasets"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[61, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "neural_compressor.experimental.data.filters.coco_filter": [[62, "module-neural_compressor.experimental.data.filters.coco_filter"]], "neural_compressor.experimental.data.filters.filter": [[63, "module-neural_compressor.experimental.data.filters.filter"]], "neural_compressor.experimental.data.filters": [[64, "module-neural_compressor.experimental.data.filters"]], "neural_compressor.experimental.data": [[65, "module-neural_compressor.experimental.data"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[66, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "neural_compressor.experimental.data.transforms": [[67, "module-neural_compressor.experimental.data.transforms"]], "neural_compressor.experimental.data.transforms.tokenization": [[68, "module-neural_compressor.experimental.data.transforms.tokenization"]], "neural_compressor.experimental.data.transforms.transform": [[69, "module-neural_compressor.experimental.data.transforms.transform"]], "neural_compressor.experimental.distillation": [[70, "module-neural_compressor.experimental.distillation"]], "neural_compressor.experimental.export": [[71, "module-neural_compressor.experimental.export"]], "neural_compressor.experimental.export.qlinear2qdq": [[72, "module-neural_compressor.experimental.export.qlinear2qdq"]], "neural_compressor.experimental.export.tf2onnx": [[73, "module-neural_compressor.experimental.export.tf2onnx"]], "neural_compressor.experimental.export.torch2onnx": [[74, "module-neural_compressor.experimental.export.torch2onnx"]], "neural_compressor.experimental.graph_optimization": [[75, "module-neural_compressor.experimental.graph_optimization"]], "neural_compressor.experimental": [[76, "module-neural_compressor.experimental"]], "neural_compressor.experimental.metric.bleu": [[77, "module-neural_compressor.experimental.metric.bleu"]], "neural_compressor.experimental.metric.bleu_util": [[78, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[79, "module-neural_compressor.experimental.metric.coco_label_map"]], "neural_compressor.experimental.metric.coco_tools": [[80, "module-neural_compressor.experimental.metric.coco_tools"]], "neural_compressor.experimental.metric.evaluate_squad": [[81, "module-neural_compressor.experimental.metric.evaluate_squad"]], "neural_compressor.experimental.metric.f1": [[82, "module-neural_compressor.experimental.metric.f1"]], "neural_compressor.experimental.metric": [[83, "module-neural_compressor.experimental.metric"]], "neural_compressor.experimental.metric.metric": [[84, "module-neural_compressor.experimental.metric.metric"]], "neural_compressor.experimental.mixed_precision": [[85, "module-neural_compressor.experimental.mixed_precision"]], "neural_compressor.experimental.model_conversion": [[86, "module-neural_compressor.experimental.model_conversion"]], "neural_compressor.experimental.nas.basic_nas": [[87, "module-neural_compressor.experimental.nas.basic_nas"]], "neural_compressor.experimental.nas.dynas": [[88, "module-neural_compressor.experimental.nas.dynas"]], "neural_compressor.experimental.nas": [[89, "module-neural_compressor.experimental.nas"]], "neural_compressor.experimental.nas.nas": [[90, "module-neural_compressor.experimental.nas.nas"]], "neural_compressor.experimental.nas.nas_utils": [[91, "module-neural_compressor.experimental.nas.nas_utils"]], "neural_compressor.experimental.nas.search_algorithms": [[92, "module-neural_compressor.experimental.nas.search_algorithms"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[93, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[94, "module-neural_compressor.experimental.pruner_legacy.group_lasso"]], "neural_compressor.experimental.pruner_legacy": [[95, "module-neural_compressor.experimental.pruner_legacy"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[96, "module-neural_compressor.experimental.pruner_legacy.magnitude"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[97, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"]], "neural_compressor.experimental.pruner_legacy.pruner": [[98, "module-neural_compressor.experimental.pruner_legacy.pruner"]], "neural_compressor.experimental.pruning": [[99, "module-neural_compressor.experimental.pruning"]], "neural_compressor.experimental.pruning_recipes": [[100, "module-neural_compressor.experimental.pruning_recipes"]], "neural_compressor.experimental.pruning_recipes.patterns": [[101, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[102, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[103, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "neural_compressor.experimental.pruning_v2": [[104, "module-neural_compressor.experimental.pruning_v2"]], "neural_compressor.experimental.pytorch_pruner": [[105, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[106, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[107, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[108, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[109, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[110, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[111, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "neural_compressor.experimental.quantization": [[112, "module-neural_compressor.experimental.quantization"]], "neural_compressor.experimental.scheduler": [[113, "module-neural_compressor.experimental.scheduler"]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[114, "module-neural_compressor.experimental.strategy.auto_mixed_precision"]], "neural_compressor.experimental.strategy.basic": [[115, "module-neural_compressor.experimental.strategy.basic"]], "neural_compressor.experimental.strategy.bayesian": [[116, "module-neural_compressor.experimental.strategy.bayesian"]], "neural_compressor.experimental.strategy.exhaustive": [[117, "module-neural_compressor.experimental.strategy.exhaustive"]], "neural_compressor.experimental.strategy": [[118, "module-neural_compressor.experimental.strategy"]], "neural_compressor.experimental.strategy.mse": [[119, "module-neural_compressor.experimental.strategy.mse"]], "neural_compressor.experimental.strategy.mse_v2": [[120, "module-neural_compressor.experimental.strategy.mse_v2"]], "neural_compressor.experimental.strategy.random": [[121, "module-neural_compressor.experimental.strategy.random"]], "neural_compressor.experimental.strategy.strategy": [[122, "module-neural_compressor.experimental.strategy.strategy"]], "neural_compressor.experimental.strategy.utils.constant": [[123, "module-neural_compressor.experimental.strategy.utils.constant"]], "neural_compressor.experimental.strategy.utils": [[124, "module-neural_compressor.experimental.strategy.utils"]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[125, "module-neural_compressor.experimental.strategy.utils.tuning_sampler"]], "neural_compressor.experimental.strategy.utils.tuning_space": [[126, "module-neural_compressor.experimental.strategy.utils.tuning_space"]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[127, "module-neural_compressor.experimental.strategy.utils.tuning_structs"]], "neural_compressor.experimental.strategy.utils.utility": [[128, "module-neural_compressor.experimental.strategy.utils.utility"]], "neural_compressor": [[129, "module-neural_compressor"]], "neural_compressor.metric.bleu": [[130, "module-neural_compressor.metric.bleu"]], "neural_compressor.metric.bleu_util": [[131, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[132, "module-neural_compressor.metric.coco_label_map"]], "neural_compressor.metric.coco_tools": [[133, "module-neural_compressor.metric.coco_tools"]], "neural_compressor.metric.evaluate_squad": [[134, "module-neural_compressor.metric.evaluate_squad"]], "neural_compressor.metric.f1": [[135, "module-neural_compressor.metric.f1"]], "neural_compressor.metric": [[136, "module-neural_compressor.metric"]], "neural_compressor.metric.metric": [[137, "module-neural_compressor.metric.metric"]], "neural_compressor.mix_precision": [[138, "module-neural_compressor.mix_precision"]], "neural_compressor.model.base_model": [[139, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[140, "module-neural_compressor.model"]], "neural_compressor.model.keras_model": [[141, "module-neural_compressor.model.keras_model"]], "neural_compressor.model.model": [[142, "module-neural_compressor.model.model"]], "neural_compressor.model.mxnet_model": [[143, "module-neural_compressor.model.mxnet_model"]], "neural_compressor.model.nets_factory": [[144, "module-neural_compressor.model.nets_factory"]], "neural_compressor.model.onnx_model": [[145, "module-neural_compressor.model.onnx_model"]], "neural_compressor.model.tensorflow_model": [[146, "module-neural_compressor.model.tensorflow_model"]], "neural_compressor.model.torch_model": [[147, "module-neural_compressor.model.torch_model"]], "neural_compressor.objective": [[148, "module-neural_compressor.objective"]], "neural_compressor.profiling": [[149, "module-neural_compressor.profiling"]], "neural_compressor.quantization": [[150, "module-neural_compressor.quantization"]], "neural_compressor.strategy.auto": [[151, "module-neural_compressor.strategy.auto"]], "neural_compressor.strategy.auto_mixed_precision": [[152, "module-neural_compressor.strategy.auto_mixed_precision"]], "neural_compressor.strategy.basic": [[153, "module-neural_compressor.strategy.basic"]], "neural_compressor.strategy.bayesian": [[154, "module-neural_compressor.strategy.bayesian"]], "neural_compressor.strategy.conservative": [[155, "module-neural_compressor.strategy.conservative"]], "neural_compressor.strategy.exhaustive": [[156, "module-neural_compressor.strategy.exhaustive"]], "neural_compressor.strategy.hawq_v2": [[157, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy": [[158, "module-neural_compressor.strategy"]], "neural_compressor.strategy.mse": [[159, "module-neural_compressor.strategy.mse"]], "neural_compressor.strategy.mse_v2": [[160, "module-neural_compressor.strategy.mse_v2"]], "neural_compressor.strategy.random": [[161, "module-neural_compressor.strategy.random"]], "neural_compressor.strategy.strategy": [[162, "module-neural_compressor.strategy.strategy"]], "neural_compressor.strategy.utils.constant": [[163, "module-neural_compressor.strategy.utils.constant"]], "neural_compressor.strategy.utils": [[164, "module-neural_compressor.strategy.utils"]], "neural_compressor.strategy.utils.tuning_sampler": [[165, "module-neural_compressor.strategy.utils.tuning_sampler"]], "neural_compressor.strategy.utils.tuning_space": [[166, "module-neural_compressor.strategy.utils.tuning_space"]], "neural_compressor.strategy.utils.tuning_structs": [[167, "module-neural_compressor.strategy.utils.tuning_structs"]], "neural_compressor.strategy.utils.utility": [[168, "module-neural_compressor.strategy.utils.utility"]], "neural_compressor.training": [[169, "module-neural_compressor.training"]], "neural_compressor.utils.collect_layer_histogram": [[170, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[171, "module-neural_compressor.utils.constant"]], "neural_compressor.utils.create_obj_from_config": [[172, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils": [[173, "module-neural_compressor.utils"]], "neural_compressor.utils.kl_divergence": [[174, "module-neural_compressor.utils.kl_divergence"]], "neural_compressor.utils.load_huggingface": [[175, "module-neural_compressor.utils.load_huggingface"]], "neural_compressor.utils.logger": [[176, "module-neural_compressor.utils.logger"]], "neural_compressor.utils.neural_insights_utils": [[177, "module-neural_compressor.utils.neural_insights_utils"]], "neural_compressor.utils.options": [[178, "module-neural_compressor.utils.options"]], "neural_compressor.utils.pytorch": [[179, "module-neural_compressor.utils.pytorch"]], "neural_compressor.utils.utility": [[180, "module-neural_compressor.utils.utility"]], "neural_compressor.utils.weights_details": [[181, "module-neural_compressor.utils.weights_details"]], "neural_compressor.version": [[182, "module-neural_compressor.version"]], "TensorFlow Quantization": [[183, "tensorflow-quantization"]], "Introduction": [[183, "introduction"], [184, "introduction"], [185, "introduction"], [190, "introduction"], [191, "introduction"], [194, "introduction"], [195, "introduction"], [196, "introduction"], [211, "introduction"], [212, "introduction"], [214, "introduction"], [215, "introduction"], [218, "introduction"], [219, "introduction"], [220, "introduction"], [222, "introduction"], [224, "introduction"], [227, "introduction"], [231, "introduction"], [233, "introduction"], [234, "introduction"], [235, "introduction"], [256, "introduction"], [257, "introduction"], [258, "introduction"], [270, "introduction"], [271, "introduction"], [272, "introduction"], [274, "introduction"], [276, "introduction"], [278, "introduction"], [280, "introduction"], [281, "introduction"], [282, "introduction"], [283, "introduction"], [284, "introduction"], [286, "introduction"]], "Get Started": [[183, "get-started"], [190, "get-started"], [217, "get-started"], [260, "get-started"], [275, "get-started"]], "Without Accuracy Aware Tuning": [[183, "without-accuracy-aware-tuning"]], "With Accuracy Aware Tuning": [[183, "with-accuracy-aware-tuning"]], "Specify Quantization Rules": [[183, "specify-quantization-rules"], [275, "specify-quantization-rules"]], "Examples": [[183, "examples"], [184, "examples"], [190, "examples"], [191, "examples"], [211, "examples"], [214, "examples"], [215, "examples"], [218, "examples"], [219, "examples"], [220, "examples"], [221, "examples"], [222, "examples"], [232, "examples"], [233, "examples"], [234, "examples"], [235, "examples"], [271, "examples"], [272, "examples"], [275, "examples"], [276, "examples"], [278, "examples"], [282, "examples"]], "Smooth Quant": [[184, "smooth-quant"], [186, "smooth-quant"], [281, "smooth-quant"]], "Usage": [[184, "usage"], [242, "usage"], [262, "usage"], [262, "id2"], [262, "id6"], [262, "id9"], [262, "id16"], [262, "id19"], [262, "id22"], [262, "id25"], [281, "usage"], [282, "usage"], [282, "id1"], [284, "usage"], [284, "id2"], [284, "id4"], [284, "id6"], [284, "id8"], [284, "id10"], [284, "id12"], [284, "id14"], [284, "id16"], [284, "id18"], [284, "id20"], [284, "id22"]], "Using a Fixed alpha": [[184, "using-a-fixed-alpha"]], "Determining the alpha through auto-tuning": [[184, "determining-the-alpha-through-auto-tuning"], [281, "determining-the-alpha-through-auto-tuning"]], "TensorFlow": [[185, "tensorflow"], [215, "tensorflow"], [231, "tensorflow"], [283, "tensorflow"]], "API for TensorFlow": [[185, "api-for-tensorflow"]], "Support Matrix": [[185, "support-matrix"], [212, "support-matrix"], [238, "support-matrix"]], "Quantization Scheme": [[185, "quantization-scheme"]], "Quantization Approaches": [[185, "quantization-approaches"], [186, "quantization-approaches"], [275, "quantization-approaches"]], "Post Training Static Quantization": [[185, "post-training-static-quantization"], [186, "post-training-static-quantization"], [190, "post-training-static-quantization"], [275, "post-training-static-quantization"]], "Smooth Quantization": [[185, "smooth-quantization"]], "Backend and Device": [[185, "backend-and-device"]], "Quantization": [[186, "quantization"], [208, "quantization"], [274, "quantization"], [275, "quantization"]], "Quantization Introduction": [[186, "quantization-introduction"], [275, "quantization-introduction"]], "Quantization Fundamentals": [[186, "quantization-fundamentals"], [275, "quantization-fundamentals"], [281, "quantization-fundamentals"]], "Quantization Scheme in TensorFlow": [[186, "quantization-scheme-in-tensorflow"], [275, "quantization-scheme-in-tensorflow"]], "Quantization Scheme in PyTorch": [[186, "quantization-scheme-in-pytorch"], [275, "quantization-scheme-in-pytorch"]], "Quantization Scheme in IPEX": [[186, "quantization-scheme-in-ipex"], [275, "quantization-scheme-in-ipex"]], "Post Training Dynamic Quantization": [[186, "post-training-dynamic-quantization"], [190, "post-training-dynamic-quantization"], [275, "post-training-dynamic-quantization"]], "Quantization Aware Training": [[186, "quantization-aware-training"], [232, "quantization-aware-training"], [275, "quantization-aware-training"], [275, "id1"]], "Accuracy Aware Tuning": [[186, "accuracy-aware-tuning"], [275, "accuracy-aware-tuning"]], "Working Flow": [[186, "working-flow"], [194, "working-flow"], [275, "working-flow"]], "WOQ": [[186, "woq"]], "Intel\u00ae Neural Compressor Documentation": [[187, "intel-neural-compressor-documentation"], [288, "intel-neural-compressor-documentation"]], "Sections": [[187, "sections"], [288, "sections"]], "Contributor Covenant Code of Conduct": [[188, "contributor-covenant-code-of-conduct"], [189, "contributor-covenant-code-of-conduct"]], "Our Pledge": [[188, "our-pledge"]], "Our Standards": [[188, "our-standards"]], "Our Responsibilities": [[188, "our-responsibilities"]], "Scope": [[188, "scope"]], "Enforcement": [[188, "enforcement"]], "Attribution": [[188, "attribution"]], "Contribution Guidelines": [[189, "contribution-guidelines"]], "Create Pull Request": [[189, "create-pull-request"]], "Step-by-Step guidelines": [[189, "step-by-step-guidelines"]], "Pull Request Checklist": [[189, "pull-request-checklist"]], "Pull Request Template": [[189, "pull-request-template"]], "Pull Request Acceptance Criteria": [[189, "pull-request-acceptance-criteria"]], "Pull Request Status Checks Overview": [[189, "pull-request-status-checks-overview"]], "Support": [[189, "support"]], "FX": [[190, "fx"]], "FX Mode Support Matrix in Neural Compressor": [[190, "fx-mode-support-matrix-in-neural-compressor"]], "Quantization-Aware Training": [[190, "quantization-aware-training"]], "Note": [[190, "note"]], "Details": [[190, "details"]], "Common Problem": [[190, "common-problem"]], "Dynamic Quantization": [[190, "dynamic-quantization"]], "Static Quantization & Quantization Aware Training": [[190, "static-quantization-quantization-aware-training"]], "Neural Architecture Search": [[191, "neural-architecture-search"]], "Basic NAS": [[191, "basic-nas"]], "Dynamic NAS": [[191, "dynamic-nas"]], "NAS Support Matrix": [[191, "nas-support-matrix"]], "Get Started with NAS API": [[191, "get-started-with-nas-api"]], "Basic Usage": [[191, "basic-usage"]], "1. Python code + YAML": [[191, "python-code-yaml"]], "2. Python code only": [[191, "python-code-only"]], "Advanced Usage (Custom NAS)": [[191, "advanced-usage-custom-nas"]], "Security Policy": [[192, "security-policy"]], "Report a Vulnerability": [[192, "report-a-vulnerability"]], "Intel\u00ae Neural Compressor": [[193, "intel-neural-compressor"], [253, "intel-neural-compressor"]], "What\u2019s New": [[193, "what-s-new"]], "Installation": [[193, "installation"], [228, "installation"], [228, "id1"], [247, "installation"], [255, "installation"], [260, "installation"]], "Install from pypi": [[193, "install-from-pypi"], [255, "install-from-pypi"]], "Getting Started": [[193, "getting-started"], [225, "getting-started"], [255, "getting-started"]], "Weight-Only Quantization (LLMs)": [[193, "weight-only-quantization-llms"]], "Static Quantization (Non-LLMs)": [[193, "static-quantization-non-llms"]], "Documentation": [[193, "documentation"]], "Selected Publications/Events": [[193, "selected-publications-events"]], "Additional Content": [[193, "additional-content"]], "Communication": [[193, "communication"]], "Adaptor": [[194, "adaptor"], [197, "adaptor"]], "Adaptor Support Matrix": [[194, "adaptor-support-matrix"]], "Get Started with Adaptor API": [[194, "get-started-with-adaptor-api"]], "Query API": [[194, "query-api"]], "Background": [[194, "background"], [213, "background"]], "Query API Introduction": [[194, "query-api-introduction"]], "Example of Adding a New Backend Support": [[194, "example-of-adding-a-new-backend-support"]], "Capability": [[194, "capability"]], "Implement ONNXRTAdaptor Class": [[194, "implement-onnxrtadaptor-class"]], "How to Add An Adaptor": [[195, "how-to-add-an-adaptor"]], "API List that Need to Implement": [[195, "api-list-that-need-to-implement"]], "Design the framework YAML": [[195, "design-the-framework-yaml"]], "Add query_fw_capability to Adaptor": [[195, "add-query-fw-capability-to-adaptor"]], "Add quantize API according to tune_cfg": [[195, "add-quantize-api-according-to-tune-cfg"]], "Prepare calibration model from fp32 graph": [[195, "prepare-calibration-model-from-fp32-graph"]], "Run sampling iterations of the fp32 graph to calibrate quantizable operators.": [[195, "run-sampling-iterations-of-the-fp32-graph-to-calibrate-quantizable-operators"]], "Calculate the data range and generate quantized model": [[195, "calculate-the-data-range-and-generate-quantized-model"]], "How to Support New Data Type, Like Int4, with a Few Line Changes": [[196, "how-to-support-new-data-type-like-int4-with-a-few-line-changes"]], "Define the Quantization Ability of the Specific Operator": [[196, "define-the-quantization-ability-of-the-specific-operator"]], "Invoke the Operator Kernel According to the Tuning Configuration": [[196, "invoke-the-operator-kernel-according-to-the-tuning-configuration"]], "Use the New Data Type": [[196, "use-the-new-data-type"]], "Summary": [[196, "summary"]], "ONNX Runtime": [[198, "onnx-runtime"]], "Torch Utils": [[199, "torch-utils"]], "API Document Example": [[200, "api-document-example"]], "APIs": [[201, "apis"]], "Benchmark": [[202, "benchmark"], [232, "benchmark"], [274, "benchmark"]], "Compression": [[203, "compression"]], "Config": [[204, "config"]], "Mix Precision": [[205, "mix-precision"], [232, "mix-precision"]], "Model": [[206, "model"], [234, "model"], [256, "model"], [258, "model"]], "Objective": [[207, "objective"], [266, "objective"], [267, "objective"], [268, "objective"], [270, "objective"]], "Strategy": [[209, "strategy"]], "Training": [[210, "training"]], "Benchmarking": [[211, "benchmarking"]], "Benchmark Support Matrix": [[211, "benchmark-support-matrix"]], "Get Started with Benchmark API": [[211, "get-started-with-benchmark-api"]], "Calibration Algorithms in Quantization": [[212, "calibration-algorithms-in-quantization"]], "Calibration Algorithms": [[212, "calibration-algorithms"]], "Reference": [[212, "reference"], [213, "reference"], [235, "reference"], [272, "reference"], [275, "reference"], [278, "reference"], [281, "reference"]], "INC Coding Conventions": [[213, "inc-coding-conventions"]], "Rules": [[213, "rules"]], "Imports": [[213, "imports"]], "Strings": [[213, "strings"]], "Logger": [[213, "logger"]], "Type Annotations": [[213, "type-annotations"]], "Comments": [[213, "comments"]], "TODO Comments": [[213, "todo-comments"]], "Public and Internal Interfaces": [[213, "public-and-internal-interfaces"]], "Folder structure": [[213, "folder-structure"]], "Recommend VS Code settings.json": [[213, "recommend-vs-code-settings-json"]], "DataLoader": [[214, "dataloader"]], "Supported Framework Dataloader Matrix": [[214, "supported-framework-dataloader-matrix"]], "Get Started with DataLoader": [[214, "get-started-with-dataloader"]], "Use Intel\u00ae Neural Compressor DataLoader API": [[214, "use-intel-neural-compressor-dataloader-api"]], "Build Custom Dataloader with Python API": [[214, "build-custom-dataloader-with-python-api"]], "Dataset": [[215, "dataset"]], "Supported Framework Dataset Matrix": [[215, "supported-framework-dataset-matrix"]], "PyTorch": [[215, "pytorch"], [231, "pytorch"], [277, "pytorch"]], "MXNet": [[215, "mxnet"], [231, "mxnet"], [283, "mxnet"]], "ONNXRT": [[215, "onnxrt"], [231, "onnxrt"], [283, "onnxrt"]], "Get start with Dataset API": [[215, "get-start-with-dataset-api"]], "Config dataloader in a yaml file": [[215, "config-dataloader-in-a-yaml-file"]], "User-specific dataset": [[215, "user-specific-dataset"]], "Design": [[216, "design"], [284, "design"], [284, "id1"], [284, "id3"], [284, "id5"], [284, "id7"], [284, "id9"], [284, "id11"], [284, "id13"], [284, "id15"], [284, "id17"], [284, "id19"], [284, "id21"]], "Architecture": [[216, "architecture"], [227, "architecture"]], "Workflow": [[216, "workflow"]], "Diagnosis": [[217, "diagnosis"]], "Diagnosis Introduction": [[217, "diagnosis-introduction"]], "Supported Feature Matrix": [[217, "supported-feature-matrix"], [220, "supported-feature-matrix"], [224, "supported-feature-matrix"], [227, "supported-feature-matrix"], [274, "supported-feature-matrix"], [275, "supported-feature-matrix"], [282, "supported-feature-matrix"], [286, "supported-feature-matrix"]], "Install Intel\u00ae Neural Compressor": [[217, "install-intel-neural-compressor"]], "Modify script": [[217, "modify-script"]], "Quantization diagnosis": [[217, "quantization-diagnosis"]], "Benchmark diagnosis": [[217, "benchmark-diagnosis"]], "Example": [[217, "example"], [231, "example"], [238, "example"], [242, "example"], [270, "example"]], "Prepare dataset": [[217, "prepare-dataset"]], "Run quantization script": [[217, "run-quantization-script"]], "Run benchmark script": [[217, "run-benchmark-script"]], "See quantization data": [[217, "see-quantization-data"]], "How to do diagnosis": [[217, "how-to-do-diagnosis"]], "Parameter description": [[217, "parameter-description"]], "Diagnosis suggestions": [[217, "diagnosis-suggestions"]], "Fallback setting example": [[217, "fallback-setting-example"]], "See profiling data": [[217, "see-profiling-data"]], "Distillation": [[218, "distillation"], [232, "distillation"], [274, "distillation"]], "Knowledge Distillation": [[218, "knowledge-distillation"]], "Intermediate Layer Knowledge Distillation": [[218, "intermediate-layer-knowledge-distillation"]], "Self Distillation": [[218, "self-distillation"]], "Distillation Support Matrix": [[218, "distillation-support-matrix"]], "Get Started with Distillation API": [[218, "get-started-with-distillation-api"]], "Distillation for Quantization": [[219, "distillation-for-quantization"]], "Distillation for Quantization Support Matrix": [[219, "distillation-for-quantization-support-matrix"]], "Get Started with Distillation for Quantization API": [[219, "get-started-with-distillation-for-quantization-api"]], "Distributed Training and Inference (Evaluation)": [[220, "distributed-training-and-inference-evaluation"]], "Get Started with Distributed Training and Inference API": [[220, "get-started-with-distributed-training-and-inference-api"]], "Option 1: Pure Yaml Configuration": [[220, "option-1-pure-yaml-configuration"]], "Option 2: User Defined Training Function": [[220, "option-2-user-defined-training-function"]], "Horovodrun Execution": [[220, "horovodrun-execution"]], "Security": [[220, "security"]], "PyTorch Examples:": [[220, "pytorch-examples"]], "TensorFlow Examples:": [[220, "tensorflow-examples"]], "Example List": [[221, "example-list"]], "Release Data": [[221, "release-data"]], "Export": [[222, "export"]], "Supported Framework Model Matrix": [[222, "supported-framework-model-matrix"], [234, "supported-framework-model-matrix"], [235, "supported-framework-model-matrix"], [276, "supported-framework-model-matrix"], [278, "supported-framework-model-matrix"]], "PyTorch Model": [[222, "pytorch-model"]], "FP32 Model Export": [[222, "fp32-model-export"], [222, "id1"]], "INT8 Model Export": [[222, "int8-model-export"], [222, "id2"]], "Tensorflow Model": [[222, "tensorflow-model"]], "Appendix": [[222, "appendix"]], "Supported quantized ops": [[222, "supported-quantized-ops"]], "Frequently Asked Questions": [[223, "frequently-asked-questions"]], "Common Build Issues": [[223, "common-build-issues"]], "Issue 1:": [[223, "issue-1"]], "Issue 2:": [[223, "issue-2"]], "Issue 3:": [[223, "issue-3"]], "Issue 4:": [[223, "issue-4"]], "Framework YAML Configuration Files": [[224, "framework-yaml-configuration-files"]], "Get started with Framework YAML Files": [[224, "get-started-with-framework-yaml-files"]], "Quick Samples": [[225, "quick-samples"]], "Quantization with Python API": [[225, "quantization-with-python-api"], [255, "quantization-with-python-api"]], "Validated Models": [[225, "validated-models"], [281, "validated-models"], [287, "validated-models"]], "Incompatible changes between v1.2 and v1.1": [[226, "incompatible-changes-between-v1-2-and-v1-1"]], "User-facing APIs": [[226, "user-facing-apis"]], "Built-in transform/dataset/metric APIs": [[226, "built-in-transform-dataset-metric-apis"]], "Infrastructure of Intel\u00ae Neural Compressor": [[227, "infrastructure-of-intel-neural-compressor"]], "Prerequisites": [[228, "prerequisites"], [260, "prerequisites"], [261, "prerequisites"]], "Install from Binary": [[228, "install-from-binary"]], "Install from Source": [[228, "install-from-source"], [255, "install-from-source"]], "Install from AI Kit": [[228, "install-from-ai-kit"]], "System Requirements": [[228, "system-requirements"]], "Validated Hardware Environment": [[228, "validated-hardware-environment"]], "Intel\u00ae Neural Compressor supports CPUs based on Intel 64 architecture or compatible processors:": [[228, "intel-neural-compressor-supports-cpus-based-on-intel-64-architecture-or-compatible-processors"]], "Intel\u00ae Neural Compressor supports GPUs built on Intel\u2019s Xe architecture:": [[228, "intel-neural-compressor-supports-gpus-built-on-intel-s-xe-architecture"]], "Intel\u00ae Neural Compressor quantized ONNX models support multiple hardware vendors through ONNX Runtime:": [[228, "intel-neural-compressor-quantized-onnx-models-support-multiple-hardware-vendors-through-onnx-runtime"]], "Validated Software Environment": [[228, "validated-software-environment"]], "Legal Information": [[229, "legal-information"]], "License": [[229, "license"]], "Citation": [[229, "citation"]], "Trademarks": [[229, "trademarks"]], "LLMs Quantization Recipes": [[230, "llms-quantization-recipes"]], "Large Language Models Recipes": [[230, "large-language-models-recipes"]], "Large Language Models Accuracy": [[230, "large-language-models-accuracy"]], "Metrics": [[231, "metrics"]], "Supported Built-in Metric Matrix": [[231, "supported-built-in-metric-matrix"]], "Get Started with Metric": [[231, "get-started-with-metric"]], "Use Intel\u00ae Neural Compressor Metric API": [[231, "use-intel-neural-compressor-metric-api"]], "Build Custom Metric with Python API": [[231, "build-custom-metric-with-python-api"]], "Code Migration from Intel Neural Compressor 1.X to Intel Neural Compressor 2.X": [[232, "code-migration-from-intel-neural-compressor-1-x-to-intel-neural-compressor-2-x"]], "Model Quantization": [[232, "model-quantization"]], "Post-training Quantization": [[232, "post-training-quantization"]], "Pruning": [[232, "pruning"], [272, "pruning"], [274, "pruning"]], "Orchestration": [[232, "orchestration"]], "Mixed Precision": [[233, "mixed-precision"]], "Mixed Precision Support Matrix": [[233, "mixed-precision-support-matrix"]], "Hardware and Software requests for BF16": [[233, "hardware-and-software-requests-for-bf16"]], "Hardware and Software requests for FP16": [[233, "hardware-and-software-requests-for-fp16"]], "During quantization mixed precision": [[233, "during-quantization-mixed-precision"]], "Accuracy-driven mixed precision": [[233, "accuracy-driven-mixed-precision"]], "Get Started with Mixed Precision API": [[233, "get-started-with-mixed-precision-api"]], "Microscaling Quantization": [[235, "microscaling-quantization"]], "Get Started with Microscaling Quantization API": [[235, "get-started-with-microscaling-quantization-api"]], "Neural Coder": [[236, "neural-coder"], [253, "neural-coder"], [253, "id1"]], "What do we offer?": [[236, "what-do-we-offer"]], "Getting Started!": [[236, "getting-started"], [247, "getting-started"]], "Jupyter Lab Extension": [[236, "jupyter-lab-extension"]], "Python Launcher": [[236, "python-launcher"], [241, "python-launcher"]], "Python API": [[236, "python-api"]], "Contact": [[236, "contact"], [260, "contact"]], "AWS Amazon SageMaker Support": [[237, "aws-amazon-sagemaker-support"]], "Start Jupyter Lab 3": [[237, "start-jupyter-lab-3"]], "For SageMaker Studio": [[237, "for-sagemaker-studio"]], "For SageMaker Notebook instance": [[237, "for-sagemaker-notebook-instance"]], "Installation Guide": [[237, "installation-guide"]], "BigDL Nano Support": [[238, "bigdl-nano-support"]], "Intel CPU Platforms: Best Performance Setting": [[239, "intel-cpu-platforms-best-performance-setting"]], "Install MKL, OpenMP and JEMALLOC": [[239, "install-mkl-openmp-and-jemalloc"]], "Install NUMA Controller": [[239, "install-numa-controller"]], "Environment Variables": [[239, "environment-variables"]], "Frequency Governers": [[239, "frequency-governers"]], "Neural Coder as Python API": [[240, "neural-coder-as-python-api"]], "Enable": [[240, "enable"]], "Bench": [[240, "bench"]], "SuperBench": [[240, "superbench"]], "Quick-Start": [[241, "quick-start"]], "Launcher Arguments (Optional)": [[241, "launcher-arguments-optional"]], "Neural Coder for Quantization": [[242, "neural-coder-for-quantization"]], "Features Supported": [[242, "features-supported"]], "Models Supported": [[242, "models-supported"]], "PyPI distribution:": [[242, "pypi-distribution"]], "Supported Optimization Features": [[243, "supported-optimization-features"]], "v0.4": [[244, "v0-4"]], "Highlights": [[244, "highlights"]], "Others": [[244, "others"]], "Changelog": [[245, "changelog"], [249, "changelog"]], "neural_compressor_ext_lab": [[246, "neural-compressor-ext-lab"]], "Requirements": [[246, "requirements"], [250, "requirements"], [256, "requirements"], [257, "requirements"], [258, "requirements"], [266, "requirements"]], "Install": [[246, "install"]], "Uninstall": [[246, "uninstall"]], "Contributing": [[246, "contributing"], [250, "contributing"]], "Development install": [[246, "development-install"], [250, "development-install"]], "Development uninstall": [[246, "development-uninstall"], [250, "development-uninstall"]], "Packaging the extension": [[246, "packaging-the-extension"], [250, "packaging-the-extension"]], "Intel\u00ae Neural Compressor as JupyterLab Extension": [[247, "intel-neural-compressor-as-jupyterlab-extension"]], "Auto-enable a feature": [[247, "auto-enable-a-feature"]], "Or let us help you auto-select the best feature": [[247, "or-let-us-help-you-auto-select-the-best-feature"]], "Pre-requisites": [[247, "pre-requisites"]], "Making a new release of neural_compressor_ext_lab": [[248, "making-a-new-release-of-neural-compressor-ext-lab"]], "Manual release": [[248, "manual-release"], [251, "manual-release"]], "Python package": [[248, "python-package"], [251, "python-package"]], "NPM package": [[248, "npm-package"], [251, "npm-package"]], "Automated releases with the Jupyter Releaser": [[248, "automated-releases-with-the-jupyter-releaser"], [251, "automated-releases-with-the-jupyter-releaser"]], "Publishing to conda-forge": [[248, "publishing-to-conda-forge"], [251, "publishing-to-conda-forge"]], "neural_compressor_ext_lab_alibaba": [[250, "neural-compressor-ext-lab-alibaba"]], "Making a new release of neural_compressor_ext_lab_alibaba": [[251, "making-a-new-release-of-neural-compressor-ext-lab-alibaba"]], "Change Log": [[252, "change-log"]], "[Unreleased]": [[252, "unreleased"]], "Background Introduction": [[253, "background-introduction"]], "Neural Coder Extension in VSCode": [[253, "neural-coder-extension-in-vscode"]], "Neural Coder Extension Usage": [[253, "neural-coder-extension-usage"]], "1. Open": [[253, "open"]], "2. Search": [[253, "search"]], "3. Setting": [[253, "setting"]], "4. Icon": [[253, "icon"]], "5. optimization (quantization)": [[253, "optimization-quantization"]], "5.1 Enable": [[253, "enable"]], "5.2 Auto": [[253, "auto"]], "Welcome to your VS Code Extension": [[254, "welcome-to-your-vs-code-extension"]], "What\u2019s in the folder": [[254, "what-s-in-the-folder"]], "Setup": [[254, "setup"]], "Get up and running straight away": [[254, "get-up-and-running-straight-away"]], "Make changes": [[254, "make-changes"]], "Explore the API": [[254, "explore-the-api"]], "Run tests": [[254, "run-tests"]], "Go further": [[254, "go-further"]], "Neural Insights": [[255, "neural-insights"]], "Start the Neural Insights": [[255, "start-the-neural-insights"]], "Tensor dump examples": [[255, "tensor-dump-examples"]], "Step by Step Diagnosis Example": [[255, "step-by-step-diagnosis-example"]], "Research Collaborations": [[255, "research-collaborations"]], "Step by step example how to debug accuracy with Neural Insights": [[256, "step-by-step-example-how-to-debug-accuracy-with-neural-insights"], [258, "step-by-step-example-how-to-debug-accuracy-with-neural-insights"]], "Preparation": [[256, "preparation"], [257, "preparation"], [258, "preparation"], [280, "preparation"]], "Running the quantization": [[256, "running-the-quantization"], [257, "running-the-quantization"], [258, "running-the-quantization"]], "Analyzing the result of quantization": [[256, "analyzing-the-result-of-quantization"], [258, "analyzing-the-result-of-quantization"]], "Weights summary": [[256, "weights-summary"]], "Activations summary": [[256, "activations-summary"]], "Step by step example how to dump weights data for PyTorch model with Neural Insights": [[257, "step-by-step-example-how-to-dump-weights-data-for-pytorch-model-with-neural-insights"]], "Source": [[257, "source"], [258, "source"]], "Prepare the dataset": [[258, "prepare-the-dataset"]], "Analyzing weight histograms": [[258, "analyzing-weight-histograms"]], "Open Neural Insights": [[258, "open-neural-insights"]], "Getting Started with Create React App": [[259, "getting-started-with-create-react-app"]], "Available Scripts": [[259, "available-scripts"]], "npm start": [[259, "npm-start"]], "npm test": [[259, "npm-test"]], "npm run build": [[259, "npm-run-build"]], "npm run eject": [[259, "npm-run-eject"]], "Learn More": [[259, "learn-more"], [260, "learn-more"]], "Code Splitting": [[259, "code-splitting"]], "Analyzing the Bundle Size": [[259, "analyzing-the-bundle-size"]], "Making a Progressive Web App": [[259, "making-a-progressive-web-app"]], "Advanced Configuration": [[259, "advanced-configuration"]], "Deployment": [[259, "deployment"]], "npm run build fails to minify": [[259, "npm-run-build-fails-to-minify"]], "What\u2019s Neural Solution?": [[260, "what-s-neural-solution"]], "Why Neural Solution?": [[260, "why-neural-solution"]], "How does Neural Solution Work?": [[260, "how-does-neural-solution-work"]], "Method 1. Using pip:": [[260, "method-1-using-pip"]], "Method 2. Building from source:": [[260, "method-2-building-from-source"]], "End-to-end examples": [[260, "end-to-end-examples"]], "Get started": [[261, "get-started"]], "Install Neural Solution": [[261, "install-neural-solution"]], "Method 1. Using pip": [[261, "method-1-using-pip"]], "Method 2. Building from source": [[261, "method-2-building-from-source"]], "Start service": [[261, "start-service"]], "Submit task": [[261, "submit-task"]], "Query task status": [[261, "query-task-status"]], "Stop service": [[261, "stop-service"]], "Inspect logs": [[261, "inspect-logs"]], "Manage resource": [[261, "manage-resource"], [266, "manage-resource"], [267, "manage-resource"]], "Node States": [[261, "node-states"]], "Query cluster": [[261, "query-cluster"]], "Add node": [[261, "add-node"]], "Remove node": [[261, "remove-node"]], "Neural Solution API": [[262, "neural-solution-api"]], "Base URL": [[262, "base-url"]], "Endpoints": [[262, "endpoints"]], "GET /": [[262, "get"]], "Description": [[262, "description"], [262, "id1"], [262, "id4"], [262, "id8"], [262, "id12"], [262, "id15"], [262, "id18"], [262, "id21"], [262, "id24"]], "Responses": [[262, "responses"], [262, "id3"], [262, "id7"], [262, "id11"], [262, "id14"], [262, "id17"], [262, "id20"], [262, "id23"], [262, "id26"]], "POST /task/submit": [[262, "post-task-submit"]], "Parameters": [[262, "parameters"], [262, "id5"], [262, "id10"], [262, "id13"]], "GET /task/status/{task_id}": [[262, "get-task-status-task-id"]], "GET /task/log/{task_id}": [[262, "get-task-log-task-id"]], "WebSocket /task/screen/{task_id}": [[262, "websocket-task-screen-task-id"]], "GET /ping": [[262, "get-ping"]], "GET /cluster": [[262, "get-cluster"]], "GET /download/{task_id}": [[262, "get-download-task-id"]], "GET /description": [[262, "get-description"]], "Design Doc for Optimization as a Service [WIP]": [[263, "design-doc-for-optimization-as-a-service-wip"]], "Contents": [[263, "contents"]], "Overview": [[263, "overview"], [285, "overview"]], "Workflow of OaaS": [[263, "workflow-of-oaas"]], "Class definition diagram": [[263, "class-definition-diagram"]], "Extensibility": [[263, "extensibility"]], "Task request description": [[264, "task-request-description"]], "Examples List": [[265, "examples-list"]], "An end-to-end example: quantize a custom model with Neural Solution": [[266, "an-end-to-end-example-quantize-a-custom-model-with-neural-solution"]], "Start the Neural Solution Service": [[266, "start-the-neural-solution-service"], [267, "start-the-neural-solution-service"], [268, "start-the-neural-solution-service"]], "Submit optimization task": [[266, "submit-optimization-task"], [267, "submit-optimization-task"], [268, "submit-optimization-task"]], "Query optimization result": [[266, "query-optimization-result"], [267, "query-optimization-result"], [268, "query-optimization-result"]], "Download optimized model": [[266, "download-optimized-model"], [267, "download-optimized-model"]], "Stop the service": [[266, "stop-the-service"], [267, "stop-the-service"], [268, "stop-the-service"]], "An end-to-end example: quantize a Hugging Face model with Neural Solution": [[267, "an-end-to-end-example-quantize-a-hugging-face-model-with-neural-solution"]], "An end-to-end example: quantize a Hugging Face model with Neural Solution gRPC API": [[268, "an-end-to-end-example-quantize-a-hugging-face-model-with-neural-solution-grpc-api"]], "Client": [[269, "client"]], "Single Objective": [[270, "single-objective"]], "Multiple Objectives": [[270, "multiple-objectives"]], "Objective Support Matrix": [[270, "objective-support-matrix"]], "Get Started with Objective API": [[270, "get-started-with-objective-api"]], "Config Single Objective": [[270, "config-single-objective"]], "Config Multiple Objectives": [[270, "config-multiple-objectives"]], "Optimization Orchestration": [[271, "optimization-orchestration"]], "One-shot": [[271, "one-shot"]], "Orchestration Support Matrix": [[271, "orchestration-support-matrix"]], "Get Started with Orchestration API": [[271, "get-started-with-orchestration-api"]], "Neural Network Pruning": [[272, "neural-network-pruning"]], "Pruning Patterns": [[272, "pruning-patterns"]], "Pruning Criteria": [[272, "pruning-criteria"]], "Pruning Types": [[272, "pruning-types"]], "Pruning Schedules": [[272, "pruning-schedules"]], "Pruning Scope": [[272, "pruning-scope"]], "Sparsity Decay Types": [[272, "sparsity-decay-types"]], "Regularization": [[272, "regularization"]], "Large Language Model Pruning": [[272, "large-language-model-pruning"]], "Pruning Support Matrix": [[272, "pruning-support-matrix"]], "Get Started with Pruning API": [[272, "get-started-with-pruning-api"]], "Training-aware pruning API": [[272, "training-aware-pruning-api"]], "Retrain-free Pruning API": [[272, "retrain-free-pruning-api"]], "Sparse Model Deployment": [[272, "sparse-model-deployment"]], "Pruning with Hyperparameter Optimization": [[272, "pruning-with-hyperparameter-optimization"]], "Full Publications/Events (80)": [[273, "full-publications-events-80"]], "2024 (1)": [[273, "id1"]], "2023 (25)": [[273, "id2"]], "2022 (35)": [[273, "id3"]], "2021 (15)": [[273, "id4"]], "2018 - 2020 (4)": [[273, "id5"]], "Pythonic Style Access for Configurations": [[274, "pythonic-style-access-for-configurations"]], "Pythonic API for User Configurations": [[274, "pythonic-api-for-user-configurations"], [274, "id1"]], "Pythonic API for Framework Configurations": [[274, "pythonic-api-for-framework-configurations"], [274, "id2"]], "Get Started with Pythonic API for Configurations": [[274, "get-started-with-pythonic-api-for-configurations"]], "NAS": [[274, "nas"]], "Quantization Support Matrix": [[275, "quantization-support-matrix"]], "Quantization Scheme in MXNet": [[275, "quantization-scheme-in-mxnet"]], "Quantization Scheme in ONNX Runtime": [[275, "quantization-scheme-in-onnx-runtime"]], "Post Training Quantization": [[275, "post-training-quantization"]], "Specify Quantization Recipes": [[275, "specify-quantization-recipes"]], "Specify Quantization Backend and Device": [[275, "specify-quantization-backend-and-device"]], "Layer Wise Quantization (LWQ)": [[276, "layer-wise-quantization-lwq"]], "PyTorch framework example": [[276, "pytorch-framework-example"]], "ONNX Runtime framework example": [[276, "onnx-runtime-framework-example"]], "Turn OFF Auto Mixed Precision during Quantization": [[277, "turn-off-auto-mixed-precision-during-quantization"]], "Tensorflow": [[277, "tensorflow"]], "Weight Only Quantization (WOQ)": [[278, "weight-only-quantization-woq"]], "Quantization Capability": [[278, "quantization-capability"]], "Export Compressed Model": [[278, "export-compressed-model"]], "User Code Example": [[278, "user-code-example"]], "WOQ Algorithms Tuning": [[278, "woq-algorithms-tuning"]], "User code example": [[278, "id1"]], "Release": [[279, "release"]], "Release Notes": [[279, "release-notes"]], "Known Issues": [[279, "known-issues"]], "Incompatible Changes": [[279, "incompatible-changes"]], "SigOpt Strategy": [[280, "sigopt-strategy"]], "SigOpt Platform": [[280, "sigopt-platform"]], "Neural Compressor Configuration": [[280, "neural-compressor-configuration"]], "Performance": [[280, "performance"]], "Benefit of SigOpt Strategy": [[280, "benefit-of-sigopt-strategy"]], "Performance Comparison of Different Strategies": [[280, "performance-comparison-of-different-strategies"]], "Per-tensor & Per-channel": [[281, "per-tensor-per-channel"]], "Per-tensor example": [[281, "per-tensor-example"]], "Per-channel example": [[281, "per-channel-example"]], "Matmul quantization example": [[281, "matmul-quantization-example"]], "Per-channel limitation": [[281, "per-channel-limitation"]], "SmoothQuant and Our Enhancement": [[281, "smoothquant-and-our-enhancement"]], "SmoothQuant": [[281, "smoothquant"]], "Our enhancement:": [[281, "our-enhancement"]], "Algorithm: Auto-tuning of $\\alpha$.": [[281, "algorithm-auto-tuning-of-alpha"]], "Engineering": [[281, "engineering"]], "Using a fixed alpha": [[281, "using-a-fixed-alpha"]], "Auto-tune the alpha for the entire model": [[281, "auto-tune-the-alpha-for-the-entire-model"]], "Auto-tune the alpha for each layer/block": [[281, "auto-tune-the-alpha-for-each-layer-block"]], "Supported Framework Matrix": [[281, "supported-framework-matrix"]], "TensorBoard": [[282, "tensorboard"]], "Get Started with TensorBoard": [[282, "get-started-with-tensorboard"]], "PyTorch TensorBoard": [[282, "pytorch-tensorboard"]], "TensorFlow Tensorboard": [[282, "tensorflow-tensorboard"]], "PyTorch Examples": [[282, "pytorch-examples"]], "TensorFlow Examples": [[282, "tensorflow-examples"]], "Transform": [[283, "transform"]], "Transform Support List": [[283, "transform-support-list"]], "Pytorch": [[283, "pytorch"]], "Tuning Strategies": [[284, "tuning-strategies"]], "Strategy Design": [[284, "strategy-design"]], "Tuning Space": [[284, "tuning-space"]], "Exit Policy": [[284, "exit-policy"]], "Accuracy Criteria": [[284, "accuracy-criteria"]], "Tuning Process": [[284, "tuning-process"]], "Tuning Algorithms": [[284, "tuning-algorithms"]], "Auto": [[284, "auto"]], "Conservative Tuning": [[284, "conservative-tuning"]], "Basic": [[284, "basic"]], "MSE": [[284, "mse"]], "MSE_V2": [[284, "mse-v2"]], "HAWQ_V2": [[284, "hawq-v2"]], "Bayesian": [[284, "bayesian"]], "Exhaustive": [[284, "exhaustive"]], "Random": [[284, "random"]], "SigOpt": [[284, "sigopt"]], "TPE": [[284, "tpe"]], "Distributed Tuning": [[284, "distributed-tuning"]], "Customize a New Tuning Strategy": [[284, "customize-a-new-tuning-strategy"]], "User Guide": [[285, "user-guide"]], "Python-based APIs": [[285, "python-based-apis"]], "Neural Coder (Zero-code Optimization)": [[285, "neural-coder-zero-code-optimization"]], "Advanced Topics": [[285, "advanced-topics"]], "Innovations for Productivity": [[285, "innovations-for-productivity"]], "User YAML Configuration Files": [[286, "user-yaml-configuration-files"]], "Get started with User YAML Files": [[286, "get-started-with-user-yaml-files"]], "Validated Quantization Examples": [[287, "validated-quantization-examples"]], "TensorFlow Models with TensorFlow 2.15.0": [[287, "tensorflow-models-with-tensorflow-2-15-0"]], "PyTorch Models with Torch 2.2.1+cpu in PTQ Mode": [[287, "pytorch-models-with-torch-2-2-1-cpu-in-ptq-mode"]], "PyTorch Models with Torch 2.2.1+cpu in QAT Mode": [[287, "pytorch-models-with-torch-2-2-1-cpu-in-qat-mode"]], "PyTorch Models with Torch 2.0.1+cpu in WOQ Mode": [[287, "pytorch-models-with-torch-2-0-1-cpu-in-woq-mode"]], "ONNX Models with ONNX Runtime 1.17.1": [[287, "onnx-models-with-onnx-runtime-1-17-1"]], "ONNX Models with ONNX Runtime 1.15.0 in WOQ Mode": [[287, "onnx-models-with-onnx-runtime-1-15-0-in-woq-mode"]], "Validated Pruning Examples": [[287, "validated-pruning-examples"]], "Validated Knowledge Distillation Examples": [[287, "validated-knowledge-distillation-examples"]], "Validated ONNX QDQ INT8 Models on Multiple Hardware through ONNX Runtime": [[287, "validated-onnx-qdq-int8-models-on-multiple-hardware-through-onnx-runtime"]]}, "indexentries": {"block_mask": [[0, "module-block_mask"]], "module": [[0, "module-block_mask"], [1, "module-neural_compressor.algorithm.algorithm"], [2, "module-neural_compressor.algorithm.fast_bias_correction"], [3, "module-neural_compressor.algorithm"], [4, "module-neural_compressor.algorithm.smooth_quant"], [5, "module-neural_compressor.algorithm.weight_correction"], [6, "module-neural_compressor.benchmark"], [7, "module-neural_compressor.config"], [8, "module-neural_compressor.contrib"], [9, "module-neural_compressor.contrib.strategy"], [10, "module-neural_compressor.contrib.strategy.sigopt"], [11, "module-neural_compressor.contrib.strategy.tpe"], [12, "module-neural_compressor.data.datasets.bert_dataset"], [13, "module-neural_compressor.data.datasets.coco_dataset"], [14, "module-neural_compressor.data.datasets.dataset"], [15, "module-neural_compressor.data.datasets.dummy_dataset"], [16, "module-neural_compressor.data.datasets.dummy_dataset_v2"], [17, "module-neural_compressor.data.datasets.imagenet_dataset"], [18, "module-neural_compressor.data.datasets"], [19, "module-neural_compressor.data.datasets.style_transfer_dataset"], [20, "module-neural_compressor.data.filters.coco_filter"], [21, "module-neural_compressor.data.filters.filter"], [22, "module-neural_compressor.data.filters"], [23, "module-neural_compressor.data"], [24, "module-neural_compressor.data.transforms.imagenet_transform"], [25, "module-neural_compressor.data.transforms"], [26, "module-neural_compressor.data.transforms.postprocess"], [27, "module-neural_compressor.data.transforms.tokenization"], [28, "module-neural_compressor.data.transforms.transform"], [29, "module-neural_compressor.experimental.benchmark"], [30, "module-neural_compressor.experimental.common.criterion"], [31, "module-neural_compressor.experimental.common.dataloader"], [32, "module-neural_compressor.experimental.common"], [33, "module-neural_compressor.experimental.common.metric"], [34, "module-neural_compressor.experimental.common.model"], [35, "module-neural_compressor.experimental.common.optimizer"], [36, "module-neural_compressor.experimental.common.postprocess"], [37, "module-neural_compressor.experimental.common.torch_utils"], [38, "module-neural_compressor.experimental.component"], [39, "module-neural_compressor.experimental.compression"], [40, "module-neural_compressor.experimental.contrib"], [41, "module-neural_compressor.experimental.contrib.strategy"], [42, "module-neural_compressor.experimental.contrib.strategy.sigopt"], [43, "module-neural_compressor.experimental.contrib.strategy.tpe"], [44, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"], [45, "module-neural_compressor.experimental.data.dataloaders.dataloader"], [46, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"], [47, "module-neural_compressor.experimental.data.dataloaders.fetcher"], [48, "module-neural_compressor.experimental.data.dataloaders"], [49, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"], [50, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"], [51, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"], [52, "module-neural_compressor.experimental.data.dataloaders.sampler"], [53, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"], [54, "module-neural_compressor.experimental.data.datasets.bert_dataset"], [55, "module-neural_compressor.experimental.data.datasets.coco_dataset"], [56, "module-neural_compressor.experimental.data.datasets.dataset"], [57, "module-neural_compressor.experimental.data.datasets.dummy_dataset"], [58, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"], [59, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"], [60, "module-neural_compressor.experimental.data.datasets"], [61, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"], [62, "module-neural_compressor.experimental.data.filters.coco_filter"], [63, "module-neural_compressor.experimental.data.filters.filter"], [64, "module-neural_compressor.experimental.data.filters"], [65, "module-neural_compressor.experimental.data"], [66, "module-neural_compressor.experimental.data.transforms.imagenet_transform"], [67, "module-neural_compressor.experimental.data.transforms"], [68, "module-neural_compressor.experimental.data.transforms.tokenization"], [69, "module-neural_compressor.experimental.data.transforms.transform"], [70, "module-neural_compressor.experimental.distillation"], [71, "module-neural_compressor.experimental.export"], [72, "module-neural_compressor.experimental.export.qlinear2qdq"], [73, "module-neural_compressor.experimental.export.tf2onnx"], [74, "module-neural_compressor.experimental.export.torch2onnx"], [75, "module-neural_compressor.experimental.graph_optimization"], [76, "module-neural_compressor.experimental"], [77, "module-neural_compressor.experimental.metric.bleu"], [78, "module-neural_compressor.experimental.metric.bleu_util"], [79, "module-neural_compressor.experimental.metric.coco_label_map"], [80, "module-neural_compressor.experimental.metric.coco_tools"], [81, "module-neural_compressor.experimental.metric.evaluate_squad"], [82, "module-neural_compressor.experimental.metric.f1"], [83, "module-neural_compressor.experimental.metric"], [84, "module-neural_compressor.experimental.metric.metric"], [85, "module-neural_compressor.experimental.mixed_precision"], [86, "module-neural_compressor.experimental.model_conversion"], [87, "module-neural_compressor.experimental.nas.basic_nas"], [88, "module-neural_compressor.experimental.nas.dynas"], [89, "module-neural_compressor.experimental.nas"], [90, "module-neural_compressor.experimental.nas.nas"], [91, "module-neural_compressor.experimental.nas.nas_utils"], [92, "module-neural_compressor.experimental.nas.search_algorithms"], [93, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"], [94, "module-neural_compressor.experimental.pruner_legacy.group_lasso"], [95, "module-neural_compressor.experimental.pruner_legacy"], [96, "module-neural_compressor.experimental.pruner_legacy.magnitude"], [97, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"], [98, "module-neural_compressor.experimental.pruner_legacy.pruner"], [99, "module-neural_compressor.experimental.pruning"], [100, "module-neural_compressor.experimental.pruning_recipes"], [101, "module-neural_compressor.experimental.pruning_recipes.patterns"], [102, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"], [103, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"], [104, "module-neural_compressor.experimental.pruning_v2"], [105, "module-neural_compressor.experimental.pytorch_pruner"], [106, "module-neural_compressor.experimental.pytorch_pruner.logger"], [107, "module-neural_compressor.experimental.pytorch_pruner.patterns"], [108, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"], [109, "module-neural_compressor.experimental.pytorch_pruner.pruner"], [110, "module-neural_compressor.experimental.pytorch_pruner.pruning"], [111, "module-neural_compressor.experimental.pytorch_pruner.scheduler"], [112, "module-neural_compressor.experimental.quantization"], [113, "module-neural_compressor.experimental.scheduler"], [114, "module-neural_compressor.experimental.strategy.auto_mixed_precision"], [115, "module-neural_compressor.experimental.strategy.basic"], [116, "module-neural_compressor.experimental.strategy.bayesian"], [117, "module-neural_compressor.experimental.strategy.exhaustive"], [118, "module-neural_compressor.experimental.strategy"], [119, "module-neural_compressor.experimental.strategy.mse"], [120, "module-neural_compressor.experimental.strategy.mse_v2"], [121, "module-neural_compressor.experimental.strategy.random"], [122, "module-neural_compressor.experimental.strategy.strategy"], [123, "module-neural_compressor.experimental.strategy.utils.constant"], [124, "module-neural_compressor.experimental.strategy.utils"], [125, "module-neural_compressor.experimental.strategy.utils.tuning_sampler"], [126, "module-neural_compressor.experimental.strategy.utils.tuning_space"], [127, "module-neural_compressor.experimental.strategy.utils.tuning_structs"], [128, "module-neural_compressor.experimental.strategy.utils.utility"], [129, "module-neural_compressor"], [130, "module-neural_compressor.metric.bleu"], [131, "module-neural_compressor.metric.bleu_util"], [132, "module-neural_compressor.metric.coco_label_map"], [133, "module-neural_compressor.metric.coco_tools"], [134, "module-neural_compressor.metric.evaluate_squad"], [135, "module-neural_compressor.metric.f1"], [136, "module-neural_compressor.metric"], [137, "module-neural_compressor.metric.metric"], [138, "module-neural_compressor.mix_precision"], [139, "module-neural_compressor.model.base_model"], [140, "module-neural_compressor.model"], [141, "module-neural_compressor.model.keras_model"], [142, "module-neural_compressor.model.model"], [143, "module-neural_compressor.model.mxnet_model"], [144, "module-neural_compressor.model.nets_factory"], [145, "module-neural_compressor.model.onnx_model"], [146, "module-neural_compressor.model.tensorflow_model"], [147, "module-neural_compressor.model.torch_model"], [148, "module-neural_compressor.objective"], [149, "module-neural_compressor.profiling"], [150, "module-neural_compressor.quantization"], [151, "module-neural_compressor.strategy.auto"], [152, "module-neural_compressor.strategy.auto_mixed_precision"], [153, "module-neural_compressor.strategy.basic"], [154, "module-neural_compressor.strategy.bayesian"], [155, "module-neural_compressor.strategy.conservative"], [156, "module-neural_compressor.strategy.exhaustive"], [157, "module-neural_compressor.strategy.hawq_v2"], [158, "module-neural_compressor.strategy"], [159, "module-neural_compressor.strategy.mse"], [160, "module-neural_compressor.strategy.mse_v2"], [161, "module-neural_compressor.strategy.random"], [162, "module-neural_compressor.strategy.strategy"], [163, "module-neural_compressor.strategy.utils.constant"], [164, "module-neural_compressor.strategy.utils"], [165, "module-neural_compressor.strategy.utils.tuning_sampler"], [166, "module-neural_compressor.strategy.utils.tuning_space"], [167, "module-neural_compressor.strategy.utils.tuning_structs"], [168, "module-neural_compressor.strategy.utils.utility"], [169, "module-neural_compressor.training"], [170, "module-neural_compressor.utils.collect_layer_histogram"], [171, "module-neural_compressor.utils.constant"], [172, "module-neural_compressor.utils.create_obj_from_config"], [173, "module-neural_compressor.utils"], [174, "module-neural_compressor.utils.kl_divergence"], [175, "module-neural_compressor.utils.load_huggingface"], [176, "module-neural_compressor.utils.logger"], [177, "module-neural_compressor.utils.neural_insights_utils"], [178, "module-neural_compressor.utils.options"], [179, "module-neural_compressor.utils.pytorch"], [180, "module-neural_compressor.utils.utility"], [181, "module-neural_compressor.utils.weights_details"], [182, "module-neural_compressor.version"]], "algorithms (class in neural_compressor.algorithm.algorithm)": [[1, "neural_compressor.algorithm.algorithm.ALGORITHMS"]], "algorithm (class in neural_compressor.algorithm.algorithm)": [[1, "neural_compressor.algorithm.algorithm.Algorithm"]], "algorithmscheduler (class in neural_compressor.algorithm.algorithm)": [[1, "neural_compressor.algorithm.algorithm.AlgorithmScheduler"]], "algorithm_registry() (in module neural_compressor.algorithm.algorithm)": [[1, "neural_compressor.algorithm.algorithm.algorithm_registry"]], "neural_compressor.algorithm.algorithm": [[1, "module-neural_compressor.algorithm.algorithm"]], "fastbiascorrection (class in neural_compressor.algorithm.fast_bias_correction)": [[2, "neural_compressor.algorithm.fast_bias_correction.FastBiasCorrection"]], "neural_compressor.algorithm.fast_bias_correction": [[2, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[3, "module-neural_compressor.algorithm"]], "smoothquant (class in neural_compressor.algorithm.smooth_quant)": [[4, "neural_compressor.algorithm.smooth_quant.SmoothQuant"]], "neural_compressor.algorithm.smooth_quant": [[4, "module-neural_compressor.algorithm.smooth_quant"]], "weightcorrection (class in neural_compressor.algorithm.weight_correction)": [[5, "neural_compressor.algorithm.weight_correction.WeightCorrection"]], "neural_compressor.algorithm.weight_correction": [[5, "module-neural_compressor.algorithm.weight_correction"]], "benchmark_with_raw_cmd() (in module neural_compressor.benchmark)": [[6, "neural_compressor.benchmark.benchmark_with_raw_cmd"]], "call_one() (in module neural_compressor.benchmark)": [[6, "neural_compressor.benchmark.call_one"]], "config_instance() (in module neural_compressor.benchmark)": [[6, "neural_compressor.benchmark.config_instance"]], "fit() (in module neural_compressor.benchmark)": [[6, "neural_compressor.benchmark.fit"]], "generate_prefix() (in module neural_compressor.benchmark)": [[6, "neural_compressor.benchmark.generate_prefix"]], "get_architecture() (in module neural_compressor.benchmark)": [[6, "neural_compressor.benchmark.get_architecture"]], "get_bounded_threads() (in module neural_compressor.benchmark)": [[6, "neural_compressor.benchmark.get_bounded_threads"]], "get_core_ids() (in module neural_compressor.benchmark)": [[6, "neural_compressor.benchmark.get_core_ids"]], "get_physical_ids() (in module neural_compressor.benchmark)": [[6, "neural_compressor.benchmark.get_physical_ids"]], "get_threads() (in module neural_compressor.benchmark)": [[6, "neural_compressor.benchmark.get_threads"]], "get_threads_per_core() (in module neural_compressor.benchmark)": [[6, "neural_compressor.benchmark.get_threads_per_core"]], "neural_compressor.benchmark": [[6, "module-neural_compressor.benchmark"]], "profile() (in module neural_compressor.benchmark)": [[6, "neural_compressor.benchmark.profile"]], "run_instance() (in module neural_compressor.benchmark)": [[6, "neural_compressor.benchmark.run_instance"]], "set_all_env_var() (in module neural_compressor.benchmark)": [[6, "neural_compressor.benchmark.set_all_env_var"]], "set_env_var() (in module neural_compressor.benchmark)": [[6, "neural_compressor.benchmark.set_env_var"]], "summary_benchmark() (in module neural_compressor.benchmark)": [[6, "neural_compressor.benchmark.summary_benchmark"]], "accuracycriterion (class in neural_compressor.config)": [[7, "neural_compressor.config.AccuracyCriterion"]], "benchmarkconfig (class in neural_compressor.config)": [[7, "neural_compressor.config.BenchmarkConfig"]], "distillationconfig (class in neural_compressor.config)": [[7, "neural_compressor.config.DistillationConfig"]], "dotdict (class in neural_compressor.config)": [[7, "neural_compressor.config.DotDict"]], "exportconfig (class in neural_compressor.config)": [[7, "neural_compressor.config.ExportConfig"]], "hpoconfig (class in neural_compressor.config)": [[7, "neural_compressor.config.HPOConfig"]], "intermediatelayersknowledgedistillationlossconfig (class in neural_compressor.config)": [[7, "neural_compressor.config.IntermediateLayersKnowledgeDistillationLossConfig"]], "keras (class in neural_compressor.config)": [[7, "neural_compressor.config.Keras"]], "knowledgedistillationlossconfig (class in neural_compressor.config)": [[7, "neural_compressor.config.KnowledgeDistillationLossConfig"]], "mxnet (class in neural_compressor.config)": [[7, "neural_compressor.config.MXNet"]], "mixedprecisionconfig (class in neural_compressor.config)": [[7, "neural_compressor.config.MixedPrecisionConfig"]], "nasconfig (class in neural_compressor.config)": [[7, "neural_compressor.config.NASConfig"]], "onnx (class in neural_compressor.config)": [[7, "neural_compressor.config.ONNX"]], "onnxqlinear2qdqconfig (class in neural_compressor.config)": [[7, "neural_compressor.config.ONNXQlinear2QDQConfig"]], "options (class in neural_compressor.config)": [[7, "neural_compressor.config.Options"]], "posttrainingquantconfig (class in neural_compressor.config)": [[7, "neural_compressor.config.PostTrainingQuantConfig"]], "pytorch (class in neural_compressor.config)": [[7, "neural_compressor.config.PyTorch"]], "quantizationawaretrainingconfig (class in neural_compressor.config)": [[7, "neural_compressor.config.QuantizationAwareTrainingConfig"]], "selfknowledgedistillationlossconfig (class in neural_compressor.config)": [[7, "neural_compressor.config.SelfKnowledgeDistillationLossConfig"]], "tf2onnxconfig (class in neural_compressor.config)": [[7, "neural_compressor.config.TF2ONNXConfig"]], "tensorflow (class in neural_compressor.config)": [[7, "neural_compressor.config.TensorFlow"]], "torch2onnxconfig (class in neural_compressor.config)": [[7, "neural_compressor.config.Torch2ONNXConfig"]], "tuningcriterion (class in neural_compressor.config)": [[7, "neural_compressor.config.TuningCriterion"]], "weightpruningconfig (class in neural_compressor.config)": [[7, "neural_compressor.config.WeightPruningConfig"]], "neural_compressor.config": [[7, "module-neural_compressor.config"]], "neural_compressor.contrib": [[8, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[9, "module-neural_compressor.contrib.strategy"]], "sigopttunestrategy (class in neural_compressor.contrib.strategy.sigopt)": [[10, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.sigopt": [[10, "module-neural_compressor.contrib.strategy.sigopt"]], "tpetunestrategy (class in neural_compressor.contrib.strategy.tpe)": [[11, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy"]], "neural_compressor.contrib.strategy.tpe": [[11, "module-neural_compressor.contrib.strategy.tpe"]], "inputfeatures (class in neural_compressor.data.datasets.bert_dataset)": [[12, "neural_compressor.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[12, "neural_compressor.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.data.datasets.bert_dataset)": [[12, "neural_compressor.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[12, "neural_compressor.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[12, "neural_compressor.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[12, "neural_compressor.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.data.datasets.bert_dataset)": [[12, "neural_compressor.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.data.datasets.bert_dataset)": [[12, "neural_compressor.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.data.datasets.bert_dataset": [[12, "module-neural_compressor.data.datasets.bert_dataset"]], "coconpy (class in neural_compressor.data.datasets.coco_dataset)": [[13, "neural_compressor.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.data.datasets.coco_dataset)": [[13, "neural_compressor.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.data.datasets.coco_dataset)": [[13, "neural_compressor.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.data.datasets.coco_dataset)": [[13, "neural_compressor.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.data.datasets.coco_dataset": [[13, "module-neural_compressor.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflow (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.Tensorflow"]], "tensorflowcifar10 (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagerecord (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.check_integrity"]], "dataset_registry() (in module neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.dataset_registry"]], "download_url() (in module neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.gen_bar_updater"]], "neural_compressor.data.datasets.dataset": [[14, "module-neural_compressor.data.datasets.dataset"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset)": [[15, "neural_compressor.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset": [[15, "module-neural_compressor.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[16, "neural_compressor.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[16, "neural_compressor.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[16, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[17, "neural_compressor.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[17, "neural_compressor.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[17, "neural_compressor.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[17, "neural_compressor.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[17, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[17, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.data.datasets.imagenet_dataset": [[17, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[18, "module-neural_compressor.data.datasets"]], "styletransferdataset (class in neural_compressor.data.datasets.style_transfer_dataset)": [[19, "neural_compressor.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.data.datasets.style_transfer_dataset": [[19, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.data.filters.coco_filter)": [[20, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.data.filters.coco_filter)": [[20, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.coco_filter": [[20, "module-neural_compressor.data.filters.coco_filter"]], "filters (class in neural_compressor.data.filters.filter)": [[21, "neural_compressor.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.data.filters.filter)": [[21, "neural_compressor.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.data.filters.filter)": [[21, "neural_compressor.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.data.filters.filter)": [[21, "neural_compressor.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.data.filters.filter)": [[21, "neural_compressor.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.data.filters.filter)": [[21, "neural_compressor.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.data.filters.filter)": [[21, "neural_compressor.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.data.filters.filter)": [[21, "neural_compressor.data.filters.filter.filter_registry"]], "neural_compressor.data.filters.filter": [[21, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.filters": [[22, "module-neural_compressor.data.filters"]], "neural_compressor.data": [[23, "module-neural_compressor.data"]], "bilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[24, "neural_compressor.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.data.transforms.imagenet_transform)": [[24, "neural_compressor.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[24, "neural_compressor.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[24, "neural_compressor.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.data.transforms.imagenet_transform)": [[24, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[24, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.data.transforms.imagenet_transform)": [[24, "neural_compressor.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.data.transforms.imagenet_transform)": [[24, "neural_compressor.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[24, "neural_compressor.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "tensorflowshiftrescale (class in neural_compressor.data.transforms.imagenet_transform)": [[24, "neural_compressor.data.transforms.imagenet_transform.TensorflowShiftRescale"]], "tensorflowtransposelastchannel (class in neural_compressor.data.transforms.imagenet_transform)": [[24, "neural_compressor.data.transforms.imagenet_transform.TensorflowTransposeLastChannel"]], "neural_compressor.data.transforms.imagenet_transform": [[24, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[25, "module-neural_compressor.data.transforms"]], "postprocess (class in neural_compressor.data.transforms.postprocess)": [[26, "neural_compressor.data.transforms.postprocess.Postprocess"]], "neural_compressor.data.transforms.postprocess": [[26, "module-neural_compressor.data.transforms.postprocess"]], "basictokenizer (class in neural_compressor.data.transforms.tokenization)": [[27, "neural_compressor.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.data.transforms.tokenization)": [[27, "neural_compressor.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.data.transforms.tokenization)": [[27, "neural_compressor.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.data.transforms.tokenization)": [[27, "neural_compressor.data.transforms.tokenization.convert_by_vocab"]], "convert_to_unicode() (in module neural_compressor.data.transforms.tokenization)": [[27, "neural_compressor.data.transforms.tokenization.convert_to_unicode"]], "load_vocab() (in module neural_compressor.data.transforms.tokenization)": [[27, "neural_compressor.data.transforms.tokenization.load_vocab"]], "neural_compressor.data.transforms.tokenization": [[27, "module-neural_compressor.data.transforms.tokenization"]], "whitespace_tokenize() (in module neural_compressor.data.transforms.tokenization)": [[27, "neural_compressor.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.TRANSFORMS"], [28, "neural_compressor.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.get_final_text"]], "get_torchvision_map() (in module neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.get_torchvision_map"]], "neural_compressor.data.transforms.transform": [[28, "module-neural_compressor.data.transforms.transform"]], "read_squad_examples() (in module neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.read_squad_examples"]], "transform_registry() (in module neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.transform_registry"]], "benchmark (class in neural_compressor.experimental.benchmark)": [[29, "neural_compressor.experimental.benchmark.Benchmark"]], "get_architecture() (in module neural_compressor.experimental.benchmark)": [[29, "neural_compressor.experimental.benchmark.get_architecture"]], "get_bounded_threads() (in module neural_compressor.experimental.benchmark)": [[29, "neural_compressor.experimental.benchmark.get_bounded_threads"]], "get_core_ids() (in module neural_compressor.experimental.benchmark)": [[29, "neural_compressor.experimental.benchmark.get_core_ids"]], "get_physical_ids() (in module neural_compressor.experimental.benchmark)": [[29, "neural_compressor.experimental.benchmark.get_physical_ids"]], "get_threads() (in module neural_compressor.experimental.benchmark)": [[29, "neural_compressor.experimental.benchmark.get_threads"]], "get_threads_per_core() (in module neural_compressor.experimental.benchmark)": [[29, "neural_compressor.experimental.benchmark.get_threads_per_core"]], "neural_compressor.experimental.benchmark": [[29, "module-neural_compressor.experimental.benchmark"]], "set_all_env_var() (in module neural_compressor.experimental.benchmark)": [[29, "neural_compressor.experimental.benchmark.set_all_env_var"]], "set_env_var() (in module neural_compressor.experimental.benchmark)": [[29, "neural_compressor.experimental.benchmark.set_env_var"]], "criterions (class in neural_compressor.experimental.common.criterion)": [[30, "neural_compressor.experimental.common.criterion.Criterions"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[30, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationframework (class in neural_compressor.experimental.common.criterion)": [[30, "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework"]], "knowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[30, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss"]], "pytorchcriterions (class in neural_compressor.experimental.common.criterion)": [[30, "neural_compressor.experimental.common.criterion.PyTorchCriterions"]], "pytorchintermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[30, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss"]], "pytorchintermediatelayersknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[30, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"]], "pytorchknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[30, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss"]], "pytorchknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[30, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLossWrapper"]], "selfknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[30, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss"]], "tensorflowcriterions (class in neural_compressor.experimental.common.criterion)": [[30, "neural_compressor.experimental.common.criterion.TensorflowCriterions"]], "tensorflowknowledgedistillationlossexternal (class in neural_compressor.experimental.common.criterion)": [[30, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal"]], "criterion_registry() (in module neural_compressor.experimental.common.criterion)": [[30, "neural_compressor.experimental.common.criterion.criterion_registry"]], "neural_compressor.experimental.common.criterion": [[30, "module-neural_compressor.experimental.common.criterion"]], "dataloader (class in neural_compressor.experimental.common.dataloader)": [[31, "neural_compressor.experimental.common.dataloader.DataLoader"]], "neural_compressor.experimental.common.dataloader": [[31, "module-neural_compressor.experimental.common.dataloader"]], "neural_compressor.experimental.common": [[32, "module-neural_compressor.experimental.common"]], "metric (class in neural_compressor.experimental.common.metric)": [[33, "neural_compressor.experimental.common.metric.Metric"]], "neural_compressor.experimental.common.metric": [[33, "module-neural_compressor.experimental.common.metric"]], "model (class in neural_compressor.experimental.common.model)": [[34, "neural_compressor.experimental.common.model.Model"]], "neural_compressor.experimental.common.model": [[34, "module-neural_compressor.experimental.common.model"]], "set_backend() (in module neural_compressor.experimental.common.model)": [[34, "neural_compressor.experimental.common.model.set_backend"]], "optimizers (class in neural_compressor.experimental.common.optimizer)": [[35, "neural_compressor.experimental.common.optimizer.Optimizers"]], "pytorchoptimizers (class in neural_compressor.experimental.common.optimizer)": [[35, "neural_compressor.experimental.common.optimizer.PyTorchOptimizers"]], "pytorchsgd (class in neural_compressor.experimental.common.optimizer)": [[35, "neural_compressor.experimental.common.optimizer.PyTorchSGD"]], "tensorflowadamw (class in neural_compressor.experimental.common.optimizer)": [[35, "neural_compressor.experimental.common.optimizer.TensorFlowAdamW"]], "tensorflowsgd (class in neural_compressor.experimental.common.optimizer)": [[35, "neural_compressor.experimental.common.optimizer.TensorFlowSGD"]], "tensorflowoptimizers (class in neural_compressor.experimental.common.optimizer)": [[35, "neural_compressor.experimental.common.optimizer.TensorflowOptimizers"]], "neural_compressor.experimental.common.optimizer": [[35, "module-neural_compressor.experimental.common.optimizer"]], "optimizer_registry() (in module neural_compressor.experimental.common.optimizer)": [[35, "neural_compressor.experimental.common.optimizer.optimizer_registry"]], "postprocess (class in neural_compressor.experimental.common.postprocess)": [[36, "neural_compressor.experimental.common.postprocess.Postprocess"]], "neural_compressor.experimental.common.postprocess": [[36, "module-neural_compressor.experimental.common.postprocess"]], "get_activation() (in module neural_compressor.experimental.common.torch_utils)": [[37, "neural_compressor.experimental.common.torch_utils.get_activation"]], "neural_compressor.experimental.common.torch_utils": [[37, "module-neural_compressor.experimental.common.torch_utils"]], "record_output() (in module neural_compressor.experimental.common.torch_utils)": [[37, "neural_compressor.experimental.common.torch_utils.record_output"]], "component (class in neural_compressor.experimental.component)": [[38, "neural_compressor.experimental.component.Component"]], "neural_compressor.experimental.component": [[38, "module-neural_compressor.experimental.component"]], "neural_compressor.experimental.compression": [[39, "module-neural_compressor.experimental.compression"]], "neural_compressor.experimental.contrib": [[40, "module-neural_compressor.experimental.contrib"]], "neural_compressor.experimental.contrib.strategy": [[41, "module-neural_compressor.experimental.contrib.strategy"]], "sigopttunestrategy (class in neural_compressor.experimental.contrib.strategy.sigopt)": [[42, "neural_compressor.experimental.contrib.strategy.sigopt.SigOptTuneStrategy"]], "neural_compressor.experimental.contrib.strategy.sigopt": [[42, "module-neural_compressor.experimental.contrib.strategy.sigopt"]], "tpetunestrategy (class in neural_compressor.experimental.contrib.strategy.tpe)": [[43, "neural_compressor.experimental.contrib.strategy.tpe.TpeTuneStrategy"]], "neural_compressor.experimental.contrib.strategy.tpe": [[43, "module-neural_compressor.experimental.contrib.strategy.tpe"]], "basedataloader (class in neural_compressor.experimental.data.dataloaders.base_dataloader)": [[44, "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[44, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[45, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "defaultdataloader (class in neural_compressor.experimental.data.dataloaders.default_dataloader)": [[46, "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader"]], "default_collate() (in module neural_compressor.experimental.data.dataloaders.default_dataloader)": [[46, "neural_compressor.experimental.data.dataloaders.default_dataloader.default_collate"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[46, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "fetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[47, "neural_compressor.experimental.data.dataloaders.fetcher.Fetcher"]], "indexfetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[47, "neural_compressor.experimental.data.dataloaders.fetcher.IndexFetcher"]], "iterablefetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[47, "neural_compressor.experimental.data.dataloaders.fetcher.IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[47, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[48, "module-neural_compressor.experimental.data.dataloaders"]], "mxnetdataloader (class in neural_compressor.experimental.data.dataloaders.mxnet_dataloader)": [[49, "neural_compressor.experimental.data.dataloaders.mxnet_dataloader.MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[49, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "onnxrtbertdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[50, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader"]], "onnxrtdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[50, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[50, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "pytorchdataloader (class in neural_compressor.experimental.data.dataloaders.pytorch_dataloader)": [[51, "neural_compressor.experimental.data.dataloaders.pytorch_dataloader.PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[51, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "batchsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[52, "neural_compressor.experimental.data.dataloaders.sampler.BatchSampler"]], "iterablesampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[52, "neural_compressor.experimental.data.dataloaders.sampler.IterableSampler"]], "sampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[52, "neural_compressor.experimental.data.dataloaders.sampler.Sampler"]], "sequentialsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[52, "neural_compressor.experimental.data.dataloaders.sampler.SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.sampler": [[52, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "tfdatadataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[53, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TFDataDataLoader"]], "tensorflowbertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[53, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader"]], "tensorflowdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[53, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader"]], "tensorflowmodelzoobertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[53, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[53, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "inputfeatures (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[54, "neural_compressor.experimental.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[54, "neural_compressor.experimental.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[54, "neural_compressor.experimental.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[54, "neural_compressor.experimental.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[54, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[54, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[54, "neural_compressor.experimental.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[54, "neural_compressor.experimental.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[54, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "coconpy (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[55, "neural_compressor.experimental.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[55, "neural_compressor.experimental.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[55, "neural_compressor.experimental.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[55, "neural_compressor.experimental.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[55, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflowcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageFolder"]], "tensorflowimagerecord (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.check_integrity"]], "dataset_registry() (in module neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.dataset_registry"]], "download_url() (in module neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.gen_bar_updater"]], "neural_compressor.experimental.data.datasets.dataset": [[56, "module-neural_compressor.experimental.data.datasets.dataset"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset)": [[57, "neural_compressor.experimental.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[57, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[58, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[58, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[58, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[59, "neural_compressor.experimental.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[59, "neural_compressor.experimental.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[59, "neural_compressor.experimental.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[59, "neural_compressor.experimental.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[59, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[59, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[59, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "neural_compressor.experimental.data.datasets": [[60, "module-neural_compressor.experimental.data.datasets"]], "styletransferdataset (class in neural_compressor.experimental.data.datasets.style_transfer_dataset)": [[61, "neural_compressor.experimental.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[61, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[62, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[62, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.coco_filter": [[62, "module-neural_compressor.experimental.data.filters.coco_filter"]], "filters (class in neural_compressor.experimental.data.filters.filter)": [[63, "neural_compressor.experimental.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.experimental.data.filters.filter)": [[63, "neural_compressor.experimental.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.experimental.data.filters.filter)": [[63, "neural_compressor.experimental.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.experimental.data.filters.filter)": [[63, "neural_compressor.experimental.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.experimental.data.filters.filter)": [[63, "neural_compressor.experimental.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.experimental.data.filters.filter)": [[63, "neural_compressor.experimental.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.experimental.data.filters.filter)": [[63, "neural_compressor.experimental.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.experimental.data.filters.filter)": [[63, "neural_compressor.experimental.data.filters.filter.filter_registry"]], "neural_compressor.experimental.data.filters.filter": [[63, "module-neural_compressor.experimental.data.filters.filter"]], "neural_compressor.experimental.data.filters": [[64, "module-neural_compressor.experimental.data.filters"]], "neural_compressor.experimental.data": [[65, "module-neural_compressor.experimental.data"]], "bilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[66, "neural_compressor.experimental.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[66, "neural_compressor.experimental.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[66, "neural_compressor.experimental.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[66, "neural_compressor.experimental.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[66, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[66, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[66, "neural_compressor.experimental.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[66, "neural_compressor.experimental.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[66, "neural_compressor.experimental.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[66, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "neural_compressor.experimental.data.transforms": [[67, "module-neural_compressor.experimental.data.transforms"]], "basictokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[68, "neural_compressor.experimental.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[68, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[68, "neural_compressor.experimental.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[68, "neural_compressor.experimental.data.transforms.tokenization.convert_by_vocab"]], "convert_to_unicode() (in module neural_compressor.experimental.data.transforms.tokenization)": [[68, "neural_compressor.experimental.data.transforms.tokenization.convert_to_unicode"]], "load_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[68, "neural_compressor.experimental.data.transforms.tokenization.load_vocab"]], "neural_compressor.experimental.data.transforms.tokenization": [[68, "module-neural_compressor.experimental.data.transforms.tokenization"]], "whitespace_tokenize() (in module neural_compressor.experimental.data.transforms.tokenization)": [[68, "neural_compressor.experimental.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.TRANSFORMS"], [69, "neural_compressor.experimental.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.get_final_text"]], "get_torchvision_map() (in module neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.get_torchvision_map"]], "neural_compressor.experimental.data.transforms.transform": [[69, "module-neural_compressor.experimental.data.transforms.transform"]], "read_squad_examples() (in module neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.read_squad_examples"]], "transform_registry() (in module neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.transform_registry"]], "distillation (class in neural_compressor.experimental.distillation)": [[70, "neural_compressor.experimental.distillation.Distillation"]], "_epoch_ran (neural_compressor.experimental.distillation.distillation attribute)": [[70, "neural_compressor.experimental.distillation.Distillation._epoch_ran"]], "best_model (neural_compressor.experimental.distillation.distillation attribute)": [[70, "neural_compressor.experimental.distillation.Distillation.best_model"]], "best_score (neural_compressor.experimental.distillation.distillation attribute)": [[70, "neural_compressor.experimental.distillation.Distillation.best_score"]], "eval_frequency (neural_compressor.experimental.distillation.distillation attribute)": [[70, "neural_compressor.experimental.distillation.Distillation.eval_frequency"]], "neural_compressor.experimental.distillation": [[70, "module-neural_compressor.experimental.distillation"]], "neural_compressor.experimental.export": [[71, "module-neural_compressor.experimental.export"]], "check_model() (in module neural_compressor.experimental.export.qlinear2qdq)": [[72, "neural_compressor.experimental.export.qlinear2qdq.check_model"]], "neural_compressor.experimental.export.qlinear2qdq": [[72, "module-neural_compressor.experimental.export.qlinear2qdq"]], "onnx_qlinear_to_qdq() (in module neural_compressor.experimental.export.qlinear2qdq)": [[72, "neural_compressor.experimental.export.qlinear2qdq.onnx_qlinear_to_qdq"]], "neural_compressor.experimental.export.tf2onnx": [[73, "module-neural_compressor.experimental.export.tf2onnx"]], "tf_to_fp32_onnx() (in module neural_compressor.experimental.export.tf2onnx)": [[73, "neural_compressor.experimental.export.tf2onnx.tf_to_fp32_onnx"]], "tf_to_int8_onnx() (in module neural_compressor.experimental.export.tf2onnx)": [[73, "neural_compressor.experimental.export.tf2onnx.tf_to_int8_onnx"]], "dynamic_quant_export() (in module neural_compressor.experimental.export.torch2onnx)": [[74, "neural_compressor.experimental.export.torch2onnx.dynamic_quant_export"]], "get_node_mapping() (in module neural_compressor.experimental.export.torch2onnx)": [[74, "neural_compressor.experimental.export.torch2onnx.get_node_mapping"]], "get_quantizable_onnx_ops() (in module neural_compressor.experimental.export.torch2onnx)": [[74, "neural_compressor.experimental.export.torch2onnx.get_quantizable_onnx_ops"]], "neural_compressor.experimental.export.torch2onnx": [[74, "module-neural_compressor.experimental.export.torch2onnx"]], "static_quant_export() (in module neural_compressor.experimental.export.torch2onnx)": [[74, "neural_compressor.experimental.export.torch2onnx.static_quant_export"]], "torch_to_fp32_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[74, "neural_compressor.experimental.export.torch2onnx.torch_to_fp32_onnx"]], "torch_to_int8_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[74, "neural_compressor.experimental.export.torch2onnx.torch_to_int8_onnx"]], "graph_optimization (class in neural_compressor.experimental.graph_optimization)": [[75, "neural_compressor.experimental.graph_optimization.Graph_Optimization"]], "neural_compressor.experimental.graph_optimization": [[75, "module-neural_compressor.experimental.graph_optimization"]], "neural_compressor.experimental": [[76, "module-neural_compressor.experimental"]], "bleu (class in neural_compressor.experimental.metric.bleu)": [[77, "neural_compressor.experimental.metric.bleu.BLEU"]], "unicoderegex (class in neural_compressor.experimental.metric.bleu)": [[77, "neural_compressor.experimental.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.experimental.metric.bleu)": [[77, "neural_compressor.experimental.metric.bleu.bleu_tokenize"]], "labels (neural_compressor.experimental.metric.bleu.bleu attribute)": [[77, "neural_compressor.experimental.metric.bleu.BLEU.labels"]], "neural_compressor.experimental.metric.bleu": [[77, "module-neural_compressor.experimental.metric.bleu"]], "nondigit_punct_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[77, "neural_compressor.experimental.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "predictions (neural_compressor.experimental.metric.bleu.bleu attribute)": [[77, "neural_compressor.experimental.metric.bleu.BLEU.predictions"]], "punct_nondigit_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[77, "neural_compressor.experimental.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "symbol_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[77, "neural_compressor.experimental.metric.bleu.UnicodeRegex.symbol_re"]], "compute_bleu() (in module neural_compressor.experimental.metric.bleu_util)": [[78, "neural_compressor.experimental.metric.bleu_util.compute_bleu"]], "neural_compressor.experimental.metric.bleu_util": [[78, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[79, "module-neural_compressor.experimental.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.experimental.metric.coco_tools)": [[80, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.experimental.metric.coco_tools)": [[80, "neural_compressor.experimental.metric.coco_tools.COCOWrapper"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.experimental.metric.coco_tools)": [[80, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.experimental.metric.coco_tools)": [[80, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.experimental.metric.coco_tools)": [[80, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "dataset (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[80, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[80, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.experimental.metric.coco_tools": [[80, "module-neural_compressor.experimental.metric.coco_tools"]], "evaluate() (in module neural_compressor.experimental.metric.evaluate_squad)": [[81, "neural_compressor.experimental.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[81, "neural_compressor.experimental.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[81, "neural_compressor.experimental.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.evaluate_squad)": [[81, "neural_compressor.experimental.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.evaluate_squad": [[81, "module-neural_compressor.experimental.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.experimental.metric.f1)": [[82, "neural_compressor.experimental.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.experimental.metric.f1)": [[82, "neural_compressor.experimental.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.f1)": [[82, "neural_compressor.experimental.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[82, "module-neural_compressor.experimental.metric.f1"]], "normalize_answer() (in module neural_compressor.experimental.metric.f1)": [[82, "neural_compressor.experimental.metric.f1.normalize_answer"]], "neural_compressor.experimental.metric": [[83, "module-neural_compressor.experimental.metric"]], "accuracy (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.F1"]], "generaltopk (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.Loss"]], "mae (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.MAE"]], "metrics (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.METRICS"]], "mse (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.MXNetMetrics"]], "onnxrtglue (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.RMSE"]], "roc (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.ROC"]], "squadf1 (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.experimental.metric.metric.mae attribute)": [[84, "neural_compressor.experimental.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.experimental.metric.metric.mse attribute)": [[84, "neural_compressor.experimental.metric.metric.MSE.compare_label"]], "k (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[84, "neural_compressor.experimental.metric.metric.GeneralTopK.k"]], "k (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[84, "neural_compressor.experimental.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[84, "neural_compressor.experimental.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mae attribute)": [[84, "neural_compressor.experimental.metric.metric.MAE.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mse attribute)": [[84, "neural_compressor.experimental.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.mIOU"]], "metric_registry() (in module neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.metric_registry"]], "metrics (neural_compressor.experimental.metric.metric.metrics attribute)": [[84, "neural_compressor.experimental.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.experimental.metric.metric.mxnetmetrics attribute)": [[84, "neural_compressor.experimental.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtitmetrics attribute)": [[84, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtqlmetrics attribute)": [[84, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.pytorchmetrics attribute)": [[84, "neural_compressor.experimental.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.tensorflowmetrics attribute)": [[84, "neural_compressor.experimental.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.experimental.metric.metric.rmse attribute)": [[84, "neural_compressor.experimental.metric.metric.RMSE.mse"]], "neural_compressor.experimental.metric.metric": [[84, "module-neural_compressor.experimental.metric.metric"]], "num_correct (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[84, "neural_compressor.experimental.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[84, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[84, "neural_compressor.experimental.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[84, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[84, "neural_compressor.experimental.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mae attribute)": [[84, "neural_compressor.experimental.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mse attribute)": [[84, "neural_compressor.experimental.metric.metric.MSE.pred_list"]], "sample (neural_compressor.experimental.metric.metric.accuracy attribute)": [[84, "neural_compressor.experimental.metric.metric.Accuracy.sample"]], "sample (neural_compressor.experimental.metric.metric.loss attribute)": [[84, "neural_compressor.experimental.metric.metric.Loss.sample"]], "sum (neural_compressor.experimental.metric.metric.loss attribute)": [[84, "neural_compressor.experimental.metric.metric.Loss.sum"]], "mixedprecision (class in neural_compressor.experimental.mixed_precision)": [[85, "neural_compressor.experimental.mixed_precision.MixedPrecision"]], "neural_compressor.experimental.mixed_precision": [[85, "module-neural_compressor.experimental.mixed_precision"]], "modelconversion (class in neural_compressor.experimental.model_conversion)": [[86, "neural_compressor.experimental.model_conversion.ModelConversion"]], "neural_compressor.experimental.model_conversion": [[86, "module-neural_compressor.experimental.model_conversion"]], "basicnas (class in neural_compressor.experimental.nas.basic_nas)": [[87, "neural_compressor.experimental.nas.basic_nas.BasicNAS"]], "neural_compressor.experimental.nas.basic_nas": [[87, "module-neural_compressor.experimental.nas.basic_nas"]], "dynas (class in neural_compressor.experimental.nas.dynas)": [[88, "neural_compressor.experimental.nas.dynas.DyNAS"]], "neural_compressor.experimental.nas.dynas": [[88, "module-neural_compressor.experimental.nas.dynas"]], "neural_compressor.experimental.nas": [[89, "module-neural_compressor.experimental.nas"]], "nas (class in neural_compressor.experimental.nas.nas)": [[90, "neural_compressor.experimental.nas.nas.NAS"]], "nasbase (class in neural_compressor.experimental.nas.nas)": [[90, "neural_compressor.experimental.nas.nas.NASBase"]], "neural_compressor.experimental.nas.nas": [[90, "module-neural_compressor.experimental.nas.nas"]], "create_search_space_pool() (in module neural_compressor.experimental.nas.nas_utils)": [[91, "neural_compressor.experimental.nas.nas_utils.create_search_space_pool"]], "find_pareto_front() (in module neural_compressor.experimental.nas.nas_utils)": [[91, "neural_compressor.experimental.nas.nas_utils.find_pareto_front"]], "nas_registry() (in module neural_compressor.experimental.nas.nas_utils)": [[91, "neural_compressor.experimental.nas.nas_utils.nas_registry"]], "neural_compressor.experimental.nas.nas_utils": [[91, "module-neural_compressor.experimental.nas.nas_utils"]], "bayesianoptimizationsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[92, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher"]], "gridsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[92, "neural_compressor.experimental.nas.search_algorithms.GridSearcher"]], "randomsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[92, "neural_compressor.experimental.nas.search_algorithms.RandomSearcher"]], "searcher (class in neural_compressor.experimental.nas.search_algorithms)": [[92, "neural_compressor.experimental.nas.search_algorithms.Searcher"]], "neural_compressor.experimental.nas.search_algorithms": [[92, "module-neural_compressor.experimental.nas.search_algorithms"]], "gradientsensitivitypruner (class in neural_compressor.experimental.pruner_legacy.gradient_sensitivity)": [[93, "neural_compressor.experimental.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[93, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"]], "grouplassopruner (class in neural_compressor.experimental.pruner_legacy.group_lasso)": [[94, "neural_compressor.experimental.pruner_legacy.group_lasso.GroupLassoPruner"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[94, "module-neural_compressor.experimental.pruner_legacy.group_lasso"]], "neural_compressor.experimental.pruner_legacy": [[95, "module-neural_compressor.experimental.pruner_legacy"]], "basicmagnitudepruner (class in neural_compressor.experimental.pruner_legacy.magnitude)": [[96, "neural_compressor.experimental.pruner_legacy.magnitude.BasicMagnitudePruner"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[96, "module-neural_compressor.experimental.pruner_legacy.magnitude"]], "patternlockpruner (class in neural_compressor.experimental.pruner_legacy.pattern_lock)": [[97, "neural_compressor.experimental.pruner_legacy.pattern_lock.PatternLockPruner"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[97, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"]], "pruner (class in neural_compressor.experimental.pruner_legacy.pruner)": [[98, "neural_compressor.experimental.pruner_legacy.pruner.Pruner"]], "neural_compressor.experimental.pruner_legacy.pruner": [[98, "module-neural_compressor.experimental.pruner_legacy.pruner"]], "pruner_registry() (in module neural_compressor.experimental.pruner_legacy.pruner)": [[98, "neural_compressor.experimental.pruner_legacy.pruner.pruner_registry"]], "pruning (class in neural_compressor.experimental.pruning)": [[99, "neural_compressor.experimental.pruning.Pruning"]], "tfpruningcallback (class in neural_compressor.experimental.pruning)": [[99, "neural_compressor.experimental.pruning.TfPruningCallback"]], "conf (neural_compressor.experimental.pruning.pruning attribute)": [[99, "neural_compressor.experimental.pruning.Pruning.conf"]], "neural_compressor.experimental.pruning": [[99, "module-neural_compressor.experimental.pruning"]], "pruners (neural_compressor.experimental.pruning.pruning attribute)": [[99, "neural_compressor.experimental.pruning.Pruning.pruners"]], "neural_compressor.experimental.pruning_recipes": [[100, "module-neural_compressor.experimental.pruning_recipes"]], "neural_compressor.experimental.pruning_recipes.patterns": [[101, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "patterns (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[102, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS"]], "patternbase (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[102, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[102, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "pattern_registry() (in module neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[102, "neural_compressor.experimental.pruning_recipes.patterns.pattern.pattern_registry"]], "patterns (neural_compressor.experimental.pruning_recipes.patterns.pattern.patterns attribute)": [[102, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS.patterns"]], "tilepatternbase (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[103, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase"]], "tilepattern_1x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[103, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x1"]], "tilepattern_1x16 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[103, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x16"]], "tilepattern_1x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[103, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x2"]], "tilepattern_2x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[103, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_2x2"]], "tilepattern_4x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[103, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_4x1"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[103, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "pruning (class in neural_compressor.experimental.pruning_v2)": [[104, "neural_compressor.experimental.pruning_v2.Pruning"]], "tfpruningcallback (class in neural_compressor.experimental.pruning_v2)": [[104, "neural_compressor.experimental.pruning_v2.TfPruningCallback"]], "conf (neural_compressor.experimental.pruning_v2.pruning attribute)": [[104, "neural_compressor.experimental.pruning_v2.Pruning.conf"]], "neural_compressor.experimental.pruning_v2": [[104, "module-neural_compressor.experimental.pruning_v2"]], "pruners (neural_compressor.experimental.pruning_v2.pruning attribute)": [[104, "neural_compressor.experimental.pruning_v2.Pruning.pruners"]], "neural_compressor.experimental.pytorch_pruner": [[105, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[106, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "m (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[107, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.M"]], "n (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[107, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.N"]], "pattern (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[107, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern"]], "patternninm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[107, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM"]], "patternnxm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[107, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM"]], "block_size (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm attribute)": [[107, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.block_size"]], "get_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[107, "neural_compressor.experimental.pytorch_pruner.patterns.get_pattern"]], "is_global (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[107, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.is_global"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[107, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "pattern (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[107, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.pattern"]], "register_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[107, "neural_compressor.experimental.pytorch_pruner.patterns.register_pattern"]], "check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[108, "neural_compressor.experimental.pytorch_pruner.prune_utils.check_config"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[108, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "parse_not_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[108, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_not_to_prune"]], "parse_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[108, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_to_prune"]], "process_and_check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[108, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_and_check_config"]], "process_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[108, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_config"]], "reset_non_value_to_default() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[108, "neural_compressor.experimental.pytorch_pruner.prune_utils.reset_non_value_to_default"]], "magnitudepruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[109, "neural_compressor.experimental.pytorch_pruner.pruner.MagnitudePruner"]], "patternlockpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[109, "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner"]], "pruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[109, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner"]], "snipmomentumpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[109, "neural_compressor.experimental.pytorch_pruner.pruner.SnipMomentumPruner"]], "snippruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[109, "neural_compressor.experimental.pytorch_pruner.pruner.SnipPruner"]], "config (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[109, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.config"]], "current_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[109, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.current_sparsity_ratio"]], "end_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[109, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.end_step"]], "get_pruner() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[109, "neural_compressor.experimental.pytorch_pruner.pruner.get_pruner"]], "global_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[109, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.global_step"]], "masks (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[109, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.masks"]], "max_sparsity_ratio_per_layer (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[109, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.max_sparsity_ratio_per_layer"]], "modules (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[109, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.modules"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[109, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "pattern (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[109, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.pattern"]], "register_pruners() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[109, "neural_compressor.experimental.pytorch_pruner.pruner.register_pruners"]], "scheduler (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[109, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scheduler"]], "scores (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[109, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scores"]], "start_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[109, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.start_step"]], "target_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[109, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.target_sparsity_ratio"]], "update_frequency_on_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[109, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.update_frequency_on_step"]], "pruning (class in neural_compressor.experimental.pytorch_pruner.pruning)": [[110, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning"]], "config_file_path (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[110, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.config_file_path"]], "model (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[110, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.model"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[110, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "pruner_info (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[110, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruner_info"]], "pruners (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[110, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruners"]], "iterativescheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[111, "neural_compressor.experimental.pytorch_pruner.scheduler.IterativeScheduler"]], "oneshotscheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[111, "neural_compressor.experimental.pytorch_pruner.scheduler.OneshotScheduler"]], "scheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[111, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler"]], "config (neural_compressor.experimental.pytorch_pruner.scheduler.scheduler attribute)": [[111, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler.config"]], "get_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[111, "neural_compressor.experimental.pytorch_pruner.scheduler.get_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[111, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "register_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[111, "neural_compressor.experimental.pytorch_pruner.scheduler.register_scheduler"]], "quantization (class in neural_compressor.experimental.quantization)": [[112, "neural_compressor.experimental.quantization.Quantization"]], "neural_compressor.experimental.quantization": [[112, "module-neural_compressor.experimental.quantization"]], "scheduler (class in neural_compressor.experimental.scheduler)": [[113, "neural_compressor.experimental.scheduler.Scheduler"]], "neural_compressor.experimental.scheduler": [[113, "module-neural_compressor.experimental.scheduler"]], "automixedprecisiontunestrategy (class in neural_compressor.experimental.strategy.auto_mixed_precision)": [[114, "neural_compressor.experimental.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy"]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[114, "module-neural_compressor.experimental.strategy.auto_mixed_precision"]], "basictunestrategy (class in neural_compressor.experimental.strategy.basic)": [[115, "neural_compressor.experimental.strategy.basic.BasicTuneStrategy"]], "neural_compressor.experimental.strategy.basic": [[115, "module-neural_compressor.experimental.strategy.basic"]], "bayesianoptimization (class in neural_compressor.experimental.strategy.bayesian)": [[116, "neural_compressor.experimental.strategy.bayesian.BayesianOptimization"]], "bayesiantunestrategy (class in neural_compressor.experimental.strategy.bayesian)": [[116, "neural_compressor.experimental.strategy.bayesian.BayesianTuneStrategy"]], "targetspace (class in neural_compressor.experimental.strategy.bayesian)": [[116, "neural_compressor.experimental.strategy.bayesian.TargetSpace"]], "acq_max() (in module neural_compressor.experimental.strategy.bayesian)": [[116, "neural_compressor.experimental.strategy.bayesian.acq_max"]], "neural_compressor.experimental.strategy.bayesian": [[116, "module-neural_compressor.experimental.strategy.bayesian"]], "exhaustivetunestrategy (class in neural_compressor.experimental.strategy.exhaustive)": [[117, "neural_compressor.experimental.strategy.exhaustive.ExhaustiveTuneStrategy"]], "neural_compressor.experimental.strategy.exhaustive": [[117, "module-neural_compressor.experimental.strategy.exhaustive"]], "neural_compressor.experimental.strategy": [[118, "module-neural_compressor.experimental.strategy"]], "msetunestrategy (class in neural_compressor.experimental.strategy.mse)": [[119, "neural_compressor.experimental.strategy.mse.MSETuneStrategy"]], "neural_compressor.experimental.strategy.mse": [[119, "module-neural_compressor.experimental.strategy.mse"]], "mse_v2tunestrategy (class in neural_compressor.experimental.strategy.mse_v2)": [[120, "neural_compressor.experimental.strategy.mse_v2.MSE_V2TuneStrategy"]], "neural_compressor.experimental.strategy.mse_v2": [[120, "module-neural_compressor.experimental.strategy.mse_v2"]], "randomtunestrategy (class in neural_compressor.experimental.strategy.random)": [[121, "neural_compressor.experimental.strategy.random.RandomTuneStrategy"]], "neural_compressor.experimental.strategy.random": [[121, "module-neural_compressor.experimental.strategy.random"]], "tunestrategy (class in neural_compressor.experimental.strategy.strategy)": [[122, "neural_compressor.experimental.strategy.strategy.TuneStrategy"]], "neural_compressor.experimental.strategy.strategy": [[122, "module-neural_compressor.experimental.strategy.strategy"]], "strategy_registry() (in module neural_compressor.experimental.strategy.strategy)": [[122, "neural_compressor.experimental.strategy.strategy.strategy_registry"]], "neural_compressor.experimental.strategy.utils.constant": [[123, "module-neural_compressor.experimental.strategy.utils.constant"]], "neural_compressor.experimental.strategy.utils": [[124, "module-neural_compressor.experimental.strategy.utils"]], "fallbacktuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[125, "neural_compressor.experimental.strategy.utils.tuning_sampler.FallbackTuningSampler"]], "modelwisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[125, "neural_compressor.experimental.strategy.utils.tuning_sampler.ModelWiseTuningSampler"]], "optypewisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[125, "neural_compressor.experimental.strategy.utils.tuning_sampler.OpTypeWiseTuningSampler"]], "opwisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[125, "neural_compressor.experimental.strategy.utils.tuning_sampler.OpWiseTuningSampler"]], "smoothquantsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[125, "neural_compressor.experimental.strategy.utils.tuning_sampler.SmoothQuantSampler"]], "tuningorder (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[125, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningOrder"]], "tuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[125, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningSampler"]], "tuningsamplerregistry (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[125, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningSamplerRegistry"]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[125, "module-neural_compressor.experimental.strategy.utils.tuning_sampler"]], "tuningitem (class in neural_compressor.experimental.strategy.utils.tuning_space)": [[126, "neural_compressor.experimental.strategy.utils.tuning_space.TuningItem"]], "tuningspace (class in neural_compressor.experimental.strategy.utils.tuning_space)": [[126, "neural_compressor.experimental.strategy.utils.tuning_space.TuningSpace"]], "initial_tuning_cfg_with_quant_mode() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[126, "neural_compressor.experimental.strategy.utils.tuning_space.initial_tuning_cfg_with_quant_mode"]], "neural_compressor.experimental.strategy.utils.tuning_space": [[126, "module-neural_compressor.experimental.strategy.utils.tuning_space"]], "pattern_to_internal() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[126, "neural_compressor.experimental.strategy.utils.tuning_space.pattern_to_internal"]], "pattern_to_path() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[126, "neural_compressor.experimental.strategy.utils.tuning_space.pattern_to_path"]], "quant_mode_from_pattern() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[126, "neural_compressor.experimental.strategy.utils.tuning_space.quant_mode_from_pattern"]], "optuningconfig (class in neural_compressor.experimental.strategy.utils.tuning_structs)": [[127, "neural_compressor.experimental.strategy.utils.tuning_structs.OpTuningConfig"]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[127, "module-neural_compressor.experimental.strategy.utils.tuning_structs"]], "ordereddefaultdict (class in neural_compressor.experimental.strategy.utils.utility)": [[128, "neural_compressor.experimental.strategy.utils.utility.OrderedDefaultDict"]], "extract_data_type() (in module neural_compressor.experimental.strategy.utils.utility)": [[128, "neural_compressor.experimental.strategy.utils.utility.extract_data_type"]], "get_adaptor_name() (in module neural_compressor.experimental.strategy.utils.utility)": [[128, "neural_compressor.experimental.strategy.utils.utility.get_adaptor_name"]], "neural_compressor.experimental.strategy.utils.utility": [[128, "module-neural_compressor.experimental.strategy.utils.utility"]], "reverted_data_type() (in module neural_compressor.experimental.strategy.utils.utility)": [[128, "neural_compressor.experimental.strategy.utils.utility.reverted_data_type"]], "neural_compressor": [[129, "module-neural_compressor"]], "bleu (class in neural_compressor.metric.bleu)": [[130, "neural_compressor.metric.bleu.BLEU"]], "unicoderegex (class in neural_compressor.metric.bleu)": [[130, "neural_compressor.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.metric.bleu)": [[130, "neural_compressor.metric.bleu.bleu_tokenize"]], "labels (neural_compressor.metric.bleu.bleu attribute)": [[130, "neural_compressor.metric.bleu.BLEU.labels"]], "neural_compressor.metric.bleu": [[130, "module-neural_compressor.metric.bleu"]], "nondigit_punct_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[130, "neural_compressor.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "predictions (neural_compressor.metric.bleu.bleu attribute)": [[130, "neural_compressor.metric.bleu.BLEU.predictions"]], "punct_nondigit_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[130, "neural_compressor.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "symbol_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[130, "neural_compressor.metric.bleu.UnicodeRegex.symbol_re"]], "compute_bleu() (in module neural_compressor.metric.bleu_util)": [[131, "neural_compressor.metric.bleu_util.compute_bleu"]], "neural_compressor.metric.bleu_util": [[131, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[132, "module-neural_compressor.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.metric.coco_tools)": [[133, "neural_compressor.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.metric.coco_tools)": [[133, "neural_compressor.metric.coco_tools.COCOWrapper"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.metric.coco_tools)": [[133, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.metric.coco_tools)": [[133, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.metric.coco_tools)": [[133, "neural_compressor.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "dataset (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[133, "neural_compressor.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[133, "neural_compressor.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.metric.coco_tools": [[133, "module-neural_compressor.metric.coco_tools"]], "evaluate() (in module neural_compressor.metric.evaluate_squad)": [[134, "neural_compressor.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.metric.evaluate_squad)": [[134, "neural_compressor.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.metric.evaluate_squad)": [[134, "neural_compressor.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.evaluate_squad)": [[134, "neural_compressor.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.metric.evaluate_squad": [[134, "module-neural_compressor.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.metric.f1)": [[135, "neural_compressor.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.metric.f1)": [[135, "neural_compressor.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.f1)": [[135, "neural_compressor.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[135, "module-neural_compressor.metric.f1"]], "normalize_answer() (in module neural_compressor.metric.f1)": [[135, "neural_compressor.metric.f1.normalize_answer"]], "neural_compressor.metric": [[136, "module-neural_compressor.metric"]], "accuracy (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.F1"]], "generaltopk (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.Loss"]], "mae (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.MAE"]], "metrics (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.METRICS"]], "mse (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.MXNetMetrics"]], "metric (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.Metric"]], "onnxrtglue (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.RMSE"]], "roc (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.ROC"]], "squadf1 (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.metric.metric.mae attribute)": [[137, "neural_compressor.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.metric.metric.mse attribute)": [[137, "neural_compressor.metric.metric.MSE.compare_label"]], "k (neural_compressor.metric.metric.generaltopk attribute)": [[137, "neural_compressor.metric.metric.GeneralTopK.k"]], "k (neural_compressor.metric.metric.tensorflowtopk attribute)": [[137, "neural_compressor.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.metric.metric.accuracy attribute)": [[137, "neural_compressor.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.metric.metric.mae attribute)": [[137, "neural_compressor.metric.metric.MAE.label_list"]], "label_list (neural_compressor.metric.metric.mse attribute)": [[137, "neural_compressor.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.mIOU"]], "metric_registry() (in module neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.metric_registry"]], "metrics (neural_compressor.metric.metric.metrics attribute)": [[137, "neural_compressor.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.metric.metric.mxnetmetrics attribute)": [[137, "neural_compressor.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtitmetrics attribute)": [[137, "neural_compressor.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtqlmetrics attribute)": [[137, "neural_compressor.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.metric.metric.pytorchmetrics attribute)": [[137, "neural_compressor.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.metric.metric.tensorflowmetrics attribute)": [[137, "neural_compressor.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.metric.metric.rmse attribute)": [[137, "neural_compressor.metric.metric.RMSE.mse"]], "neural_compressor.metric.metric": [[137, "module-neural_compressor.metric.metric"]], "num_correct (neural_compressor.metric.metric.generaltopk attribute)": [[137, "neural_compressor.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.metric.metric.tensorflowtopk attribute)": [[137, "neural_compressor.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.metric.metric.generaltopk attribute)": [[137, "neural_compressor.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.metric.metric.tensorflowtopk attribute)": [[137, "neural_compressor.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.metric.metric.accuracy attribute)": [[137, "neural_compressor.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.metric.metric.mae attribute)": [[137, "neural_compressor.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.metric.metric.mse attribute)": [[137, "neural_compressor.metric.metric.MSE.pred_list"]], "register_customer_metric() (in module neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.register_customer_metric"]], "sample (neural_compressor.metric.metric.accuracy attribute)": [[137, "neural_compressor.metric.metric.Accuracy.sample"]], "sample (neural_compressor.metric.metric.loss attribute)": [[137, "neural_compressor.metric.metric.Loss.sample"]], "sum (neural_compressor.metric.metric.loss attribute)": [[137, "neural_compressor.metric.metric.Loss.sum"]], "fit() (in module neural_compressor.mix_precision)": [[138, "neural_compressor.mix_precision.fit"]], "neural_compressor.mix_precision": [[138, "module-neural_compressor.mix_precision"]], "basemodel (class in neural_compressor.model.base_model)": [[139, "neural_compressor.model.base_model.BaseModel"]], "neural_compressor.model.base_model": [[139, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[140, "module-neural_compressor.model"]], "kerasmodel (class in neural_compressor.model.keras_model)": [[141, "neural_compressor.model.keras_model.KerasModel"]], "neural_compressor.model.keras_model": [[141, "module-neural_compressor.model.keras_model"]], "model (class in neural_compressor.model.model)": [[142, "neural_compressor.model.model.Model"]], "get_model_fwk_name() (in module neural_compressor.model.model)": [[142, "neural_compressor.model.model.get_model_fwk_name"]], "neural_compressor.model.model": [[142, "module-neural_compressor.model.model"]], "mxnetmodel (class in neural_compressor.model.mxnet_model)": [[143, "neural_compressor.model.mxnet_model.MXNetModel"]], "neural_compressor.model.mxnet_model": [[143, "module-neural_compressor.model.mxnet_model"]], "tfslimnetsfactory (class in neural_compressor.model.nets_factory)": [[144, "neural_compressor.model.nets_factory.TFSlimNetsFactory"]], "neural_compressor.model.nets_factory": [[144, "module-neural_compressor.model.nets_factory"]], "onnxmodel (class in neural_compressor.model.onnx_model)": [[145, "neural_compressor.model.onnx_model.ONNXModel"]], "neural_compressor.model.onnx_model": [[145, "module-neural_compressor.model.onnx_model"]], "tensorflowbasemodel (class in neural_compressor.model.tensorflow_model)": [[146, "neural_compressor.model.tensorflow_model.TensorflowBaseModel"]], "tensorflowcheckpointmodel (class in neural_compressor.model.tensorflow_model)": [[146, "neural_compressor.model.tensorflow_model.TensorflowCheckpointModel"]], "tensorflowllmmodel (class in neural_compressor.model.tensorflow_model)": [[146, "neural_compressor.model.tensorflow_model.TensorflowLLMModel"]], "tensorflowmodel (class in neural_compressor.model.tensorflow_model)": [[146, "neural_compressor.model.tensorflow_model.TensorflowModel"]], "tensorflowqatmodel (class in neural_compressor.model.tensorflow_model)": [[146, "neural_compressor.model.tensorflow_model.TensorflowQATModel"]], "tensorflowsavedmodelmodel (class in neural_compressor.model.tensorflow_model)": [[146, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel"]], "checkpoint_session() (in module neural_compressor.model.tensorflow_model)": [[146, "neural_compressor.model.tensorflow_model.checkpoint_session"]], "estimator_session() (in module neural_compressor.model.tensorflow_model)": [[146, "neural_compressor.model.tensorflow_model.estimator_session"]], "frozen_pb_session() (in module neural_compressor.model.tensorflow_model)": [[146, "neural_compressor.model.tensorflow_model.frozen_pb_session"]], "get_model_type() (in module neural_compressor.model.tensorflow_model)": [[146, "neural_compressor.model.tensorflow_model.get_model_type"]], "graph_def_session() (in module neural_compressor.model.tensorflow_model)": [[146, "neural_compressor.model.tensorflow_model.graph_def_session"]], "graph_session() (in module neural_compressor.model.tensorflow_model)": [[146, "neural_compressor.model.tensorflow_model.graph_session"]], "keras_session() (in module neural_compressor.model.tensorflow_model)": [[146, "neural_compressor.model.tensorflow_model.keras_session"]], "load_saved_model() (in module neural_compressor.model.tensorflow_model)": [[146, "neural_compressor.model.tensorflow_model.load_saved_model"]], "neural_compressor.model.tensorflow_model": [[146, "module-neural_compressor.model.tensorflow_model"]], "saved_model_session() (in module neural_compressor.model.tensorflow_model)": [[146, "neural_compressor.model.tensorflow_model.saved_model_session"]], "slim_session() (in module neural_compressor.model.tensorflow_model)": [[146, "neural_compressor.model.tensorflow_model.slim_session"]], "try_loading_keras() (in module neural_compressor.model.tensorflow_model)": [[146, "neural_compressor.model.tensorflow_model.try_loading_keras"]], "validate_and_inference_input_output() (in module neural_compressor.model.tensorflow_model)": [[146, "neural_compressor.model.tensorflow_model.validate_and_inference_input_output"]], "validate_graph_node() (in module neural_compressor.model.tensorflow_model)": [[146, "neural_compressor.model.tensorflow_model.validate_graph_node"]], "ipexmodel (class in neural_compressor.model.torch_model)": [[147, "neural_compressor.model.torch_model.IPEXModel"]], "pytorchbasemodel (class in neural_compressor.model.torch_model)": [[147, "neural_compressor.model.torch_model.PyTorchBaseModel"]], "pytorchfxmodel (class in neural_compressor.model.torch_model)": [[147, "neural_compressor.model.torch_model.PyTorchFXModel"]], "pytorchmodel (class in neural_compressor.model.torch_model)": [[147, "neural_compressor.model.torch_model.PyTorchModel"]], "neural_compressor.model.torch_model": [[147, "module-neural_compressor.model.torch_model"]], "accuracy (class in neural_compressor.objective)": [[148, "neural_compressor.objective.Accuracy"]], "footprint (class in neural_compressor.objective)": [[148, "neural_compressor.objective.Footprint"]], "modelsize (class in neural_compressor.objective)": [[148, "neural_compressor.objective.ModelSize"]], "multiobjective (class in neural_compressor.objective)": [[148, "neural_compressor.objective.MultiObjective"]], "objective (class in neural_compressor.objective)": [[148, "neural_compressor.objective.Objective"]], "performance (class in neural_compressor.objective)": [[148, "neural_compressor.objective.Performance"]], "neural_compressor.objective": [[148, "module-neural_compressor.objective"]], "objective_custom_registry() (in module neural_compressor.objective)": [[148, "neural_compressor.objective.objective_custom_registry"]], "objective_registry() (in module neural_compressor.objective)": [[148, "neural_compressor.objective.objective_registry"]], "neural_compressor.profiling": [[149, "module-neural_compressor.profiling"]], "fit() (in module neural_compressor.quantization)": [[150, "neural_compressor.quantization.fit"]], "neural_compressor.quantization": [[150, "module-neural_compressor.quantization"]], "autotunestrategy (class in neural_compressor.strategy.auto)": [[151, "neural_compressor.strategy.auto.AutoTuneStrategy"]], "neural_compressor.strategy.auto": [[151, "module-neural_compressor.strategy.auto"]], "automixedprecisiontunestrategy (class in neural_compressor.strategy.auto_mixed_precision)": [[152, "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[152, "module-neural_compressor.strategy.auto_mixed_precision"]], "basictunestrategy (class in neural_compressor.strategy.basic)": [[153, "neural_compressor.strategy.basic.BasicTuneStrategy"]], "neural_compressor.strategy.basic": [[153, "module-neural_compressor.strategy.basic"]], "bayesianoptimization (class in neural_compressor.strategy.bayesian)": [[154, "neural_compressor.strategy.bayesian.BayesianOptimization"]], "bayesiantunestrategy (class in neural_compressor.strategy.bayesian)": [[154, "neural_compressor.strategy.bayesian.BayesianTuneStrategy"]], "targetspace (class in neural_compressor.strategy.bayesian)": [[154, "neural_compressor.strategy.bayesian.TargetSpace"]], "acq_max() (in module neural_compressor.strategy.bayesian)": [[154, "neural_compressor.strategy.bayesian.acq_max"]], "neural_compressor.strategy.bayesian": [[154, "module-neural_compressor.strategy.bayesian"]], "conservativetunestrategy (class in neural_compressor.strategy.conservative)": [[155, "neural_compressor.strategy.conservative.ConservativeTuneStrategy"]], "neural_compressor.strategy.conservative": [[155, "module-neural_compressor.strategy.conservative"]], "exhaustivetunestrategy (class in neural_compressor.strategy.exhaustive)": [[156, "neural_compressor.strategy.exhaustive.ExhaustiveTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[156, "module-neural_compressor.strategy.exhaustive"]], "hawq_v2tunestrategy (class in neural_compressor.strategy.hawq_v2)": [[157, "neural_compressor.strategy.hawq_v2.HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[157, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy": [[158, "module-neural_compressor.strategy"]], "msetunestrategy (class in neural_compressor.strategy.mse)": [[159, "neural_compressor.strategy.mse.MSETuneStrategy"]], "neural_compressor.strategy.mse": [[159, "module-neural_compressor.strategy.mse"]], "mse_v2tunestrategy (class in neural_compressor.strategy.mse_v2)": [[160, "neural_compressor.strategy.mse_v2.MSE_V2TuneStrategy"]], "neural_compressor.strategy.mse_v2": [[160, "module-neural_compressor.strategy.mse_v2"]], "randomtunestrategy (class in neural_compressor.strategy.random)": [[161, "neural_compressor.strategy.random.RandomTuneStrategy"]], "neural_compressor.strategy.random": [[161, "module-neural_compressor.strategy.random"]], "tunestrategy (class in neural_compressor.strategy.strategy)": [[162, "neural_compressor.strategy.strategy.TuneStrategy"]], "tunestrategymeta (class in neural_compressor.strategy.strategy)": [[162, "neural_compressor.strategy.strategy.TuneStrategyMeta"]], "neural_compressor.strategy.strategy": [[162, "module-neural_compressor.strategy.strategy"]], "strategy_registry() (in module neural_compressor.strategy.strategy)": [[162, "neural_compressor.strategy.strategy.strategy_registry"]], "neural_compressor.strategy.utils.constant": [[163, "module-neural_compressor.strategy.utils.constant"]], "neural_compressor.strategy.utils": [[164, "module-neural_compressor.strategy.utils"]], "blockfallbacktuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[165, "neural_compressor.strategy.utils.tuning_sampler.BlockFallbackTuningSampler"]], "fallbacktuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[165, "neural_compressor.strategy.utils.tuning_sampler.FallbackTuningSampler"]], "lowerbitssampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[165, "neural_compressor.strategy.utils.tuning_sampler.LowerBitsSampler"]], "modelwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[165, "neural_compressor.strategy.utils.tuning_sampler.ModelWiseTuningSampler"]], "optypewisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[165, "neural_compressor.strategy.utils.tuning_sampler.OpTypeWiseTuningSampler"]], "opwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[165, "neural_compressor.strategy.utils.tuning_sampler.OpWiseTuningSampler"]], "smoothquantsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[165, "neural_compressor.strategy.utils.tuning_sampler.SmoothQuantSampler"]], "tuningorder (class in neural_compressor.strategy.utils.tuning_sampler)": [[165, "neural_compressor.strategy.utils.tuning_sampler.TuningOrder"]], "tuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[165, "neural_compressor.strategy.utils.tuning_sampler.TuningSampler"]], "weightonlyquantsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[165, "neural_compressor.strategy.utils.tuning_sampler.WeightOnlyQuantSampler"]], "neural_compressor.strategy.utils.tuning_sampler": [[165, "module-neural_compressor.strategy.utils.tuning_sampler"]], "tuningitem (class in neural_compressor.strategy.utils.tuning_space)": [[166, "neural_compressor.strategy.utils.tuning_space.TuningItem"]], "tuningspace (class in neural_compressor.strategy.utils.tuning_space)": [[166, "neural_compressor.strategy.utils.tuning_space.TuningSpace"]], "initial_tuning_cfg_with_quant_mode() (in module neural_compressor.strategy.utils.tuning_space)": [[166, "neural_compressor.strategy.utils.tuning_space.initial_tuning_cfg_with_quant_mode"]], "neural_compressor.strategy.utils.tuning_space": [[166, "module-neural_compressor.strategy.utils.tuning_space"]], "pattern_to_internal() (in module neural_compressor.strategy.utils.tuning_space)": [[166, "neural_compressor.strategy.utils.tuning_space.pattern_to_internal"]], "pattern_to_path() (in module neural_compressor.strategy.utils.tuning_space)": [[166, "neural_compressor.strategy.utils.tuning_space.pattern_to_path"]], "quant_mode_from_pattern() (in module neural_compressor.strategy.utils.tuning_space)": [[166, "neural_compressor.strategy.utils.tuning_space.quant_mode_from_pattern"]], "optuningconfig (class in neural_compressor.strategy.utils.tuning_structs)": [[167, "neural_compressor.strategy.utils.tuning_structs.OpTuningConfig"]], "neural_compressor.strategy.utils.tuning_structs": [[167, "module-neural_compressor.strategy.utils.tuning_structs"]], "classregister (class in neural_compressor.strategy.utils.utility)": [[168, "neural_compressor.strategy.utils.utility.ClassRegister"]], "ordereddefaultdict (class in neural_compressor.strategy.utils.utility)": [[168, "neural_compressor.strategy.utils.utility.OrderedDefaultDict"]], "quantoptions (class in neural_compressor.strategy.utils.utility)": [[168, "neural_compressor.strategy.utils.utility.QuantOptions"]], "quanttype (class in neural_compressor.strategy.utils.utility)": [[168, "neural_compressor.strategy.utils.utility.QuantType"]], "build_slave_faker_model() (in module neural_compressor.strategy.utils.utility)": [[168, "neural_compressor.strategy.utils.utility.build_slave_faker_model"]], "extract_data_type() (in module neural_compressor.strategy.utils.utility)": [[168, "neural_compressor.strategy.utils.utility.extract_data_type"]], "get_adaptor_name() (in module neural_compressor.strategy.utils.utility)": [[168, "neural_compressor.strategy.utils.utility.get_adaptor_name"]], "neural_compressor.strategy.utils.utility": [[168, "module-neural_compressor.strategy.utils.utility"]], "preprocess_user_cfg() (in module neural_compressor.strategy.utils.utility)": [[168, "neural_compressor.strategy.utils.utility.preprocess_user_cfg"]], "reverted_data_type() (in module neural_compressor.strategy.utils.utility)": [[168, "neural_compressor.strategy.utils.utility.reverted_data_type"]], "callbacks (class in neural_compressor.training)": [[169, "neural_compressor.training.CallBacks"]], "compressionmanager (class in neural_compressor.training)": [[169, "neural_compressor.training.CompressionManager"]], "fit() (in module neural_compressor.training)": [[169, "neural_compressor.training.fit"]], "neural_compressor.training": [[169, "module-neural_compressor.training"]], "prepare_compression() (in module neural_compressor.training)": [[169, "neural_compressor.training.prepare_compression"]], "layerhistogramcollector (class in neural_compressor.utils.collect_layer_histogram)": [[170, "neural_compressor.utils.collect_layer_histogram.LayerHistogramCollector"]], "neural_compressor.utils.collect_layer_histogram": [[170, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[171, "module-neural_compressor.utils.constant"]], "create_dataloader() (in module neural_compressor.utils.create_obj_from_config)": [[172, "neural_compressor.utils.create_obj_from_config.create_dataloader"]], "create_dataset() (in module neural_compressor.utils.create_obj_from_config)": [[172, "neural_compressor.utils.create_obj_from_config.create_dataset"]], "create_eval_func() (in module neural_compressor.utils.create_obj_from_config)": [[172, "neural_compressor.utils.create_obj_from_config.create_eval_func"]], "create_train_func() (in module neural_compressor.utils.create_obj_from_config)": [[172, "neural_compressor.utils.create_obj_from_config.create_train_func"]], "get_algorithm() (in module neural_compressor.utils.create_obj_from_config)": [[172, "neural_compressor.utils.create_obj_from_config.get_algorithm"]], "get_func_from_config() (in module neural_compressor.utils.create_obj_from_config)": [[172, "neural_compressor.utils.create_obj_from_config.get_func_from_config"]], "get_metrics() (in module neural_compressor.utils.create_obj_from_config)": [[172, "neural_compressor.utils.create_obj_from_config.get_metrics"]], "get_postprocess() (in module neural_compressor.utils.create_obj_from_config)": [[172, "neural_compressor.utils.create_obj_from_config.get_postprocess"]], "get_preprocess() (in module neural_compressor.utils.create_obj_from_config)": [[172, "neural_compressor.utils.create_obj_from_config.get_preprocess"]], "neural_compressor.utils.create_obj_from_config": [[172, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils": [[173, "module-neural_compressor.utils"]], "kl_divergence (class in neural_compressor.utils.kl_divergence)": [[174, "neural_compressor.utils.kl_divergence.KL_Divergence"]], "neural_compressor.utils.kl_divergence": [[174, "module-neural_compressor.utils.kl_divergence"]], "optimizedmodel (class in neural_compressor.utils.load_huggingface)": [[175, "neural_compressor.utils.load_huggingface.OptimizedModel"]], "export_compressed_model() (in module neural_compressor.utils.load_huggingface)": [[175, "neural_compressor.utils.load_huggingface.export_compressed_model"]], "neural_compressor.utils.load_huggingface": [[175, "module-neural_compressor.utils.load_huggingface"]], "save_for_huggingface_upstream() (in module neural_compressor.utils.load_huggingface)": [[175, "neural_compressor.utils.load_huggingface.save_for_huggingface_upstream"]], "logger (class in neural_compressor.utils.logger)": [[176, "neural_compressor.utils.logger.Logger"]], "debug() (in module neural_compressor.utils.logger)": [[176, "neural_compressor.utils.logger.debug"]], "error() (in module neural_compressor.utils.logger)": [[176, "neural_compressor.utils.logger.error"]], "fatal() (in module neural_compressor.utils.logger)": [[176, "neural_compressor.utils.logger.fatal"]], "info() (in module neural_compressor.utils.logger)": [[176, "neural_compressor.utils.logger.info"]], "log() (in module neural_compressor.utils.logger)": [[176, "neural_compressor.utils.logger.log"]], "neural_compressor.utils.logger": [[176, "module-neural_compressor.utils.logger"]], "warn() (in module neural_compressor.utils.logger)": [[176, "neural_compressor.utils.logger.warn"]], "warning() (in module neural_compressor.utils.logger)": [[176, "neural_compressor.utils.logger.warning"]], "get_model_path() (in module neural_compressor.utils.neural_insights_utils)": [[177, "neural_compressor.utils.neural_insights_utils.get_model_path"]], "neural_compressor.utils.neural_insights_utils": [[177, "module-neural_compressor.utils.neural_insights_utils"]], "register_neural_insights_workload() (in module neural_compressor.utils.neural_insights_utils)": [[177, "neural_compressor.utils.neural_insights_utils.register_neural_insights_workload"]], "update_neural_insights_workload() (in module neural_compressor.utils.neural_insights_utils)": [[177, "neural_compressor.utils.neural_insights_utils.update_neural_insights_workload"]], "update_neural_insights_workload_accuracy_data() (in module neural_compressor.utils.neural_insights_utils)": [[177, "neural_compressor.utils.neural_insights_utils.update_neural_insights_workload_accuracy_data"]], "neural_compressor.utils.options": [[178, "module-neural_compressor.utils.options"]], "onnxrt (class in neural_compressor.utils.options)": [[178, "neural_compressor.utils.options.onnxrt"]], "is_int8_model() (in module neural_compressor.utils.pytorch)": [[179, "neural_compressor.utils.pytorch.is_int8_model"]], "load() (in module neural_compressor.utils.pytorch)": [[179, "neural_compressor.utils.pytorch.load"]], "load_weight_only() (in module neural_compressor.utils.pytorch)": [[179, "neural_compressor.utils.pytorch.load_weight_only"]], "neural_compressor.utils.pytorch": [[179, "module-neural_compressor.utils.pytorch"]], "recover_model_from_json() (in module neural_compressor.utils.pytorch)": [[179, "neural_compressor.utils.pytorch.recover_model_from_json"]], "captureoutputtofile (class in neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.CaptureOutputToFile"]], "cpuinfo (class in neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.CpuInfo"]], "dequantize() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.Dequantize"]], "dotdict (class in neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.DotDict"]], "global_state (class in neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.GLOBAL_STATE"]], "lazyimport (class in neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.LazyImport"]], "mode (class in neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.MODE"]], "opentry (class in neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.OpEntry"]], "statistics (class in neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.Statistics"]], "alias_param() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.alias_param"]], "calculate_mse() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.calculate_mse"]], "check_key_exist() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.check_key_exist"]], "combine_histogram() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.combine_histogram"]], "compare_objects() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.compare_objects"]], "compute_sparsity() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.compute_sparsity"]], "dequantize_weight() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.dequantize_weight"]], "dump_class_attrs() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.dump_class_attrs"]], "dump_data_to_local() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.dump_data_to_local"]], "dump_elapsed_time() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.dump_elapsed_time"]], "dump_table() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.dump_table"]], "dump_table_to_csv() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.dump_table_to_csv"]], "equal_dicts() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.equal_dicts"]], "fault_tolerant_file() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.fault_tolerant_file"]], "get_all_fp32_data() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.get_all_fp32_data"]], "get_number_of_sockets() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.get_number_of_sockets"]], "get_op_list() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.get_op_list"]], "get_size() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.get_size"]], "get_tensor_histogram() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.get_tensor_histogram"]], "get_tensors_info() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.get_tensors_info"]], "get_tuning_history() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.get_tuning_history"]], "get_weights_details() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.get_weights_details"]], "load_data_from_pkl() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.load_data_from_pkl"]], "mse_metric_gap() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.mse_metric_gap"]], "neural_compressor.utils.utility": [[180, "module-neural_compressor.utils.utility"]], "print_op_list() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.print_op_list"]], "print_table() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.print_table"]], "recover() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.recover"]], "set_random_seed() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.set_random_seed"]], "set_resume_from() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.set_resume_from"]], "set_tensorboard() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.set_tensorboard"]], "set_workspace() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.set_workspace"]], "show_memory_info() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.show_memory_info"]], "singleton() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.singleton"]], "str2array() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.str2array"]], "time_limit() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.time_limit"]], "version1_eq_version2() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.version1_eq_version2"]], "version1_gt_version2() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.version1_gt_version2"]], "version1_gte_version2() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.version1_gte_version2"]], "version1_lt_version2() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.version1_lt_version2"]], "version1_lte_version2() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.version1_lte_version2"]], "weightsdetails (class in neural_compressor.utils.weights_details)": [[181, "neural_compressor.utils.weights_details.WeightsDetails"]], "weightsstatistics (class in neural_compressor.utils.weights_details)": [[181, "neural_compressor.utils.weights_details.WeightsStatistics"]], "neural_compressor.utils.weights_details": [[181, "module-neural_compressor.utils.weights_details"]], "neural_compressor.version": [[182, "module-neural_compressor.version"]]}})