Search.setIndex({"docnames": ["autoapi/neural_compressor/algorithm/algorithm/index", "autoapi/neural_compressor/algorithm/fast_bias_correction/index", "autoapi/neural_compressor/algorithm/index", "autoapi/neural_compressor/algorithm/smooth_quant/index", "autoapi/neural_compressor/algorithm/weight_correction/index", "autoapi/neural_compressor/benchmark/index", "autoapi/neural_compressor/common/base_config/index", "autoapi/neural_compressor/common/base_tuning/index", "autoapi/neural_compressor/common/index", "autoapi/neural_compressor/common/tuning_param/index", "autoapi/neural_compressor/common/utils/constants/index", "autoapi/neural_compressor/common/utils/index", "autoapi/neural_compressor/common/utils/logger/index", "autoapi/neural_compressor/common/utils/save_load/index", "autoapi/neural_compressor/common/utils/utility/index", "autoapi/neural_compressor/config/index", "autoapi/neural_compressor/contrib/index", "autoapi/neural_compressor/contrib/strategy/index", "autoapi/neural_compressor/contrib/strategy/sigopt/index", "autoapi/neural_compressor/contrib/strategy/tpe/index", "autoapi/neural_compressor/data/datasets/bert_dataset/index", "autoapi/neural_compressor/data/datasets/coco_dataset/index", "autoapi/neural_compressor/data/datasets/dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/data/datasets/index", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/data/filters/coco_filter/index", "autoapi/neural_compressor/data/filters/filter/index", "autoapi/neural_compressor/data/filters/index", "autoapi/neural_compressor/data/index", "autoapi/neural_compressor/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/data/transforms/index", "autoapi/neural_compressor/data/transforms/postprocess/index", "autoapi/neural_compressor/data/transforms/tokenization/index", "autoapi/neural_compressor/data/transforms/transform/index", "autoapi/neural_compressor/index", "autoapi/neural_compressor/metric/bleu/index", "autoapi/neural_compressor/metric/bleu_util/index", "autoapi/neural_compressor/metric/coco_label_map/index", "autoapi/neural_compressor/metric/coco_tools/index", "autoapi/neural_compressor/metric/evaluate_squad/index", "autoapi/neural_compressor/metric/f1/index", "autoapi/neural_compressor/metric/index", "autoapi/neural_compressor/metric/metric/index", "autoapi/neural_compressor/mix_precision/index", "autoapi/neural_compressor/model/base_model/index", "autoapi/neural_compressor/model/index", "autoapi/neural_compressor/model/keras_model/index", "autoapi/neural_compressor/model/model/index", "autoapi/neural_compressor/model/mxnet_model/index", "autoapi/neural_compressor/model/nets_factory/index", "autoapi/neural_compressor/model/onnx_model/index", "autoapi/neural_compressor/model/tensorflow_model/index", "autoapi/neural_compressor/model/torch_model/index", "autoapi/neural_compressor/objective/index", "autoapi/neural_compressor/profiling/index", "autoapi/neural_compressor/quantization/index", "autoapi/neural_compressor/strategy/auto/index", "autoapi/neural_compressor/strategy/auto_mixed_precision/index", "autoapi/neural_compressor/strategy/basic/index", "autoapi/neural_compressor/strategy/bayesian/index", "autoapi/neural_compressor/strategy/conservative/index", "autoapi/neural_compressor/strategy/exhaustive/index", "autoapi/neural_compressor/strategy/hawq_v2/index", "autoapi/neural_compressor/strategy/index", "autoapi/neural_compressor/strategy/mse/index", "autoapi/neural_compressor/strategy/mse_v2/index", "autoapi/neural_compressor/strategy/random/index", "autoapi/neural_compressor/strategy/strategy/index", "autoapi/neural_compressor/strategy/utils/constant/index", "autoapi/neural_compressor/strategy/utils/index", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index", "autoapi/neural_compressor/strategy/utils/tuning_space/index", "autoapi/neural_compressor/strategy/utils/tuning_structs/index", "autoapi/neural_compressor/strategy/utils/utility/index", "autoapi/neural_compressor/training/index", "autoapi/neural_compressor/utils/collect_layer_histogram/index", "autoapi/neural_compressor/utils/constant/index", "autoapi/neural_compressor/utils/create_obj_from_config/index", "autoapi/neural_compressor/utils/export/index", "autoapi/neural_compressor/utils/export/qlinear2qdq/index", "autoapi/neural_compressor/utils/export/tf2onnx/index", "autoapi/neural_compressor/utils/export/torch2onnx/index", "autoapi/neural_compressor/utils/index", "autoapi/neural_compressor/utils/kl_divergence/index", "autoapi/neural_compressor/utils/load_huggingface/index", "autoapi/neural_compressor/utils/logger/index", "autoapi/neural_compressor/utils/neural_insights_utils/index", "autoapi/neural_compressor/utils/options/index", "autoapi/neural_compressor/utils/pytorch/index", "autoapi/neural_compressor/utils/utility/index", "autoapi/neural_compressor/utils/weights_details/index", "autoapi/neural_compressor/version/index", "docs/3x/PT_DynamicQuant", "docs/3x/PT_MXQuant", "docs/3x/PT_MixPrecision", "docs/3x/PT_SmoothQuant", "docs/3x/PT_StaticQuant", "docs/3x/PT_WeightOnlyQuant", "docs/3x/PyTorch", "docs/3x/TF_Quant", "docs/3x/TF_SQ", "docs/3x/TensorFlow", "docs/3x/autotune", "docs/3x/benchmark", "docs/3x/quantization", "docs/build_docs/source/index", "docs/source/CODE_OF_CONDUCT", "docs/source/CONTRIBUTING", "docs/source/FX", "docs/source/NAS", "docs/source/SECURITY", "docs/source/Welcome", "docs/source/adaptor", "docs/source/add_new_adaptor", "docs/source/add_new_data_type", "docs/source/api-doc/adaptor", "docs/source/api-doc/adaptor/onnxrt", "docs/source/api-doc/adaptor/torch_utils", "docs/source/api-doc/api_doc_example", "docs/source/api-doc/apis", "docs/source/api-doc/benchmark", "docs/source/api-doc/compression", "docs/source/api-doc/config", "docs/source/api-doc/mix_precision", "docs/source/api-doc/model", "docs/source/api-doc/objective", "docs/source/api-doc/quantization", "docs/source/api-doc/strategy", "docs/source/api-doc/training", "docs/source/benchmark", "docs/source/calibration", "docs/source/coding_style", "docs/source/dataloader", "docs/source/dataset", "docs/source/design", "docs/source/diagnosis", "docs/source/distillation", "docs/source/distillation_quantization", "docs/source/distributed", "docs/source/examples_readme", "docs/source/export", "docs/source/faq", "docs/source/framework_yaml", "docs/source/get_started", "docs/source/incompatible_changes", "docs/source/infrastructure", "docs/source/installation_guide", "docs/source/legal_information", "docs/source/llm_recipes", "docs/source/metric", "docs/source/migration", "docs/source/mixed_precision", "docs/source/model", "docs/source/mx_quantization", "docs/source/neural_coder/README", "docs/source/neural_coder/docs/AWSSageMakerSupport", "docs/source/neural_coder/docs/BigDLNanoSupport", "docs/source/neural_coder/docs/IntelCPU_PerformanceSetting", "docs/source/neural_coder/docs/PythonAPI", "docs/source/neural_coder/docs/PythonLauncher", "docs/source/neural_coder/docs/Quantization", "docs/source/neural_coder/docs/SupportMatrix", "docs/source/neural_coder/docs/release_notes/v0.4", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/DEVELOP", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/README", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/RELEASE", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/DEVELOP", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/RELEASE", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/README", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/vsc-extension-quickstart", "docs/source/neural_insights/README", "docs/source/neural_insights/docs/source/onnx_accuracy_debug", "docs/source/neural_insights/docs/source/pytorch_nlp_cli_mode", "docs/source/neural_insights/docs/source/tf_accuracy_debug", "docs/source/neural_insights/gui/README", "docs/source/neural_solution/README", "docs/source/neural_solution/docs/source/README", "docs/source/neural_solution/docs/source/description_api", "docs/source/neural_solution/docs/source/ns_design_doc", "docs/source/neural_solution/docs/source/template/task_request_description", "docs/source/neural_solution/examples/README", "docs/source/neural_solution/examples/custom_models_optimized/tf_example1/README", "docs/source/neural_solution/examples/hf_models/README", "docs/source/neural_solution/examples/hf_models_grpc/README", "docs/source/neural_solution/frontend/README", "docs/source/objective", "docs/source/orchestration", "docs/source/pruning", "docs/source/publication_list", "docs/source/pythonic_style", "docs/source/quantization", "docs/source/quantization_layer_wise", "docs/source/quantization_mixed_precision", "docs/source/quantization_weight_only", "docs/source/releases_info", "docs/source/sigopt_strategy", "docs/source/smooth_quant", "docs/source/tensorboard", "docs/source/transform", "docs/source/tuning_strategies", "docs/source/user_guide", "docs/source/user_yaml", "docs/source/validated_model_list", "index"], "filenames": ["autoapi/neural_compressor/algorithm/algorithm/index.rst", "autoapi/neural_compressor/algorithm/fast_bias_correction/index.rst", "autoapi/neural_compressor/algorithm/index.rst", "autoapi/neural_compressor/algorithm/smooth_quant/index.rst", "autoapi/neural_compressor/algorithm/weight_correction/index.rst", "autoapi/neural_compressor/benchmark/index.rst", "autoapi/neural_compressor/common/base_config/index.rst", "autoapi/neural_compressor/common/base_tuning/index.rst", "autoapi/neural_compressor/common/index.rst", "autoapi/neural_compressor/common/tuning_param/index.rst", "autoapi/neural_compressor/common/utils/constants/index.rst", "autoapi/neural_compressor/common/utils/index.rst", "autoapi/neural_compressor/common/utils/logger/index.rst", "autoapi/neural_compressor/common/utils/save_load/index.rst", "autoapi/neural_compressor/common/utils/utility/index.rst", "autoapi/neural_compressor/config/index.rst", "autoapi/neural_compressor/contrib/index.rst", "autoapi/neural_compressor/contrib/strategy/index.rst", "autoapi/neural_compressor/contrib/strategy/sigopt/index.rst", "autoapi/neural_compressor/contrib/strategy/tpe/index.rst", "autoapi/neural_compressor/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/data/datasets/index.rst", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/data/filters/filter/index.rst", "autoapi/neural_compressor/data/filters/index.rst", "autoapi/neural_compressor/data/index.rst", "autoapi/neural_compressor/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/data/transforms/index.rst", "autoapi/neural_compressor/data/transforms/postprocess/index.rst", "autoapi/neural_compressor/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/data/transforms/transform/index.rst", "autoapi/neural_compressor/index.rst", "autoapi/neural_compressor/metric/bleu/index.rst", "autoapi/neural_compressor/metric/bleu_util/index.rst", "autoapi/neural_compressor/metric/coco_label_map/index.rst", "autoapi/neural_compressor/metric/coco_tools/index.rst", "autoapi/neural_compressor/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/metric/f1/index.rst", "autoapi/neural_compressor/metric/index.rst", "autoapi/neural_compressor/metric/metric/index.rst", "autoapi/neural_compressor/mix_precision/index.rst", "autoapi/neural_compressor/model/base_model/index.rst", "autoapi/neural_compressor/model/index.rst", "autoapi/neural_compressor/model/keras_model/index.rst", "autoapi/neural_compressor/model/model/index.rst", "autoapi/neural_compressor/model/mxnet_model/index.rst", "autoapi/neural_compressor/model/nets_factory/index.rst", "autoapi/neural_compressor/model/onnx_model/index.rst", "autoapi/neural_compressor/model/tensorflow_model/index.rst", "autoapi/neural_compressor/model/torch_model/index.rst", "autoapi/neural_compressor/objective/index.rst", "autoapi/neural_compressor/profiling/index.rst", "autoapi/neural_compressor/quantization/index.rst", "autoapi/neural_compressor/strategy/auto/index.rst", "autoapi/neural_compressor/strategy/auto_mixed_precision/index.rst", "autoapi/neural_compressor/strategy/basic/index.rst", "autoapi/neural_compressor/strategy/bayesian/index.rst", "autoapi/neural_compressor/strategy/conservative/index.rst", "autoapi/neural_compressor/strategy/exhaustive/index.rst", "autoapi/neural_compressor/strategy/hawq_v2/index.rst", "autoapi/neural_compressor/strategy/index.rst", "autoapi/neural_compressor/strategy/mse/index.rst", "autoapi/neural_compressor/strategy/mse_v2/index.rst", "autoapi/neural_compressor/strategy/random/index.rst", "autoapi/neural_compressor/strategy/strategy/index.rst", "autoapi/neural_compressor/strategy/utils/constant/index.rst", "autoapi/neural_compressor/strategy/utils/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_space/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_structs/index.rst", "autoapi/neural_compressor/strategy/utils/utility/index.rst", "autoapi/neural_compressor/training/index.rst", "autoapi/neural_compressor/utils/collect_layer_histogram/index.rst", "autoapi/neural_compressor/utils/constant/index.rst", "autoapi/neural_compressor/utils/create_obj_from_config/index.rst", "autoapi/neural_compressor/utils/export/index.rst", "autoapi/neural_compressor/utils/export/qlinear2qdq/index.rst", "autoapi/neural_compressor/utils/export/tf2onnx/index.rst", "autoapi/neural_compressor/utils/export/torch2onnx/index.rst", "autoapi/neural_compressor/utils/index.rst", "autoapi/neural_compressor/utils/kl_divergence/index.rst", "autoapi/neural_compressor/utils/load_huggingface/index.rst", "autoapi/neural_compressor/utils/logger/index.rst", "autoapi/neural_compressor/utils/neural_insights_utils/index.rst", "autoapi/neural_compressor/utils/options/index.rst", "autoapi/neural_compressor/utils/pytorch/index.rst", "autoapi/neural_compressor/utils/utility/index.rst", "autoapi/neural_compressor/utils/weights_details/index.rst", "autoapi/neural_compressor/version/index.rst", "docs/3x/PT_DynamicQuant.md", "docs/3x/PT_MXQuant.md", "docs/3x/PT_MixPrecision.md", "docs/3x/PT_SmoothQuant.md", "docs/3x/PT_StaticQuant.md", "docs/3x/PT_WeightOnlyQuant.md", "docs/3x/PyTorch.md", "docs/3x/TF_Quant.md", "docs/3x/TF_SQ.md", "docs/3x/TensorFlow.md", "docs/3x/autotune.md", "docs/3x/benchmark.md", "docs/3x/quantization.md", "docs/build_docs/source/index.rst", "docs/source/CODE_OF_CONDUCT.md", "docs/source/CONTRIBUTING.md", "docs/source/FX.md", "docs/source/NAS.md", "docs/source/SECURITY.md", "docs/source/Welcome.md", "docs/source/adaptor.md", "docs/source/add_new_adaptor.md", "docs/source/add_new_data_type.md", "docs/source/api-doc/adaptor.rst", "docs/source/api-doc/adaptor/onnxrt.rst", "docs/source/api-doc/adaptor/torch_utils.rst", "docs/source/api-doc/api_doc_example.rst", "docs/source/api-doc/apis.rst", "docs/source/api-doc/benchmark.rst", "docs/source/api-doc/compression.rst", "docs/source/api-doc/config.rst", "docs/source/api-doc/mix_precision.rst", "docs/source/api-doc/model.rst", "docs/source/api-doc/objective.rst", "docs/source/api-doc/quantization.rst", "docs/source/api-doc/strategy.rst", "docs/source/api-doc/training.rst", "docs/source/benchmark.md", "docs/source/calibration.md", "docs/source/coding_style.md", "docs/source/dataloader.md", "docs/source/dataset.md", "docs/source/design.md", "docs/source/diagnosis.md", "docs/source/distillation.md", "docs/source/distillation_quantization.md", "docs/source/distributed.md", "docs/source/examples_readme.md", "docs/source/export.md", "docs/source/faq.md", "docs/source/framework_yaml.md", "docs/source/get_started.md", "docs/source/incompatible_changes.md", "docs/source/infrastructure.md", "docs/source/installation_guide.md", "docs/source/legal_information.md", "docs/source/llm_recipes.md", "docs/source/metric.md", "docs/source/migration.md", "docs/source/mixed_precision.md", "docs/source/model.md", "docs/source/mx_quantization.md", "docs/source/neural_coder/README.md", "docs/source/neural_coder/docs/AWSSageMakerSupport.md", "docs/source/neural_coder/docs/BigDLNanoSupport.md", "docs/source/neural_coder/docs/IntelCPU_PerformanceSetting.md", "docs/source/neural_coder/docs/PythonAPI.md", "docs/source/neural_coder/docs/PythonLauncher.md", "docs/source/neural_coder/docs/Quantization.md", "docs/source/neural_coder/docs/SupportMatrix.md", "docs/source/neural_coder/docs/release_notes/v0.4.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/DEVELOP.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/README.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/RELEASE.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/DEVELOP.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/RELEASE.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/README.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/vsc-extension-quickstart.md", "docs/source/neural_insights/README.md", "docs/source/neural_insights/docs/source/onnx_accuracy_debug.md", "docs/source/neural_insights/docs/source/pytorch_nlp_cli_mode.md", "docs/source/neural_insights/docs/source/tf_accuracy_debug.md", "docs/source/neural_insights/gui/README.md", "docs/source/neural_solution/README.md", "docs/source/neural_solution/docs/source/README.md", "docs/source/neural_solution/docs/source/description_api.md", "docs/source/neural_solution/docs/source/ns_design_doc.md", "docs/source/neural_solution/docs/source/template/task_request_description.md", "docs/source/neural_solution/examples/README.md", "docs/source/neural_solution/examples/custom_models_optimized/tf_example1/README.md", "docs/source/neural_solution/examples/hf_models/README.md", "docs/source/neural_solution/examples/hf_models_grpc/README.md", "docs/source/neural_solution/frontend/README.md", "docs/source/objective.md", "docs/source/orchestration.md", "docs/source/pruning.md", "docs/source/publication_list.md", "docs/source/pythonic_style.md", "docs/source/quantization.md", "docs/source/quantization_layer_wise.md", "docs/source/quantization_mixed_precision.md", "docs/source/quantization_weight_only.md", "docs/source/releases_info.md", "docs/source/sigopt_strategy.md", "docs/source/smooth_quant.md", "docs/source/tensorboard.md", "docs/source/transform.md", "docs/source/tuning_strategies.md", "docs/source/user_guide.md", "docs/source/user_yaml.md", "docs/source/validated_model_list.md", "index.rst"], "titles": ["neural_compressor.algorithm.algorithm", "neural_compressor.algorithm.fast_bias_correction", "neural_compressor.algorithm", "neural_compressor.algorithm.smooth_quant", "neural_compressor.algorithm.weight_correction", "neural_compressor.benchmark", "neural_compressor.common.base_config", "neural_compressor.common.base_tuning", "neural_compressor.common", "neural_compressor.common.tuning_param", "neural_compressor.common.utils.constants", "neural_compressor.common.utils", "neural_compressor.common.utils.logger", "neural_compressor.common.utils.save_load", "neural_compressor.common.utils.utility", "neural_compressor.config", "neural_compressor.contrib", "neural_compressor.contrib.strategy", "neural_compressor.contrib.strategy.sigopt", "neural_compressor.contrib.strategy.tpe", "neural_compressor.data.datasets.bert_dataset", "neural_compressor.data.datasets.coco_dataset", "neural_compressor.data.datasets.dataset", "neural_compressor.data.datasets.dummy_dataset", "neural_compressor.data.datasets.dummy_dataset_v2", "neural_compressor.data.datasets.imagenet_dataset", "neural_compressor.data.datasets", "neural_compressor.data.datasets.style_transfer_dataset", "neural_compressor.data.filters.coco_filter", "neural_compressor.data.filters.filter", "neural_compressor.data.filters", "neural_compressor.data", "neural_compressor.data.transforms.imagenet_transform", "neural_compressor.data.transforms", "neural_compressor.data.transforms.postprocess", "neural_compressor.data.transforms.tokenization", "neural_compressor.data.transforms.transform", "neural_compressor", "neural_compressor.metric.bleu", "neural_compressor.metric.bleu_util", "neural_compressor.metric.coco_label_map", "neural_compressor.metric.coco_tools", "neural_compressor.metric.evaluate_squad", "neural_compressor.metric.f1", "neural_compressor.metric", "neural_compressor.metric.metric", "neural_compressor.mix_precision", "neural_compressor.model.base_model", "neural_compressor.model", "neural_compressor.model.keras_model", "neural_compressor.model.model", "neural_compressor.model.mxnet_model", "neural_compressor.model.nets_factory", "neural_compressor.model.onnx_model", "neural_compressor.model.tensorflow_model", "neural_compressor.model.torch_model", "neural_compressor.objective", "neural_compressor.profiling", "neural_compressor.quantization", "neural_compressor.strategy.auto", "neural_compressor.strategy.auto_mixed_precision", "neural_compressor.strategy.basic", "neural_compressor.strategy.bayesian", "neural_compressor.strategy.conservative", "neural_compressor.strategy.exhaustive", "neural_compressor.strategy.hawq_v2", "neural_compressor.strategy", "neural_compressor.strategy.mse", "neural_compressor.strategy.mse_v2", "neural_compressor.strategy.random", "neural_compressor.strategy.strategy", "neural_compressor.strategy.utils.constant", "neural_compressor.strategy.utils", "neural_compressor.strategy.utils.tuning_sampler", "neural_compressor.strategy.utils.tuning_space", "neural_compressor.strategy.utils.tuning_structs", "neural_compressor.strategy.utils.utility", "neural_compressor.training", "neural_compressor.utils.collect_layer_histogram", "neural_compressor.utils.constant", "neural_compressor.utils.create_obj_from_config", "neural_compressor.utils.export", "neural_compressor.utils.export.qlinear2qdq", "neural_compressor.utils.export.tf2onnx", "neural_compressor.utils.export.torch2onnx", "neural_compressor.utils", "neural_compressor.utils.kl_divergence", "neural_compressor.utils.load_huggingface", "neural_compressor.utils.logger", "neural_compressor.utils.neural_insights_utils", "neural_compressor.utils.options", "neural_compressor.utils.pytorch", "neural_compressor.utils.utility", "neural_compressor.utils.weights_details", "neural_compressor.version", "Dynamic Quantization", "Microscaling Quantization", "PyTorch Mixed Precision", "PyTorch Smooth Quantization", "PyTorch Static Quantization", "PyTorch Weight Only Quantization", "Torch", "TensorFlow Quantization", "Smooth Quant", "TensorFlow", "AutoTune", "Benchmark", "Quantization", "Intel\u00ae Neural Compressor Documentation", "Contributor Covenant Code of Conduct", "Contribution Guidelines", "FX", "Neural Architecture Search", "Security Policy", "Intel\u00ae Neural Compressor", "Adaptor", "How to Add An Adaptor", "How to Support New Data Type, Like Int4, with a Few Line Changes", "Adaptor", "ONNX Runtime", "Torch Utils", "API Document Example", "APIs", "Benchmark", "Compression", "Config", "Mix Precision", "Model", "Objective", "Quantization", "Strategy", "Training", "Benchmarking", "Calibration Algorithms in Quantization", "INC Coding Conventions", "DataLoader", "Dataset", "Design", "Diagnosis", "Distillation", "Distillation for Quantization", "Distributed Training and Inference (Evaluation)", "Examples", "Export", "Frequently Asked Questions", "Framework YAML Configuration Files", "Getting Started", "Incompatible changes between v1.2 and v1.1", "Infrastructure of Intel\u00ae Neural Compressor", "Installation", "Legal Information", "LLMs Quantization Recipes", "Metrics", "Code Migration from Intel Neural Compressor 1.X to Intel Neural Compressor 2.X", "Mixed Precision", "Model", "Microscaling Quantization", "Neural Coder", "AWS Amazon SageMaker Support", "BigDL Nano Support", "Intel CPU Platforms: Best Performance Setting", "Neural Coder as Python API", "Python Launcher", "Neural Coder for Quantization", "Supported Optimization Features", "v0.4", "Changelog", "neural_compressor_ext_lab", "Intel\u00ae Neural Compressor as JupyterLab Extension", "Making a new release of neural_compressor_ext_lab", "Changelog", "neural_compressor_ext_lab_alibaba", "Making a new release of neural_compressor_ext_lab_alibaba", "Change Log", "Neural Coder", "Welcome to your VS Code Extension", "Neural Insights", "Step by step example how to debug accuracy with Neural Insights", "Step by step example how to dump weights data for PyTorch model with Neural Insights", "Step by step example how to debug accuracy with Neural Insights", "Getting Started with Create React App", "What\u2019s Neural Solution?", "Get started", "Neural Solution API", "Design Doc for Optimization as a Service [WIP]", "Task request description", "Examples List", "An end-to-end example: quantize a custom model with Neural Solution", "An end-to-end example: quantize a Hugging Face model with Neural Solution", "An end-to-end example: quantize a Hugging Face model with Neural Solution gRPC API", "Client", "Objective", "Optimization Orchestration", "Pruning", "Full Publications/Events (82)", "Pythonic Style Access for Configurations", "Quantization", "Layer Wise Quantization (LWQ)", "Turn OFF Auto Mixed Precision during Quantization", "Weight Only Quantization (WOQ)", "Release", "SigOpt Strategy", "Smooth Quant", "TensorBoard", "Transform", "Tuning Strategies", "User Guide", "User YAML Configuration Files", "Validated Models", "Intel\u00ae Neural Compressor Documentation"], "terms": {"regist": [0, 6, 22, 29, 36, 45, 56, 70, 76, 89, 112, 115, 134, 136, 141, 152, 153, 175, 191, 202, 205], "algorithm_registri": 0, "algorithm_typ": 0, "locat": [0, 36, 99, 104, 141, 160, 167, 171, 174, 182, 196, 200, 204, 207], "sourc": [0, 1, 3, 4, 5, 6, 7, 9, 10, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 32, 34, 35, 36, 37, 38, 39, 41, 42, 43, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 73, 74, 75, 76, 77, 78, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 111, 114, 150, 153, 167, 169, 171, 172, 174, 194], "decor": [0, 6, 14, 36, 45, 56, 70, 92, 111, 112, 115, 205], "all": [0, 2, 5, 6, 10, 15, 22, 29, 36, 38, 41, 43, 45, 47, 56, 70, 76, 80, 84, 92, 98, 101, 104, 105, 107, 109, 110, 114, 115, 116, 117, 134, 135, 136, 141, 145, 149, 153, 157, 165, 168, 169, 172, 173, 174, 175, 176, 179, 180, 182, 183, 187, 188, 189, 192, 193, 194, 196, 198, 199, 202, 204, 205], "subclass": [0, 22, 29, 36, 45, 56, 70, 115], "paramet": [0, 5, 6, 7, 9, 13, 14, 15, 18, 19, 20, 22, 29, 32, 36, 38, 39, 41, 42, 43, 45, 46, 50, 54, 56, 58, 62, 70, 74, 76, 77, 80, 82, 83, 84, 87, 88, 89, 91, 92, 96, 98, 99, 100, 103, 104, 106, 107, 111, 116, 135, 136, 139, 141, 148, 152, 153, 156, 168, 174, 175, 176, 177, 182, 187, 188, 193, 196, 197, 199, 201, 202, 204, 205, 207], "cl": [0, 14, 22, 29, 36, 45, 56, 70, 92, 134], "The": [0, 5, 6, 7, 8, 9, 11, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 28, 29, 36, 38, 39, 40, 42, 43, 45, 46, 54, 56, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 74, 76, 77, 78, 80, 86, 87, 91, 92, 93, 95, 96, 97, 99, 100, 101, 103, 104, 105, 107, 109, 111, 112, 115, 116, 117, 118, 120, 124, 127, 130, 132, 133, 134, 135, 136, 138, 139, 141, 143, 145, 147, 148, 149, 151, 152, 153, 154, 155, 156, 159, 160, 162, 165, 167, 168, 169, 171, 172, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 187, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208], "str": [0, 6, 9, 13, 14, 15, 20, 21, 22, 29, 32, 36, 38, 39, 41, 43, 45, 73, 76, 80, 83, 84, 87, 89, 92, 93, 100, 101, 104, 134, 135, 136, 152, 185, 195, 203, 204], "registr": [0, 22, 29, 36], "name": [0, 5, 6, 7, 9, 13, 15, 20, 21, 22, 25, 29, 34, 36, 40, 45, 50, 54, 56, 58, 74, 76, 78, 80, 82, 83, 84, 89, 92, 96, 99, 100, 101, 102, 110, 111, 117, 134, 136, 138, 141, 143, 145, 150, 152, 153, 155, 156, 160, 167, 171, 175, 176, 182, 193, 196, 200, 201, 203, 205, 207, 208], "call": [0, 14, 41, 104, 107, 111, 112, 115, 135, 147, 163, 165, 175, 193, 196, 202, 203, 204], "return": [0, 5, 6, 13, 14, 18, 19, 22, 29, 32, 36, 38, 39, 41, 42, 43, 45, 46, 50, 54, 56, 58, 62, 70, 74, 76, 77, 80, 84, 89, 91, 92, 97, 101, 102, 105, 107, 111, 112, 116, 117, 135, 136, 141, 152, 155, 187, 188, 189, 191, 193, 196, 199, 202, 203, 205], "type": [0, 6, 7, 9, 13, 14, 15, 20, 22, 29, 36, 38, 39, 41, 45, 54, 56, 62, 63, 70, 74, 76, 84, 91, 92, 96, 97, 98, 99, 100, 101, 102, 104, 115, 116, 136, 138, 141, 143, 145, 148, 153, 154, 156, 175, 177, 182, 183, 187, 188, 196, 197, 199, 201, 204, 205, 206, 207], "build": [0, 1, 3, 4, 49, 51, 53, 54, 55, 104, 115, 116, 117, 149, 155, 167, 169, 171, 172, 175, 194, 205], "dict": [0, 5, 13, 15, 18, 19, 40, 41, 42, 43, 45, 46, 54, 58, 73, 76, 77, 78, 80, 82, 84, 91, 92, 100, 101, 102, 111, 116, 134, 143, 152, 193, 195, 196, 202, 203, 205], "algorithmschedul": 0, "conf": [0, 5, 15, 18, 19, 46, 56, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 74, 77, 111, 112, 114, 117, 132, 139, 146, 147, 153, 154, 155, 176, 178, 179, 192, 196, 197, 198, 199, 201, 202, 205], "control": [0, 15, 111, 153, 180, 193, 205], "differ": [0, 4, 6, 9, 10, 15, 22, 36, 45, 54, 56, 86, 100, 101, 104, 107, 109, 111, 112, 116, 135, 136, 138, 139, 141, 142, 147, 148, 152, 153, 155, 167, 171, 176, 179, 182, 191, 193, 196, 199, 202, 203, 204, 205], "phase": [0, 104, 107, 112, 153, 193, 196, 198, 205], "base": [0, 6, 7, 14, 15, 20, 22, 29, 36, 45, 47, 54, 55, 56, 67, 70, 74, 95, 97, 98, 100, 101, 105, 107, 112, 114, 115, 116, 117, 134, 136, 140, 141, 145, 153, 154, 162, 163, 165, 174, 177, 182, 185, 188, 189, 193, 194, 196, 199, 201, 202, 203, 205, 208], "fastbiascorrect": [1, 4], "threshold": [1, 78, 86, 152], "2": [1, 3, 5, 7, 15, 21, 41, 43, 45, 56, 62, 92, 95, 96, 98, 99, 100, 102, 103, 104, 105, 106, 107, 111, 114, 115, 133, 135, 136, 138, 139, 145, 148, 149, 150, 151, 152, 154, 156, 178, 184, 185, 187, 188, 189, 191, 193, 194, 196, 197, 199, 200, 201, 202, 204, 205, 206], "0": [1, 3, 6, 7, 15, 20, 23, 24, 27, 32, 36, 45, 56, 58, 63, 84, 87, 96, 97, 98, 100, 103, 105, 106, 107, 111, 114, 134, 135, 136, 139, 141, 143, 144, 145, 149, 150, 151, 152, 153, 154, 156, 160, 162, 167, 171, 177, 187, 188, 193, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 207], "channel_axi": [1, 4], "1": [1, 3, 4, 5, 7, 15, 20, 21, 23, 24, 27, 28, 32, 36, 41, 42, 43, 45, 56, 58, 76, 80, 87, 92, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 111, 114, 115, 117, 133, 135, 136, 138, 139, 143, 145, 146, 149, 151, 152, 154, 156, 158, 160, 176, 177, 184, 185, 187, 188, 189, 191, 192, 193, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207], "fetch": [2, 116, 136, 187, 188, 189], "file": [2, 13, 15, 18, 19, 20, 21, 22, 25, 35, 36, 41, 46, 56, 58, 91, 92, 100, 106, 110, 112, 115, 116, 117, 141, 144, 147, 150, 152, 153, 155, 160, 169, 172, 173, 174, 175, 177, 178, 179, 180, 182, 183, 187, 188, 189, 191, 195, 196, 199, 203, 204], "init": [2, 136, 152, 205], "fast_bias_correct": [2, 15, 196], "smooth_quant": [2, 15, 134, 196, 202], "weight_correct": [2, 15, 196], "smoothquant": [3, 98, 100, 101, 103, 107, 114, 151, 194, 199, 206], "alpha": [3, 107, 134, 196, 205], "5": [3, 7, 15, 24, 32, 45, 58, 98, 100, 103, 107, 115, 136, 143, 145, 149, 152, 153, 179, 184, 187, 188, 193, 195, 196, 199, 202, 204, 205, 207, 208], "fake": [3, 9, 76, 100, 107, 153, 196, 199, 202], "input": [3, 15, 18, 19, 20, 21, 22, 24, 32, 35, 36, 45, 46, 50, 54, 58, 77, 82, 83, 84, 87, 89, 91, 92, 95, 99, 100, 101, 107, 112, 115, 116, 132, 133, 135, 136, 138, 139, 140, 141, 143, 145, 147, 152, 153, 154, 155, 157, 162, 193, 195, 196, 199, 202, 203, 204, 207], "channel": [3, 4, 15, 32, 36, 87, 96, 98, 100, 114, 115, 117, 148, 149, 156, 157, 159, 164, 179, 193, 199, 204, 208], "quantiz": [3, 5, 7, 10, 12, 14, 15, 18, 19, 32, 37, 63, 65, 67, 76, 77, 78, 84, 86, 87, 91, 92, 97, 103, 105, 115, 122, 134, 135, 136, 141, 142, 145, 147, 148, 152, 155, 157, 162, 164, 165, 168, 181, 183, 184, 186, 192, 194, 200, 203, 204, 205, 206, 207], "more": [3, 9, 36, 96, 97, 98, 100, 101, 104, 107, 112, 113, 114, 116, 133, 134, 136, 139, 141, 143, 146, 148, 149, 151, 153, 154, 156, 157, 165, 169, 172, 177, 182, 191, 192, 193, 198, 199, 202, 205, 206, 208], "detail": [3, 6, 36, 92, 93, 97, 98, 101, 102, 103, 104, 107, 109, 114, 116, 117, 133, 134, 139, 145, 146, 147, 151, 152, 153, 154, 157, 165, 174, 182, 183, 193, 199, 200, 201, 202, 203, 205, 206], "pleas": [3, 15, 20, 21, 22, 25, 45, 58, 98, 99, 100, 101, 102, 103, 107, 111, 112, 113, 114, 115, 132, 133, 136, 140, 141, 143, 149, 151, 152, 154, 157, 158, 162, 165, 181, 182, 183, 193, 196, 198, 199, 200, 201, 202, 205, 206], "refer": [3, 15, 20, 38, 39, 45, 58, 98, 99, 101, 102, 103, 104, 111, 114, 115, 116, 132, 135, 136, 138, 140, 141, 143, 147, 149, 150, 152, 153, 154, 157, 162, 165, 176, 177, 179, 181, 182, 183, 191, 195, 197, 200, 204, 205], "accur": [3, 99, 100, 107, 193, 199, 202], "effici": [3, 99, 100, 107, 112, 114, 133, 135, 139, 157, 182, 192, 193, 194, 199, 202, 205], "post": [3, 15, 18, 19, 58, 96, 98, 99, 100, 101, 103, 105, 107, 109, 114, 115, 116, 138, 140, 141, 143, 148, 149, 156, 157, 163, 174, 184, 193, 194, 197, 199, 202, 203, 205], "train": [3, 15, 18, 19, 20, 22, 36, 37, 58, 80, 96, 97, 98, 99, 100, 101, 103, 105, 112, 114, 115, 116, 122, 136, 138, 139, 140, 143, 148, 154, 156, 157, 163, 174, 179, 187, 192, 194, 197, 199, 201, 202, 205, 207], "larg": [3, 96, 98, 100, 101, 103, 104, 107, 114, 135, 139, 153, 156, 194, 197, 199, 202, 208], "languag": [3, 38, 96, 98, 100, 101, 103, 104, 107, 109, 114, 143, 156, 178, 194, 197, 199, 202], "model": [3, 5, 7, 9, 15, 18, 19, 20, 22, 36, 37, 45, 46, 56, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 76, 77, 82, 83, 84, 87, 89, 91, 92, 94, 95, 96, 97, 100, 101, 102, 103, 104, 107, 110, 111, 112, 114, 115, 117, 122, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 147, 148, 150, 152, 154, 157, 162, 164, 165, 168, 174, 176, 181, 183, 184, 185, 186, 191, 192, 194, 196, 200, 201, 203, 204, 205, 206, 207], "spiq": [3, 107, 202], "data": [3, 14, 15, 18, 19, 37, 46, 58, 62, 74, 76, 77, 80, 84, 89, 92, 95, 96, 97, 99, 100, 101, 104, 107, 114, 115, 133, 135, 136, 141, 145, 146, 149, 152, 153, 154, 156, 176, 177, 179, 182, 187, 188, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206], "free": [3, 18, 19, 58, 98, 103, 107, 109, 163, 168, 176, 184, 191, 201, 202], "per": [3, 5, 15, 86, 96, 98, 100, 106, 115, 117, 135, 156, 182, 193, 198, 199, 208], "static": [3, 15, 58, 74, 84, 101, 115, 116, 117, 138, 143, 148, 153, 157, 162, 163, 164, 165, 168, 174, 177, 185, 187, 188, 189, 197, 202, 205, 208], "For": [3, 7, 9, 13, 15, 22, 36, 42, 43, 45, 46, 58, 92, 98, 101, 102, 103, 107, 109, 111, 113, 115, 117, 139, 140, 141, 143, 145, 148, 157, 159, 160, 162, 165, 176, 177, 182, 193, 198, 199, 202, 203, 205, 207, 208], "torch": [3, 7, 13, 15, 46, 58, 84, 87, 91, 95, 96, 97, 98, 99, 100, 105, 107, 111, 114, 117, 118, 139, 141, 143, 153, 154, 155, 156, 157, 162, 165, 177, 196, 199, 202, 203], "backend": [3, 15, 16, 17, 20, 21, 23, 24, 25, 26, 27, 31, 33, 36, 46, 47, 48, 50, 68, 97, 100, 101, 111, 117, 138, 141, 147, 148, 153, 154, 163, 182, 187, 188, 189, 195, 199, 204, 205, 207], "we": [3, 4, 5, 7, 15, 38, 41, 65, 95, 98, 99, 100, 101, 103, 104, 105, 106, 107, 109, 111, 115, 116, 117, 134, 135, 138, 141, 143, 145, 151, 152, 153, 161, 162, 165, 169, 172, 174, 175, 177, 180, 187, 188, 189, 191, 192, 193, 195, 196, 197, 199, 200, 201, 202, 203, 205, 206], "onli": [3, 4, 5, 15, 20, 58, 68, 76, 84, 92, 97, 101, 105, 106, 115, 116, 117, 132, 133, 134, 135, 138, 139, 141, 144, 145, 151, 153, 154, 162, 175, 193, 194, 195, 196, 197, 202, 203, 205, 206, 207], "handl": [3, 12, 88, 111, 113, 134, 135, 182, 202], "layer": [3, 15, 78, 80, 92, 98, 99, 100, 101, 107, 114, 115, 116, 117, 140, 148, 177, 193, 199, 200, 206], "whose": [3, 54, 147, 202, 205], "smooth": [3, 15, 101, 134, 193, 205], "scale": [3, 4, 32, 36, 95, 96, 98, 99, 100, 104, 107, 156, 196, 199, 201, 202, 204, 205], "could": [3, 18, 19, 22, 46, 58, 77, 97, 99, 100, 102, 104, 107, 109, 111, 140, 153, 192, 193, 196, 199, 202, 206], "absorb": [3, 100, 199], "support": [3, 6, 15, 18, 19, 20, 22, 29, 32, 36, 37, 45, 46, 50, 56, 58, 68, 74, 77, 80, 86, 87, 92, 94, 95, 99, 102, 105, 107, 114, 116, 134, 151, 153, 157, 162, 165, 168, 174, 181, 182, 185, 194, 198, 201, 205, 206], "other": [3, 43, 54, 96, 101, 104, 107, 109, 111, 116, 117, 134, 138, 145, 148, 150, 153, 155, 156, 177, 191, 193, 196, 202, 204, 205, 208], "later": [3, 95, 97, 134, 181, 182, 203], "onnx": [3, 15, 46, 53, 82, 83, 84, 90, 110, 114, 115, 116, 118, 135, 138, 142, 143, 145, 146, 148, 154, 155, 156, 159, 164, 165, 177, 194, 195, 199, 200, 202, 205], "insert": [3, 99, 100, 101, 103, 107, 111, 116, 135, 148, 153, 157, 193, 196, 198, 199, 202, 203], "mul": [3, 100, 143, 199, 202], "befor": [3, 15, 20, 100, 107, 110, 117, 135, 136, 139, 140, 141, 144, 145, 153, 169, 172, 178, 179, 196, 199, 201, 203, 205], "conv": [3, 15, 111, 116, 117, 153, 193, 195, 196, 205], "linear": [3, 15, 98, 99, 100, 107, 111, 139, 143, 153, 193, 199, 202, 205], "op": [3, 15, 63, 65, 67, 74, 75, 76, 82, 84, 86, 92, 97, 98, 101, 107, 114, 115, 116, 117, 138, 145, 153, 154, 178, 179, 193, 196, 198, 200, 202, 203, 205, 207], "fuse": [3, 111, 202, 203], "kernel": [3, 15, 100, 115, 116, 205], "futur": [3, 7, 18, 19, 101, 148, 151, 153, 165, 187, 188, 189, 206], "weightcorrect": 4, "ep": [4, 154], "1e": [4, 107, 202, 207], "05": [4, 15, 45, 152, 202, 208], "correct": [4, 15, 41, 42, 43, 45, 109, 157], "int8": [4, 5, 15, 32, 74, 76, 82, 83, 84, 91, 92, 96, 98, 100, 101, 102, 104, 107, 110, 111, 114, 115, 116, 117, 132, 136, 140, 145, 151, 153, 154, 156, 159, 162, 164, 165, 168, 174, 177, 179, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 207], "weight": [4, 7, 15, 45, 58, 65, 74, 76, 84, 92, 93, 95, 98, 99, 101, 102, 103, 104, 105, 115, 116, 117, 133, 138, 140, 145, 147, 151, 153, 176, 187, 191, 193, 194, 195, 196, 197, 202, 203, 205, 206, 207], "distribut": [4, 15, 86, 100, 104, 107, 114, 116, 135, 139, 149, 169, 172, 176, 179, 187, 194, 196, 199, 200, 202, 206, 208], "close": [4, 133, 183], "fp32": [4, 15, 18, 19, 45, 63, 67, 74, 80, 83, 84, 87, 91, 92, 97, 98, 99, 100, 101, 102, 104, 107, 110, 115, 117, 138, 145, 146, 151, 152, 153, 154, 164, 176, 177, 178, 179, 195, 196, 198, 199, 200, 201, 202, 203, 205, 207, 208], "r": [4, 98, 99, 100, 102, 104, 106, 107, 138, 149, 175, 176, 178, 179, 181, 182, 196, 208], "w_int8": 4, "u": [4, 157, 176, 181], "w_fp32": 4, "i": [4, 5, 7, 9, 14, 15, 18, 19, 20, 21, 22, 23, 24, 27, 29, 32, 36, 38, 41, 43, 45, 46, 56, 58, 63, 68, 76, 77, 87, 91, 92, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 109, 110, 111, 112, 114, 115, 116, 117, 118, 120, 124, 127, 130, 132, 133, 134, 135, 136, 138, 139, 140, 141, 143, 144, 145, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 165, 167, 168, 169, 171, 172, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 187, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208], "varianc": [4, 138], "ratio": [4, 15, 32, 36, 136, 151, 153, 177, 193, 204, 208], "between": [4, 15, 36, 42, 45, 92, 96, 100, 101, 104, 107, 111, 115, 116, 117, 133, 138, 139, 148, 152, 153, 156, 165, 196, 199, 200, 201, 202, 204, 205], "wise": [4, 15, 62, 63, 67, 100, 114, 116, 148, 179, 193, 199, 202, 203, 205, 206, 207], "": [4, 6, 15, 22, 35, 36, 43, 45, 46, 50, 58, 89, 92, 95, 97, 98, 99, 100, 102, 104, 106, 107, 109, 110, 112, 116, 117, 134, 138, 139, 141, 143, 145, 148, 153, 154, 162, 165, 167, 171, 174, 177, 179, 182, 192, 193, 194, 195, 196, 199, 200, 201, 202, 205, 206, 207, 208], "equal": [4, 92, 96, 156, 193, 199], "minim": [4, 62, 99, 100, 104, 107, 116, 117, 133, 139, 142, 152, 153, 167, 171, 193, 196, 205], "round": [4, 95, 100, 101, 107, 114, 194, 196, 199, 202], "scale_c": 4, "shift": [4, 32, 175, 204], "notic": [4, 97, 100, 150, 154, 177, 200], "can": [4, 15, 18, 19, 22, 36, 41, 43, 45, 46, 56, 58, 77, 92, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 111, 112, 114, 115, 116, 117, 132, 134, 135, 136, 138, 139, 140, 141, 143, 145, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 165, 167, 168, 169, 171, 172, 174, 175, 177, 179, 180, 181, 182, 184, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208], "chang": [4, 15, 65, 92, 101, 110, 116, 135, 141, 144, 150, 153, 157, 167, 168, 171, 174, 180, 193, 203, 204, 205], "first": [4, 6, 15, 20, 41, 63, 74, 92, 96, 97, 100, 106, 107, 111, 112, 114, 115, 116, 117, 136, 138, 149, 154, 156, 159, 168, 169, 172, 175, 177, 178, 179, 195, 196, 198, 199, 201, 202, 203, 205, 207], "an": [4, 15, 22, 36, 37, 38, 42, 43, 46, 58, 77, 92, 94, 96, 97, 98, 99, 100, 101, 103, 104, 105, 107, 109, 111, 112, 114, 115, 117, 133, 135, 136, 137, 138, 143, 151, 152, 153, 154, 156, 157, 161, 162, 165, 174, 177, 178, 179, 182, 185, 191, 193, 194, 196, 199, 201, 202, 203, 204, 205], "empir": 4, "solut": [4, 98, 100, 103, 107, 114, 115, 116, 144, 159, 163, 168, 194, 199, 200, 202, 205, 206], "make": [4, 92, 98, 100, 103, 107, 109, 115, 116, 132, 134, 135, 145, 152, 153, 162, 167, 171, 174, 176, 193, 196, 197, 198, 199, 201, 202, 205], "thi": [4, 6, 7, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 27, 36, 38, 41, 42, 43, 45, 46, 56, 58, 62, 67, 76, 77, 91, 92, 97, 98, 99, 100, 102, 103, 104, 105, 107, 109, 110, 111, 112, 115, 116, 117, 133, 134, 135, 136, 139, 140, 141, 143, 144, 145, 148, 150, 151, 152, 153, 154, 155, 157, 159, 160, 162, 163, 165, 167, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 187, 188, 189, 193, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206], "don": [4, 15, 98, 99, 111, 180, 193, 205], "t": [4, 15, 36, 43, 97, 98, 99, 104, 106, 111, 115, 134, 138, 139, 141, 153, 154, 175, 180, 193, 196, 199, 205, 207], "min": [4, 15, 92, 96, 100, 104, 107, 138, 156, 177, 179, 193, 196, 199, 202, 204, 205], "max": [4, 15, 36, 42, 43, 62, 92, 96, 100, 104, 107, 114, 138, 149, 153, 156, 177, 179, 193, 196, 199, 202, 204, 205], "valu": [4, 5, 15, 18, 19, 20, 23, 24, 32, 36, 41, 45, 46, 58, 62, 67, 74, 76, 77, 78, 80, 92, 95, 96, 97, 98, 100, 103, 104, 107, 111, 116, 117, 133, 136, 138, 145, 152, 153, 154, 156, 160, 177, 179, 185, 191, 193, 195, 196, 199, 200, 202, 204, 205, 207], "us": [5, 6, 14, 15, 18, 19, 20, 21, 22, 23, 24, 27, 35, 36, 38, 39, 41, 45, 56, 58, 62, 65, 67, 70, 74, 76, 77, 78, 79, 80, 83, 84, 85, 87, 92, 96, 97, 98, 99, 100, 101, 102, 104, 105, 107, 109, 110, 111, 112, 114, 115, 116, 132, 133, 134, 136, 138, 139, 140, 141, 143, 145, 147, 149, 150, 153, 154, 155, 156, 157, 158, 159, 161, 162, 165, 167, 169, 171, 172, 174, 176, 177, 178, 179, 180, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 207, 208], "evalu": [5, 7, 18, 19, 20, 38, 41, 42, 43, 45, 46, 56, 58, 77, 80, 101, 103, 104, 105, 107, 112, 115, 116, 134, 136, 139, 140, 147, 148, 151, 152, 153, 154, 157, 163, 165, 168, 174, 191, 193, 196, 201, 202, 203, 205, 207], "perform": [5, 15, 20, 32, 45, 56, 58, 63, 67, 95, 97, 99, 100, 102, 104, 105, 106, 107, 110, 111, 112, 115, 116, 132, 136, 137, 138, 140, 142, 143, 148, 149, 152, 153, 154, 155, 157, 159, 163, 165, 168, 174, 180, 191, 192, 193, 194, 195, 196, 197, 198, 199, 202, 203, 205, 207, 208], "set_env_var": 5, "env_var": 5, "overwrite_exist": 5, "fals": [5, 15, 20, 22, 32, 36, 41, 45, 56, 58, 80, 87, 91, 92, 98, 100, 102, 104, 105, 106, 115, 116, 135, 136, 145, 152, 153, 167, 171, 177, 185, 188, 189, 195, 196, 199, 202, 203, 204, 205, 207], "set": [5, 6, 7, 14, 15, 18, 19, 20, 22, 25, 36, 41, 45, 46, 54, 58, 77, 89, 92, 97, 98, 100, 101, 102, 103, 105, 106, 107, 109, 112, 114, 116, 132, 135, 136, 139, 141, 143, 145, 147, 148, 152, 153, 154, 157, 159, 161, 175, 176, 177, 178, 179, 180, 184, 187, 193, 195, 196, 199, 201, 202, 205, 207], "specifi": [5, 9, 15, 18, 19, 36, 41, 45, 46, 58, 77, 91, 92, 107, 116, 117, 141, 145, 152, 153, 162, 176, 182, 186, 187, 188, 189, 191, 193, 195, 199, 204, 205, 207], "environ": [5, 101, 109, 114, 132, 167, 171, 174, 182, 185, 187, 188, 189, 205], "variabl": [5, 15, 22, 62, 76, 193, 205], "new": [5, 14, 22, 36, 56, 97, 98, 99, 100, 107, 110, 116, 141, 153, 154, 168, 174, 175, 176, 177, 183, 184, 187, 188, 193, 194, 196, 199, 200, 201, 204, 206, 207], "env": [5, 144, 187, 188, 189], "two": [5, 22, 27, 41, 68, 92, 96, 97, 99, 100, 103, 105, 107, 110, 111, 112, 134, 135, 136, 139, 141, 143, 145, 153, 154, 156, 181, 182, 184, 193, 196, 198, 199, 201, 202, 205, 207], "case": [5, 15, 35, 36, 56, 100, 104, 107, 117, 134, 135, 139, 140, 141, 145, 147, 152, 158, 162, 174, 175, 176, 179, 185, 188, 189, 191, 193, 194, 196, 199, 200, 202, 204, 206, 207, 208], "exist": [5, 54, 92, 97, 101, 143, 152, 161, 205], "alreadi": [5, 22, 35, 97, 101, 115, 136, 148, 169, 172, 176, 185, 205], "param": [5, 9, 45, 62, 92, 115, 155, 205], "true": [5, 7, 15, 20, 22, 23, 35, 36, 39, 45, 56, 58, 73, 80, 84, 87, 91, 92, 95, 98, 99, 100, 101, 102, 104, 105, 106, 107, 114, 116, 135, 136, 138, 141, 145, 152, 153, 157, 160, 161, 176, 177, 178, 179, 185, 187, 195, 196, 197, 199, 202, 203, 204, 205, 207], "set_all_env_var": 5, "configur": [5, 6, 7, 14, 15, 18, 19, 22, 25, 45, 46, 56, 58, 67, 76, 77, 79, 80, 84, 90, 91, 101, 105, 111, 112, 115, 116, 136, 138, 153, 161, 175, 182, 187, 188, 189, 191, 193, 196, 199, 200, 202, 204, 205, 208], "neural": [5, 15, 32, 33, 36, 37, 44, 45, 46, 50, 57, 58, 65, 66, 72, 81, 89, 94, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 110, 115, 116, 117, 132, 133, 134, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 150, 151, 154, 155, 156, 158, 159, 162, 164, 165, 167, 169, 171, 172, 173, 185, 191, 192, 194, 196, 199, 200, 202, 203, 204, 205, 207, 208], "compressor": [5, 15, 32, 33, 36, 37, 44, 45, 46, 50, 57, 58, 66, 72, 81, 89, 94, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 110, 112, 115, 116, 117, 132, 133, 134, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 150, 151, 154, 155, 156, 157, 158, 162, 164, 165, 167, 169, 171, 172, 173, 176, 177, 178, 179, 181, 182, 189, 191, 192, 193, 194, 196, 199, 200, 202, 203, 204, 205, 206, 207, 208], "physic": [5, 109, 132, 182], "core": [5, 15, 106, 110, 132, 150, 167, 171, 182, 208], "get_architectur": 5, "get": [5, 14, 15, 36, 45, 54, 58, 67, 74, 76, 80, 84, 87, 89, 92, 98, 101, 106, 107, 116, 133, 144, 148, 149, 151, 153, 160, 177, 179, 187, 188, 194, 199, 202, 205, 206, 209], "architectur": [5, 97, 100, 107, 114, 132, 139, 153, 181, 193, 194, 199, 206], "system": [5, 92, 96, 132, 156, 160, 193, 208], "get_threads_per_cor": 5, "thread": [5, 15, 135, 184], "get_thread": 5, "list": [5, 6, 7, 9, 15, 18, 19, 20, 32, 36, 38, 39, 41, 42, 43, 45, 46, 54, 58, 73, 77, 78, 83, 84, 92, 98, 101, 103, 104, 111, 114, 115, 136, 143, 145, 149, 151, 153, 157, 162, 164, 167, 168, 171, 179, 182, 184, 185, 191, 193, 195, 196, 198, 202, 203, 205], "get_physical_id": 5, "socket": [5, 92, 182, 184, 208], "get_core_id": 5, "id": [5, 35, 38, 40, 41, 42, 43, 152, 182, 183, 187, 188, 189, 201, 205], "get_bounded_thread": 5, "core_id": 5, "bind": 5, "instanc": [5, 15, 18, 19, 42, 43, 45, 46, 58, 62, 76, 77, 89, 92, 100, 106, 109, 110, 111, 115, 132, 153, 159, 165, 199, 205, 207, 208], "run_inst": 5, "b_dataload": [5, 15, 132, 153], "none": [5, 6, 7, 9, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 27, 32, 36, 41, 45, 46, 56, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 74, 77, 78, 80, 83, 84, 87, 89, 91, 92, 96, 100, 101, 104, 106, 114, 115, 116, 135, 136, 152, 156, 177, 196, 199, 203, 204, 205], "b_func": [5, 132], "run": [5, 15, 18, 19, 35, 46, 58, 62, 77, 100, 101, 104, 106, 107, 114, 115, 132, 141, 144, 145, 153, 157, 159, 161, 162, 163, 165, 167, 168, 169, 171, 172, 174, 182, 183, 184, 185, 187, 188, 189, 194, 196, 199, 200, 201, 203, 205, 207], "object": [5, 7, 13, 15, 18, 19, 20, 21, 22, 36, 37, 41, 45, 46, 54, 55, 58, 62, 76, 77, 80, 91, 92, 99, 101, 104, 111, 112, 116, 122, 132, 134, 135, 136, 144, 152, 153, 155, 192, 193, 195, 196, 204, 205, 206, 208], "benchmarkconfig": [5, 15, 132, 138, 153], "contain": [5, 15, 18, 19, 20, 21, 22, 41, 42, 43, 46, 58, 77, 80, 84, 91, 100, 104, 114, 133, 136, 139, 148, 152, 175, 182, 187, 188, 189, 193, 199, 203, 205, 206], "accuraci": [5, 7, 15, 18, 19, 45, 46, 56, 58, 63, 77, 89, 96, 98, 99, 100, 104, 105, 111, 114, 116, 117, 133, 135, 136, 138, 140, 141, 142, 143, 152, 153, 156, 165, 174, 176, 183, 184, 187, 188, 191, 192, 193, 194, 195, 199, 200, 201, 202, 203, 206, 207, 208], "goal": [5, 46, 58, 105, 107, 116, 135, 192, 196, 205], "tune": [5, 6, 7, 9, 12, 15, 18, 19, 20, 22, 46, 56, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 73, 74, 75, 76, 77, 92, 97, 98, 99, 100, 101, 105, 115, 116, 133, 134, 135, 136, 138, 141, 148, 150, 153, 154, 174, 178, 181, 183, 184, 191, 193, 194, 198, 200, 201, 203, 207], "prefer": [5, 58, 100, 107, 193, 199], "calibr": [5, 15, 18, 19, 58, 86, 99, 100, 101, 104, 107, 115, 117, 136, 147, 148, 193, 196, 199, 205, 206, 207], "space": [5, 15, 18, 19, 43, 46, 58, 62, 67, 74, 101, 105, 107, 109, 110, 112, 115, 116, 117, 134, 193, 196, 202, 207], "etc": [5, 35, 43, 46, 58, 91, 114, 139, 148, 176, 180, 193, 201, 205], "dataload": [5, 18, 19, 20, 31, 58, 77, 80, 104, 111, 114, 115, 116, 138, 139, 140, 141, 146, 147, 153, 154, 176, 177, 192, 193, 196, 197, 198, 199, 202, 203, 204, 206, 207], "framework": [5, 6, 10, 16, 17, 20, 21, 22, 23, 24, 25, 26, 27, 29, 31, 33, 36, 45, 46, 47, 48, 50, 68, 74, 80, 97, 99, 104, 105, 107, 114, 115, 117, 133, 134, 138, 141, 142, 146, 147, 148, 149, 152, 153, 154, 176, 177, 193, 194, 196, 200, 203, 204, 205, 206, 207, 208], "custom": [5, 15, 45, 56, 91, 101, 105, 107, 132, 139, 140, 157, 180, 181, 182, 186, 188, 189, 193, 194, 199, 201], "If": [5, 7, 9, 15, 18, 19, 22, 36, 46, 58, 77, 101, 104, 107, 110, 111, 116, 132, 134, 135, 136, 141, 149, 150, 152, 153, 160, 168, 169, 172, 174, 180, 185, 191, 193, 196, 199, 201, 202, 203, 204, 205], "user": [5, 15, 18, 19, 22, 25, 29, 36, 45, 46, 56, 58, 63, 76, 77, 92, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 111, 112, 114, 115, 116, 117, 122, 132, 134, 135, 139, 140, 143, 145, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 165, 168, 174, 181, 182, 183, 184, 187, 188, 189, 191, 192, 193, 194, 196, 197, 198, 200, 202, 203, 204, 205, 209], "pass": [5, 14, 45, 58, 91, 92, 100, 107, 110, 111, 115, 132, 136, 139, 140, 141, 147, 152, 153, 175, 182, 193, 195, 196, 198, 202, 207], "need": [5, 9, 15, 18, 19, 22, 29, 36, 45, 46, 56, 58, 67, 77, 84, 91, 92, 100, 103, 105, 107, 111, 115, 134, 135, 136, 138, 139, 141, 148, 153, 157, 159, 160, 163, 167, 168, 169, 171, 172, 174, 175, 176, 177, 178, 179, 181, 185, 187, 193, 195, 196, 197, 198, 199, 200, 202, 204, 205, 207], "generate_prefix": 5, "core_list": 5, "gener": [5, 7, 14, 18, 19, 22, 23, 24, 25, 36, 38, 46, 58, 62, 77, 96, 97, 98, 100, 101, 102, 107, 110, 111, 115, 117, 135, 139, 152, 153, 154, 156, 157, 162, 167, 169, 171, 172, 174, 176, 177, 191, 193, 194, 196, 198, 199, 202, 203, 204, 205], "command": [5, 77, 106, 138, 141, 157, 159, 162, 167, 171, 175, 176, 178, 179, 180, 182], "prefix": [5, 157, 162, 203], "numactl": [5, 144, 160, 168], "index": [5, 15, 22, 92, 107, 136, 152, 175, 179, 199, 202], "bound": [5, 36, 41, 62, 152, 204], "specif": [5, 6, 15, 20, 21, 22, 23, 27, 29, 45, 58, 89, 96, 97, 99, 100, 101, 104, 109, 112, 115, 116, 133, 134, 135, 138, 139, 145, 147, 151, 152, 153, 154, 155, 156, 157, 161, 162, 164, 168, 174, 176, 182, 191, 193, 195, 199, 205, 207], "call_on": 5, "cmd": 5, "log_fil": 5, "execut": [5, 10, 15, 58, 59, 61, 77, 80, 91, 92, 99, 100, 107, 138, 139, 140, 153, 154, 159, 160, 167, 168, 174, 175, 176, 177, 181, 184, 192, 193, 196, 199, 201, 205, 208], "one": [5, 36, 38, 41, 45, 97, 100, 101, 104, 105, 106, 107, 112, 115, 133, 139, 140, 141, 145, 148, 149, 152, 153, 154, 157, 158, 162, 163, 165, 167, 168, 171, 174, 175, 176, 179, 180, 181, 182, 184, 191, 192, 193, 195, 196, 197, 199, 200, 202, 204, 205], "dump": [5, 84, 92, 104, 107, 110, 179, 196, 200, 203], "log": [5, 12, 14, 88, 106, 111, 165, 187, 188, 189, 201, 203, 205], "window": [5, 106, 132, 149, 174, 175], "config_inst": 5, "raw_cmd": 5, "multi": [5, 41, 45, 58, 106, 112, 135, 136, 148, 153, 191, 193, 196, 205], "trigger": [5, 106], "sub": [5, 112, 134, 205], "process": [5, 7, 12, 14, 15, 18, 19, 20, 21, 22, 32, 36, 46, 58, 59, 61, 62, 77, 91, 92, 95, 96, 99, 103, 104, 105, 107, 112, 115, 116, 117, 133, 135, 136, 139, 140, 141, 143, 153, 156, 158, 179, 181, 182, 184, 192, 193, 196, 197, 199, 202, 203, 204, 207], "raw": [5, 21, 25, 28, 67, 152, 178, 205], "summary_benchmark": 5, "summari": [5, 77, 138, 169, 172, 203, 208], "profil": [5, 15, 37], "benchmark_with_raw_cmd": 5, "string": [5, 14, 15, 22, 38, 41, 50, 54, 80, 89, 92, 104, 152, 204], "exampl": [5, 6, 7, 9, 13, 15, 20, 21, 22, 32, 36, 41, 42, 43, 45, 46, 56, 58, 76, 77, 91, 92, 98, 104, 105, 109, 114, 116, 117, 122, 147, 148, 157, 160, 161, 162, 165, 182, 185, 198, 200, 204, 205, 206, 209], "accord": [5, 15, 20, 21, 22, 36, 65, 67, 80, 104, 105, 107, 112, 115, 136, 141, 177, 182, 187, 188, 189, 193, 198, 202, 204, 205], "config": [5, 6, 7, 9, 13, 14, 18, 19, 20, 37, 46, 74, 75, 76, 77, 80, 91, 92, 95, 97, 99, 100, 101, 102, 112, 114, 116, 117, 122, 132, 134, 135, 138, 139, 140, 141, 143, 146, 148, 152, 153, 154, 155, 176, 177, 192, 193, 195, 196, 198, 199, 201, 203, 205], "from": [5, 6, 7, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 27, 32, 38, 41, 42, 43, 46, 54, 56, 58, 74, 76, 77, 80, 82, 83, 84, 87, 91, 92, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 115, 117, 132, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 146, 148, 151, 152, 154, 155, 156, 157, 161, 162, 163, 165, 175, 177, 179, 180, 184, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206], "import": [5, 7, 14, 15, 46, 56, 58, 77, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 111, 112, 114, 117, 132, 135, 136, 138, 139, 140, 141, 143, 146, 152, 153, 154, 155, 156, 157, 161, 163, 176, 177, 185, 191, 192, 193, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206], "fit_with_raw_cmd": 5, "iter": [5, 15, 18, 19, 22, 23, 46, 58, 77, 80, 100, 104, 105, 111, 112, 115, 132, 135, 136, 153, 193, 195, 196, 202, 203, 205, 207], "100": [5, 6, 7, 15, 22, 104, 107, 132, 136, 141, 147, 149, 153, 179, 195, 196, 204, 205, 207, 208], "cores_per_inst": [5, 15, 132, 153, 195], "4": [5, 15, 29, 32, 36, 38, 39, 41, 76, 95, 96, 98, 99, 100, 101, 106, 107, 109, 114, 115, 117, 132, 141, 142, 145, 148, 149, 152, 153, 156, 162, 182, 184, 188, 193, 196, 199, 202, 204, 205, 208], "num_of_inst": [5, 15, 132, 153, 195], "7": [5, 15, 56, 98, 100, 103, 107, 117, 132, 144, 145, 153, 193, 196, 200, 202, 205, 208], "test": [5, 15, 36, 110, 114, 138, 149, 182, 187, 208], "py": [5, 15, 39, 41, 42, 43, 102, 106, 111, 115, 134, 138, 141, 149, 153, 159, 161, 162, 163, 169, 172, 176, 178, 179, 181, 182, 184, 185, 187, 188, 189, 196, 200, 203], "fit": [5, 15, 46, 58, 62, 77, 111, 114, 132, 135, 136, 138, 141, 146, 147, 152, 153, 154, 155, 176, 177, 193, 196, 197, 198, 199], "pb": [5, 15, 46, 54, 58, 104, 132, 141, 146, 153, 155, 176, 179, 187, 203, 208], "eval_dataload": [5, 15, 18, 19, 46, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 77, 132, 147, 152, 153, 176, 196, 197, 205], "configregistri": [6, 13], "A": [6, 7, 12, 14, 15, 22, 36, 38, 41, 42, 43, 45, 46, 50, 54, 62, 77, 92, 98, 100, 101, 107, 110, 114, 116, 134, 135, 136, 142, 145, 151, 152, 153, 155, 167, 168, 171, 174, 182, 193, 194, 196, 199, 202, 204, 205, 207], "registri": [6, 112], "manag": [6, 77, 80, 153, 157, 158, 168], "algorithm": [6, 9, 15, 37, 38, 45, 80, 86, 100, 101, 104, 105, 107, 112, 114, 115, 116, 117, 134, 139, 140, 145, 148, 151, 163, 168, 193, 196, 203, 207], "within": [6, 7, 41, 54, 97, 109, 111, 117, 133, 154, 167, 171, 174, 182, 193, 194, 199, 202, 205], "register_config": [6, 134], "framework_nam": [6, 134], "algo_nam": [6, 134], "prioriti": [6, 134, 185], "float": [6, 15, 20, 32, 39, 41, 42, 43, 73, 89, 92, 95, 96, 97, 98, 99, 100, 102, 103, 105, 107, 134, 136, 152, 156, 195, 196, 202, 204], "int": [6, 9, 14, 15, 20, 21, 32, 36, 39, 41, 45, 76, 83, 84, 87, 92, 100, 104, 114, 134, 135, 136, 152, 153, 185, 195, 199, 204], "usag": [6, 7, 9, 41, 101, 102, 107, 116, 136, 141, 142, 157, 165, 176, 182, 187, 188, 189, 191, 195, 199, 204], "examplealgorithm": 6, "examplealgorithmconfig": 6, "larger": [6, 100, 107, 116, 193, 199, 202], "number": [6, 7, 14, 15, 21, 32, 36, 42, 43, 45, 62, 80, 92, 95, 100, 105, 106, 107, 132, 135, 136, 141, 152, 182, 184, 193, 196, 199, 201, 202, 204, 205], "indic": [6, 15, 20, 41, 104, 111, 135, 144, 177, 182, 203], "higher": [6, 15, 18, 19, 46, 58, 77, 107, 111, 138, 139, 143, 152, 177, 193, 196, 199, 201], "which": [6, 15, 20, 21, 22, 32, 38, 43, 45, 50, 56, 58, 62, 92, 97, 99, 100, 101, 102, 104, 105, 107, 109, 111, 112, 114, 115, 116, 117, 133, 135, 136, 138, 139, 141, 144, 145, 148, 152, 153, 154, 155, 158, 162, 165, 168, 174, 175, 176, 179, 182, 187, 188, 189, 192, 193, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207], "tri": [6, 15, 134, 205], "auto": [6, 7, 15, 60, 66, 92, 98, 101, 111, 133, 157, 160, 162, 164, 165, 193, 196, 199], "stage": [6, 14, 59, 61, 68, 139, 193, 203, 205], "default": [6, 9, 14, 15, 18, 19, 20, 21, 22, 32, 36, 38, 45, 54, 76, 80, 83, 84, 87, 92, 96, 97, 98, 100, 101, 104, 105, 106, 111, 115, 134, 135, 136, 145, 148, 152, 153, 154, 156, 162, 165, 167, 171, 179, 182, 187, 188, 189, 191, 193, 195, 196, 198, 199, 201, 202, 204, 205, 207], "baseconfig": [6, 7, 9, 101, 104, 134], "white_list": 6, "util": [6, 7, 8, 15, 37, 39, 66, 104, 116, 117, 118, 133, 134, 141, 153, 157, 177, 193, 196, 205, 206], "op_name_or_module_typ": 6, "default_white_list": 6, "params_list": [6, 9], "tunabl": [6, 9], "composableconfig": [6, 134], "repres": [6, 7, 9, 10, 22, 27, 41, 43, 45, 99, 104, 107, 109, 117, 133, 136, 143, 182, 193, 196, 197, 205], "compos": [6, 36, 80, 204], "allow": [6, 62, 97, 99, 100, 105, 139, 141, 152, 153, 154, 176, 181, 193, 195, 199, 202, 205, 207], "multipl": [6, 16, 17, 20, 21, 23, 24, 25, 26, 27, 31, 33, 36, 46, 47, 48, 50, 56, 104, 132, 136, 143, 153, 181, 184, 192, 193, 201, 202, 205], "togeth": [6, 15, 36, 139, 149, 161, 194, 203, 204], "oper": [6, 9, 15, 32, 95, 97, 98, 99, 100, 101, 102, 103, 107, 111, 132, 135, 138, 143, 174, 180, 193, 196, 199, 202, 204, 205], "config_list": [6, 7], "get_all_config_set_from_config_registri": [6, 134], "fwk_name": [6, 134], "retriev": [6, 12, 193], "given": [6, 36, 41, 58, 101, 105, 112, 117, 193, 202, 204], "union": [6, 45, 77, 101, 104, 152, 185], "register_supported_configs_for_fwk": 6, "evaluationfuncwrapp": 7, "eval_fn": [7, 97, 101, 102, 103, 104, 105], "callabl": [7, 15, 43, 77, 101, 104, 134, 135], "eval_arg": [7, 97, 101, 102, 104], "wrapper": [7, 36, 41, 45, 50, 54, 104, 198], "collect": [7, 34, 36, 43, 45, 78, 92, 104, 107, 116, 196, 203, 205], "note": [7, 41, 68, 95, 98, 99, 100, 103, 106, 107, 112, 114, 116, 117, 134, 135, 138, 141, 143, 145, 149, 151, 153, 159, 162, 167, 171, 174, 176, 180, 182, 184, 193, 196, 199, 202, 203, 205, 206, 207], "deprec": [7, 134, 169, 172, 200, 204], "def": [7, 18, 19, 58, 77, 97, 98, 101, 102, 104, 105, 107, 111, 115, 134, 135, 136, 139, 140, 141, 152, 153, 196, 202, 203, 205], "eval_acc": 7, "eval_perf": 7, "mold": 7, "user_eval_fns1": 7, "user_eval_fns2": 7, "user_eval_fns3": 7, "user_eval_fns4": 7, "configset": 7, "base_config": [7, 8], "sampler": [7, 73, 100, 105, 135, 141], "config_sourc": 7, "sequentialsampl": 7, "size": [7, 22, 28, 32, 36, 54, 56, 92, 96, 99, 100, 107, 109, 116, 135, 136, 141, 144, 153, 156, 174, 175, 191, 193, 196, 197, 199, 202, 204, 207, 208], "sampl": [7, 15, 20, 21, 22, 32, 36, 45, 62, 100, 104, 105, 106, 107, 112, 135, 136, 142, 148, 175, 196, 199, 202, 204, 205, 207, 208], "element": [7, 41, 92, 96, 100, 107, 136, 148, 152, 156, 193, 199, 202], "sequenti": [7, 59, 61, 105, 205], "alwai": [7, 41, 45, 58, 105, 138, 152, 153, 179, 199], "same": [7, 15, 20, 36, 41, 92, 96, 100, 105, 106, 107, 115, 117, 132, 135, 136, 139, 141, 145, 153, 156, 158, 162, 167, 171, 193, 195, 196, 199, 202, 203, 204, 205], "order": [7, 38, 39, 62, 67, 76, 100, 105, 107, 111, 138, 152, 177, 195, 199, 202, 203, 205], "_configset": 7, "configload": 7, "config_set": [7, 97, 102, 103, 104, 105], "default_sampl": [7, 105], "skip_verified_config": 7, "bool": [7, 14, 15, 20, 22, 32, 36, 39, 45, 73, 84, 87, 91, 92, 100, 101, 135, 136, 152, 185, 195, 204], "yield": [7, 18, 19, 46, 58, 62, 77, 107, 135, 196, 205], "tuningconfig": [7, 97, 101, 102, 103, 104, 105], "tolerable_loss": [7, 15, 105, 153, 205], "01": [7, 15, 100, 153, 195, 199, 205, 207, 208], "max_trial": [7, 15, 97, 105, 153, 205], "pipelin": [7, 110, 140, 153, 192], "tune_config": [7, 97, 101, 102, 103, 104, 105, 116], "config1": 7, "config2": 7, "3": [7, 15, 22, 36, 41, 92, 96, 97, 99, 100, 102, 104, 105, 106, 107, 111, 112, 114, 133, 134, 135, 136, 139, 141, 143, 145, 146, 149, 152, 153, 154, 156, 157, 161, 165, 167, 171, 176, 181, 182, 184, 185, 187, 191, 193, 195, 196, 199, 200, 201, 202, 204, 205, 208], "stop": [7, 15, 105, 153, 205, 206, 207], "when": [7, 15, 20, 21, 29, 36, 39, 58, 77, 99, 100, 104, 105, 106, 107, 109, 112, 116, 134, 135, 136, 153, 165, 167, 168, 171, 175, 176, 179, 180, 181, 183, 187, 193, 196, 199, 202, 204, 205], "either": [7, 15, 41, 99, 104, 105, 107, 158, 162, 182, 192, 195, 196], "follow": [7, 22, 38, 41, 96, 97, 98, 103, 106, 107, 109, 110, 111, 112, 114, 115, 116, 117, 134, 135, 136, 139, 140, 141, 145, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 167, 171, 176, 178, 179, 182, 187, 192, 193, 195, 196, 199, 202, 203, 205], "condit": [7, 20, 21, 22, 36, 59, 61, 105, 136, 150, 204, 205], "met": [7, 105, 107, 112, 145, 196, 203], "trial": [7, 105, 205], "reach": [7, 15, 110, 135, 176, 193, 205], "maximum": [7, 15, 20, 36, 39, 54, 62, 100, 107, 117, 133, 136, 138, 153, 193, 196, 202, 204], "metric": [7, 15, 18, 19, 37, 46, 58, 77, 80, 103, 112, 115, 116, 136, 138, 141, 153, 154, 176, 196, 201, 202, 203, 205, 206, 207, 208], "loss": [7, 15, 45, 77, 97, 99, 100, 104, 107, 133, 138, 139, 140, 141, 142, 151, 152, 153, 154, 165, 177, 179, 192, 193, 194, 196, 199, 202, 205, 207], "toler": [7, 104, 179], "calcul": [7, 15, 23, 24, 42, 43, 67, 78, 92, 98, 100, 104, 107, 133, 136, 152, 153, 165, 177, 191, 193, 196, 199, 201, 202, 205, 207], "relative_loss": 7, "fp32_baselin": [7, 80, 115], "eval_result_of_q_model": 7, "99": [7, 151, 208], "so": [7, 36, 76, 96, 100, 101, 104, 107, 111, 115, 138, 144, 148, 154, 156, 160, 162, 178, 179, 180, 196, 198, 199, 202, 203, 204, 206], "tuningmonitor": 7, "tuning_config": 7, "monitor": [7, 101, 182, 187, 188, 189], "init_tun": 7, "tupl": [7, 15, 18, 19, 32, 36, 46, 58, 73, 77, 84, 91, 101, 104, 116, 134, 136, 152, 153, 196, 204], "tuninglogg": [7, 12], "initi": [7, 18, 19, 20, 58, 74, 77, 101, 104, 107, 112, 117, 136, 152, 173, 193, 196, 202, 205], "modul": [8, 11, 97, 100, 101, 105, 111, 134, 135, 139, 148, 152, 153, 155, 193, 195, 198, 199, 203, 206], "base_tun": [8, 102, 104], "tuning_param": 8, "paramlevel": 9, "enumer": [9, 10, 14, 77, 96, 115, 139, 140, 141, 153, 156, 192, 193, 203], "level": [9, 63, 88, 96, 107, 109, 156, 184, 202, 205], "op_level": 9, "op_type_level": 9, "model_level": 9, "tuningparam": 9, "default_v": 9, "ani": [9, 41, 43, 73, 89, 92, 101, 104, 109, 114, 117, 134, 141, 157, 162, 175, 176, 180, 181, 193, 201, 205], "tunable_typ": 9, "option": [9, 14, 15, 18, 19, 20, 36, 41, 45, 46, 58, 74, 76, 77, 83, 84, 85, 87, 92, 100, 101, 104, 107, 116, 117, 134, 135, 136, 145, 149, 153, 168, 182, 185, 187, 188, 189, 193, 196, 199, 201, 202, 204, 205, 207], "defin": [9, 14, 15, 18, 19, 46, 58, 77, 91, 102, 104, 105, 107, 109, 112, 115, 116, 135, 136, 139, 140, 145, 148, 152, 153, 175, 192, 193, 196, 199, 201, 202, 203, 205, 207], "fakealgoconfig": 9, "algo": [9, 80], "simpl": [9, 36, 104, 107, 149, 153, 193, 201, 202, 205], "like": [9, 15, 18, 19, 22, 45, 54, 58, 77, 100, 104, 107, 110, 111, 112, 115, 116, 138, 139, 140, 148, 162, 177, 179, 192, 193, 196, 199, 200, 202, 205], "give": [9, 116, 174, 205], "enough": [9, 104, 107, 196], "creat": [9, 15, 20, 22, 41, 74, 76, 80, 107, 109, 112, 115, 136, 155, 167, 169, 171, 172, 175, 187, 188, 189, 193, 196, 201, 203, 205, 206], "implicitli": 9, "simple_attr": 9, "complex": [9, 97, 134, 153, 154, 193], "develop": [9, 56, 96, 97, 110, 111, 134, 149, 153, 154, 156, 157, 163, 174, 180, 193, 194, 198, 201], "explicitli": [9, 15, 99, 147, 193], "complex_attr": 9, "model_attr": 9, "todo": [9, 20, 23, 41, 74], "explain": [9, 107, 117, 138, 202], "agnost": [10, 101, 139], "mode": [10, 14, 29, 41, 54, 74, 89, 91, 92, 100, 101, 115, 116, 138, 148, 167, 171, 179, 180, 196, 198, 199, 205], "constant": [11, 62, 72, 84, 85, 134, 135, 145, 177, 204], "logger": [11, 14, 78, 85, 92], "save_load": 11, "function": [12, 15, 18, 19, 21, 85, 97, 99, 100, 101, 104, 107, 110, 111, 112, 115, 116, 117, 132, 135, 139, 140, 143, 147, 148, 151, 152, 153, 154, 165, 175, 181, 182, 193, 196, 199, 200, 201, 202, 203, 205, 206], "unifi": [12, 115, 116, 117, 135, 147, 148, 152, 153, 155], "It": [12, 18, 19, 43, 45, 46, 58, 63, 67, 77, 96, 99, 100, 101, 102, 104, 105, 107, 115, 116, 117, 133, 138, 139, 153, 156, 160, 163, 168, 174, 175, 176, 177, 179, 180, 182, 193, 196, 199, 200, 201, 205, 207], "assist": [12, 200], "valid": [12, 15, 22, 41, 54, 112, 114, 115, 136, 138, 139, 142, 145, 148, 150, 153, 165, 179, 193, 196, 199, 200], "team": [12, 43, 109, 198], "save": [13, 15, 22, 54, 58, 77, 78, 83, 84, 87, 92, 101, 102, 107, 111, 115, 147, 153, 154, 155, 158, 162, 167, 171, 177, 182, 187, 188, 189, 192, 196, 197, 199, 202], "load": [13, 20, 35, 36, 46, 54, 58, 91, 92, 104, 116, 135, 167, 171, 175, 177, 195, 196, 197, 202], "save_config_map": 13, "config_map": 13, "qconfig_file_path": 13, "map": [13, 15, 36, 40, 42, 43, 45, 82, 84, 100, 107, 134, 136, 141, 152, 153, 167, 171, 179, 193, 196, 199], "json": [13, 21, 36, 91, 100, 136, 155, 175, 182, 183, 187, 188, 189, 199, 204], "path": [13, 20, 21, 22, 36, 46, 54, 58, 74, 83, 84, 87, 89, 92, 99, 100, 101, 111, 112, 115, 136, 138, 141, 147, 152, 153, 154, 155, 160, 163, 174, 177, 179, 182, 187, 188, 189, 192, 199, 204, 207], "load_config_map": 13, "config_name_map": 13, "reload": [13, 158, 175, 177, 180], "get_all_config": 13, "singleton": [14, 92], "lazyimport": [14, 92], "module_nam": [14, 92], "lazi": [14, 92], "python": [14, 22, 37, 92, 94, 111, 114, 134, 136, 138, 141, 144, 149, 153, 159, 165, 168, 174, 178, 179, 181, 182, 184, 187, 189, 193, 194, 204], "till": [14, 92, 205], "cpuinfo": [14, 92], "cpu": [14, 15, 87, 92, 97, 99, 104, 106, 114, 116, 132, 133, 148, 153, 154, 157, 159, 165, 174, 182, 194, 195, 196, 197, 198, 199, 203], "info": [14, 34, 50, 87, 88, 92, 111, 134, 138, 155, 184, 189], "dump_elapsed_tim": [14, 92, 115], "customized_msg": [14, 92], "elaps": [14, 92], "time": [14, 15, 36, 45, 56, 62, 92, 99, 100, 101, 103, 105, 107, 116, 135, 138, 141, 144, 153, 162, 164, 167, 171, 174, 175, 180, 183, 187, 188, 191, 193, 194, 196, 199, 201, 202, 203, 204, 205], "set_random_se": [14, 15, 92], "seed": [14, 15, 92, 100, 153, 207], "random": [14, 15, 32, 36, 62, 66, 92, 100, 112, 153, 193, 195, 204, 207], "set_workspac": [14, 15, 92], "workspac": [14, 15, 91, 92, 155, 182, 187, 188, 189], "get_workspac": 14, "set_resume_from": [14, 15, 92], "resume_from": [14, 15, 92], "set_tensorboard": [14, 15, 92], "tensorboard": [14, 15, 80, 92, 115, 153, 177], "log_process": 14, "call_count": 14, "func": [14, 92, 196, 207], "keep": [14, 63, 111, 115, 134, 173, 174, 200], "track": [14, 174, 201], "processortyp": 14, "deriv": 14, "detect_processor_type_based_on_hw": 14, "detect": [14, 15, 41, 45, 50, 101, 110, 111, 157, 164, 165, 193, 205], "processor": [14, 97, 107, 114, 151, 154, 182, 194, 196, 198], "hardwar": [14, 96, 99, 114, 115, 139, 148, 153, 156, 174, 193, 194, 195], "server": [14, 174, 176, 179, 182, 187, 188, 189], "client": [14, 176, 182, 189], "statist": [14, 92, 93], "header": [14, 92, 144], "field_nam": [14, 92], "output_handl": [14, 92], "printer": [14, 92], "x": [15, 36, 62, 105, 107, 133, 134, 138, 141, 154, 155, 182, 183, 187, 188, 190, 196, 197, 202, 203, 204, 206], "dotdict": [15, 56, 92], "access": [15, 87, 92, 169, 172, 176], "yaml": [15, 18, 19, 20, 22, 91, 92, 115, 117, 147, 152, 153, 191, 195, 203, 204], "attribut": [15, 92, 115, 135, 145, 147, 153, 195, 207], "instead": [15, 92, 99, 160, 162, 165, 180, 193, 199], "dictionari": [15, 35, 41, 92], "notat": [15, 92], "random_se": [15, 62, 153, 207], "1978": 15, "default_workspac": 15, "global": [15, 76, 92, 100, 101, 102, 111, 153, 193, 195, 205], "you": [15, 20, 45, 58, 110, 111, 116, 134, 135, 136, 138, 141, 149, 150, 152, 154, 157, 159, 160, 162, 167, 171, 174, 175, 176, 177, 178, 179, 180, 182, 193, 196, 199, 200, 201, 202, 203, 206], "want": [15, 20, 63, 77, 111, 115, 135, 136, 141, 153, 162, 174, 175, 182, 191, 196, 199, 201, 203, 205], "should": [15, 18, 19, 20, 22, 36, 39, 45, 46, 58, 77, 84, 92, 99, 101, 102, 103, 104, 106, 107, 111, 112, 115, 116, 117, 136, 139, 141, 152, 153, 160, 169, 172, 174, 176, 177, 191, 193, 196, 199, 204, 205, 207], "directori": [15, 21, 22, 54, 87, 89, 91, 92, 136, 141, 144, 167, 169, 171, 172, 178, 180, 203], "where": [15, 41, 45, 76, 92, 107, 117, 133, 138, 139, 167, 171, 175, 202, 203], "intermedi": [15, 107, 111, 148, 196], "histori": [15, 91, 92, 174, 178, 205], "ar": [15, 20, 36, 41, 45, 59, 61, 62, 76, 80, 91, 92, 95, 96, 97, 99, 100, 101, 103, 104, 107, 109, 110, 111, 112, 115, 116, 134, 135, 136, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 153, 154, 156, 157, 160, 162, 165, 168, 174, 176, 177, 179, 180, 181, 182, 185, 191, 192, 193, 194, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207], "store": [15, 22, 147], "nc_workspac": [15, 177, 178], "format": [15, 20, 21, 22, 41, 74, 84, 87, 96, 97, 99, 104, 106, 107, 114, 116, 117, 134, 136, 141, 143, 152, 153, 154, 155, 156, 157, 179, 182, 194, 196, 199, 200], "datetim": 15, "now": [15, 36, 111, 112, 117, 136, 141, 165, 195, 204, 205], "strftime": 15, "y": [15, 36, 62, 107, 134, 138, 144, 160, 202, 204], "m": [15, 106, 110, 139, 149, 157, 159, 162, 165, 169, 172, 182, 193, 208], "d_": 15, "h": [15, 36, 141, 182, 183, 187, 188, 189, 204], "resum": [15, 18, 19, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70], "wa": [15, 96, 98, 115, 153, 156, 179, 180, 183, 194, 205], "automat": [15, 22, 25, 32, 101, 104, 106, 111, 114, 132, 136, 148, 153, 154, 157, 159, 162, 163, 165, 167, 168, 169, 171, 172, 174, 181, 184, 192, 193, 196, 202, 204, 205], "dure": [15, 56, 92, 98, 99, 101, 104, 107, 116, 138, 153, 155, 181, 191, 192, 193, 196, 202, 203, 207], "last": [15, 97, 98, 100, 135, 154, 157, 159, 164, 168, 196, 199, 202], "flag": [15, 39, 138], "whether": [15, 20, 32, 36, 39, 41, 45, 80, 87, 91, 92, 100, 106, 115, 136, 152, 196, 199, 202, 204], "each": [15, 22, 25, 32, 36, 39, 41, 42, 43, 67, 92, 100, 103, 106, 107, 110, 115, 116, 117, 134, 136, 138, 139, 140, 145, 153, 159, 165, 168, 174, 182, 184, 191, 193, 197, 199, 201, 203, 204, 205, 206], "visual": [15, 114, 165, 174, 201, 203, 205, 206], "displai": [15, 73, 74, 92, 174, 177], "2022": [15, 100, 107, 150, 193, 199, 202], "workspace_path": 15, "output": [15, 18, 19, 38, 45, 46, 54, 58, 77, 83, 84, 87, 88, 92, 100, 101, 102, 107, 111, 115, 116, 139, 140, 141, 143, 145, 147, 152, 153, 155, 165, 174, 175, 177, 182, 183, 187, 188, 189, 192, 193, 195, 196, 199, 200, 202, 203, 204, 205, 207], "devic": [15, 87, 97, 100, 101, 107, 114, 116, 135, 139, 153, 154, 157, 160, 165, 174, 193, 195, 197, 199], "warmup": [15, 132, 153, 195], "model_nam": [15, 114], "inter_num_of_thread": [15, 153, 195], "intra_num_of_thread": [15, 153, 195], "diagnosi": [15, 153, 177, 178, 179, 194, 200, 206], "ni_workload_nam": 15, "benchmark": [15, 37, 56, 92, 114, 122, 155, 157, 161, 165, 168, 174, 177, 205, 206, 207, 208], "empti": [15, 101, 160, 197], "includ": [15, 20, 22, 29, 36, 92, 100, 101, 104, 105, 109, 115, 116, 117, 135, 136, 138, 149, 150, 151, 152, 153, 157, 160, 163, 168, 180, 184, 187, 188, 189, 193, 196, 198, 199, 203, 205], "itex": [15, 83, 104, 154, 196, 202], "ipex": [15, 91, 97, 98, 148, 151, 153, 154, 159, 163, 164, 202], "onnxrt_trt_ep": [15, 154, 196], "onnxrt_cuda_ep": [15, 154, 196], "onnxrt_dnnl_ep": [15, 154, 196], "onnxrt_dml_ep": [15, 196], "inter": 15, "intra": 15, "accuracycriterion": [15, 153, 205], "higher_is_bett": [15, 45, 58, 205, 207], "criterion": [15, 139, 140, 153, 193, 196, 202, 205, 207], "rel": [15, 56, 153, 177, 195, 205, 207, 208], "better": [15, 18, 19, 46, 58, 77, 97, 100, 107, 134, 140, 152, 154, 193, 194, 196, 199, 201, 202, 205], "absolut": [15, 45, 96, 107, 152, 153, 156, 193, 196, 205], "how": [15, 36, 99, 100, 101, 102, 103, 104, 107, 110, 111, 113, 115, 135, 136, 139, 140, 141, 147, 152, 153, 168, 169, 172, 173, 174, 176, 187, 188, 189, 193, 194, 196, 202, 204, 205, 206, 207], "much": [15, 36, 107, 139, 168, 202, 204], "accept": [15, 105, 109, 132, 134, 135, 176, 199], "accuracy_criterion": [15, 56, 153, 178, 191, 195, 205, 207], "avail": [15, 50, 97, 100, 101, 114, 118, 120, 124, 127, 130, 134, 142, 144, 146, 148, 167, 171, 176, 181, 182, 183, 187, 188, 189, 193, 205, 208], "tuningcriterion": [15, 153, 191, 201, 205], "strategi": [15, 16, 22, 37, 105, 107, 114, 115, 116, 117, 122, 133, 134, 135, 141, 148, 153, 162, 174, 179, 194, 195, 196, 198, 199, 200, 206, 207], "basic": [15, 35, 66, 70, 73, 77, 96, 148, 149, 153, 156, 176, 195, 201], "strategy_kwarg": [15, 201, 205], "timeout": [15, 153, 195, 205, 207], "doc": [15, 45, 58, 73, 74, 92, 152, 153, 169, 172, 180], "tuning_strategi": 15, "md": [15, 45, 58], "constraint": [15, 153, 193, 201, 205, 207], "guarante": [15, 153], "models": [15, 56, 153, 191, 195], "footprint": [15, 56, 140, 153, 191, 193, 195, 197], "second": [15, 20, 63, 92, 100, 107, 138, 153, 167, 171, 175, 187, 188, 199, 202, 205, 207], "mean": [15, 32, 36, 43, 45, 67, 100, 102, 107, 111, 116, 117, 135, 138, 141, 145, 152, 153, 160, 179, 193, 196, 197, 199, 202, 204, 205, 207, 208], "earli": [15, 107, 153, 196, 205, 207], "combin": [15, 18, 19, 32, 46, 58, 77, 92, 100, 103, 111, 115, 148, 153, 192, 194, 196, 198, 199, 204, 205], "field": [15, 22, 41, 96, 111, 115, 117, 141, 153, 156, 201, 205, 207], "decid": [15, 39, 104, 106, 115, 116, 153, 196, 200, 205], "exit": [15, 59, 61, 105, 153, 182, 187, 188, 189, 207], "tuning_criterion": [15, 153, 191, 201, 205], "posttrainingquantconfig": [15, 58, 111, 114, 117, 135, 138, 143, 146, 152, 153, 155, 176, 177, 178, 179, 196, 197, 198, 199, 201, 202, 205], "domain": [15, 193, 205], "recip": [15, 96, 105, 114, 153, 156, 197, 199, 202, 205], "quant_format": [15, 84, 143, 177], "approach": [15, 99, 107, 111, 112, 114, 133, 136, 139, 148, 153, 162, 174, 177, 185, 187, 188, 189, 193, 194, 195, 197, 199, 205, 207], "calibration_sampling_s": [15, 153, 179], "op_type_dict": [15, 99, 114, 117, 195, 196, 199, 205], "op_name_dict": [15, 99, 138, 153, 177, 179, 196, 205], "reduce_rang": [15, 117, 195], "example_input": [15, 84, 91, 95, 98, 99, 100, 101, 143], "excluded_precis": [15, 198], "quant_level": [15, 177, 199, 202, 205], "gpu": [15, 100, 104, 114, 132, 148, 153, 154, 159, 165, 174, 195, 196, 197], "npu": [15, 196], "xpu": [15, 104, 165, 196], "cv": [15, 99, 101, 104, 193], "object_detect": [15, 41], "nlp": [15, 101, 104, 107, 162, 178, 193, 196], "recommendation_system": 15, "adaptor": [15, 76, 80, 114, 117, 148, 197, 198, 200, 202, 203, 206], "overrid": [15, 92, 134], "quantiztaion": 15, "below": [15, 45, 58, 96, 98, 100, 101, 104, 105, 107, 110, 111, 114, 115, 116, 117, 135, 138, 139, 141, 147, 152, 156, 157, 159, 167, 168, 171, 174, 177, 182, 191, 192, 193, 195, 196, 199, 201, 202, 203, 205, 206], "do": [15, 20, 38, 41, 84, 91, 101, 109, 116, 134, 136, 141, 145, 148, 152, 153, 169, 172, 193, 198, 200, 202, 205], "quant": [15, 74, 100, 107, 111, 134, 151, 153, 196], "smooth_quant_arg": [15, 196, 202], "layer_wise_qu": [15, 197], "fast": [15, 100, 104, 193, 194, 199], "bia": [15, 199, 203], "gemm_to_matmul": [15, 196], "convert": [15, 20, 32, 35, 36, 41, 74, 83, 95, 96, 97, 98, 99, 100, 101, 103, 107, 111, 116, 153, 154, 159, 196, 198, 199, 202, 204, 205], "gemm": 15, "matmul": [15, 145, 177, 199, 205], "add": [15, 20, 22, 74, 92, 98, 110, 111, 114, 117, 135, 136, 141, 143, 145, 152, 153, 169, 172, 176, 177, 184, 187, 188, 201, 202, 203, 205, 206], "graph_optimization_level": [15, 195, 196], "disable_al": [15, 195], "enable_bas": 15, "enable_extend": 15, "enable_al": 15, "first_conv_or_matmul_quant": [15, 196], "last_conv_or_matmul_quant": [15, 196], "pre_post_process_quant": [15, 196], "preprocess": [15, 20, 36, 76, 80, 141, 204], "postprocess": [15, 33, 36, 45, 58, 80, 115, 153, 203, 204], "add_qdq_pair_to_weight": [15, 196], "qdq": [15, 82, 83, 84, 103, 115, 138, 143, 148, 164, 165, 196, 200, 202], "pair": [15, 97, 99, 116, 135, 153, 154, 200], "optypes_to_exclude_output_qu": [15, 196], "optyp": [15, 82, 116], "dedicated_qdq_pair": [15, 196], "dedic": 15, "qoper": [15, 143, 177], "requir": [15, 54, 97, 99, 100, 104, 107, 111, 115, 116, 132, 133, 135, 138, 140, 141, 145, 153, 154, 155, 158, 168, 174, 176, 181, 182, 185, 188, 189, 193, 196, 199, 200, 201, 202, 203, 205, 207], "onnxruntim": [15, 22, 29, 115, 133, 135, 148, 149, 154, 177, 195], "tensorflow": [15, 20, 21, 22, 25, 27, 29, 36, 39, 41, 45, 46, 54, 58, 68, 83, 84, 92, 103, 110, 112, 114, 115, 116, 133, 134, 135, 138, 139, 140, 142, 145, 146, 148, 149, 153, 154, 155, 156, 164, 165, 176, 179, 193, 194, 195, 201, 202, 205, 207], "method": [15, 20, 22, 29, 36, 74, 76, 80, 85, 87, 88, 100, 101, 102, 104, 107, 111, 112, 114, 133, 134, 135, 136, 138, 139, 140, 152, 153, 192, 193, 196, 198, 199, 202, 204, 205], "dynam": [15, 74, 84, 100, 101, 115, 135, 139, 143, 148, 153, 157, 162, 163, 164, 165, 168, 174, 194, 205, 208], "weight_onli": [15, 91, 96, 114, 134, 156, 197, 199], "ptq": [15, 58, 98, 99, 103, 104, 111, 138, 141, 148, 153, 179, 196, 202, 203, 205], "both": [15, 99, 100, 102, 107, 109, 112, 115, 140, 153, 158, 177, 179, 181, 193, 195, 196, 199, 202, 205], "meet": [15, 59, 61, 100, 102, 104, 105, 107, 111, 116, 191, 194, 195, 196, 199, 203, 205], "criteria": [15, 105, 111, 174, 202], "bayesian": [15, 66, 112, 193, 195], "mse": [15, 45, 58, 66, 92, 100, 107, 138, 152, 179, 195, 199, 200], "mse_v2": [15, 66], "hawq_v2": [15, 66], "exhaust": [15, 66, 195], "els": [15, 56, 89, 162, 199, 203], "advanc": [15, 96, 97, 100, 102, 104, 107, 109, 114, 116, 122, 151, 156, 193, 196, 199, 207], "reduc": [15, 97, 98, 99, 100, 103, 104, 107, 115, 133, 140, 153, 154, 174, 175, 193, 194, 196, 197, 198, 199, 202, 205, 207], "dtype": [15, 23, 24, 32, 36, 87, 97, 100, 101, 107, 114, 116, 117, 136, 138, 143, 145, 157, 179, 195, 196, 199, 202, 203, 204, 207], "activ": [15, 74, 76, 95, 98, 99, 100, 103, 104, 107, 115, 116, 117, 133, 138, 140, 145, 153, 175, 176, 179, 187, 188, 189, 195, 196, 199, 202, 203, 207], "layer1": [15, 153, 193, 196], "conv1": [15, 102, 196, 207], "bit": [15, 76, 95, 96, 97, 100, 101, 107, 114, 117, 133, 140, 154, 156, 194, 196, 199, 202], "precis": [15, 18, 19, 43, 45, 46, 56, 60, 63, 74, 92, 96, 99, 100, 104, 105, 107, 114, 115, 116, 122, 132, 133, 140, 141, 145, 148, 156, 157, 163, 164, 165, 194, 195, 196, 199, 202, 205, 206], "exclud": [15, 115, 133, 198], "enabl": [15, 97, 99, 100, 116, 117, 141, 154, 157, 159, 162, 163, 165, 176, 178, 179, 181, 184, 193, 194, 202, 205], "mix": [15, 46, 60, 74, 114, 115, 122, 148, 157, 163, 164, 165, 206], "bf16": [15, 74, 115, 116, 145, 153, 159, 164, 168, 174, 198, 205, 208], "disabl": [15, 109, 174, 179, 198, 199, 202], "conserv": [15, 66], "In": [15, 41, 56, 100, 101, 104, 107, 109, 111, 112, 114, 115, 116, 135, 136, 138, 139, 140, 141, 152, 153, 164, 167, 168, 171, 177, 178, 179, 180, 187, 188, 189, 191, 192, 193, 196, 198, 199, 201, 202, 203, 204, 205, 206], "docstr": 15, "workload": [15, 89, 92, 176, 194], "insight": [15, 89, 114, 138, 194, 200, 205, 206], "quantizationawaretrainingconfig": [15, 77, 111, 140, 143, 153, 196, 198, 205], "awar": [15, 65, 77, 100, 101, 105, 115, 116, 117, 133, 140, 141, 143, 148, 174, 184, 192, 194, 199, 205], "qat": [15, 54, 140, 141, 148, 153, 196], "copi": [15, 92, 135, 180], "deepcopi": 15, "model_origin": [15, 58, 198], "qat_op_name_dict": 15, "compression_manag": [15, 77, 111, 139, 140, 153, 192, 193, 196], "prepare_compress": [15, 77, 111, 139, 140, 153, 192, 193, 196], "weightpruningconfig": [15, 153, 192, 193], "pruning_config": [15, 153, 193], "target_spars": [15, 153, 193, 195, 207], "9": [15, 98, 106, 111, 149, 153, 193, 195, 202, 205, 207, 208], "pruning_typ": [15, 153, 193], "snip_momentum": [15, 153, 193], "pattern": [15, 22, 74, 95, 99, 103, 106, 115, 134, 136, 145, 148, 153, 175, 192, 195, 202, 205, 208], "4x1": [15, 153, 193, 208], "op_nam": [15, 75, 92, 93, 99, 116, 153, 193, 203], "excluded_op_nam": [15, 153, 193], "start_step": [15, 153, 193, 195], "end_step": [15, 153, 193, 195], "pruning_scop": [15, 153, 193], "pruning_frequ": [15, 153, 193], "min_sparsity_ratio_per_op": [15, 153, 193], "max_sparsity_ratio_per_op": [15, 153, 193], "98": [15, 153, 193, 195, 208], "sparsity_decay_typ": [15, 153, 193], "exp": [15, 96, 153, 156, 193], "pruning_op_typ": [15, 153, 193], "low_memory_usag": 15, "kwarg": [15, 22, 34, 36, 45, 46, 47, 49, 51, 53, 54, 55, 58, 73, 75, 77, 87, 88, 91, 92, 135], "prune": [15, 92, 114, 141, 142, 145, 146, 148, 192, 194, 206, 207], "singl": [15, 20, 36, 41, 45, 58, 111, 136, 138, 149, 180, 193, 197, 202], "sequenc": [15, 20, 35, 36, 39, 43, 100, 107, 115, 136, 145, 193, 199, 204], "local": [15, 92, 100, 102, 167, 171, 176, 183, 184, 193, 201], "link": [15, 20, 45, 58, 101, 133, 136, 143, 167, 171, 174, 199, 208], "out": [15, 20, 21, 22, 100, 102, 104, 107, 110, 111, 114, 136, 157, 162, 167, 168, 169, 171, 172, 174, 180, 193, 195, 196, 199], "By": [15, 38, 100, 116, 117, 152, 155, 167, 168, 171, 193, 194, 199, 205], "correspond": [15, 20, 38, 41, 45, 80, 92, 101, 107, 115, 145, 153, 193, 195, 196, 201, 205], "sparsiti": [15, 92, 100, 114, 136, 148, 153, 206, 208], "after": [15, 20, 32, 36, 63, 87, 92, 95, 99, 100, 103, 107, 112, 114, 116, 136, 138, 139, 140, 143, 148, 152, 153, 167, 168, 171, 175, 179, 191, 192, 193, 196, 198, 199, 201, 202, 203, 204, 205], "90": [15, 151, 197, 207, 208], "magnitud": [15, 45, 148, 193], "snip": [15, 148, 193, 208], "magnitude_progress": 15, "snip_progress": 15, "snip_momentum_progress": 15, "pattern_lock": 15, "most": [15, 45, 97, 100, 104, 107, 138, 153, 154, 193, 196, 199, 202, 205, 208], "feasibl": 15, "under": [15, 22, 87, 91, 105, 110, 112, 114, 136, 150, 152, 153, 157, 162, 163, 174, 182, 192, 193, 194, 197, 199, 203, 205], "situat": [15, 141, 193], "structur": [15, 75, 92, 101, 107, 148, 173, 175, 178, 187, 193, 194, 196, 203, 206, 208], "unstructur": [15, 148, 193, 208], "nxm": [15, 193], "e": [15, 100, 107, 109, 110, 114, 139, 142, 146, 157, 162, 163, 167, 171, 193, 199, 202, 205], "g": [15, 100, 107, 110, 139, 142, 146, 157, 162, 193, 199, 200, 202, 205], "8x1": 15, "channelx1": [15, 193], "1xchannel": [15, 193], "n": [15, 21, 36, 39, 107, 117, 134, 136, 138, 139, 151, 182, 193, 196, 202, 204], "directli": [15, 41, 45, 102, 114, 152, 153, 161, 193, 195, 196, 203], "our": [15, 96, 112, 114, 143, 153, 156, 175, 176, 179, 201, 206], "itrex": [15, 98, 202], "some": [15, 20, 100, 107, 116, 117, 134, 136, 138, 143, 149, 152, 153, 176, 177, 178, 179, 182, 191, 193, 196, 198, 199, 202, 203, 205, 206], "step": [15, 77, 95, 98, 99, 100, 107, 116, 117, 138, 139, 140, 141, 153, 169, 172, 174, 187, 188, 189, 192, 193, 195, 198, 199, 201, 202, 203, 205], "start": [15, 36, 41, 63, 149, 179, 194, 204, 205, 206, 209], "integ": [15, 41, 45, 98, 100, 103, 107, 115, 117, 133, 196, 199, 202, 205], "end": [15, 20, 35, 36, 59, 61, 115, 116, 117, 139, 140, 145, 149, 153, 168, 184, 191, 193, 199, 203, 204, 205], "determin": [15, 86, 95, 99, 105, 109, 111, 133, 193, 196], "score": [15, 38, 39, 41, 42, 43, 45, 65, 80, 111, 152, 177, 191, 193, 201, 205], "gather": 15, "sort": [15, 67, 100, 138, 177, 199, 205], "sinc": [15, 38, 100, 107, 139, 143, 152, 168, 174, 179, 192, 199, 200], "lead": [15, 97, 100, 104, 107, 134, 139, 153, 154, 179, 193, 199, 202], "less": [15, 92, 132, 139, 153, 181, 193], "frequenc": [15, 153, 193, 207], "minimum": [15, 96, 117, 133, 138, 153, 156, 165, 193, 202, 205], "restrict": [15, 193, 201], "everi": [15, 100, 115, 135, 162, 167, 171, 197, 199, 205], "schedul": [15, 100, 153, 181, 182, 184, 192], "increas": [15, 96, 100, 137, 148, 156, 157, 174, 179, 199, 205], "cube": [15, 193], "current": [15, 62, 68, 92, 99, 101, 105, 111, 112, 115, 117, 133, 134, 141, 145, 153, 157, 161, 174, 182, 191, 193, 196, 199, 202, 205], "local_config": 15, "6": [15, 96, 98, 100, 103, 107, 145, 156, 196, 202, 205, 208], "queri": [15, 107, 116, 117, 184, 196], "kei": [15, 54, 78, 80, 92, 100, 107, 114, 116, 176, 177, 183, 194, 199, 203, 205], "self": [15, 56, 101, 115, 116, 135, 136, 148, 152, 176, 201, 203, 205], "attent": [15, 20, 109, 139, 193], "dens": [15, 177, 193, 208], "8": [15, 35, 95, 96, 98, 100, 101, 107, 111, 116, 133, 134, 145, 149, 156, 181, 182, 193, 194, 199, 202, 205, 208], "update_config": 15, "10": [15, 22, 62, 105, 106, 114, 132, 136, 143, 149, 153, 176, 177, 193, 195, 204, 205, 208], "hpoconfig": 15, "search_spac": 15, "searcher": 15, "xgb": 15, "loss_typ": [15, 153, 207], "reg": 15, "min_train_sampl": 15, "42": [15, 100, 208], "hyperparamet": [15, 107, 201, 202, 205], "optim": [15, 62, 77, 78, 89, 92, 99, 100, 103, 104, 105, 107, 112, 114, 132, 134, 138, 139, 140, 141, 145, 146, 148, 149, 151, 153, 155, 157, 159, 161, 162, 165, 168, 176, 179, 180, 181, 183, 185, 194, 195, 196, 198, 199, 201, 202, 203, 205, 207], "search": [15, 18, 19, 38, 62, 92, 100, 101, 103, 114, 134, 148, 152, 157, 158, 168, 193, 194, 199, 202, 203, 205, 206], "grid": [15, 112, 193], "bo": 15, "knowledgedistillationlossconfig": [15, 139, 140, 153, 192], "temperatur": [15, 153, 207], "ce": [15, 153, 207], "loss_weight": [15, 153, 207], "knowledg": [15, 103, 140, 142, 146, 148, 153, 155, 207], "distil": [15, 114, 142, 146, 148, 192, 206, 207], "entropi": [15, 133, 205], "probabl": [15, 86, 100, 107, 199], "length": [15, 20, 36, 41, 100, 107, 136, 152, 194, 196, 199, 204], "item": [15, 35, 74, 92, 107, 133, 141, 193, 202, 205], "student": [15, 20, 136, 139, 140, 208], "groundtruth": [15, 41], "label": [15, 18, 19, 20, 22, 23, 24, 25, 28, 32, 36, 38, 40, 45, 46, 58, 77, 104, 111, 135, 136, 138, 152, 153, 196, 204], "teacher": [15, 139, 140, 153, 208], "kl": [15, 78, 86, 116, 117, 133, 145, 153, 205, 207], "sum": [15, 45, 138, 139], "multipli": [15, 95, 96, 100, 156, 199], "distillationconfig": [15, 77, 139, 140, 153, 192], "criterion_conf": 15, "d_conf": [15, 140, 153, 192], "teacher_model": [15, 139, 140, 153], "intermediatelayersknowledgedistillationlossconfig": [15, 139], "layer_map": [15, 139], "add_origin_loss": 15, "relationship": [15, 176], "student_layer_nam": 15, "student_layer_output_process": 15, "teacher_layer_nam": 15, "teacher_layer_output_process": 15, "bert": [15, 20, 36, 114, 136, 139, 152, 154, 162, 185, 188, 189, 193, 204, 208], "desir": [15, 32, 36, 98, 116, 117, 193, 202, 204], "its": [15, 22, 36, 39, 40, 62, 82, 100, 105, 107, 109, 136, 139, 150, 152, 154, 165, 167, 171, 174, 175, 193, 199, 201, 204, 205], "take": [15, 18, 19, 36, 45, 46, 58, 62, 77, 100, 104, 109, 111, 112, 135, 138, 139, 145, 153, 174, 193, 196, 198, 199, 204, 205, 207], "serv": [15, 54, 107, 182, 187, 188, 189], "numer": [15, 45, 96, 97, 100, 104, 117, 154, 156, 194, 196, 199], "abbrevi": 15, "further": [15, 97, 107, 109, 114, 154, 155, 157, 159, 168, 174, 196], "layer_nam": [15, 193], "student_model": [15, 153], "l1": 15, "len": [15, 36, 136, 141, 204], "origin": [15, 20, 36, 63, 76, 87, 92, 100, 101, 102, 104, 107, 110, 136, 162, 193, 196, 199, 204, 205, 207], "selfknowledgedistillationlossconfig": [15, 139, 153], "student1_layer_name1": 15, "teacher_layer_name1": 15, "student2_layer_name1": 15, "student1_layer_name2": 15, "teacher_layer_name2": 15, "student2_layer_name2": 15, "soft": 15, "l2": [15, 193], "hard": [15, 135, 138], "resblock": 15, "featur": [15, 20, 21, 32, 36, 97, 102, 107, 110, 114, 132, 135, 137, 139, 153, 154, 155, 157, 161, 162, 165, 174, 176, 180, 193, 194, 200, 204], "deepst": 15, "fc": [15, 193], "02": [15, 151, 208], "nn": [15, 46, 58, 84, 87, 91, 100, 101, 107, 111, 139, 153, 155, 199, 202, 203], "crossentropyloss": [15, 139, 153], "sgd": [15, 139, 153, 195, 207], "lr": [15, 100, 139, 141, 153], "0001": [15, 139, 153, 195], "learning_r": [15, 153, 195, 207], "altern": [15, 58], "distil_loss": [15, 153], "mixedprecisionconfig": [15, 46, 153, 154], "mixedprecis": [15, 153], "target": [15, 62, 87, 101, 136, 141, 153, 193, 203, 204, 205, 207], "convers": [15, 97, 98, 107, 110, 115, 116, 153, 154, 196, 198, 202], "fp16": [15, 74, 107, 196], "fallback": [15, 65, 67, 68, 97, 98, 99, 143, 154, 177, 198, 205], "won": [15, 196, 199], "work": [15, 101, 106, 107, 113, 116, 134, 135, 139, 169, 172, 180, 198, 199, 200, 202, 203], "tensor": [15, 36, 54, 67, 82, 84, 87, 91, 92, 95, 96, 101, 104, 111, 117, 134, 135, 136, 138, 156, 193, 196, 200, 203, 204, 205], "trace": [15, 65, 84, 99, 101, 111, 164, 205], "mix_precis": [15, 37, 153, 154], "converted_model": [15, 46, 153, 154], "exportconfig": 15, "opset_vers": [15, 83, 84, 143], "14": [15, 83, 84, 114, 143, 149, 151, 189, 208], "input_nam": [15, 54, 83, 84, 143], "output_nam": [15, 54, 83, 84, 143], "dynamic_ax": [15, 84, 143], "common": [15, 34, 37, 80, 98, 102, 103, 104, 109, 134, 136, 140, 141, 143, 147, 149, 153, 196, 202], "export": [15, 41, 85, 95, 99, 114, 146, 160, 175, 177, 203, 206], "select": [15, 20, 87, 100, 107, 111, 112, 133, 148, 149, 174, 193, 196, 199, 203, 205], "opset": [15, 83, 84, 143], "version": [15, 37, 83, 84, 98, 109, 111, 115, 134, 145, 149, 150, 153, 167, 169, 171, 172, 194, 202, 205, 206], "qlinear": [15, 22, 29, 45, 82, 115, 164], "ax": [15, 84], "inform": [15, 18, 19, 45, 92, 96, 98, 100, 104, 106, 109, 110, 113, 114, 115, 116, 117, 118, 120, 124, 127, 130, 133, 134, 139, 145, 153, 155, 156, 169, 172, 175, 176, 179, 180, 182, 183, 187, 188, 193, 198, 199, 200, 202, 203, 207, 208, 209], "onnxqlinear2qdqconfig": 15, "onnxqlinear2qdq": 15, "torch2onnxconfig": [15, 143], "torch2onnx": [15, 81], "qdq_op_fp32_bia": 15, "qdq_op_int32_bia": 15, "qdq_op_fp32_bias_qdq": 15, "resnet50": [15, 102, 114, 138, 141, 143, 154, 157, 161, 193, 196, 201, 208], "int8_onnx_config": [15, 143], "randn": [15, 143], "224": [15, 32, 114, 136, 141, 143, 146, 153, 157, 176, 204, 207], "batch_siz": [15, 20, 21, 84, 100, 112, 135, 136, 141, 143, 147, 153, 157, 196], "q_model": [15, 58, 95, 98, 99, 103, 105, 111, 135, 136, 138, 141, 143, 146, 147, 152, 153, 155, 176, 177, 196, 197, 198, 199], "tf2onnxconfig": [15, 143], "tf2onnx": [15, 81], "axi": 15, "addit": [15, 77, 100, 116, 117, 139, 168, 176, 182, 199, 200, 205], "keyword": 15, "argument": [15, 101, 104, 105, 112, 138, 178, 179, 182, 185, 187, 188, 189, 199], "output_graph": 15, "nasconfig": [15, 112], "search_algorithm": [15, 112], "dyna": [15, 112, 148, 195], "na": [15, 50, 148, 208], "mxnet": [15, 22, 25, 29, 36, 45, 46, 51, 58, 110, 114, 115, 116, 133, 135, 142, 145, 148, 153, 154, 155, 195, 205, 207], "kera": [15, 22, 29, 49, 54, 102, 104, 116, 135, 141, 155, 164, 165], "pytorch": [15, 20, 22, 25, 29, 36, 45, 46, 55, 58, 68, 84, 85, 92, 96, 101, 110, 111, 112, 114, 115, 116, 117, 133, 134, 135, 139, 140, 142, 145, 148, 149, 151, 153, 154, 155, 156, 157, 159, 162, 163, 164, 165, 174, 176, 185, 188, 189, 193, 194, 195, 199, 200, 202, 205, 207], "built": [16, 17, 20, 21, 26, 28, 30, 31, 32, 33, 36, 45, 48, 56, 58, 77, 105, 112, 115, 136, 141, 153, 167, 171, 191, 196, 201, 204, 205, 207], "sigopt": [17, 194], "tpe": 17, "provid": [18, 19, 36, 41, 46, 58, 77, 85, 87, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 112, 114, 115, 116, 117, 132, 135, 138, 140, 141, 142, 148, 149, 151, 152, 153, 154, 155, 157, 161, 165, 168, 174, 175, 176, 182, 183, 193, 195, 196, 199, 202, 203, 205, 206, 207, 208], "sigopttunestrategi": 18, "q_dataload": [18, 19, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 147, 205], "q_func": [18, 19, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 115, 116, 153, 205], "eval_func": [18, 19, 46, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 77, 111, 135, 136, 138, 139, 140, 141, 153, 177, 196, 197, 198, 199, 205, 207], "eval_metr": [18, 19, 46, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 77, 152, 176, 196], "q_hook": [18, 19, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70], "hpo": [18, 193], "low": [18, 19, 23, 24, 46, 97, 100, 105, 107, 115, 116, 132, 133, 136, 141, 153, 154, 179, 194, 196, 199, 202, 205], "loader": [18, 19, 46, 58, 77, 87, 135, 196], "mandatori": [18, 19, 58, 153, 207], "dataset": [18, 19, 31, 41, 42, 43, 45, 46, 58, 77, 80, 98, 100, 102, 103, 104, 107, 112, 114, 115, 116, 135, 141, 146, 152, 153, 162, 176, 177, 187, 193, 196, 199, 200, 202, 205, 207, 208], "_": [18, 19, 58, 97, 98, 100, 101, 104, 106, 107, 111, 112, 114, 115, 116, 133, 138, 139, 141, 143, 145, 153, 154, 155, 157, 163, 167, 169, 171, 172, 179, 182, 183, 191, 193, 196, 199, 200, 201, 202, 203, 205, 207], "depend": [18, 19, 46, 58, 77, 110, 144, 145, 180, 195, 196, 205], "implement": [18, 19, 20, 22, 38, 46, 56, 58, 65, 77, 100, 117, 135, 136, 152, 153, 165, 175, 193, 196, 199, 200, 203, 205, 207], "well": [18, 19, 46, 58, 77, 96, 107, 112, 114, 134, 136, 156, 193, 196, 200, 202, 207], "taken": [18, 19, 46, 58, 77, 196], "reserv": [18, 19], "abl": [18, 19, 46, 58, 77, 104, 107, 165, 174, 196], "pre": [18, 19, 20, 46, 58, 77, 99, 100, 105, 107, 134, 136, 139, 140, 153, 162, 179, 193, 194, 196, 199, 203, 205], "through": [18, 19, 45, 46, 58, 99, 100, 101, 107, 114, 132, 145, 147, 148, 152, 160, 181, 191, 192, 193, 195, 196, 199], "tuner": [18, 19, 46, 58, 77, 196], "encapsul": [18, 19, 46, 58, 77, 155], "scalar": [18, 19, 46, 58, 77, 152, 196, 205], "pseudo": [18, 19, 58, 77, 100, 199, 203], "code": [18, 19, 58, 77, 100, 102, 111, 114, 115, 116, 117, 136, 139, 140, 141, 147, 148, 150, 152, 157, 159, 161, 162, 163, 165, 168, 174, 178, 179, 181, 182, 183, 191, 192, 193, 194, 195, 196, 201, 202, 203, 204], "someth": [18, 19, 22, 58, 77], "fefin": 19, "tpetunestrategi": 19, "pytorchbertdataset": 20, "task": [20, 27, 45, 98, 100, 107, 136, 139, 140, 143, 148, 152, 153, 177, 181, 184, 193, 197, 199, 202, 208], "model_typ": [20, 92, 136], "transform": [20, 21, 22, 23, 24, 25, 27, 29, 31, 98, 99, 100, 103, 107, 111, 112, 114, 133, 136, 139, 140, 141, 142, 146, 151, 153, 157, 162, 163, 164, 165, 177, 185, 188, 189, 193, 194, 198, 199, 202, 203, 205, 207], "filter": [20, 21, 22, 23, 24, 25, 27, 31, 92, 117, 136, 148, 193, 203], "construct": [20, 23, 24, 27, 34, 45, 50, 54, 76, 80, 105, 109, 116, 117, 136, 141, 193, 205], "tensordataset": [20, 136], "full": [20, 21, 22, 87, 92, 100, 114, 133, 136, 138, 144, 150, 175, 180, 193, 199, 200], "repo": [20, 108, 110, 136, 142, 167, 169, 171, 172, 209], "http": [20, 22, 38, 39, 41, 42, 43, 45, 58, 100, 111, 136, 138, 146, 149, 150, 153, 163, 169, 172, 176, 178, 179, 180, 181, 182, 185, 187, 188, 189, 193, 200], "github": [20, 38, 39, 42, 43, 45, 58, 100, 110, 114, 136, 138, 142, 149, 150, 153, 163, 169, 172, 176, 178, 179, 180, 181, 182, 185, 188, 189, 200], "com": [20, 38, 39, 42, 43, 45, 58, 109, 134, 136, 138, 146, 149, 150, 153, 157, 163, 176, 178, 179, 181, 182, 185, 188, 189, 200, 201, 208], "huggingfac": [20, 87, 96, 136, 142, 146, 156, 162, 163, 164, 165, 185, 186, 188, 189, 202, 208], "your": [20, 99, 110, 114, 134, 135, 136, 138, 141, 150, 153, 157, 160, 161, 162, 167, 168, 169, 171, 172, 174, 176, 180, 182, 187, 188, 189, 193, 194, 201, 203, 205, 206], "easi": [20, 99, 101, 104, 143, 153, 177, 181, 194, 196, 199, 201], "ad": [20, 38, 62, 95, 97, 100, 116, 117, 138, 154, 157, 162, 165, 169, 172, 182, 193, 199, 203], "arg": [20, 21, 22, 62, 87, 88, 96, 101, 136, 141, 153, 156, 163, 193, 196, 199, 202, 203, 204], "classifi": [20, 45, 136, 139], "squad": [20, 36, 42, 43, 45, 136, 152, 193, 204, 208], "distilbert": [20, 136, 154, 194, 208], "xlnet": [20, 136], "xlm": [20, 136, 208], "101": [20, 45, 107, 152, 183, 202, 208], "2043": 20, "2001": 20, "onnxrtbertdataset": 20, "data_dir": [20, 136], "model_name_or_path": [20, 136, 153, 162, 163, 178, 185, 188, 189, 197], "max_seq_length": [20, 36, 136, 204], "128": [20, 23, 24, 36, 100, 105, 107, 136, 153, 196, 199, 204, 208], "do_lower_cas": [20, 35, 36, 136, 204], "mrpc": [20, 45, 136, 152, 162, 185, 188, 189, 193, 205, 208], "dynamic_length": [20, 136], "onnxrt": [20, 22, 29, 36, 45, 90, 115, 138, 154, 176, 196, 208], "dir": [20, 87, 91, 136, 144, 147], "shortcut": [20, 136], "token": [20, 33, 36, 38, 39, 87, 98, 100, 107, 114, 136, 152, 153, 176, 177, 199, 201, 202, 204, 205], "longer": [20, 36, 136, 204], "than": [20, 36, 92, 96, 100, 107, 112, 114, 132, 136, 147, 156, 179, 187, 191, 192, 193, 196, 199, 201, 204, 205], "truncat": [20, 36, 136, 204], "shorter": [20, 36, 136, 204], "pad": [20, 36, 136, 204], "lowercas": [20, 136], "fine": [20, 101, 134, 136, 160, 193, 194, 196], "choic": [20, 100, 104, 107, 115, 136, 152, 180, 202], "qqp": [20, 136, 152, 208], "qnli": [20, 136, 152, 208], "rte": [20, 136, 152, 208], "st": [20, 136, 152], "b": [20, 92, 100, 107, 110, 133, 136, 152, 193, 199, 202, 205], "cola": [20, 136, 152, 208], "mnli": [20, 136, 152, 208], "wnli": [20, 136, 152], "mobilebert": [20, 136, 139], "roberta": [20, 136, 208], "fix": [20, 100, 135, 136, 161, 193, 196, 199, 205], "uncas": [20, 36, 136, 204, 208], "load_and_cache_exampl": 20, "cach": [20, 100, 107, 144, 196, 199], "helper": [20, 21, 22, 35, 54, 82, 83, 84, 90], "convert_examples_to_featur": [20, 36], "max_length": 20, "label_list": [20, 45], "output_mod": 20, "classif": [20, 36, 45, 139, 143, 152, 163, 177, 185, 188, 189, 193, 194], "pad_token": 20, "pad_token_segment_id": 20, "mask_padding_with_zero": 20, "inputfeatur": [20, 36], "properti": [20, 76, 150], "input_id": [20, 36, 153], "vocabulari": [20, 35, 36, 204], "attention_mask": [20, 153], "mask": [20, 41, 193, 208], "avoid": [20, 106, 111, 134, 203], "usual": [20, 104, 107, 116, 138, 139, 179, 192, 193, 196, 197, 202], "NOT": [20, 145], "token_type_id": [20, 153], "segment": [20, 39, 41, 110], "portion": 20, "them": [20, 100, 101, 107, 111, 117, 135, 138, 143, 145, 147, 177, 180, 192, 193, 199, 205], "problem": [20, 45, 97, 152, 154, 175], "regress": [20, 110, 138], "seq_length": 20, "tensorflowbertdataset": 20, "root": [20, 21, 22, 25, 45, 136, 141, 152, 153, 207], "label_fil": [20, 36, 136, 204], "tfrecord": [20, 21, 22, 136], "guid": [20, 104, 111, 114, 134, 136, 139, 149, 157, 165, 174, 209], "parsedecodebert": 20, "tensorflowmodelzoobertdataset": [20, 21], "pars": [20, 21, 32, 36, 116, 117, 204], "num_cor": [20, 21, 25, 136], "28": [20, 21, 25, 136, 208], "three": [20, 59, 61, 97, 101, 105, 107, 111, 115, 116, 133, 149, 154, 168, 182, 192, 196, 198, 201, 202, 203], "tf": [20, 21, 22, 36, 52, 54, 102, 104, 134, 141, 149, 155, 194, 198, 204], "record": [20, 21, 22, 28, 92, 105, 136, 179, 199, 201, 203, 205], "resiz": [20, 21, 32, 36, 136, 204], "coco": [21, 28, 41, 45, 152, 193], "parsedecodecoco": 21, "cocorecorddataset": 21, "interleav": [21, 136], "parallel": [21, 136, 153, 181, 184, 205], "cocoraw": [21, 136], "img_dir": [21, 136], "val2017": [21, 136], "anno_dir": [21, 136], "annot": [21, 41, 116, 117, 136, 152, 193, 205], "instances_val2017": [21, 136], "arrang": [21, 22, 25, 136, 193], "wai": [21, 22, 25, 54, 100, 103, 107, 112, 117, 135, 136, 138, 152, 153, 157, 160, 175, 176, 180, 181, 182, 192, 193, 196, 199, 202, 205, 207], "jpg": [21, 25, 27, 114, 136], "imag": [21, 22, 25, 27, 32, 36, 41, 107, 114, 136, 141, 143, 193, 195, 202, 203, 204, 208], "coconpi": [21, 136], "npy_dir": [21, 136], "npy": [21, 136], "tensorflowdataset": 22, "pytorchdataset": 22, "mxnetdataset": 22, "onnxrtqldataset": 22, "onnxrtitdataset": 22, "IT": [22, 29, 194], "pytorchmxnetwrapdataset": 22, "datafunc": 22, "pytorchmxnetwrapfunct": [22, 36], "framework_dataset": 22, "convent": [22, 41, 96, 110, 139, 156], "imageclassifi": 22, "choos": [22, 87, 101, 107, 148, 162, 194, 200, 202, 205, 207], "tensorflow_itex": [22, 25, 27, 29, 135, 195], "onnxrt_qdq": [22, 29, 195], "onnxrt_qlinearop": [22, 29, 36, 195], "onnxrt_integerop": [22, 29, 36, 195], "pytorch_ipex": [22, 29, 153, 195, 207], "pytorch_fx": [22, 29, 153, 195], "dataset_registri": 22, "dataset_typ": 22, "dataset_format": 22, "data_format": [22, 32], "eg": [22, 136, 195], "raw_imag": 22, "overwrit": [22, 167, 171], "__getitem__": [22, 36, 135, 136, 153], "__len__": [22, 136], "iterabledataset": 22, "also": [22, 36, 38, 45, 56, 58, 100, 101, 102, 103, 107, 110, 112, 115, 116, 117, 135, 138, 142, 146, 148, 152, 153, 157, 162, 167, 168, 171, 174, 175, 176, 179, 180, 191, 193, 194, 196, 198, 199, 202, 205], "__iter__": [22, 135, 136, 153], "over": [22, 45, 116, 142, 146, 148, 152, 165, 174, 180, 184, 193, 195, 202, 205], "download_url": 22, "url": [22, 110, 150, 185, 186, 193], "filenam": [22, 92, 136, 180], "md5": 22, "download": [22, 136, 138, 149, 179, 185, 200], "address": [22, 97, 105, 109, 134, 154, 176, 179, 182, 194], "gen_bar_updat": 22, "progress": [22, 168, 174, 176, 193, 196], "bar": [22, 174, 194], "check_integr": 22, "fpath": 22, "check": [22, 82, 91, 92, 104, 106, 114, 138, 141, 149, 158, 160, 162, 169, 172, 173, 177, 180, 183, 184, 200], "checksum": 22, "calculate_md5": 22, "chunk_siz": 22, "1024": [22, 160], "cifar10": [22, 136], "cifar100": [22, 136], "databas": [22, 182], "extract": [22, 76, 136], "otherwis": [22, 36, 92, 100, 109, 116, 136, 169, 172, 195, 199, 204], "www": [22, 136, 208], "c": [22, 92, 100, 106, 107, 136, 144, 199, 205], "toronto": [22, 136], "edu": [22, 136], "kriz": [22, 136], "cifar": [22, 136, 208], "tar": [22, 136, 138, 169, 172], "gz": [22, 136, 138, 169, 172], "manual": [22, 136, 157, 163, 165, 168, 182, 187, 188, 189, 193], "subset": [22, 25, 136, 179], "internet": [22, 136, 176], "put": [22, 136, 139], "again": [22, 136, 177, 179, 198], "pytorchcifar10": 22, "mxnetcifar10": 22, "tensorflowcifar10": 22, "pytorchcifar100": 22, "mxnetcifar100": 22, "tensorflowcifar100": 22, "mnist": [22, 136, 141], "modifi": [22, 76, 111, 117, 141, 145, 178, 179, 193, 207], "nation": [22, 109], "institut": 22, "standard": [22, 36, 110, 116, 134, 138, 143, 152, 204, 205], "technologi": [22, 96, 151, 153, 156], "fashionmnist": [22, 136], "npz": [22, 136], "idx1": [22, 136], "ubyt": [22, 136], "idx3": [22, 136], "t10k": [22, 136], "pytorchmnist": 22, "mxnetmnist": 22, "tensorflowmnist": 22, "pytorchfashionmnist": 22, "mxnetfashionmnist": 22, "tensorflowfashionmnist": 22, "imagefold": [22, 136, 141, 153], "expect": [22, 100, 102, 107, 109, 110, 144, 151, 174, 196, 199, 205], "folder": [22, 27, 46, 58, 91, 100, 101, 136, 162, 167, 171, 180, 187, 188, 189, 199, 203], "subfold": [22, 177], "belong": [22, 50, 196], "class_1": [22, 136], "xxx": [22, 136, 153], "png": [22, 136], "xxy": [22, 136], "xxz": [22, 136], "class_n": [22, 136], "123": [22, 136, 204], "nsdf3": [22, 136], "asd932_": [22, 136], "categori": [22, 40, 132, 136, 164], "mxnetimagefold": 22, "tensorflowtfrecorddataset": 22, "tensorflowimagerecord": 22, "imagenet": [22, 25, 32, 102, 112, 138, 153, 163, 179, 193, 203, 204, 207, 208], "000": [22, 114, 136], "001": [22, 107, 136, 141, 202, 207], "099": [22, 136], "tensorflowvocrecord": 22, "pascal": 22, "voc": [22, 45], "2012": 22, "val": [22, 25, 138, 153, 179], "00000": 22, "00004": 22, "00001": 22, "00003": 22, "dummi": [23, 24, 45, 104, 114, 136, 146, 152, 153, 176], "dummydataset": [23, 24, 104], "shape": [23, 24, 32, 36, 41, 100, 104, 107, 114, 136, 145, 146, 153, 176, 177, 199, 202, 204], "high": [23, 24, 104, 136, 138, 149, 179, 194, 205], "127": [23, 24, 107, 136, 196, 202], "float32": [23, 24, 36, 41, 87, 100, 107, 115, 132, 136, 153, 196, 199, 202, 204], "rang": [23, 24, 36, 77, 87, 95, 96, 97, 100, 101, 104, 106, 107, 114, 115, 117, 133, 136, 138, 139, 140, 141, 153, 156, 177, 179, 192, 193, 196, 199, 202, 204], "stand_norm": [23, 24, 136], "real": [23, 107, 116, 133, 141, 176, 183, 194, 196], "dummy_v2": [24, 136], "sparse_dummy_v2": [24, 136], "input_shap": [24, 136], "label_shap": [24, 136], "sparsedummydataset": 24, "dense_shap": [24, 136], "sparse_ratio": [24, 136], "imagenetraw": [25, 136], "data_path": [25, 136], "image_list": [25, 136], "img1": [25, 136], "img2": [25, 136], "imgx": [25, 136], "read": [25, 36, 136, 198, 201], "val_map": [25, 136], "txt": [25, 136, 138, 149, 176, 178, 179, 181, 182], "pytorchimagenetraw": 25, "mxnetimagenetraw": 25, "tensorflowimagenetraw": 25, "inteltensorflow": [25, 27], "tensorflowimagenetdataset": 25, "onnxrtimagenetdataset": 25, "class": [26, 46, 58, 100, 101, 102, 104, 105, 111, 112, 116, 134, 135, 136, 139, 152, 153, 165, 191, 192, 196, 200, 203, 205, 207], "bert_dataset": 26, "coco_dataset": 26, "dummy_dataset": 26, "dummy_dataset_v2": 26, "imagenet_dataset": 26, "style_transfer_dataset": 26, "style": [27, 134, 136, 147], "transfer": [27, 107, 136, 139, 140, 153, 202], "styletransferdataset": 27, "content_fold": [27, 136], "style_fold": [27, 136], "crop_ratio": [27, 136], "resize_shap": [27, 136], "256": [27, 32, 136, 141, 153, 204], "image_format": [27, 136], "holder": [27, 136], "labelbalancecocorecordfilt": 28, "balanc": [28, 96, 98, 100, 104, 107, 156, 199, 202], "labelbalancecocorawfilt": 28, "tensorflowfilt": 29, "onnxrtqlfilt": 29, "onnxrtitfilt": 29, "pytorchfilt": 29, "mxnetfilt": 29, "filter_registri": 29, "filter_typ": 29, "__call__": 29, "write": [29, 92, 141, 147, 153, 157, 203], "coco_filt": 30, "quantizedinput": [32, 204], "uint8": [32, 41, 76, 104, 107, 115, 136, 145, 195, 196, 204, 207], "point": [32, 42, 43, 62, 92, 95, 96, 97, 98, 99, 100, 103, 107, 152, 156, 174, 179, 180, 196, 199, 202, 204, 205], "labelshift": [32, 204], "label_shift": [32, 204], "parsedecodeimagenet": [32, 204], "proto": [32, 36, 204], "parsedecodeimagenettransform": 32, "decod": [32, 38, 152, 204], "v1": [32, 42, 43, 45, 54, 98, 141, 143, 144, 152, 155, 178, 193, 200, 201, 202, 208], "tensorflowtransposelastchannel": 32, "transpos": [32, 36, 83, 199, 204], "nhwc": 32, "nchw": 32, "tensorflowshiftrescal": 32, "rescal": [32, 36, 204], "tensorflowresizecropimagenettransform": 32, "height": [32, 36, 141, 204, 207], "width": [32, 36, 107, 133, 141, 193, 196, 204, 207], "random_crop": [32, 204], "resize_sid": [32, 204], "resize_method": 32, "bilinear": [32, 36, 204], "random_flip_left_right": [32, 204], "mean_valu": [32, 204], "channels_last": [32, 157], "subpixel": 32, "rgb": 32, "seri": [32, 114, 149, 153, 204], "applic": [32, 100, 102, 107, 117, 143, 157, 174, 176, 182, 183, 187, 188, 194, 199, 202, 203, 204, 206], "result": [32, 36, 38, 41, 42, 43, 45, 58, 65, 77, 91, 92, 95, 98, 100, 103, 105, 106, 107, 109, 112, 114, 135, 138, 139, 141, 148, 150, 152, 153, 162, 163, 174, 175, 178, 182, 183, 184, 185, 191, 193, 194, 196, 199, 201, 202, 203, 204, 205, 206, 208], "crop": [32, 36, 136, 204], "flip": [32, 36, 204], "left": [32, 36, 107, 168, 174, 202, 204], "right": [32, 41, 107, 109, 110, 111, 174, 180, 202, 204], "std": [32, 36, 153, 204], "bilinearimagenettransform": 32, "central_fract": [32, 204], "875": [32, 204], "fraction": [32, 204], "onnxbilinearimagenettransform": 32, "onnxresizecropimagenettransform": 32, "std_valu": 32, "229": [32, 153], "225": [32, 153, 208], "resizewithaspectratio": 32, "87": [32, 208], "inter_pol": 32, "cv2": 32, "inter_area": 32, "aspect": [32, 36, 204], "imagenet_transform": 33, "postprocess_cl": [34, 153], "user_postprocess": 34, "just": [34, 36, 56, 99, 104, 107, 112, 153, 164, 168, 174, 182, 192, 196, 202, 204, 205], "convert_to_unicod": 35, "text": [35, 36, 38, 43, 96, 98, 100, 107, 143, 150, 156, 163, 185, 188, 189, 193, 194, 199, 202, 204, 208], "unicod": 35, "assum": [35, 41, 115, 145, 174], "utf": 35, "load_vocab": 35, "vocab_fil": [35, 36, 204], "convert_by_vocab": 35, "vocab": 35, "whitespace_token": 35, "whitespac": [35, 43], "clean": [35, 153], "split": [35, 36, 107, 111, 197, 199, 202, 204], "piec": [35, 38, 100, 107, 152, 199], "fulltoken": 35, "tokenzi": 35, "basictoken": 35, "punctuat": [35, 38, 43], "lower": [35, 36, 43, 63, 95, 96, 99, 104, 107, 140, 156, 193, 194, 196, 202, 204, 205], "wordpiecetoken": 35, "unk_token": 35, "unk": 35, "max_input_chars_per_word": 35, "200": [35, 100, 111, 183, 205], "wordpiec": [35, 36, 204], "concat_gener": 36, "inc": [36, 101, 104, 105, 109, 114, 116, 151, 157, 164, 174, 176, 181, 194, 195, 200, 205], "abstract": [36, 115, 117, 147], "own": [36, 56, 107, 112, 116, 135, 136, 148, 152, 176, 180, 191, 199, 201, 206], "inherit": [36, 112, 115, 116, 136], "tensorflowtransform": 36, "mxnettransform": 36, "pytorchtransform": 36, "onnxrtqltransform": 36, "onnxrtittransform": 36, "transform_registri": 36, "transform_typ": 36, "basetransform": 36, "tensorflowwrapfunct": 36, "transform_func": 36, "pytorchmxnettransform": 36, "get_torchvision_map": 36, "interpol": [36, 152, 193, 204], "torchvis": [36, 114, 142, 146, 157, 163, 177], "composetransform": 36, "transform_list": [36, 204], "sever": [36, 96, 97, 107, 112, 138, 139, 140, 148, 153, 154, 156, 167, 171, 182, 193, 195, 197, 202, 204, 205, 207], "croptoboundingbox": [36, 204], "offset_height": [36, 204], "offset_width": [36, 204], "target_height": [36, 204], "target_width": [36, 204], "box": [36, 41, 45, 111, 152, 157, 168, 174, 203, 204, 205], "vertic": [36, 204], "coordin": [36, 62, 181, 204, 205], "top": [36, 45, 110, 152, 174, 177, 179, 204], "corner": [36, 110, 115, 117, 204], "horizont": [36, 204], "mxnetcroptoboundingbox": 36, "onnxrtcroptoboundingbox": 36, "tensorflowcroptoboundingbox": 36, "resizewithratio": [36, 204], "min_dim": [36, 204], "800": [36, 204], "max_dim": [36, 204], "1365": [36, 204], "constant_valu": 36, "np": [36, 62, 141, 184, 202, 204, 205], "arrai": [36, 41, 92, 204], "smaller": [36, 96, 139, 153, 156, 193, 204], "dimens": [36, 100, 136, 139, 199, 204], "ensur": [36, 62, 99, 102, 141, 196, 204], "longest": [36, 204], "side": [36, 136, 168, 204], "doesn": [36, 97, 104, 115, 141, 153, 154, 175, 207], "exce": [36, 199, 204], "zero": [36, 92, 96, 99, 100, 107, 114, 156, 179, 193, 196, 199, 202, 204, 205], "tensorflowresizewithratio": 36, "perm": [36, 204], "permut": [36, 204], "tensorflowtranspos": 36, "mxnettranspos": 36, "pytorchtranspos": 36, "randomverticalflip": [36, 204], "randomli": [36, 62, 107, 112, 202, 204, 205], "tensorflowrandomverticalflip": 36, "randomhorizontalflip": [36, 153, 204], "tensorflowrandomhorizontalflip": 36, "toarrai": [36, 204], "pil": [36, 204], "ndarrai": [36, 78, 144, 204], "numpi": [36, 41, 144, 202, 204], "casttftransform": 36, "castonnxtransform": 36, "castpytorchtransform": 36, "centercroptftransform": 36, "center": [36, 113, 114, 149, 204, 205], "paddedcentercroptransform": 36, "crop_pad": 36, "resizetftransform": 36, "nearest": [36, 100, 101, 107, 199, 204], "bicub": [36, 204], "resizepytorchtransform": 36, "randomcroptftransform": 36, "randomresizedcroppytorchtransform": 36, "08": [36, 204, 208], "randomresizedcropmxnettransform": 36, "randomresizedcroptftransform": 36, "normalizetftransform": 36, "normal": [36, 43, 100, 107, 153, 183, 191, 199, 202, 204], "deviat": [36, 138, 204], "broadcast": [36, 141, 204], "rescalekeraspretraintransform": 36, "rescaletftransform": 36, "rescaletransform": 36, "alignimagechanneltransform": 36, "dim": [36, 107, 202, 204], "align": [36, 109, 199, 204], "w": [36, 98, 107, 193, 202, 204], "must": [36, 41, 110, 111, 116, 132, 135, 149, 196, 204], "pytorchalignimagechannel": 36, "tondarraytransform": 36, "resizemxnettransform": 36, "resizetransform": 36, "cropresizetftransform": 36, "boundari": [36, 204], "area": [36, 41, 96, 152, 156, 204], "pytorchcropresizetransform": 36, "mxnetcropresizetransform": 36, "cropresizetransform": 36, "centercroptransform": 36, "mxnetnormalizetransform": 36, "pytorchnormalizetransform": 36, "normalizetransform": 36, "randomcroptransform": 36, "randomresizedcroptransform": 36, "get_final_text": 36, "pred_text": 36, "orig_text": 36, "project": [36, 108, 109, 110, 180, 194, 201, 205, 209], "predict": [36, 38, 42, 43, 45, 58, 100, 107, 112, 139, 152, 165, 199, 202, 203, 204], "back": [36, 138, 174, 180], "squadexampl": 36, "qas_id": 36, "question_text": 36, "doc_token": 36, "orig_answer_text": 36, "start_posit": 36, "end_posit": 36, "is_imposs": 36, "without": [36, 76, 96, 107, 109, 139, 141, 153, 156, 165, 176, 179, 193, 194, 195, 196, 205, 206], "answer": [36, 42, 43, 109, 179, 193, 204, 208], "posit": [36, 109, 152, 157, 182, 187, 188, 189], "unique_id": 36, "example_index": 36, "doc_span_index": 36, "token_to_orig_map": 36, "token_is_max_context": 36, "input_mask": [36, 153], "segment_id": [36, 153], "read_squad_exampl": 36, "input_fil": 36, "doc_strid": [36, 204], "max_query_length": [36, 204], "output_fn": 36, "inputbatch": 36, "collecttransform": 36, "10833": 36, "tfsquadv1posttransform": 36, "n_best_siz": [36, 204], "20": [36, 179, 182, 187, 188, 189, 193, 204, 207, 208], "384": [36, 204], "64": [36, 97, 105, 107, 112, 151, 199, 202, 204, 208], "max_answer_length": [36, 204], "30": [36, 142, 146, 148, 204, 208], "total": [36, 45, 100, 136, 138, 193, 199, 204, 208], "best": [36, 67, 100, 101, 102, 103, 105, 109, 112, 114, 134, 149, 157, 163, 174, 180, 191, 196, 199, 202, 204, 205], "nbest_predict": [36, 204], "question": [36, 42, 43, 107, 109, 110, 114, 115, 149, 157, 181, 193, 202, 204, 208], "becaus": [36, 103, 107, 111, 179, 196, 202, 204, 205], "anoth": [36, 38, 92, 138, 139, 167, 171, 204, 205], "up": [36, 107, 114, 141, 142, 145, 148, 165, 169, 172, 174, 193, 194, 195, 196, 201, 204, 205, 207], "long": [36, 100, 134, 144, 199, 204], "document": [36, 97, 102, 103, 107, 116, 117, 122, 141, 151, 154, 159, 169, 172, 173, 180, 181, 183, 193, 200, 204, 206], "chunk": [36, 204], "stride": [36, 204], "tfmodelzoocollecttransform": 36, "zoo": [36, 114, 142, 146, 208], "tfsquadv1modelzooposttransform": 36, "squadv1": [36, 204], "see": [36, 38, 100, 107, 109, 110, 111, 113, 134, 150, 153, 167, 168, 171, 174, 175, 179, 180, 199, 202, 203, 205], "parsedecodevoctransform": 36, "intel": [37, 44, 45, 57, 58, 66, 72, 81, 94, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 109, 110, 112, 113, 115, 116, 117, 133, 136, 137, 139, 140, 142, 143, 145, 146, 150, 151, 154, 155, 157, 162, 164, 165, 176, 177, 178, 179, 181, 182, 191, 192, 193, 194, 196, 198, 199, 200, 202, 203, 205, 206, 207, 208], "open": [37, 80, 94, 109, 114, 143, 144, 153, 169, 172, 175, 176, 180, 181, 182, 194], "librari": [37, 94, 97, 104, 114, 149, 153, 154, 159, 168, 174, 194, 196], "popular": [37, 94, 101, 105, 107, 114, 115, 116, 133, 139, 142, 143, 146, 151, 153, 193, 196, 199, 205, 206], "compress": [37, 56, 77, 87, 94, 98, 100, 101, 103, 105, 107, 114, 122, 139, 148, 153, 174, 176, 191, 192, 193, 194, 196, 202, 206, 208], "techniqu": [37, 94, 99, 104, 105, 107, 114, 148, 153, 157, 176, 192, 193, 194, 195, 196, 206, 207, 208], "contrib": 37, "script": [38, 39, 42, 43, 110, 114, 141, 148, 157, 161, 164, 165, 168, 185, 187, 194], "unicoderegex": 38, "hoc": 38, "hack": 38, "recogn": [38, 205], "symbol": [38, 46, 58, 111, 155], "nondigit_punct_r": 38, "compil": [38, 95, 99, 153], "regular": 38, "express": [38, 109], "preced": [38, 107, 202, 205], "digit": [38, 92, 194], "punct_nondigit_r": 38, "symbol_r": 38, "bleu_token": 38, "offici": [38, 42, 43, 109, 202], "mose": 38, "smt": 38, "mosesdecod": 38, "blob": [38, 39, 42, 43, 45, 58, 153, 163, 185, 188, 189], "master": [38, 39, 42, 43, 45, 58, 153, 205], "mteval": 38, "v14": 38, "pl": 38, "l954": 38, "l983": 38, "comput": [38, 39, 42, 43, 45, 77, 92, 96, 97, 99, 100, 107, 133, 135, 140, 143, 152, 153, 154, 156, 157, 168, 177, 193, 194, 196, 199, 202, 205], "bilingu": 38, "understudi": 38, "qualiti": [38, 134], "ha": [38, 97, 102, 104, 107, 110, 112, 115, 116, 117, 135, 143, 148, 153, 154, 160, 174, 179, 180, 182, 185, 193, 195, 196, 198, 201, 202, 205], "been": [38, 97, 100, 104, 107, 112, 117, 134, 139, 153, 154, 174, 199, 202], "machin": [38, 100, 143, 149, 160, 174, 176, 182, 194, 202, 203], "translat": [38, 39, 96, 156, 193, 205], "natur": [38, 100, 143], "approxim": [38, 39, 100, 116, 152, 199], "glue": [38, 45, 136, 152, 153, 163], "word": [38, 100, 107, 134, 152, 193, 199, 208], "ngram": [38, 152], "breviti": [38, 39, 152], "penalti": [38, 39, 152], "doe": [38, 76, 99, 100, 134, 135, 136, 152, 153, 199, 200, 204], "have": [38, 41, 45, 58, 76, 96, 97, 98, 100, 105, 107, 109, 110, 116, 117, 134, 135, 136, 138, 141, 145, 150, 152, 153, 154, 156, 157, 174, 177, 180, 182, 187, 188, 189, 191, 193, 196, 197, 199, 202, 205, 206], "beam": [38, 152], "bleu": [39, 44, 152, 193], "tensor2tensor": 39, "bleu_hook": 39, "compute_bleu": 39, "reference_corpu": 39, "translation_corpu": 39, "max_ord": 39, "use_bp": 39, "against": 39, "gram": 39, "appli": [39, 96, 99, 103, 104, 105, 107, 109, 116, 117, 153, 156, 157, 159, 165, 174, 178, 179, 184, 192, 193, 196, 198, 201, 202, 205, 206, 207], "bleu_scor": 39, "third": [41, 110, 150], "parti": [41, 107, 110, 150, 196], "pycocotool": [41, 144], "noth": [41, 205], "relat": [41, 76, 80, 117, 157, 181, 182, 193, 199, 207], "thu": [41, 107, 153, 193, 196], "cannot": [41, 100, 111, 134, 144, 199, 203], "slim": [41, 52, 54, 155, 193], "jonathanhuang": 41, "wrap": [41, 111, 141, 169, 172], "image_id": [41, 152], "encod": [41, 177, 204], "invok": [41, 116], "groundtruth_dict": 41, "exportgroundtruthtococo": 41, "groundtruth_boxes_list": 41, "groundtruth_classes_list": 41, "max_num_class": 41, "output_path": 41, "detections_list": 41, "exportdetectionstococo": 41, "detection_boxes_list": 41, "detection_scores_list": 41, "detection_classes_list": 41, "cocowrapp": 41, "loadannot": 41, "cocoevalwrapp": 41, "agnostic_mod": 41, "computemetr": 41, "detection_typ": 41, "bbox": [41, 111, 152], "hold": [41, 62, 136], "being": [41, 117, 182], "iou_typ": 41, "iou_thr": [41, 45, 152], "map_point": [41, 45, 152], "cocoev": 41, "To": [41, 56, 96, 97, 98, 99, 100, 103, 105, 106, 107, 110, 114, 116, 117, 134, 136, 138, 141, 154, 156, 158, 161, 167, 169, 171, 172, 176, 180, 193, 195, 198, 199, 200, 202, 205, 207], "mscoco": 41, "org": [41, 111, 138, 149, 169, 172, 193], "Then": [41, 107, 116, 138, 167, 169, 171, 172, 179, 202, 205], "exportsingleimagegroundtruthtococo": 41, "next_annotation_id": 41, "category_id_set": 41, "groundtruth_box": 41, "groundtruth_class": 41, "groundtruth_mask": 41, "groundtruth_is_crowd": 41, "ingest": 41, "api": [41, 45, 58, 73, 74, 92, 98, 100, 105, 107, 111, 114, 118, 120, 124, 127, 130, 138, 143, 148, 149, 153, 159, 163, 164, 165, 181, 182, 186, 200, 201, 205, 209], "here": [41, 98, 99, 103, 104, 107, 116, 136, 141, 142, 143, 145, 146, 151, 152, 162, 169, 172, 174, 177, 180, 182, 196, 200, 201, 202, 208], "match": [41, 42, 99, 106, 114, 139, 175, 199], "ones": [41, 193], "exportsingleimagedetectionstococo": 41, "associ": 41, "uniqu": [41, 107, 196], "identifi": [41, 54, 105, 182, 193, 199], "assign": [41, 92, 141, 195, 205], "continu": [41, 112, 151, 153, 175, 193, 206], "drop": [41, 97, 98, 100, 107, 110, 153, 154, 168, 193, 199, 202, 208], "num_gt_box": 41, "num_detect": [41, 45, 152, 153, 207], "image_height": 41, "image_width": 41, "detection_mask": 41, "crowd": 41, "rais": [41, 46, 114, 134, 176, 193, 194], "valueerror": [41, 144], "insid": [41, 139, 140, 175, 193, 197, 205], "exportsingleimagedetectionboxestococo": 41, "detection_box": [41, 153, 207], "detection_scor": [41, 153, 207], "detection_class": [41, 153, 207], "exporsingleimagedetectionboxestococo": 41, "exportsingleimagedetectionmaskstococo": 41, "allenai": [42, 43], "bi": [42, 43], "att": [42, 43], "flow": [42, 43, 107, 111, 112, 153], "f1_score": [42, 43], "ground_truth": [42, 43], "f1": [42, 44, 45, 141, 152, 153, 177, 201, 208], "ground": [42, 43], "truth": [42, 43], "metric_max_over_ground_truth": [42, 43], "metric_fn": [42, 43], "exact_match_scor": 42, "exact": 42, "averag": [42, 43, 45, 100, 152, 153, 199, 205, 208], "articl": [42, 43], "paragraph": [42, 43], "qa": [42, 43, 114], "normalize_answ": 43, "remov": [43, 109, 153, 167, 171, 180, 187, 188, 193, 203], "extra": [43, 100, 153, 199], "replac": [43, 95, 96, 99, 134, 141, 153, 156, 165, 200], "newlin": [43, 92], "tab": [43, 174, 203], "abc": [43, 115, 203, 205], "harmon": [43, 45], "recal": [43, 45], "equat": [43, 45, 107, 196, 202], "answer_start": 43, "177": [43, 208], "denver": 43, "bronco": 43, "nfl": 43, "afc": 43, "super": [43, 112], "bowl": 43, "50": [43, 107, 112, 116, 179, 193, 202, 208], "56be4db0acb8001400a502ec": 43, "form": [43, 138, 139, 174], "percentag": [43, 100, 133, 199, 207], "bleu_util": 44, "coco_label_map": 44, "coco_tool": 44, "evaluate_squad": 44, "user_metr": [45, 58], "metric_cl": [45, 58, 153], "recommend": [45, 114, 115, 136, 145, 165, 168, 173, 175, 193, 195, 205], "design": [45, 63, 99, 101, 104, 112, 114, 153, 162, 165, 193, 196, 206], "sub_class": [45, 58], "basemetr": [45, 58], "tensorflowmetr": 45, "maintain": [45, 99, 100, 104, 107, 109, 110, 134, 155, 157, 169, 172, 176, 181, 182, 193, 199, 200], "pytorchmetr": 45, "mxnetmetr": 45, "onnxrtqlmetr": 45, "onnxrtitmetr": 45, "metric_registri": 45, "metric_typ": 45, "cross": [45, 106, 147, 205], "decorator_metr": 45, "single_output": 45, "hvd": [45, 141], "wrappytorchmetr": 45, "wrapmxnetmetr": 45, "wraponnxrtmetr": 45, "binari": [45, 144, 152, 169, 172, 200], "proport": 45, "were": [45, 160, 193], "pred_list": 45, "pytorchloss": 45, "print": [45, 92, 106, 107, 141, 152, 153, 176, 177, 193, 202, 205], "mae": [45, 152], "compare_label": [45, 58, 152], "error": [45, 67, 88, 100, 107, 138, 152, 158, 179, 180, 183, 199, 202, 205], "actual": [45, 99, 141], "compar": [45, 92, 96, 99, 100, 105, 107, 140, 152, 156, 177, 193, 196, 199, 201, 203, 205], "pred": [45, 152], "rmse": [45, 152, 205], "squar": [45, 67, 100, 138, 152, 179, 205], "estim": [45, 54, 205], "tensorflowtopk": 45, "k": [45, 58, 152, 176, 193], "among": [45, 96, 107, 156, 168, 202], "outcom": 45, "consid": [45, 109, 133, 134, 139, 175, 205], "find": [45, 62, 92, 105, 115, 138, 151, 160, 167, 171, 174, 175, 177, 179, 193, 199, 201, 202, 203, 205], "num_correct": 45, "num_sampl": 45, "generaltopk": 45, "cocomapv2": [45, 152], "anno_path": [45, 152], "95": [45, 151, 152, 208], "map_kei": 45, "detectionboxes_precis": 45, "output_index_map": [45, 152], "tensorflowmap": 45, "tensorflowcocomap": 45, "tensorflowvocmap": 45, "squadf1": [45, 152], "miou": 45, "num_class": 45, "21": [45, 107, 151, 162, 163, 185, 188, 189, 194, 202, 208], "iou": 45, "intersect": [45, 115, 152], "onnxrtglu": 45, "roc": 45, "dlrm": 45, "register_customer_metr": 45, "mani": [45, 58, 100, 104, 107, 134, 135, 149, 199, 205, 207], "tell": [45, 58, 195], "what": [45, 58, 77, 104, 109, 194], "topk": [45, 58, 141, 152, 153, 176, 196], "matrix": [45, 58, 103, 107, 114, 165, 206], "updat": [45, 58, 89, 100, 144, 151, 152, 153, 160, 165, 168, 184, 193, 199, 202, 205, 206], "across": [46, 96, 105, 137, 153, 156, 181, 184, 193, 197, 202, 205], "frozen": [46, 54, 58, 155], "graph_def": [46, 54, 58, 83], "ckpt": [46, 54, 58, 208], "savedmodel": [46, 54, 58], "onnx_ml_pb2": [46, 155], "modelproto": [46, 82, 155], "gluon": [46, 58, 155], "hybirdblock": [46, 58], "mixed_precis": [46, 153], "obj": [46, 56, 58, 77, 80, 92], "measur": [46, 86, 100, 104, 107, 112, 115, 132, 138, 139, 152, 153, 199, 203, 205], "variou": [46, 96, 99, 101, 104, 117, 148, 156, 157, 184, 193, 195, 197], "dl": [46, 138, 147, 161, 174, 194, 208], "assertionerror": 46, "basemodel": [47, 104], "plai": [47, 100, 107, 194, 199, 202], "graph": [47, 54, 95, 99, 107, 111, 115, 136, 139, 141, 147, 155, 157, 176, 179, 196, 197, 198, 203], "role": [47, 100, 107, 199, 202], "base_model": 48, "keras_model": 48, "mxnet_model": 48, "nets_factori": 48, "onnx_model": [48, 177], "tensorflow_model": [48, 179], "torch_model": 48, "kerasmodel": 49, "get_model_fwk_nam": 50, "fwk": 50, "mxnetmodel": 51, "net": [52, 114], "factori": 52, "tfslimnetsfactori": 52, "onnxmodel": 53, "get_model_typ": 54, "validate_graph_nod": 54, "node_nam": [54, 116], "node": [54, 82, 84, 106, 115, 138, 141, 177, 181, 184, 187, 188, 189, 197, 203, 205, 208], "compat": [54, 110, 141, 155, 169, 172, 174, 193, 200], "graphdef": [54, 155], "validate_and_inference_input_output": 54, "input_tensor_nam": 54, "output_tensor_nam": 54, "infer": [54, 56, 58, 77, 97, 98, 99, 100, 103, 104, 107, 114, 115, 116, 133, 139, 140, 153, 154, 174, 191, 193, 194, 196, 199, 202, 203, 205], "graph_sess": 54, "session": [54, 153, 203], "sess": 54, "graph_def_sess": 54, "frozen_pb_sess": 54, "load_saved_model": 54, "saved_model_tag": 54, "signatur": 54, "tag": [54, 107, 202, 203], "metagraphdef": 54, "analyz": [54, 201, 202, 203], "input_tensor": 54, "output_tensor": 54, "try_loading_kera": 54, "try": [54, 104, 107, 111, 114, 138, 177, 193, 196, 202, 205], "keras_sess": 54, "slim_sess": 54, "checkpoint_sess": 54, "estimator_sess": 54, "input_fn": 54, "saved_model_sess": 54, "tensorflowbasemodel": 54, "tensorflowsavedmodelmodel": 54, "tensorflowllmmodel": 54, "exceed": 54, "protobuf": [54, 177], "2gb": 54, "tensorflowqatmodel": 54, "tensorflowcheckpointmodel": 54, "checkpoint": [54, 91, 155], "tensorflowmodel": 54, "pytorchbasemodel": 55, "pytorchmodel": 55, "pytorchfxmodel": 55, "ipexmodel": 55, "driven": [56, 114, 153, 174, 191, 203], "objective_registri": 56, "objective_custom_registri": 56, "obj_cl": 56, "eural_compressor": 56, "objective_cl": 56, "user_object": 56, "__class__": 56, "__name__": 56, "objective_cfg": 56, "deep_get": [56, 92], "usr_cfg": 56, "deep_set": [56, 92], "user_obj_cfg": 56, "With": [56, 104, 107, 111, 115, 117, 135, 153, 162, 167, 171, 175, 181, 191, 193, 194, 196, 201, 202, 205, 208], "easili": [56, 105, 107, 115, 158, 162, 174, 191, 202], "special": [56, 101, 111, 135, 152, 153, 191, 193, 199, 206], "peak": [56, 106, 191], "memori": [56, 92, 96, 97, 98, 100, 103, 106, 107, 133, 135, 140, 153, 154, 156, 157, 191, 193, 196, 197, 199, 202, 205, 208], "block": [56, 96, 100, 148, 156, 191, 193, 199, 205], "multiobject": 56, "metric_criterion": 56, "metric_weight": 56, "obj_criterion": 56, "obj_weight": 56, "is_measur": 56, "calib_dataload": [58, 102, 103, 104, 105, 111, 114, 135, 136, 138, 146, 147, 152, 153, 176, 177, 196, 197, 198, 199], "calib_func": [58, 198], "entir": [58, 77, 98, 103, 111, 116, 117, 133, 181, 193], "autotunestrategi": 59, "There": [59, 61, 95, 99, 103, 107, 134, 138, 139, 145, 148, 153, 157, 179, 181, 182, 199, 202, 205, 207], "onc": [59, 61, 116, 117, 135, 174, 180, 193, 194, 205, 208], "polici": [59, 61, 67, 105, 109, 114, 207, 209], "automixedprecisiontunestrategi": 60, "basictunestrategi": 61, "bayesiantunestrategi": 62, "acq_max": 62, "ac": 62, "gp": 62, "y_max": 62, "n_warmup": 62, "10000": [62, 193], "n_iter": 62, "acquisit": 62, "gaussian": [62, 205], "relev": [62, 116, 117, 134, 179, 193], "known": [62, 96, 153, 156, 193, 196, 203, 205], "limit": [62, 92, 96, 100, 101, 104, 114, 138, 139, 151, 156, 196, 199, 200, 203], "acq": 62, "randomst": 62, "scipi": 62, "x_max": 62, "targetspac": 62, "pbound": 62, "9527": [62, 153, 207], "append": [62, 111, 140, 153, 192], "while": [62, 97, 99, 100, 104, 107, 115, 116, 136, 142, 148, 154, 157, 162, 174, 176, 193, 195, 196, 199, 202], "duplic": 62, "bayesianoptim": 62, "verbos": [62, 84], "conservativetunestrategi": 63, "o0": [63, 205], "who": [63, 109], "exhaustivetunestrategi": 64, "hawq_v2tunestrategi": 65, "hawq": [65, 205], "v2": [65, 98, 135, 141, 143, 144, 151, 163, 200, 202, 205, 206, 208], "hessian": [65, 100, 199, 205], "network": [65, 96, 107, 112, 133, 139, 140, 143, 153, 156, 176, 194, 196, 202, 205], "made": [65, 107, 115, 196, 200, 205], "small": [65, 100, 107, 112, 179, 180, 193, 199, 205, 208], "impact": [65, 193, 200, 205], "auto_mixed_precis": 66, "msetunestrategi": 67, "those": [67, 92, 99, 104, 107, 138, 139, 140, 147, 153, 154, 192, 193, 196, 205], "mse_v2tunestrategi": 68, "revert": [68, 76, 205], "fx": [68, 95, 97, 99, 148, 154, 163, 164, 178, 194, 196, 198], "randomtunestrategi": 69, "strategy_registri": [70, 205], "tunestrategi": [70, 205], "tunestrategymeta": 70, "metaclass": 70, "tuning_sampl": 72, "tuning_spac": [72, 73, 75], "tuning_struct": [72, 73, 74], "tuningord": 73, "Not": [73, 74, 92, 112, 134], "tuningsampl": 73, "tuningspac": [73, 74], "tuning_order_lst": 73, "initial_op_tuning_cfg": 73, "modelwisetuningsampl": 73, "tuning_items_prior": 73, "op_dtype_dict": 73, "optuningconfig": [73, 74, 75], "optypewisetuningsampl": 73, "opwisetuningsampl": 73, "fallbacktuningsampl": 73, "op_dtyp": 73, "accumul": [73, 96, 100, 156, 205], "skip_first": 73, "lowerbitssampl": 73, "blockfallbacktuningsampl": 73, "op_block_lst": 73, "target_dtyp": 73, "smoothquantsampl": 73, "alpha_list": 73, "weightonlyquantsampl": 73, "tuningitem": 74, "item_typ": 74, "capabl": [74, 97, 100, 107, 116, 117, 132, 145, 153, 154, 165, 176, 181, 193, 195, 196, 205, 207], "intern": [74, 135, 136, 152, 193], "merg": [74, 106, 169, 172, 203, 205], "tree": [74, 182], "pattern_to_intern": 74, "default_dtyp": 74, "pattern_to_path": 74, "quant_mode_from_pattern": 74, "internal_pattern": 74, "initial_tuning_cfg_with_quant_mod": 74, "op_name_typ": 74, "quant_mod": [74, 116, 117], "cfg": [74, 80, 116, 117], "step1": 74, "step2": 74, "complet": [74, 115, 116, 193, 196, 205, 207, 208], "step3": 74, "step4": 74, "step5": 74, "op_typ": [75, 98, 99], "op_quant_mod": 75, "quanttyp": 76, "quantopt": 76, "quant_typ": 76, "quant_opt": 76, "preprocess_user_cfg": 76, "op_user_cfg": 76, "op_user_cfg_modifi": 76, "group_siz": [76, 100, 105, 199], "32": [76, 96, 97, 104, 105, 141, 147, 156, 199, 208], "ordereddefaultdict": 76, "extract_data_typ": 76, "data_typ": 76, "sign": [76, 100, 107, 110, 114, 117, 133, 176, 194, 196, 199, 201], "unsign": [76, 117, 199], "reverted_data_typ": 76, "signed_flag": 76, "get_adaptor_nam": 76, "build_slave_faker_model": 76, "slave": [76, 205], "virtual": [76, 194], "classregist": 76, "loop": [77, 111, 112, 116, 117, 145, 184, 201, 205], "compressionmanag": 77, "deal": 77, "pruningconfig": 77, "orchestr": [77, 114, 148, 206], "callback": [77, 80, 111, 153, 192, 193, 196], "on_train_begin": [77, 111, 139, 140, 153, 192, 193, 196], "train_loop": [77, 153, 192], "epoch": [77, 135, 139, 140, 141, 153, 192, 193, 207], "on_epoch_begin": [77, 80, 139, 140, 153, 192], "batch": [77, 100, 135, 139, 140, 153, 192, 193, 196, 202, 204, 205, 208], "on_step_begin": [77, 80, 139, 140, 153, 192, 193], "on_after_compute_loss": [77, 139, 140, 153, 192], "backward": [77, 107, 139, 140, 141, 153, 192, 193, 196, 200], "on_before_optimizer_step": [77, 139, 140, 153, 192, 193], "on_step_end": [77, 80, 139, 140, 153, 192], "on_epoch_end": [77, 80, 139, 140, 153, 192], "on_train_end": [77, 139, 140, 153, 192, 193, 196], "path_to_sav": 77, "train_func": [77, 141, 153, 196], "top1": [77, 152, 176, 193, 196, 208], "callbacks_list": 77, "layerhistogramcollector": 78, "histogram": [78, 92, 176, 203], "num_bin": 78, "8001": [78, 182, 187, 188, 189], "layer_tensor": 78, "include_lay": 78, "collector": 78, "diverg": [78, 86, 117, 133, 139, 205], "get_func_from_config": 80, "func_dict": 80, "get_preprocess": 80, "get_metr": 80, "get_postprocess": 80, "get_algorithm": 80, "create_dataset": 80, "data_sourc": 80, "cfg_preprocess": 80, "cfg_filter": 80, "create_dataload": 80, "dataloader_cfg": 80, "create_eval_func": 80, "postprocess_cfg": 80, "interfac": [80, 97, 99, 101, 104, 107, 148, 153, 165, 183, 196, 200], "baselin": [80, 105, 201, 202, 203], "create_train_func": 80, "train_cfg": 80, "hook": [80, 139, 140, 153, 193, 202, 203], "Their": 80, "qlinear2qdq": 81, "check_model": 82, "onnx_qlinear_to_qdq": 82, "input_name_to_nod": 82, "qlinearop": [82, 138, 148, 165, 196, 208], "destin": 82, "tf_to_fp32_onnx": 83, "save_path": [83, 84, 115, 155], "inputs_as_nchw": 83, "tool": [83, 92, 107, 114, 115, 153, 167, 171, 177, 180, 181, 182, 193, 194, 196], "tf_to_int8_onnx": 83, "int8_model": [83, 84, 115], "get_node_map": 84, "fp32_model": [84, 92, 98, 99, 103, 104, 115, 197, 199], "fp32_onnx_path": 84, "module_node_map": 84, "get_quantizable_onnx_op": 84, "quantize_nod": 84, "dynamic_quant_export": 84, "pt_fp32_model": 84, "pt_int8_model": 84, "q_config": [84, 115], "weight_typ": 84, "s8": 84, "static_quant_export": 84, "_quantiz": 84, "torch_to_fp32_onnx": 84, "do_constant_fold": 84, "fold": [84, 98, 100, 145, 199, 202], "torch_to_int8_onnx": 84, "auxiliari": 85, "collect_layer_histogram": 85, "create_obj_from_config": 85, "kl_diverg": 85, "load_huggingfac": [85, 153], "neural_insights_util": 85, "weights_detail": 85, "pretrain": [87, 157, 163], "optimizedmodel": 87, "from_pretrain": [87, 114, 153], "save_for_huggingface_upstream": [87, 153], "output_dir": [87, 101, 153, 162, 163, 178, 179, 185, 188, 189], "export_compressed_model": [87, 199], "saved_dir": [87, 199], "use_optimum_format": [87, 199], "enable_full_rang": [87, 100, 197, 199], "compression_dtyp": [87, 199], "int32": [87, 100, 136, 199], "compression_dim": [87, 199], "scale_dtyp": [87, 100, 199], "_type_": 87, "leverag": [87, 95, 99, 102, 105, 107, 112, 114, 139, 143, 157, 174, 192, 196, 199, 205], "symmetr": [87, 104, 117, 196, 199, 204, 205], "comoress": 87, "float16": [87, 100, 136, 199], "msg": [88, 183, 187, 188], "debug": [88, 138, 167, 171, 175, 205, 206], "fatal": 88, "warn": [88, 134], "alia": [88, 92, 159, 164], "register_neural_insights_workload": 89, "workload_loc": [89, 92], "workload_mod": 89, "workload_nam": 89, "uuid": 89, "update_neural_insights_workload": 89, "workload_uuid": 89, "statu": [89, 101, 106, 109, 135, 156, 184, 187, 188, 189, 191, 193], "update_neural_insights_workload_accuracy_data": 89, "baseline_accuraci": 89, "optimized_accuraci": 89, "get_model_path": 89, "is_int8_model": 91, "load_weight_onli": 91, "checkpoint_dir": 91, "layer_wis": [91, 197], "qconfig": [91, 100, 199, 203], "best_model": [91, 97, 102, 103, 104, 105, 199], "pt": [91, 100, 149, 155, 178, 194, 196, 198, 199], "history_cfg": 91, "best_configur": 91, "best_model_weight": 91, "snapshot": [91, 178], "recover_model_from_json": 91, "json_file_path": 91, "recov": [91, 92, 115, 140], "cfg_from_fil": 92, "yaml_fil": [92, 136, 141], "version1_lt_version2": 92, "version1": 92, "version2": 92, "version1_gt_version2": 92, "greater": [92, 104, 187, 193, 205], "version1_eq_version2": 92, "version1_gte_version2": 92, "version1_lte_version2": 92, "time_limit": 92, "context": [92, 100, 107, 195, 199], "get_siz": 92, "seen": [92, 115], "recurs": 92, "compute_spars": 92, "non": [92, 100, 111, 138, 199, 205], "fault_tolerant_fil": 92, "temporari": [92, 109], "equal_dict": 92, "d1": 92, "d2": 92, "compare_kei": 92, "ignore_kei": 92, "except": [92, 100, 134, 180, 196, 197], "ignor": [92, 100, 107, 133, 136, 199, 202, 205], "combine_histogram": 92, "old_hist": 92, "arr": 92, "old": [92, 98, 153, 200], "get_tensor_histogram": 92, "tensor_data": [92, 93], "bin": [92, 144], "2048": [92, 100, 114, 199], "get_all_fp32_data": 92, "get_tuning_histori": 92, "tuning_history_path": 92, "num": 92, "offlin": [92, 98, 103, 104, 107, 109, 153, 196, 202], "str2arrai": 92, "dequantize_weight": 92, "weight_tensor": 92, "min_filter_tensor": 92, "max_filter_tensor": 92, "dequant": [92, 107, 111, 116, 202, 203], "scale_info": 92, "captureoutputtofil": 92, "tmp_file_path": 92, "stream": [92, 208], "sy": [92, 134, 160], "stderr": 92, "captur": [92, 99, 100], "global_st": 92, "load_data_from_pkl": 92, "pkl": [92, 178], "dump_data_to_loc": 92, "show_memory_info": 92, "hint": 92, "show": [92, 96, 107, 109, 139, 141, 153, 156, 160, 175, 176, 177, 179, 182, 187, 188, 189, 202, 205, 206], "dump_class_attr": 92, "dot": [92, 97, 107, 154, 196], "nest": 92, "person": [92, 109, 194], "john": 92, "deep": [92, 96, 97, 104, 107, 114, 115, 116, 135, 148, 149, 153, 154, 156, 157, 159, 162, 163, 165, 168, 174, 194, 196, 205, 206], "sex": [92, 109], "male": 92, "compare_object": 92, "obj1": 92, "obj2": 92, "ignore_attr": 92, "comparison": [92, 199, 200, 203], "alias_param": 92, "param_nam": 92, "param_alia": 92, "alias": [92, 134], "print_tabl": 92, "column_map": 92, "table_entri": 92, "titl": [92, 150, 175, 205], "insert_newlin": 92, "tabl": [92, 96, 117, 138, 143, 156, 177, 179, 208], "prettyt": 92, "column": [92, 100, 107, 199, 202], "handler": [92, 205], "row": [92, 107, 138, 177, 202], "decim": 92, "get_tensors_info": 92, "about": [92, 109, 134, 135, 153, 179, 180, 193, 198, 205, 206, 208], "get_weights_detail": 92, "weightdetail": 92, "dump_tabl": 92, "filepath": [92, 134], "file_typ": 92, "csv": [92, 112, 177, 178], "extens": [92, 97, 98, 99, 101, 107, 112, 114, 115, 134, 145, 148, 149, 151, 153, 154, 155, 158, 163, 164, 165, 169, 172, 173, 177, 193, 194, 196, 199, 202, 205, 206, 207], "dump_table_to_csv": 92, "get_number_of_socket": 92, "platform": [92, 106, 107, 114, 148, 157, 165, 184, 194, 196], "opentri": 92, "activation_min": 92, "activation_max": 92, "entri": [92, 101, 134, 150], "print_op_list": 92, "get_op_list": 92, "minmax_file_path": 92, "input_model_tensor": 92, "optimized_model_tensor": 92, "activation_min_max": 92, "calculate_ms": 92, "mse_metric_gap": 92, "fp32_tensor": 92, "dequantize_tensor": 92, "euclidean": [92, 139], "distanc": [92, 139], "check_key_exist": 92, "weightsdetail": 93, "input_tensor_data": 93, "optimized_tensor_data": 93, "weightsstatist": 93, "bitwidth": 95, "factor": [95, 98, 100, 104, 107, 199, 202, 208], "whole": [95, 107, 117, 176, 196, 208], "observ": [95, 99, 100, 101, 117, 199, 201, 203, 205], "runtim": [95, 107, 110, 114, 115, 116, 118, 135, 138, 142, 145, 148, 154, 156, 159, 164, 165, 195, 199, 200, 205], "w8a8": [95, 99, 100, 107, 197, 199], "x86inductorquant": 95, "four": [95, 99, 105, 184, 203, 208], "prepar": [95, 96, 98, 99, 100, 101, 104, 107, 111, 136, 141, 146, 176, 187, 188, 189, 193, 196], "neural_compressor": [95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 111, 112, 114, 117, 132, 134, 135, 136, 138, 139, 140, 141, 143, 146, 147, 152, 153, 154, 155, 156, 176, 177, 191, 192, 193, 195, 196, 197, 198, 200, 201, 202, 204, 205, 207], "dynamicquantconfig": 95, "userfloatmodel": [95, 99], "eager": [95, 99, 100, 101, 114, 141, 148, 196, 198, 203], "exported_model": [95, 99], "quant_config": [95, 96, 98, 99, 100, 101, 102, 103, 104, 156], "prepared_model": [95, 98, 99], "q": [95, 99, 101, 107, 199, 202], "dq": [95, 99, 101, 107, 202], "_inductor": [95, 99], "freez": [95, 99, 157, 193], "opt_model": [95, 99, 153], "set_loc": [95, 98, 99, 100, 101, 102], "releas": [95, 99, 114, 149, 163, 165, 167, 171, 173, 185, 188, 189, 209], "breakthrough": [96, 156], "emerg": [96, 156, 202], "analysi": [96, 156, 157, 174, 193, 201], "chatbot": [96, 156, 194], "fuel": [96, 156], "llm": [96, 98, 99, 100, 103, 107, 156, 193, 194, 197, 199, 202], "nevertheless": [96, 156], "power": [96, 104, 139, 153, 156, 168, 194], "come": [96, 151, 156, 205], "challeng": [96, 156, 197], "explos": [96, 156], "growth": [96, 97, 153, 154, 156, 193], "pose": [96, 156, 197], "obstacl": [96, 156], "practic": [96, 156], "preserv": [96, 100, 133, 156, 193, 199], "ai": [96, 114, 156, 157, 194, 198, 206], "mx": [96, 101, 156], "promot": [96, 100, 156], "microsoft": [96, 114, 115, 156], "msfp": [96, 156], "mxfp8": [96, 156], "fp8": [96, 101, 114, 156, 194], "e5m2": [96, 156], "e8m0": [96, 156], "e4m3": [96, 156], "mxfp6": [96, 156], "fp6": [96, 156], "e3m2": [96, 156], "e2m3": [96, 156], "mxfp4": [96, 156], "fp4": [96, 100, 114, 156, 199], "e2m1": [96, 100, 156, 199], "mxint8": [96, 156], "At": [96, 110, 116, 156, 180, 184, 205], "equival": [96, 98, 100, 103, 107, 114, 156, 194, 199, 202], "demonstr": [96, 105, 114, 142, 156, 157, 187, 188, 189, 203], "abil": [96, 115, 116, 136, 145, 156, 202], "occupi": [96, 156], "incur": [96, 156], "energi": [96, 156], "cost": [96, 100, 107, 156, 196, 199], "silicon": [96, 156], "seamlessli": [96, 156, 181, 193, 205], "offer": [96, 104, 136, 156], "meticul": [96, 156], "craft": [96, 156], "empow": [96, 156], "sacrif": [96, 156, 194], "workflow": [96, 114, 116, 117, 138, 139, 143, 149, 154, 156, 169, 172, 176, 203, 206], "shown": [96, 98, 107, 112, 135, 138, 139, 152, 153, 156, 168, 177, 179, 191, 192, 193, 197, 202, 205], "explor": [96, 115, 156], "focus": [96, 100, 104, 109, 115, 156], "distinct": [96, 156], "friendli": [96, 107, 145, 153, 156, 194, 202, 206, 207], "adapt": [96, 109, 116, 136, 156, 165, 194], "granular": [96, 107, 115, 116, 117, 145, 148, 156, 160, 196, 202, 207], "fall": [96, 156], "consumpt": [96, 107, 156, 202], "frac": [96, 107, 138, 156, 202], "amax": [96, 156], "blocksiz": [96, 156], "expon": [96, 156], "floor": [96, 156], "log2": [96, 156], "represent": [96, 100, 107, 109, 111, 133, 140, 156, 193, 196], "rmin": [96, 104, 107, 156, 196], "mxquantconfig": [96, 156], "w_dtype": [96, 98, 99, 156], "act_dtyp": [96, 98, 99, 102, 156], "woq": [96, 151, 156], "user_model": [96, 156], "darvish": [96, 156], "rouhani": [96, 156], "bita": [96, 156], "et": [96, 100, 107, 133, 156, 199, 202], "al": [96, 100, 107, 133, 156, 199, 202], "push": [96, 100, 107, 110, 156, 193, 199, 202], "narrow": [96, 156], "inferenc": [96, 156], "cloud": [96, 110, 114, 156, 184, 194], "33": [96, 151, 156, 208], "2020": [96, 156], "10271": [96, 156], "10281": [96, 156], "ocp": [96, 156], "learn": [96, 97, 100, 104, 107, 114, 115, 116, 135, 136, 143, 147, 148, 149, 153, 154, 156, 157, 159, 162, 163, 165, 168, 169, 172, 174, 193, 194, 196, 202, 203, 205, 206], "arxiv": [96, 100, 107, 114, 133, 156, 193, 194, 199, 202], "preprint": [96, 100, 107, 133, 156, 193, 199, 202], "2310": [96, 156], "10537": [96, 156], "2023": [96, 100, 107, 114, 156, 189, 193, 199, 202], "recent": [97, 153, 154], "significantli": [97, 100, 153, 154, 177, 179, 193, 205], "propos": [97, 100, 107, 112, 115, 139, 154, 199, 202], "googl": [97, 114, 134, 154, 194], "bfloat16": [97, 154, 157, 165, 198], "ieee": [97, 107, 154, 202], "half": [97, 100, 154, 165], "wide": [97, 100, 107, 114, 142, 154, 193, 196], "sixteen": [97, 154], "bandwidth": [97, 100, 107, 153, 154, 199], "3rd": [97, 107, 154, 194, 196, 198], "gen": [97, 107, 151, 154, 194, 196, 198], "xeon": [97, 106, 107, 114, 149, 150, 151, 154, 194, 196, 198, 208], "scalabl": [97, 104, 107, 114, 149, 151, 154, 194, 196, 198], "codenam": [97, 151, 154], "cooper": [97, 149, 154, 194], "lake": [97, 149, 154, 194], "boost": [97, 114, 154, 158, 174, 193, 194], "purpos": [97, 98, 99, 100, 102, 145, 154, 174, 176, 195, 196], "x86": [97, 154], "instruct": [97, 98, 107, 116, 117, 139, 149, 154, 169, 172, 176, 177, 178, 179, 193, 194, 195, 196, 202, 208], "part": [97, 107, 111, 149, 154, 169, 172, 182, 184, 193, 197, 202, 206], "avx512": [97, 107, 154, 196], "vcvtne2ps2bf16": [97, 154], "vcvtneps2bf16": [97, 154], "vdpbf16p": [97, 154], "product": [97, 107, 114, 148, 154, 157, 158, 174, 180, 194, 196, 201, 205], "found": [97, 114, 134, 139, 151, 154, 162, 179, 183, 202, 205, 208], "publish": [97, 109, 150, 151, 154, 175, 202], "4th": [97, 107, 151, 194, 196], "isa": [97, 165], "vector": 97, "512": [97, 100], "avx": 97, "16": [97, 136, 149, 187, 199, 208], "754": 97, "complement": [97, 193], "fbgemm": [97, 154, 196], "10004": [97, 100, 101, 106, 111, 112, 115, 135, 139, 140, 141, 145, 148, 154, 156, 192, 195, 197, 199, 207], "avx512_bf16": [97, 154], "11": [97, 107, 149, 152, 154, 176, 202, 205, 208], "avx512_fp16": 97, "mai": [97, 100, 103, 107, 109, 110, 116, 133, 134, 138, 143, 144, 150, 154, 167, 171, 177, 180, 182, 194, 196, 199, 202, 205], "mixprecisionconfig": 97, "eval_acc_fn": [97, 102, 104], "acc": [97, 102, 112, 151, 184, 193, 203, 208], "might": [97, 111, 134, 176, 205], "custom_tune_config": [97, 102, 103, 104, 105], "build_torch_model": 97, "acceler": [98, 100, 103, 107, 114, 139, 153, 157, 165, 174, 177, 181, 193, 194, 198, 199, 202, 205], "gigant": [98, 103, 202], "systemat": [98, 103, 202], "outlier": [98, 100, 103, 107, 116, 133, 138, 179, 199, 202], "quantif": [98, 100, 103, 199, 202], "difficult": [98, 103, 105, 107, 115, 202], "migrat": [98, 103, 107, 202, 206], "difficulti": [98, 103, 107, 202], "mathemat": [98, 103, 107, 202], "smoothquantconfig": [98, 103, 104], "run_fn": [98, 99, 100, 101], "descript": [98, 111, 116, 117, 135, 182, 186, 202], "stai": [98, 100, 101, 199, 202], "achiev": [98, 99, 100, 101, 102, 105, 107, 143, 151, 153, 177, 192, 193, 194, 196, 202, 203, 205], "abov": [98, 99, 100, 102, 107, 115, 116, 117, 139, 176, 177, 179, 182, 193, 196, 202, 205], "lambada": [98, 202], "openai": [98, 202], "sweet": [98, 202], "spot": [98, 202], "region": [98, 202], "paper": [98, 100, 107, 139, 193, 199, 202], "bigscienc": [98, 151, 202, 208], "bloom": [98, 107, 114, 151, 193, 202, 208], "560m": [98, 202], "354": [98, 202], "3542": [98, 202], "1b7": [98, 151, 202], "4634": [98, 202], "4936": [98, 202], "3b": [98, 151, 202], "518": [98, 202], "5185": [98, 202], "7b1": [98, 202, 208], "5764": [98, 202, 208], "5977": [98, 202], "bloomz": [98, 202, 208], "3947": [98, 202], "3930": [98, 202], "4828": [98, 202], "4906": [98, 202], "5018": [98, 202], "4980": [98, 202], "5593": [98, 202, 208], "5552": [98, 202], "facebook": [98, 151, 180, 202, 208], "opt": [98, 107, 114, 151, 162, 193, 202, 205, 208], "125m": [98, 114, 202], "379": [98, 202], "3757": [98, 202], "350m": [98, 202], "4516": [98, 202], "4533": [98, 202], "5789": [98, 202], "5742": [98, 202], "7b": [98, 151, 202, 208], "6365": [98, 202], "6404": [98, 202], "6769": [98, 202, 208], "6804": [98, 202, 208], "13b": [98, 151, 202, 208], "6872": [98, 202], "6814": [98, 202], "30b": [98, 151, 202, 208], "7149": [98, 202], "7128": [98, 202], "66b": [98, 202], "7398": [98, 202], "7326": [98, 202], "llama": [98, 114, 151, 193, 194, 197, 199, 202, 208], "7361": [98, 202, 208], "7357": [98, 202], "7627": [98, 202, 208], "7590": [98, 202], "7759": [98, 202, 208], "7840": [98, 202], "65b": [98, 202], "7908": [98, 202], "7957": [98, 202], "eleutherai": [98, 114, 151, 178, 202, 208], "gpt": [98, 114, 151, 178, 193, 202, 208], "j": [98, 107, 114, 151, 178, 193, 202, 208], "6b": [98, 151, 178, 202, 208], "6831": [98, 202, 208], "6821": [98, 107, 202], "mbzuai": [98, 202], "lamini": [98, 193, 202], "124m": [98, 202], "3804": [98, 202], "3887": [98, 202], "774m": [98, 202], "5048": [98, 202], "5057": [98, 202], "5b": [98, 202], "5443": [98, 202, 208], "5436": [98, 202], "mosaicml": [98, 202, 208], "mpt": [98, 193, 202, 208], "chat": [98, 151, 202, 208], "655": [98, 202, 208], "6499": [98, 202], "stabilityai": [98, 202], "stablelm": [98, 202], "4172": [98, 202], "4149": [98, 202], "togethercomput": [98, 202], "redpajama": [98, 202], "incit": [98, 202], "6542": [98, 202], "6735": [98, 202], "6718": [98, 202], "6740": [98, 202, 208], "6569": [98, 202], "6621": [98, 202], "v0": [98, 138, 151, 179, 202, 203], "7143": [98, 202], "7221": [98, 202], "6895": [98, 202], "6953": [98, 202, 208], "databrick": [98, 151, 202, 208], "dolli": [98, 151, 193, 202, 208], "6866": [98, 202, 208], "6297": [98, 202], "6247": [98, 202], "tiiuae": [98, 151, 202, 208], "falcon": [98, 114, 151, 193, 202, 208], "6437": [98, 202, 208], "6392": [98, 202], "asterisk": [98, 202], "gt": [98, 100, 136, 202, 204], "retrain": [99, 140], "involv": 99, "improv": [99, 100, 107, 110, 133, 134, 153, 157, 174, 175, 177, 193, 194, 196, 198, 199, 205, 206, 208], "philosophi": [99, 104, 196], "request": [99, 114, 182, 183, 184, 187, 188, 189, 196], "would": [99, 107, 110, 153, 178, 193, 196, 202], "appropri": [99, 105, 107, 109, 133, 202], "crucial": [99, 193], "occur": 99, "jit": [99, 157, 159, 164, 202, 203], "effect": [99, 100, 115, 193, 194], "intel_extension_for_pytorch": 99, "staticquantconfig": [99, 102, 103, 104, 105], "act_sym": [99, 102, 104, 105], "act_algo": 99, "minmax": [99, 116, 117, 133, 145, 196, 207], "begin": [99, 134, 135, 139, 140, 153, 193, 205], "program": [99, 114, 141, 150, 157, 174], "fc1": 99, "dynamo": [99, 101], "qd": 99, "final": [99, 107, 116, 153, 160, 191, 193, 196, 200, 205], "As": [100, 107, 111, 116, 135, 139, 152, 153, 168, 179, 193, 199, 205], "becom": [100, 107, 115, 143, 193, 199], "preval": [100, 107, 199], "grow": [100, 107, 199], "demand": [100, 107, 199], "modern": [100, 107, 159, 199], "trade": [100, 107, 199], "off": [100, 107, 110, 199], "bottleneck": [100, 107, 199], "deploi": [100, 105, 107, 110, 139, 153, 180, 184, 199, 205], "roughli": [100, 107, 199], "speak": [100, 107, 199], "move": [100, 107, 111, 180, 195, 199, 200], "count": [100, 107, 112, 136, 199], "p": [100, 107, 175, 176, 199], "theoret": [100, 107, 196, 199], "capac": [100, 107, 199, 201], "flop": [100, 107, 199], "forward": [100, 107, 116, 153, 176, 193, 195, 196, 199, 202, 203], "f": [100, 107, 134, 139, 141, 196, 199, 202], "famou": [100, 107, 199], "next": [100, 107, 112, 116, 117, 135, 195, 199, 205], "scenario": [100, 101, 107, 115, 132, 139, 153, 193, 199], "approx": [100, 107, 199], "bmm": [100, 107, 199], "past": [100, 107, 115, 199], "howev": [100, 107, 180, 193, 199, 202], "100x": [100, 107, 199], "besid": [100, 107, 115, 139, 179, 199], "mention": [100, 107, 193, 199], "main": [100, 101, 102, 104, 106, 107, 111, 135, 138, 141, 153, 161, 163, 175, 184, 193, 196, 199], "reason": [100, 107, 109, 116, 135, 179, 199, 203, 205], "caus": [100, 107, 116, 135, 158, 177, 179, 193, 199], "straightforward": [100, 104, 107, 193, 199, 202], "group": [100, 107, 114, 148, 193, 199, 203, 204, 205, 208], "introduc": [100, 107, 115, 116, 117, 145, 153, 196, 199, 200, 202, 206], "think": [100, 199], "veri": [100, 107, 153, 175, 179, 196, 199, 205, 206], "intuit": [100, 107, 199, 202], "uniformli": [100, 199], "qlora": [100, 107, 199], "uniform": [100, 133, 199], "nf4": [100, 114, 199], "prove": [100, 107, 133, 199, 202], "shot": [100, 104, 112, 148, 153, 193, 194, 199], "highli": [100, 194, 199], "invers": [100, 199], "share": [100, 107, 144, 145, 199, 202, 205], "restor": [100, 199], "tailor": 100, "consist": [100, 110, 111, 134, 182, 202, 205], "deliv": [100, 153, 194, 200], "often": [100, 135, 139, 179, 192, 193], "outperform": [100, 112], "signround": 100, "protect": [100, 199], "salient": [100, 193, 199], "greatli": [100, 197, 199], "big": [100, 138, 199], "trainabl": [100, 114, 194, 199], "inspir": [100, 199], "rather": [100, 147, 199], "addition": [100, 117, 141, 193, 205], "incorpor": [100, 116, 117, 140, 193, 205], "l": [100, 106, 133, 139, 203, 205], "norm": 100, "hyper": [100, 207], "laplacian": 100, "heavi": [100, 140], "tail": 100, "nuanc": 100, "weightonlyqu": 100, "c_": [100, 199], "use_sym": [100, 105], "quant_lm_head": 100, "use_double_qu": 100, "double_quant_dtyp": 100, "double_quant_bit": 100, "double_quant_use_sym": 100, "double_quant_group_s": 100, "along": [100, 149, 193, 199], "normalfloat": [100, 199], "bnb": [100, 199], "lm": [100, 193], "head": [100, 193], "emb": 100, "doubl": [100, 194], "rtn_arg": [100, 197, 199], "comment": [100, 106, 109, 116, 136, 152, 153, 199, 204], "group_dim": [100, 199], "use_full_rang": 100, "use_mse_search": 100, "use_layer_wis": 100, "model_path": [100, 138, 187], "state_dict": [100, 141, 199, 203], "rtnconfig": [100, 101, 105], "gptq_arg": [100, 199], "act_ord": 100, "diagon": [100, 199], "rearrang": [100, 193, 199], "percdamp": [100, 199], "stabil": [100, 199], "block_siz": [100, 199], "c_out": 100, "static_group": [100, 199], "mitig": [100, 199], "actord": [100, 199], "gptqconfig": [100, 105], "autoround_arg": 100, "lr_schedul": [100, 153, 193], "rate": [100, 107, 153, 193, 196], "enable_quanted_input": 100, "enable_minmax_tun": 100, "minmax_lr": 100, "low_gpu_mem_usag": 100, "seqlen": [100, 114], "n_sampl": 100, "rand": [100, 107, 157, 202], "n_block": [100, 199], "gradient_accumulate_step": 100, "gradient": [100, 107, 114, 148, 153, 193, 194, 208], "not_use_best_ms": 100, "dynamic_max_gap": 100, "gap": [100, 138, 155], "autoroundconfig": 100, "awq_arg": [100, 199], "use_auto_scal": 100, "use_auto_clip": 100, "clip": [100, 107, 199, 202], "awqconfig": 100, "teq_arg": 100, "teqconfig": 100, "train_fn": 100, "hqq_arg": 100, "quant_zero": 100, "quant_scal": 100, "scale_quant_group_s": 100, "hqqconfig": 100, "lm_head": [100, 193, 199], "lm_head_config": 100, "quantit": 100, "weightonlylinear": [100, 199], "flexibl": [100, 104, 114, 139, 181, 193, 199], "storag": [100, 107, 146, 152, 176, 179, 199, 202], "date": [100, 199], "saved_result": [100, 101, 155, 178, 199], "orig_model": 100, "yourmodel": 100, "loaded_model": 100, "original_model": 100, "xiao": [100, 107, 199, 202], "guangxuan": [100, 107, 199, 202], "2211": [100, 107, 199, 202], "10438": [100, 107, 199, 202], "wei": [100, 107, 199, 202], "xiui": [100, 107, 199, 202], "suppress": [100, 107, 199, 202], "2209": [100, 107, 199, 202, 208], "13325": [100, 107, 199, 202], "lin": [100, 107, 199], "ji": [100, 107, 199], "2306": [100, 107, 199], "00978": [100, 107, 199], "frantar": [100, 107, 193, 199], "elia": [100, 107, 199], "2210": [100, 107, 199], "17323": [100, 107, 199], "cheng": [100, 107], "wenhua": [100, 107], "via": [100, 107, 109, 114, 141, 148, 153, 157, 174, 193, 194], "descent": [100, 107, 114, 194], "2309": [100, 107], "05516": [100, 107], "badri": 100, "hicham": 100, "shaji": 100, "appu": 100, "quadrat": 100, "onlin": [100, 109, 201], "mobiusml": 100, "io": [100, 180], "hqq_blog": 100, "dettmer": [100, 107, 199], "tim": [100, 107, 199], "finetun": [100, 107, 177, 193, 199], "2305": [100, 107, 199], "14314": [100, 107, 199], "integr": [101, 104, 107, 115, 153, 175, 176, 181, 199], "grain": [101, 193, 194, 205], "comprehens": [101, 104, 153, 206], "varieti": [101, 105, 142, 195, 205], "classic": [101, 205], "latest": [101, 114, 149, 194, 200], "research": [101, 114, 150, 202, 208], "simul": [101, 117], "emul": [101, 107, 153, 196], "term": [101, 104, 110, 133, 139, 150, 152, 191, 192, 205], "eas": [101, 104, 149, 159, 194], "commit": [101, 104, 109, 110], "extend": [101, 116, 117], "hand": [101, 104, 112], "reus": 101, "conveni": [101, 153, 181], "discuss": [101, 114], "far": 101, "still": [101, 103, 107, 133, 153, 180, 194, 196, 198], "reli": [101, 153, 202], "plan": [101, 148], "arbitrari": [101, 153, 192], "deploy": [101, 137, 157, 174, 194, 197, 202], "One": [101, 117, 134, 136, 141, 148, 179, 193, 194, 205], "scope": [101, 110, 116, 153], "direct": [101, 193], "inplac": 101, "place": [101, 140, 149, 187, 193, 203, 205], "run_arg": 101, "_description_": 101, "renam": [101, 200], "previou": [101, 107, 116, 117, 153, 193, 200, 202, 203, 205, 206, 208], "orig_sav": 101, "suggest": [101, 111, 134, 201], "rtn": [101, 107, 134, 197, 199], "gptq": [101, 107, 134, 151, 197, 199], "awq": [101, 107, 197, 199], "autoround": [101, 107, 114, 151], "teq": [101, 114, 194, 197, 199], "hqq": 101, "trane": 101, "torchdynamo": [101, 164], "pytorchdynamo": 101, "logic": [101, 207], "torchimport": 101, "operator_name_or_list": 101, "demo": [101, 153], "mlp": [101, 193], "conv1d": [101, 117], "fundament": [102, 103, 133, 153], "fulli": [102, 153, 182, 196, 202], "respons": [102, 187, 188, 189, 196], "val_dataset": [102, 153, 196], "val_dataload": [102, 153, 196], "mydataload": [102, 104, 105], "quantize_model": [102, 103, 104, 107], "qmodel": [102, 104], "good": [102, 109, 196, 205], "autotun": [102, 103, 104, 107, 134], "weight_sym": [102, 104, 105], "static_qu": [102, 134], "weight_dtyp": 102, "weight_granular": 102, "per_tensor": [102, 116, 117, 145, 196, 207], "act_granular": 102, "from_dict": 102, "conv2d_config": 102, "output_graph_def": 103, "sq_config": 103, "static_config": 103, "fusion": [103, 111, 115, 145], "look": [103, 115, 117, 145, 152, 176, 177, 179, 202, 207], "eval_fn_wrapp": 103, "consider": [103, 202], "amount": [103, 202], "saved_model": [104, 197], "experi": [104, 109, 157, 179, 201, 202, 205], "calib_iter": [104, 116], "rule": [104, 138, 157, 193], "partial": [104, 193, 196], "particularli": 104, "critic": [104, 109], "And": [104, 107, 110, 111, 132, 134, 153, 160, 202], "supplement": 104, "baseline_model": [104, 105], "asymmetr": [104, 117, 196, 199, 205], "onednn": [104, 154, 196], "ab": [104, 107, 193, 196, 202], "rmax": [104, 107, 196], "sq": [104, 151, 202], "unseen": [104, 107, 196], "zeropoint": [104, 107, 196], "unlik": 104, "tradit": [104, 160, 193], "signific": [104, 107, 193, 194, 197, 202], "refin": [104, 147, 193], "instal": [104, 141, 144, 146, 157, 159, 162, 165, 169, 172, 174, 175, 177, 178, 179, 209], "aim": [105, 112, 114, 151, 157, 193, 202, 205, 206], "help": [105, 107, 134, 151, 155, 157, 163, 174, 182, 187, 188, 189, 199, 205, 206], "quickli": [105, 151, 205, 206], "despit": 105, "consum": [105, 135], "certain": [105, 201], "predefin": 105, "primari": [105, 133, 205], "get_woq_tuning_config": 105, "travers": [105, 116, 117, 199, 205], "compon": [105, 111, 134, 138, 141, 149, 150, 157, 174, 182, 192, 193], "incbench": 106, "launch": [106, 154, 175, 180], "numa": 106, "therefor": [106, 107, 111, 153, 177, 179, 193, 196, 197, 200, 202], "linux": [106, 132, 144, 168, 174], "num_inst": 106, "num_cores_per_inst": 106, "num_cores_on_numa": 106, "visibl": 106, "cross_memori": 106, "alloc": [106, 184], "insuffici": 106, "num_i": 106, "num_c": 106, "24": [106, 193, 205, 208], "47": [106, 151, 208], "messag": [106, 110, 182, 183, 187, 188, 189, 205], "throughput_pattern": 106, "hroughput": 106, "za": 106, "z": [106, 107, 133, 134, 139, 202], "latency_pattern": 106, "atenc": 106, "3f": 106, "sec": [106, 208], "invent": [107, 196], "speed": [107, 133, 153, 165, 193, 194, 196, 205], "int4": [107, 114, 151, 196, 208], "mainli": [107, 114, 153, 193, 196], "miss": [107, 193, 196], "On": [107, 196, 208], "4x": [107, 112, 196], "speedup": [107, 142, 148, 196], "255": [107, 196, 202], "math": [107, 196], "sometim": [107, 111, 138, 196], "overflow": [107, 196], "issu": [107, 109, 110, 113, 114, 149, 177, 179, 196, 203], "due": [107, 117, 143, 193, 196, 202, 203], "vnni": [107, 142, 148, 195, 196], "solv": [107, 110, 196, 200], "coarsest": [107, 202], "finer": [107, 202, 205], "2d": [107, 202], "matric": [107, 202], "3d": [107, 194, 202], "similarli": [107, 202], "finest": [107, 202], "individu": [107, 109, 182, 193, 202], "adopt": [107, 110, 157, 193, 194, 202], "bring": [107, 168, 181, 202], "why": [107, 202, 203], "suppos": [107, 202], "6839": [107, 202], "4741": [107, 202], "7451": [107, 202], "9301": [107, 202], "1742": [107, 202], "6835": [107, 202], "formula": [107, 193, 202], "num_bit": [107, 202], "q_min": [107, 202], "q_max": [107, 202], "zp": [107, 202], "q_x": [107, 202], "clamp_": [107, 202], "round_": [107, 202], "w_q": [107, 202], "00296431384049356": [107, 202], "59": [107, 151, 202, 208], "172": [107, 202, 208], "192": [107, 202], "w_dq": [107, 202], "2220": [107, 202], "1510": [107, 202], "2420": [107, 202], "2570": [107, 202], "0500": [107, 202], "1890": [107, 202], "mseloss": [107, 202], "1983354538679123": [107, 202], "6848": [107, 202], "4743": [107, 202], "7440": [107, 202], "9308": [107, 202], "1749": [107, 202], "385297635664756e": [107, 202], "07": [107, 151, 202, 207, 208], "affect": [107, 202], "quantize_per_channel": [107, 202], "x_tmp": [107, 202], "detach": [107, 202], "reshap": [107, 202], "keepdim": [107, 202], "divid": [107, 135, 184, 202, 205], "dequantize_per_channel": [107, 202], "0029": [107, 202, 208], "0036": [107, 202], "162": [107, 202, 208], "48": [107, 202, 208], "72": [107, 151, 202, 208], "93": [107, 151, 202, 208], "207": [107, 202, 208], "139": [107, 202, 208], "6837": [107, 202], "4734": [107, 202], "1751": [107, 202], "637690492221736e": [107, 202], "6376e": [107, 202], "3852e": [107, 202], "cdot": [107, 202], "quantize_per_tensor_absmax": [107, 202], "n_bit": [107, 202], "div_": [107, 202], "0806": [107, 202], "7589": [107, 202], "6038": [107, 202], "3815": [107, 202], "5040": [107, 202], "7174": [107, 202], "5444": [107, 202], "5826": [107, 202], "7772": [107, 202], "5555": [107, 202], "3740": [107, 202], "3253": [107, 202], "0698": [107, 202], "1381": [107, 202], "5972": [107, 202, 208], "0086": [107, 202], "0737": [107, 202], "8298": [107, 202], "6883": [107, 202], "2991": [107, 202], "1601": [107, 202], "6506": [107, 202], "8246": [107, 202], "3924": [107, 202], "3845": [107, 202], "8768": [107, 202], "w_scale": [107, 202], "x_q": [107, 202], "x_scale": [107, 202], "13": [107, 144, 149, 176, 200, 202, 208], "84": [107, 151, 202, 208], "120": [107, 202], "0059755356051027775": [107, 202], "83": [107, 201, 202, 208], "89": [107, 151, 202, 208], "119": [107, 202], "85": [107, 201, 202, 208], "57": [107, 151, 202, 208], "91": [107, 199, 202, 208], "006533813662827015": [107, 202], "y_q": [107, 202], "17509": [107, 202], "7608": [107, 202], "4055": [107, 202], "16599": [107, 202], "21020": [107, 202], "10016": [107, 202], "9860": [107, 202], "22444": [107, 202], "y_dq": [107, 202], "6836": [107, 202], "2970": [107, 202], "1583": [107, 202], "6481": [107, 202], "8207": [107, 202], "3911": [107, 202], "3850": [107, 202], "8763": [107, 202], "major": [107, 147, 179, 196, 202], "peopl": [107, 196], "though": [107, 202], "simplic": [107, 202], "present": [107, 138, 182, 194, 202], "1x2": [107, 202], "2x2": [107, 202], "obtain": [107, 111, 116, 182, 193, 201, 202, 205], "middl": [107, 180, 202], "denot": [107, 202], "fp1": [107, 202], "fp2": [107, 202], "subsect": [107, 202, 207], "even": [107, 197, 199, 202], "lot": [107, 111, 179, 202], "briefli": [107, 153, 202], "similar": [107, 153, 178, 195, 202, 205, 207], "idea": [107, 114, 176, 193, 202, 205], "attach": [107, 139, 153, 202], "x1": [107, 202, 205], "x2": [107, 202, 205], "layernorm": [107, 202], "excel": [107, 199], "mimic": [107, 196], "done": [107, 111, 139, 140, 158, 174, 183, 187, 188, 193, 196], "adjust": [107, 165, 196, 202], "fact": [107, 196], "ultim": [107, 196], "pain": [107, 196], "brought": [107, 155, 158, 165, 196], "lossi": [107, 196], "respect": [107, 109, 145, 193, 202, 207], "chart": [107, 179, 196, 201, 203], "understand": [107, 180, 196, 203, 206], "yvinec": [107, 202], "edouard": [107, 202], "proceed": [107, 202], "cvf": [107, 202], "winter": [107, 202], "confer": [107, 193, 202], "vision": [107, 114, 143, 161, 202], "welcom": [108, 109, 110, 114, 176, 183, 209], "interest": [109, 114, 176, 203], "foster": 109, "particip": [109, 184], "commun": [109, 176], "harass": 109, "everyon": 109, "regardless": 109, "ag": 109, "bodi": 109, "ethnic": 109, "characterist": 109, "gender": 109, "ident": [109, 139], "educ": 109, "socio": 109, "econom": 109, "appear": [109, 168, 174, 176], "race": 109, "religion": 109, "sexual": 109, "orient": 109, "behavior": [109, 115, 116, 117, 145, 155, 199, 203, 205, 207], "contribut": [109, 114, 193], "inclus": 109, "Being": 109, "viewpoint": 109, "gracefulli": 109, "empathi": 109, "toward": [109, 139], "member": [109, 115], "unaccept": 109, "imageri": 109, "unwelcom": 109, "troll": 109, "insult": 109, "derogatori": 109, "polit": 109, "attack": 109, "public": [109, 169, 172], "privat": 109, "electron": 109, "explicit": 109, "permiss": 109, "inappropri": 109, "profession": 109, "clarifi": 109, "fair": 109, "action": [109, 169, 172], "edit": 109, "reject": 109, "wiki": 109, "ban": 109, "temporarili": 109, "perman": [109, 193], "thei": [109, 134, 139, 145, 153, 162, 177, 180, 191], "deem": 109, "threaten": 109, "offens": 109, "harm": 109, "mail": 109, "social": [109, 194], "media": [109, 194], "account": [109, 201, 205], "act": 109, "appoint": 109, "event": [109, 203], "abus": 109, "report": [109, 110, 114, 184, 201], "contact": [109, 200, 201], "complaint": 109, "review": [109, 110, 114, 194], "investig": [109, 134, 179], "necessari": [109, 112, 116, 155, 175, 193, 201, 205], "circumst": [109, 195], "oblig": [109, 180], "confidenti": [109, 176], "regard": [109, 198], "incid": 109, "separ": [109, 134, 147, 150, 182, 184, 192, 195], "faith": 109, "face": [109, 114, 122, 157, 161, 181, 183, 194, 200, 208], "repercuss": 109, "leadership": 109, "faq": [109, 114], "page": [109, 110, 176, 179, 180], "send": [110, 116], "view": [110, 114, 142, 165, 174, 180, 200], "star": 110, "repositori": [110, 169, 172], "button": [110, 148, 168, 174], "fork": [110, 169, 172], "clone": [110, 138, 149, 167, 171, 176, 178, 179, 181, 182], "pc": 110, "git": [110, 138, 144, 149, 176, 178, 179, 181, 182], "branch": 110, "modif": [110, 115, 145, 162, 181], "checkout": 110, "my": 110, "unit": [110, 182, 193], "cover": [110, 143, 147, 194], "certif": [110, 176], "agre": 110, "pr": [110, 135, 152, 169, 172, 200], "least": [110, 153, 193, 205], "approv": 110, "licens": 110, "azur": [110, 114, 194], "devop": 110, "ci": 110, "e16": 110, "v5": 110, "scan": [110, 114], "pylint": 110, "bandit": 110, "copyright": [110, 150], "docstyl": 110, "spellcheck": 110, "dco": 110, "pytest": 110, "No": [110, 134, 144, 153, 182, 183, 194], "failur": [110, 111], "fault": 110, "coverag": 110, "submit": [110, 181, 184, 194], "bug": [110, 114], "intend": 110, "safe": 110, "collabor": [110, 114, 159, 165], "adher": 110, "toolkit": [111, 149, 157, 165, 194, 206], "tracer": 111, "graphmodul": [111, 198], "resolv": [111, 113], "floatfunct": 111, "cat": [111, 143, 160, 187, 188, 189], "relu": [111, 145, 202, 203], "batchnorm": [111, 202], "eval": [111, 134, 135, 138, 157, 196, 203], "fail": [111, 135, 143, 183], "conduct": [111, 153, 162, 174, 205, 206], "imper": 111, "successfulli": [111, 114, 141, 183, 187, 188, 189, 194], "traceabl": 111, "proxi": 111, "tutori": [111, 165, 194, 206], "prototyp": 111, "html": [111, 114, 116, 133, 141, 148, 169, 172, 175, 177, 183, 187, 196], "highlight": 111, "untrac": 111, "ssd": [111, 143, 208], "resnet34": [111, 208], "r34": 111, "bboxes_labels_scor": 111, "prob": 111, "45": [111, 151, 208], "max_output": 111, "zip": [111, 183, 187, 188], "squeez": 111, "dbox": 111, "dlabel": 111, "dscore": 111, "decode_singl": 111, "autom": [112, 157, 174, 175, 194, 202], "artifici": 112, "ann": 112, "par": [112, 184], "potenti": [112, 138], "procedur": [112, 193, 205], "lie": [112, 133], "pareto": 112, "front": 112, "predictor": 112, "typic": [112, 114, 140, 142, 146, 179, 193, 208], "figur": [112, 167, 168, 171, 197], "popul": 112, "inner": 112, "evolutionari": 112, "cycl": 112, "until": [112, 116, 205], "conclud": 112, "yet": [112, 169, 172, 175, 182, 196], "simplest": [112, 133, 160], "launcher": [112, 114, 139, 140, 165, 206], "experiment": [112, 136, 140, 141, 143, 149, 153, 193, 195, 196, 200, 204], "agent": 112, "nsga2": 112, "supernet": 112, "ofa_mbv3_d234_e346_k357_w1": 112, "mac": [112, 175], "num_ev": 112, "250": [112, 193], "results_csv_path": 112, "search_result": 112, "dataset_path": 112, "ilsvrc2012": 112, "nasbas": 112, "mobilenetv3": 112, "lt": [112, 136], "wmt": 112, "en": 112, "de": 112, "guidelin": [113, 114], "mainstream": [114, 206], "particular": [114, 193, 199], "flex": [114, 149], "amd": [114, 149, 208], "arm": [114, 148, 149, 208], "nvidia": [114, 133, 148, 149, 208], "llama2": 114, "broad": [114, 148, 163, 206], "stabl": [114, 149, 193, 194], "diffus": [114, 194], "hub": [114, 142, 146, 165], "hug": [114, 181, 194], "coder": [114, 148, 158, 159, 162, 165, 168, 181, 185, 194], "marketplac": [114, 175, 194], "amazon": [114, 157, 165], "web": [114, 176, 182, 187, 188, 189, 203], "servic": [114, 174, 181, 194], "softwar": [114, 150, 193, 194, 200], "alibaba": [114, 164, 171, 172, 194], "tencent": [114, 194], "taco": [114, 194], "oliv": [114, 194], "ecosystem": [114, 194], "lightn": [114, 164], "2024": [114, 208], "03": [114, 151, 208], "sota": [114, 194], "gaudi2": 114, "pip": [114, 138, 141, 144, 146, 149, 159, 162, 167, 169, 171, 172, 176, 177, 178, 179, 200], "34": [114, 151, 189, 208], "packag": [114, 115, 134, 144, 149, 174, 175, 194, 200, 205], "docker": 114, "gaudi": 114, "stack": 114, "setup": [114, 138, 145, 149, 169, 172, 176, 178, 179, 181, 182, 193], "interact": [114, 180, 201], "shell": [114, 203], "habana": 114, "habana_visible_devic": 114, "ompi_mca_btl_vader_single_copy_mechan": 114, "cap": 114, "sys_nic": 114, "host": [114, 141, 182, 184, 187, 188, 189], "ipc": 114, "vault": 114, "ubuntu22": 114, "04": [114, 149, 208], "habanalab": 114, "optimum": [114, 164, 165, 177, 199], "upgrad": [114, 153], "auto_round": 114, "automodel": 114, "autotoken": [114, 153], "torch_util": [114, 197, 202], "get_dataload": 114, "neo": [114, 208], "float_model": 114, "trust_remote_cod": 114, "woq_conf": 114, "quantized_model": [114, 183, 187, 188], "resnet18": [114, 154, 159, 208], "static_quant_conf": 114, "overview": [114, 205], "jupyterlab": [114, 157, 163, 165, 167, 171, 206], "studio": [114, 165, 174, 184, 206], "topic": 114, "innov": [114, 165, 194], "blog": [114, 194], "june": [114, 194], "qwen2": [114, 194], "meta": [114, 151, 194, 208], "apr": [114, 194], "emnlp": [114, 194], "sep": [114, 194], "legal": [114, 209], "secur": [114, 176, 194, 209], "ask": [114, 149], "email": 114, "discord": 114, "join": [114, 177, 182, 187, 188], "technic": 114, "wechat": [114, 194], "img": 114, "bridg": [115, 116, 148], "vanilla": [115, 116, 148], "adaptor_registri": 115, "abcadaptor": 115, "__init__": [115, 134, 135, 136, 152, 205], "framework_specific_info": 115, "tune_cfg": [115, 117, 205], "query_fw_cap": [115, 117], "query_fused_pattern": 115, "he": 115, "describ": [115, 117, 134, 138, 145, 176, 203], "hidden": 115, "mainten": 115, "clear": [115, 145, 152, 153], "fragment": 115, "scheme": [115, 116, 117, 135, 145, 165, 199, 205, 207], "semant": [115, 145], "querybackendcap": [115, 116], "tensorflowqueri": 115, "mla": [115, 154, 196], "qtype": 115, "onnxrt_qlinearopsadaptor": 115, "data_load": 115, "inspect_tensor": 115, "op_list": [115, 203], "iteration_list": 115, "inspect_typ": 115, "save_to_disk": 115, "quantization_cfg": 115, "set_tensor": 115, "tensor_dict": 115, "input_graph": 115, "diagnosis_help": 115, "fw": 116, "outlin": [116, 117], "accommod": [116, 117], "diagram": [116, 117, 138, 205], "illustr": [116, 117, 140, 205], "sequencediagram": [116, 117, 184], "autonumb": [116, 117], "query_framework_cap": 116, "opwis": 116, "optypewis": 116, "\u2776": 116, "\u2777": 116, "\u2778": 116, "\u2779": 116, "\u277a": 116, "\u277b": 116, "\u277c": 116, "These": [116, 148, 177], "chapter": 116, "node_op": 116, "confirm": 116, "chosen": [116, 133], "conv2d": [116, 117, 138, 143, 145, 179, 202, 203, 205], "int8_conv_config": 116, "optype_wise_": 116, "per_channel": [116, 117, 145, 196, 207], "sym": [116, 117, 145, 196, 199, 207], "tuning_cfg_to_fw": 116, "Its": [116, 133, 193], "quantize_config": 116, "op_wise_config": 116, "dispatch": [116, 148, 181, 184], "is_perchannel": 116, "is_asymmetr": 116, "weight_bit": 116, "bf16_op": [116, 198], "convert_bf16": 116, "got": [116, 144, 203], "subsequ": [116, 157, 174], "calib": 116, "somewhat": 116, "distort": 116, "line": [116, 134, 141, 148, 157, 162, 163, 182, 203], "let": [117, 145, 162, 193, 195, 207], "overal": [117, 182, 199, 207], "drive": 117, "section": [117, 134, 138, 139, 140, 174, 177, 180, 193, 195, 199, 207], "uint4": 117, "asym": [117, 145, 199, 207], "independ": 117, "kullback": [117, 139], "leibler": [117, 139], "pytorch_cpu": 117, "1_11_capabl": 117, "cap_s8_1_11": 117, "cap_s8_1_11_conv1d": 117, "state": [117, 160, 193], "per_channel_symmetr": 117, "per_tensor_symmetr": 117, "nativ": 117, "with_arg": 117, "qscheme": 117, "torch_dtyp": 117, "quant_min": 117, "quant_max": 117, "x86_64": 132, "aarch64": 132, "sure": [132, 176], "benefici": 133, "\u03b2": 133, "\u03b1": 133, "focu": [133, 205], "essenti": [133, 144], "percentil": 133, "remaind": 133, "enhanc": [133, 157, 193, 194, 198], "resolut": 133, "extrem": 133, "retain": 133, "noteworthi": 133, "vanhouck": 133, "vincent": 133, "andrew": 133, "senior": 133, "mark": 133, "mao": 133, "2011": 133, "szymon": 133, "migacz": 133, "tensorrt": [133, 154, 196], "2017": 133, "mckinstri": 133, "jeffrei": 133, "discov": [133, 203], "embed": [133, 193], "1809": 133, "04191": 133, "2018": 133, "mostli": 134, "summar": [134, 139], "conflict": [134, 144], "overli": 134, "argu": 134, "decis": [134, 152], "pep": 134, "tile": 134, "o": [134, 149, 159, 177], "sub_modul": 134, "namespac": 134, "pollut": 134, "subprocess": [134, 135], "popen": 134, "statement": 134, "pipe": 134, "long_str": 134, "extran": 134, "__version__": 134, "placehold": 134, "pager": 134, "getenv": 134, "readabl": 134, "seem": 134, "worth": [134, 193], "4f": 134, "65421": 134, "sentenc": 134, "eval_result": 134, "declar": [134, 175], "typealia": 134, "_lossandgradi": 134, "complextfmap": 134, "xx_func": 134, "ordereddict": 134, "pylanc": 134, "cheeseshopaddress": 134, "chees": 134, "shop": 134, "outofcheeseerror": 134, "crbug": 134, "192795": 134, "cpufreq": [134, 160], "facilit": [134, 157], "__all__": 134, "know": [134, 141, 200], "algorithm_entri": 134, "snippet": [134, 148], "register_algo": 134, "rtn_algo_entri": 134, "smooth_quant_entri": 134, "vscode": [134, 173, 175], "settings_recommend": 134, "encount": 135, "previous": 135, "lack": [135, 144], "faster": [135, 137, 143, 194, 205, 208], "treat": 135, "Of": 135, "collate_fn": [135, 136], "last_batch": 135, "evenli": 135, "discard": 135, "throw": 135, "awai": 135, "rollov": 135, "draw": [135, 201, 205], "batch_sampl": 135, "num_work": [135, 153, 196], "pin_memori": 135, "pin": [135, 167, 171], "shuffl": [135, 153, 196], "reshuffl": 135, "manner": [135, 139, 155], "newdataload": 135, "input_data": 135, "customis": [135, 136, 152], "ensp": [136, 204], "imagerecord": [136, 141, 207], "image_nam": 136, "cocorecord": 136, "int64": 136, "style_transf": 136, "content": [136, 182, 183, 187, 188, 189], "tfrecorddataset": 136, "spars": [136, 194], "post_training_static_qu": [136, 153, 195, 205], "labelbal": 136, "300": [136, 193], "idx": 136, "helloworld": [136, 154, 204], "aid": 137, "infrastructur": 137, "diagnos": 138, "gui": [138, 148, 179, 193], "termin": [138, 167, 168, 171, 177], "satisfi": [138, 149, 180], "repeat": [138, 205], "durat": [138, 183, 187, 188, 201], "cd": [138, 141, 149, 176, 178, 179, 181, 182, 187, 188, 189], "ilsvr2012": 138, "wget": [138, 144, 146, 176, 179], "caff": 138, "berkeleyvis": 138, "caffe_ilsvrc12": 138, "xvzf": 138, "image_recognit": [138, 179, 203], "resnet50_torchvis": 138, "ptq_static": [138, 178], "resnet50_v1": [138, 141, 153], "dataset_loc": [138, 179, 187, 203], "label_path": 138, "quantiti": 138, "vec": 138, "mu": 138, "sigma": 138, "sqrt": 138, "var": 138, "possibl": [138, 176, 192, 193, 197, 198, 205], "happen": 138, "dispers": [138, 177], "trust": [138, 176], "cg": [138, 179, 203], "conv0": [138, 179, 203], "expens": [139, 153, 205], "mobil": [139, 153, 208], "feed": [139, 193], "produc": 139, "logit": 139, "softmax": 139, "kd": 139, "d": [139, 147, 175, 177, 183, 193], "patient": 139, "compact": [139, 153, 160, 193], "resourc": [139, 181, 184, 205], "1x1": [139, 153, 193], "convolut": [139, 194], "ia": 139, "shallow": 139, "depth": [139, 198], "deepest": 139, "deeper": 139, "Will": [139, 148], "10006": [139, 140], "student_output": [139, 140], "student_loss": [139, 140], "training_func_for_nc": [139, 140], "distil_loss_conf": 139, "accordingli": [139, 165, 202], "promis": [140, 153, 193], "huge": [140, 179, 193, 197], "light": 140, "booster": 140, "degrad": [140, 193, 205], "novel": [140, 157, 168, 174], "comb": 140, "distillation_criterion": [140, 153, 192], "q_conf": 140, "horovod": 141, "builtin": 141, "enable_eager_execut": 141, "yaml_file_path": 141, "pre_process": 141, "simpli": [141, 155, 157, 159, 162, 174, 182], "evaluation_result": 141, "evaluation_time_cost": 141, "partit": [141, 193], "distributedsampl": 141, "train_sampl": 141, "train_dataset": [141, 196], "num_replica": 141, "rank": 141, "train_load": 141, "train_kwarg": 141, "adadelta": 141, "distributedoptim": 141, "named_paramet": 141, "broadcast_paramet": 141, "root_rank": 141, "broadcast_optimizer_st": 141, "set_epoch": 141, "batch_idx": 141, "zero_grad": [141, 153, 193], "nll_loss": 141, "log_interv": 141, "0f": 141, "tloss": 141, "6f": 141, "dry_run": 141, "break": [141, 153], "test_func": 141, "num_of_process": 141, "002": 141, "ssh": [141, 174], "prompt": 141, "readm": [141, 187], "exactli": [141, 158], "recognit": [141, 143, 193, 203], "resizecropimagenet": [141, 204], "realiz": [141, 191, 198, 201], "tow": 141, "node1": [141, 187, 188], "node2": [141, 187, 188], "TO": [141, 159, 179], "your_node1_nam": 141, "your_node2_nam": 141, "resnet50_fp32_pretrained_model": 141, "nc_resnet50_v1": 141, "resnet": [141, 208], "10k": [142, 146], "2x": [142, 148], "exchang": 143, "hope": 143, "inc_model": [143, 155], "fp32_onnx_config": 143, "verifi": [143, 151], "vgg16": [143, 208], "mobilenet": [143, 201, 208], "rcnn": 143, "torchscript": [143, 197, 202], "unsupport": [143, 153, 193], "add_relu": 143, "conv1d_relu": 143, "conv2d_relu": 143, "group_norm": 143, "hardswish": 143, "instance_norm": 143, "layer_norm": 143, "leaky_relu": 143, "sigmoid": 143, "toolchain": [144, 194], "bare": 144, "metal": 144, "sudo": [144, 160], "apt": [144, 149, 160, 168], "python3": 144, "dev": [144, 167, 171], "distutil": 144, "libgl1": 144, "mesa": 144, "glx": 144, "libglib2": 144, "ln": 144, "sf": 144, "usr": 144, "incompat": 144, "88": [144, 201, 208], "80": [144, 151, 197, 203, 208], "pyobject": 144, "reinstal": 144, "importerror": 144, "libgl": 144, "yum": [144, 149], "opencv": [144, 168], "conda": [144, 160, 168, 187, 188, 189, 200], "pend": [144, 183], "sqlalchemi": 144, "27": [144, 151, 208], "alemb": 144, "forg": 144, "quick": [145, 154, 193, 206, 207], "dive": [145, 206], "unless": 145, "syntax": 145, "go": [145, 169, 172, 180, 195, 199, 204], "15": [145, 149, 188], "up1": 145, "up2": 145, "valid_mixed_precis": 145, "concatv2": 145, "maxpool": 145, "avgpool": 145, "depthwiseconv2dn": 145, "relu6": 145, "biasadd": 145, "addn": 145, "addv2": 145, "grappler": 145, "grappler_optim": 145, "constfold": 145, "arithmet": 145, "debug_stripp": 145, "googleapi": [146, 176, 179], "v1_6": [146, 176, 179], "mobilenet_v1_1": [146, 176, 187], "0_224_frozen": [146, 176, 187], "concept": [147, 201, 206], "custom_metr": 147, "420": 148, "geomean": 148, "upload": [148, 169, 172], "click": [148, 157, 158, 165, 168, 174, 179, 194, 203], "qintegerop": [148, 196], "lock": [148, 192, 193], "momentum": [148, 153, 193, 207], "sensit": [148, 193], "lasso": [148, 193], "oneapi": [149, 194, 206], "analyt": [149, 194, 206], "success": [149, 176], "frequent": 149, "pypi": [149, 169, 172], "nightli": 149, "requirements_pt": 149, "requirements_tf": 149, "consolid": 149, "streamlin": [149, 181, 194], "scienc": 149, "websit": 149, "anaconda": [149, 181, 182], "suit": [149, 175, 203], "formerli": 149, "skylak": 149, "cascad": 149, "ic": [149, 194], "sapphir": [149, 151], "rapid": [149, 151], "hbm": 149, "arctic": 149, "sound": 149, "pont": 149, "vecchio": 149, "cento": [149, 208], "ubuntu": 149, "22": [149, 151, 208], "maco": 149, "ventura": 149, "fortensorflow": 149, "forpytorch": 149, "18": [149, 151, 194, 208], "17": [149, 187], "apach": 150, "subject": 150, "accompani": [150, 205], "wish": 150, "bibtex": 150, "misc": 150, "author": 150, "feng": 150, "tian": 150, "hanwen": 150, "haihao": [150, 193], "shen": [150, 193], "suyu": 150, "chen": 150, "howpublish": 150, "year": 150, "logo": 150, "atom": 150, "phi": 150, "pentium": 150, "vtune": 150, "corpor": 150, "subsidiari": 150, "brand": 150, "claim": 150, "hf": [151, 202, 208], "70b": [151, 208], "40b": 151, "baichuan": 151, "baichuan2": 151, "12b": 151, "neox": [151, 208], "20b": [151, 208], "mistralai": 151, "mistral": 151, "thudm": 151, "chatglm2": 151, "chatglm3": 151, "wip": 151, "soon": 151, "lambada_openai": [151, 208], "67": [151, 208], "69": [151, 208], "0222": 151, "55": [151, 189, 208], "9997": 151, "68": [151, 204, 208], "12": [151, 176, 208], "0081": 151, "66": [151, 177, 208], "9905": 151, "71": [151, 208], "51": [151, 208], "75": [151, 193, 208], "0568": 151, "0008": [151, 208], "70": [151, 208], "81": [151, 208], "9902": [151, 208], "06": [151, 189, 207, 208], "0058": [151, 208], "61": [151, 208], "9991": 151, "0034": 151, "46": [151, 208], "0356": 151, "9972": 151, "0121": 151, "35": [151, 193, 208], "63": [151, 193, 208], "92": [151, 208], "9933": [151, 208], "31": [151, 208], "9994": [151, 208], "0006": [151, 208], "9958": [151, 208], "29": [151, 208], "74": [151, 208], "9918": 151, "9964": 151, "58": [151, 188, 208], "0040": 151, "26": [151, 208], "0064": 151, "49": [151, 208], "78": [151, 204, 208], "0041": 151, "53": [151, 208], "0014": 151, "0043": 151, "76": [151, 208], "77": [151, 208], "25": [151, 193, 208], "9932": [151, 208], "0016": 151, "0116": 151, "60": [151, 208], "9978": [151, 208], "79": [151, 203, 208], "9937": [151, 208], "62": [151, 208], "09": [151, 208], "0057": 151, "0005": 151, "73": [151, 208], "9936": 151, "9989": 151, "9987": 151, "0046": [151, 208], "9979": [151, 208], "23": [151, 208], "52": [151, 208], "86": [151, 208], "9930": 151, "00": [151, 208], "9957": [151, 208], "9938": 151, "9942": [151, 208], "9990": 151, "9965": 151, "9995": 151, "82": [151, 208], "0078": 151, "0262": 151, "0052": 151, "9910": 151, "popularli": 152, "industri": [152, 194], "label_map": 152, "ap": 152, "curv": 152, "turn": [152, 168, 197], "target_boxes_num": 152, "str_label": 152, "int_label": 152, "inturn": 152, "cocomap": 152, "vocmap": 152, "categor": 152, "multiclass": 152, "multilabel": 152, "newmetr": 152, "reset": 152, "reflect": [152, 204], "new_metr": 152, "kind": 153, "resort": 153, "inject": 153, "automodelforsequenceclassif": 153, "worker": [153, 184, 187, 188, 189, 196], "ping_memori": [153, 196], "formul": 153, "templat": [153, 193], "effort": 153, "written": 153, "onnxrt_integ": [153, 207], "onnxrt_qlinear": [153, 207], "image_tensor": [153, 207], "post_training_dynamic_qu": [153, 195, 205], "1000": [153, 183, 207], "2000": 153, "sampling_s": [153, 207], "model_wis": [153, 207], "op_dict": 153, "op_wis": [153, 203, 207], "sigopt_api_token": [153, 201, 205], "sigopt_project_id": [153, 201, 205], "sigopt_experiment_nam": [153, 201, 205], "performance_onli": 153, "600": [153, 208], "training_arg": 153, "trainer": [153, 165], "maxim": [153, 193, 205], "pruning_func": 153, "num_train_epoch": [153, 193], "train_dataload": [153, 193, 196], "n_gpu": 153, "gradient_accumulation_step": 153, "clip_grad_norm_": 153, "max_grad_norm": 153, "start_epoch": [153, 195, 207], "end_epoch": [153, 195, 207], "97": [153, 208], "pruner": [153, 193, 207], "newli": [153, 193], "on_after_optimizer_step": [153, 193], "layer3": [153, 193], "layer2": [153, 193, 196], "knowledgedistillationloss": [153, 207], "weight_decai": [153, 207], "0004": 153, "nesterov": [153, 207], "randomresizedcrop": [153, 204], "totensor": [153, 204], "485": 153, "456": 153, "406": [153, 208], "nepoch": 153, "cnt": 153, "loss_sum": 153, "iter_bar": 153, "tqdm": 153, "desc": 153, "teacher_logit": 153, "pytorchknowledgedistillationloss": 153, "unnecessari": 153, "train_fun": 153, "training_func": 153, "output_model": [153, 177, 179, 203], "exit_polici": [153, 207], "determinist": 153, "meaning": [153, 192], "prune_conf": 153, "quantization_aware_training_conf": 153, "aforement": 153, "inset": 153, "p_conf": [153, 192], "ssd_mobilenet_v1": 153, "benchmarkconf": 153, "cpuexecutionprovid": [154, 196], "tensorrtexecutionprovid": [154, 196], "cudaexecutionprovid": [154, 196], "cuda": [154, 157, 159, 193, 196], "dnnlexecutionprovid": [154, 196], "plu": 154, "persist": 155, "tf1": 155, "tf2": 155, "h5": 155, "hybridblock": 155, "0000": 155, "input_model": [155, 177, 178, 179, 203], "10005": [156, 197], "simplifi": [157, 168, 174, 193, 194], "switch": [157, 203], "acquir": 157, "heurist": [157, 174], "great": 157, "amp": [157, 164, 183, 199], "autocast": 157, "simultan": [157, 181, 192, 195], "my_model": 157, "no_grad": 157, "memory_format": 157, "112": 157, "plugin": [157, 175], "aw": [157, 165, 184, 194, 208], "sagemak": [157, 165], "inlin": [157, 162, 165], "neural_cod": [157, 159, 161, 162, 163, 165], "bench": 157, "superbench": 157, "enjoi": [158, 162, 165], "rebuild": [158, 167, 171], "democrat": [159, 194], "programm": [159, 165, 174], "nano_bf16_channels_last": 159, "nano_bf16_ipex_channels_last": 159, "nano_bf16_ipex": 159, "nano_bf16": 159, "nano_fp32_channels_last": 159, "nano_fp32_ipex_channels_last": 159, "nano_fp32_ipex": 159, "nano_gpu_to_cpu": 159, "nano_int8": 159, "nano_jit_bf16_channels_last": 159, "nano_jit_bf16_ipex_channels_last": 159, "nano_jit_bf16_ipex": 159, "nano_jit_bf16": 159, "nano_jit_fp32_channels_last": 159, "nano_jit_fp32_ipex_channels_last": 159, "nano_jit_fp32_ipex": 159, "nano_jit_fp32": 159, "nano_onnxruntime_fp32": 159, "nano_onnxruntime_int8_qlinear": 159, "openvino": 159, "nano_openvino_fp32": 159, "nano_openvino_int8": 159, "bc": [160, 168], "conda_prefix": 160, "echo": 160, "libjemalloc": 160, "libiomp5": 160, "home": 160, "lib": 160, "ld_preload": 160, "malloc_conf": 160, "oversize_threshold": 160, "background_thread": 160, "metadata_thp": 160, "dirty_decay_m": 160, "9000000000": 160, "muzzy_decay_m": 160, "kmp_affin": 160, "kmp_blocktim": 160, "dnnl_primitive_cache_capac": 160, "governor": 160, "scaling_governor": 160, "powersav": 160, "tee": 160, "pytorch_jit_script": [161, 164], "pytorch_channels_last": [161, 164], "run_bench": 161, "patch": [161, 174], "patch_path": 161, "your_patch_path": 161, "sweep": 161, "sweep_object": 161, "bench_config": 161, "bench_featur": 161, "sai": 162, "run_glu": [162, 163, 185, 188, 189], "requisit": 162, "task_nam": [162, 163, 185, 188, 189], "do_ev": [162, 163, 178, 185, 188, 189], "everyth": 162, "remain": 162, "itself": [162, 193], "run_glue_optim": 162, "overwritten": 162, "static_ipex": 162, "stock": [163, 202], "auto_qu": 163, "v4": [163, 185, 188, 189, 208], "albert": [163, 208], "sst2": 163, "alexnet": [163, 208], "pytorch_amp": 164, "optimize_for_infer": 164, "pytorch_jit_trac": 164, "pytorch_jit_script_ofi": 164, "pytorch_jit_trace_ofi": 164, "pytorch_torchdynamo_jit_script": 164, "pytorch_torchdynamo_jit_trac": 164, "pytorch_torchdynamo_jit_script_ofi": 164, "pytorch_torchdynamo_jit_trace_ofi": 164, "pytorch_inc_bf16": 164, "pytorch_inc_static_quant_fx": 164, "pytorch_inc_static_quant_ipex": 164, "pytorch_inc_static_quant_ipex_xpu": 164, "pytorch_inc_dynamic_qu": 164, "pytorch_ipex_fp32": 164, "pytorch_ipex_bf16": 164, "pytorch_ipex_int8_static_qu": 164, "pytorch_ipex_int8_dynamic_qu": 164, "blade": 164, "disc": 164, "pytorch_aliblad": 164, "pytorch_lightning_bf16_cpu": 164, "tensorflow_amp": 164, "keras_amp": 164, "tensorflow_inc": 164, "keras_inc": 164, "onnx_inc_static_quant_qlinear": 164, "onnx_inc_static_quant_qdq": 164, "onnx_inc_dynamic_qu": 164, "pytorch_inc_huggingface_optimum_stat": 164, "pytorch_inc_huggingface_optimum_dynam": 164, "intel_extension_for_transform": 164, "bigdl": [164, 165], "nano": [164, 165], "nano_": 164, "inc_auto": 164, "delight": 165, "announc": 165, "v": [165, 174, 193, 205, 207], "500": [165, 183], "jupyt": [165, 167, 168, 171], "delta": 165, "acc_delta": 165, "int8_acc": 165, "fp32_acc": 165, "ext": [167, 169, 171, 172, 173], "lab": [167, 168, 169, 171, 172], "nodej": [167, 171], "jlpm": [167, 171], "yarn": [167, 171], "npm": [167, 168, 171], "lieu": [167, 171], "labextens": [167, 168, 171], "typescript": [167, 171], "watch": [167, 171, 180], "immedi": [167, 171, 193], "refresh": [167, 171], "browser": [167, 171, 176, 180], "wait": [167, 171, 174, 184], "rebuilt": [167, 171], "easier": [167, 171, 174, 176, 194], "symlink": [167, 171], "down": 168, "finish": [168, 184], "enter": [168, 174, 182], "leav": 168, "blank": 168, "cell": 168, "gain": [168, 192, 194], "mkl": 168, "jemalloc": 168, "pip3": 168, "headless": 168, "pyproject": [169, 172], "toml": [169, 172], "twine": [169, 172], "whl": [169, 172], "dist": [169, 172], "sdist": [169, 172], "bdist_wheel": [169, 172], "frontend": [169, 172, 182, 189], "login": [169, 172, 201], "cut": [169, 172], "admin_github_token": [169, 172], "pypi_token": [169, 172], "npm_token": [169, 172], "secret": [169, 172], "panel": [169, 172, 174], "draft": [169, 172], "changelog": [169, 172, 173], "pkg": [169, 172], "bot": [169, 172], "pick": [169, 172, 175], "feedstock": [169, 172], "hatch": 172, "notabl": 173, "daili": 174, "advantag": [174, 193, 195, 205], "remot": 174, "re": [174, 180, 199], "market": 174, "connect": [174, 176, 183, 193, 201], "uninstal": 174, "fill": [174, 201, 204, 205], "upper": 174, "sidebar": 174, "hover": 174, "argpars": 174, "pop": [174, 184], "diff": 174, "manifest": 175, "palett": 175, "src": 175, "registercommand": 175, "amodio": 175, "tsl": 175, "matcher": 175, "dbaeumer": 175, "eslint": [175, 180], "press": 175, "f5": 175, "ctrl": 175, "hello": 175, "world": 175, "breakpoint": 175, "consol": [175, 180], "relaunch": 175, "toolbar": 175, "node_modul": 175, "viewlet": 175, "dropdown": 175, "runner": [175, 180], "startup": 175, "bundl": 175, "neural_insight": [176, 178, 179], "tl": 176, "ui": 176, "5000": 176, "338174d13706855fc6924cec7b3a8ae8": 176, "listen": 176, "port": [176, 183], "firewal": 176, "8080": 176, "cert": 176, "path_to_cert": 176, "crt": 176, "path_to_private_kei": 176, "encrypt": 176, "insecur": 176, "expos": 176, "forfeit": 176, "extern": 176, "threat": 176, "diagnost": 176, "skill": 176, "feel": [176, 180], "layoutlmv3": [177, 208], "seqev": 177, "sentencepiec": 177, "timm": 177, "fvcore": 177, "pillow": 177, "einop": 177, "textdist": 177, "setuptool": 177, "cli": 177, "hypjudi": 177, "funsd": [177, 208], "calib_dataset": 177, "incdataset": 177, "eval_dataset": 177, "poor": [177, 203], "9049": 177, "2989": 177, "9631": 177, "glob": 177, "panda": 177, "pd": 177, "set_opt": 177, "max_row": 177, "max_column": 177, "getmtim": 177, "revers": 177, "activations_t": 177, "weights_tabl": [177, 178], "read_csv": 177, "nweight": 177, "descend": 177, "sorted_data": 177, "sort_valu": 177, "ascend": 177, "evid": 177, "tip": 177, "8981": 177, "7502": 177, "huggingface_model": 178, "run_clm": 178, "dataset_nam": 178, "wikitext": [178, 208], "dataset_config_nam": 178, "do_train": 178, "inspect_sav": 178, "inspect_result": 178, "quan": 178, "model_summari": 178, "incept": [179, 208], "v3": [179, 208], "inception_v3": [179, 203], "inceptionv3_fp32_pretrained_model": [179, 203], "bash": [179, 203], "prepare_dataset": 179, "sh": [179, 203], "raw_dir": 179, "img_raw": 179, "delet": [179, 193], "run_tun": 179, "nc_inception_v3": 179, "decreas": [179, 193], "highest": [179, 185, 205], "satisfactori": 179, "webpag": 179, "spike": 179, "bottom": 179, "concentr": 179, "But": 179, "bigger": 179, "vari": [179, 193, 202, 208], "bootstrap": 180, "localhost": [180, 182, 187, 188], "3000": 180, "lint": 180, "correctli": 180, "hash": [180, 183], "readi": [180, 193], "aren": 180, "transit": 180, "webpack": 180, "babel": 180, "tweak": 180, "ever": 180, "curat": 180, "suitabl": 180, "shouldn": 180, "wouldn": 180, "couldn": 180, "troubleshoot": 180, "effortlessli": 181, "rest": [181, 182, 187, 188, 189], "grpc": [181, 182, 186, 187, 188, 190], "queue": 181, "elimin": 181, "mpi": [181, 182, 205], "neural_solut": [181, 182, 187, 188, 189], "task_monitor_port": [182, 187, 188, 189], "22222": [182, 187, 188, 189], "result_monitor_port": [182, 187, 188, 189], "33333": [182, 187, 188, 189], "restful_api_port": [182, 187, 188, 189], "hostfil": [182, 184, 187, 188, 189], "grpc_api_port": [182, 187, 188, 189], "api_typ": [182, 187, 188, 189], "conda_env": [182, 187, 188, 189], "upload_path": [182, 187, 188, 189], "8000": [182, 187, 188, 189], "3333": [182, 187, 188, 189], "2222": [182, 187, 188, 189], "ns_workspac": [182, 187, 188, 189], "hf_model": [182, 186, 188, 189], "curl": [182, 183, 187, 188], "task_id": [182, 187, 188, 189], "usernam": 182, "db": [182, 184], "serve_log": [182, 187, 188, 189], "frontend_grpc": 182, "task_log": 182, "task_bdf0bd1b2cc14bc19bce12d4f9b333c7": 182, "task_workspac": 182, "bdf0bd1b2cc14bc19bce12d4f9b333c7": 182, "aliv": 182, "properli": 182, "commonli": [182, 193], "hostnam": 182, "breakdown": 182, "ip": 182, "hous": 182, "host1": [182, 187, 188], "host2": [182, 187, 188], "query_id": 182, "oaa": 183, "host_ip": 183, "task_request": [183, 187, 188, 189], "tuning_info": [183, 187], "optimization_result": [183, 187], "result_path": [183, 187, 188], "closur": 183, "404": [183, 193, 208], "health": 183, "healthi": 183, "400": 183, "incom": 184, "taskmonitor": 184, "cluster": [184, 187, 188, 205], "tasklaunch": 184, "resultmonitor": 184, "receiv": [184, 201], "p1": 184, "notif": 184, "p2": 184, "p3": 184, "mpirun": [184, 205], "perf": 184, "p4": 184, "classdiagram": 184, "taskdb": 184, "get_statu": 184, "update_statu": 184, "task_collect": 184, "append_task": 184, "get_all_pending_task": 184, "update_task_statu": 184, "task_db": 184, "wait_new_task": 184, "schedule_task": 184, "dispatch_task": 184, "launch_task": 184, "query_task_statu": 184, "node_list": 184, "reserve_resourc": 184, "get_node_statu": 184, "pool": 184, "gcp": [184, 194], "script_url": [185, 187, 188, 189], "archiv": 185, "tf_example1": [186, 187, 188], "hf_models_grpc": [186, 189], "00173": 187, "01024": 187, "task_request_distribut": 187, "custom_models_optim": 187, "7602cd63d4c849e7a686a8165a77f69d": [187, 188], "151": 187, "8617": 187, "8213": [187, 208], "number_of_socket": [187, 188], "number_of_thread": [187, 188], "cdf419910f9b4d2a8320d0e420ac1d0a": 188, "optimized_result": 188, "3162": 188, "6488": [188, 208], "d3e10a49326449fb9d0d62f2bfc1cb43": 189, "fastapi": 190, "multi_object": 191, "benefit": 192, "instanti": 192, "neuron": 193, "art": 193, "grown": 193, "unpreced": 193, "increasingli": 193, "stand": [193, 205], "consecut": 193, "shrink": 193, "influenc": 193, "mechan": [193, 201, 206], "contextu": 193, "scene": 193, "haven": 193, "color": [193, 197], "lowest": [193, 205], "interv": 193, "gradual": 193, "emsp": 193, "pure": 193, "downstream": 193, "prone": 193, "co": 193, "discourag": 193, "penal": 193, "parameter": 193, "coeffici": 193, "sparsegpt": 193, "lightweight": 193, "perceptron": 193, "valuabl": [193, 203], "basi": 193, "mha": 193, "billion": 193, "tend": 193, "exemplifi": 193, "fortieth": 193, "pruner2": 193, "prepare_prun": 193, "retrain_fre": 193, "few": [193, 194, 202, 205], "yourself": 193, "uncertain": 193, "parse_auto_slim_config": 193, "auto_config": 193, "ffn2_sparsiti": 193, "mha_spars": 193, "quit": 193, "carri": 193, "pruning_pattern": 193, "pruning_start": 193, "pruning_end": 193, "sparse_gpt": 193, "embed_out": 193, "card": 193, "hesit": 193, "causal": 193, "clm": 193, "sst": [193, 208], "flan": 193, "t5": 193, "english": 193, "romanian": 193, "381": 193, "yolov5": 193, "2x1": [193, 208], "801": 193, "7895": 193, "reduct": [193, 197, 207], "xgboost": 193, "namhoon": 193, "lee": 193, "thalaiyasingam": 193, "ajanthan": 193, "philip": 193, "torr": 193, "2019": 193, "zafrir": 193, "ofir": 193, "ariel": 193, "larei": 193, "boudoukh": 193, "mosh": 193, "wasserblat": 193, "2111": 193, "05754": 193, "2021": 193, "kwon": 193, "kim": 193, "mahonei": 193, "hassoun": 193, "keutzer": 193, "gholami": 193, "pp": 193, "24101": 193, "24116": 193, "alistarh": 193, "massiv": 193, "2301": 193, "00774": 193, "oct": 194, "medium": 194, "aug": 194, "juli": 194, "onnxcommunitymeetup2023": 194, "msft": 194, "netflix": 194, "mlperf": [194, 208], "5x": 194, "\u96c6\u6210\u82f1\u7279\u5c14": 194, "\u817e\u8baf\u4e91taco": 194, "kit\u4e3aai\u5e94\u7528\u5e26\u6765\u9ad8\u6548\u5f02\u6784\u52a0\u901f\u670d\u52a1": 194, "mar": 194, "heterogen": 194, "jan": 194, "busi": 194, "amx": 194, "journei": 194, "dec": 194, "mleffici": 194, "deepen": 194, "foundat": 194, "intellig": 194, "vmware": 194, "applianc": 194, "bitnami": 194, "nov": 194, "neurip": 194, "quala": 194, "minilm": [194, 208], "plug": 194, "twitter": 194, "linkedin": 194, "zone": 194, "land": 194, "pat": 194, "keynot": 194, "intelon": 194, "chines": 194, "purif": 194, "jun": 194, "partner": 194, "feb": 194, "joint": 194, "bilibili": 194, "gestalt": 194, "ml": 194, "youtub": 194, "reconstruct": 194, "abound": 194, "lpot": [194, 200], "nextplatform": 194, "cern": 194, "gan": 194, "3dgan": 194, "iml": 194, "workshop": 194, "asplo": 194, "intelcaff": 194, "aris": 195, "henc": 195, "onnxrt_qoper": 195, "quant_aware_train": 195, "use_bf16": 195, "weight_compress": [195, 207], "initial_spars": [195, 207], "max_sparsity_ratio_per_lay": 195, "prune_typ": [195, 207], "basic_magnitud": [195, 207], "update_frequ": 195, "update_frequency_on_step": 195, "prune_domain": 195, "tile_pattern_1x1": 195, "affin": 196, "neither": 196, "nor": 196, "val_load": 196, "avg": 196, "themselv": 196, "dmlexecutionprovid": 196, "meanwhil": 197, "substanti": 197, "constrain": 197, "grei": 197, "blue": 197, "rectangl": 197, "subgraph": [197, 205], "load_empty_model": 197, "lambda": 197, "ouput_dir": 197, "fp32_model_path": 197, "int8_model_path": 197, "ON": 198, "forc": 198, "postposttrainingquantconfig": 198, "datatyp": [198, 205, 208], "cast": [198, 204], "bf16convert": 198, "matter": 198, "bf16wrapper": 198, "retrac": 198, "enable_mse_search": 199, "805": 199, "005": 199, "return_int": 199, "enable_auto_scal": 199, "nsampl": 199, "pad_max_length": 199, "use_max_length": 199, "true_sequenti": 199, "slower": 199, "sym_full_rang": 199, "qweight_config_path": 199, "gptq_config_path": 199, "gptq_config": 199, "use_full_length": 199, "compressed_model": 199, "seek": 199, "omit": 199, "rtn_g32asym": 199, "gptq_g32asym": 199, "gptq_g32asym_disable_last_matmul": 199, "gptq_g128asym": 199, "awq_g32asym": 199, "site": 200, "inspect": [200, 203], "sed": 200, "your_script": 200, "backbon": 201, "sigopt_experiment_id": 201, "nc": [201, 205], "although": 201, "suffici": 201, "ordinari": 201, "latenc": [201, 205], "8266": 201, "8372": 201, "2132": 201, "7495": 201, "8299": 201, "8294": 201, "0837": 201, "8291": 201, "4469": 201, "allevi": 202, "herebi": 202, "optdecoderlay": 202, "blockwis": 202, "waq": 202, "torchsmoothqu": 202, "auto_alpha_arg": 202, "overhead": 202, "leakyrelu": 202, "hardtanh": 202, "instancenorm": 202, "t5norm": 202, "llamanorm": 202, "groupnorm": 202, "7392": [202, 208], "7335": 202, "7058": [202, 208], "6994": 202, "7677": [202, 208], "7615": [202, 208], "7332": 202, "7632": 202, "arang": 202, "tolist": 202, "default_alpha": 202, "alpha_min": 202, "alpha_max": 202, "alpha_step": 202, "step_siz": 202, "shared_criterion": 202, "do_blockwis": 202, "jason": 202, "transact": 202, "instrument": 203, "writer": 203, "_pre_eval_hook": 203, "_post_eval_hook": 203, "submodul": 203, "whitelist": 203, "_recordingobserv": 203, "output_tensors_dict": 203, "current_it": 203, "get_tensor_valu": 203, "_observer_forward_hook": 203, "activation_post_process": 203, "_add_observer_": 203, "child": 203, "named_children": 203, "leaf": 203, "add_modul": 203, "register_forward_hook": 203, "dump_tim": 203, "summarywrit": 203, "_acc": 203, "tune_": 203, "add_graph": 203, "get_observer_dict": 203, "observer_dict": 203, "strip": 203, "parent": 203, "is_quant": 203, "add_histogram": 203, "bind_al": 203, "logdir_spec": 203, "tune_0_acc0": 203, "tune_1": 203, "tune_1_acc0": 203, "baseline_acc_0": 203, "776": 203, "tune_1_acc_0": 203, "095": 203, "runs_v3": 203, "run_tuning_dump_tensor": 203, "inceptionv3": 203, "skip": [203, 205], "run_quant": 203, "topologi": 203, "nc_inceptionv3": 203, "inceptionv3_dump_tensor": 203, "eightbit": 203, "requant": 203, "disappear": 203, "centercrop": 204, "randomcrop": 204, "cropres": 204, "decodeimag": 204, "jpeg": 204, "encodejp": 204, "alignimagechannel": 204, "116": 204, "103": [204, 208], "94": [204, 208], "017": 204, "bilinearimagenet": [204, 207], "topilimag": 204, "padding_mod": 204, "border": 204, "pixel": 204, "edg": 204, "colorjitt": 204, "bright": 204, "contrast": 204, "satur": 204, "hue": 204, "jitter": 204, "tondarrai": 204, "o1": 205, "human": 205, "concret": 205, "aggress": 205, "flowchart": 205, "htmllabel": 205, "td": 205, "classdef": 205, "itemstyl": 205, "cce5ff": 205, "stroke": 205, "99ccff": 205, "s1": 205, "s2": 205, "s3": 205, "s4": 205, "s5": 205, "s6": 205, "s7": 205, "nbsp": [205, 208], "subgraphstyl": 205, "ffffff": 205, "attempt": 205, "post_training_auto_qu": 205, "increment": 205, "ii": 205, "confidence_batch": 205, "spent": 205, "hawq_v2_loss": 205, "model_loss": 205, "black": 205, "discret": 205, "compli": 205, "prior": 205, "posterior": 205, "short": 205, "never": 205, "loglevel": 205, "endlessli": 205, "perspect": 205, "smbo": 205, "appl": 205, "surrog": 205, "quantil": 205, "densiti": 205, "parzen": 205, "greatest": 205, "hour": 205, "dai": 205, "next_tune_cfg": 205, "overridden": 205, "replic": 205, "replica": 205, "fed": 205, "synchron": 205, "number_of_process": 205, "run_cmd": 205, "abctunestrategi": 205, "familiar": 206, "notebook": 206, "introduct": 206, "organ": 207, "mobilenet_v1": 207, "40": [207, 208], "adam": 207, "beta_1": 207, "beta_2": 207, "999": 207, "epsilon": 207, "sparsecategoricalcrossentropi": 207, "sum_over_batch_s": 207, "from_logit": 207, "54": [207, 208], "19": [207, 208], "1x": 208, "platinum": 208, "8480": 208, "8ghz": 208, "56": 208, "ht": 208, "turbo": 208, "256gb": 208, "16x16gb": 208, "ddr5": 208, "4800": 208, "mt": 208, "bio": 208, "3a14": 208, "tel2p1": 208, "microcod": 208, "0x2b0001b0": 208, "gcc": 208, "20210514": 208, "red": 208, "hat": 208, "visit": 208, "1s4c14ins1bsthroughput": 208, "1720": 208, "582": 208, "95x": 208, "1517": 208, "38": 208, "570": 208, "65": 208, "66x": 208, "resnet101": 208, "41": 208, "1058": 208, "382": 208, "96": 208, "77x": 208, "2080": 208, "951": 208, "19x": 208, "1587": 208, "863": 208, "37": 208, "84x": 208, "1052": 208, "434": 208, "42x": 208, "707": 208, "234": 208, "02x": 208, "320": 208, "179": 208, "79x": 208, "4312": 208, "1512": 208, "85x": 208, "2287": 208, "1406": 208, "63x": 208, "1367": 208, "59x": 208, "vgg19": 208, "1244": 208, "176": 208, "04x": 208, "resnetv2": 208, "780": 208, "34x": 208, "494": 208, "43": 208, "329": 208, "50x": 208, "152": 208, "349": 208, "235": 208, "48x": 208, "densenet": 208, "161": 208, "282": 208, "223": 208, "26x": 208, "1284": 208, "756": 208, "70x": 208, "1280": 208, "530": 208, "cnn": 208, "39": 208, "178": 208, "13x": 208, "yolov3": 208, "249": 208, "44": 208, "64x": 208, "28x": 208, "36": 208, "05x": 208, "390": 208, "212": 208, "83x": 208, "vit": 208, "230": 208, "142": 208, "62x": 208, "1989": 208, "31x": 208, "1165": 208, "303": 208, "953": 208, "302": 208, "15x": 208, "resnest50": 208, "365": 208, "21x": 208, "resnext101_32x8d": 208, "548": 208, "104": 208, "27x": 208, "efficientnet_b0": 208, "636": 208, "566": 208, "12x": 208, "efficientnet_b3": 208, "471": 208, "358": 208, "32x": 208, "peleenet": 208, "790": 208, "504": 208, "57x": 208, "yolo": 208, "137": 208, "88x": 208, "175": 208, "23x": 208, "camembert": 208, "393": 208, "174": 208, "783": 208, "344": 208, "684": 208, "99x": 208, "312": 208, "155": 208, "01x": 208, "funnel": 208, "281": 208, "395": 208, "173": 208, "373": 208, "405": 208, "30x": 208, "stsb": 208, "396": 208, "136": 208, "377": 208, "17x": 208, "391": 208, "25x": 208, "135": 208, "61x": 208, "117": 208, "93x": 208, "lvwerra": 208, "pegasu": 208, "samsum": 208, "1981": 208, "598": 208, "1095": 208, "298": 208, "67x": 208, "549": 208, "29x": 208, "375": 208, "hellaswag": 208, "winogrand": 208, "piqa": 208, "word_perplex": 208, "4954": 208, "6409": 208, "7541": 208, "6434": 208, "8816": 208, "gptqw4g128asym": 208, "679": 208, "4895": 208, "6433": 208, "7476": 208, "6399": 208, "9945": 208, "0999": 208, "gptqw4g32asym": 208, "6829": 208, "4923": 208, "6401": 208, "7486": 208, "6410": 208, "9963": 208, "0141": 208, "gptqw4g128sym": 208, "685": 208, "4907": 208, "6361": 208, "7443": 208, "6390": 208, "1498": 208, "gptqw4g32sym": 208, "6911": 208, "4899": 208, "6448": 208, "7497": 208, "6439": 208, "0927": 208, "5049": 208, "6543": 208, "7628": 208, "6497": 208, "2862": 208, "4984": 208, "6535": 208, "7568": 208, "6473": 208, "9962": 208, "4193": 208, "6885": 208, "4973": 208, "753": 208, "6455": 208, "9935": 208, "4607": 208, "decapoda": 208, "5642": 208, "6709": 208, "7835": 208, "6887": 208, "4202": 208, "7244": 208, "5603": 208, "6614": 208, "6824": 208, "9909": 208, "5881": 208, "5911": 208, "7009": 208, "7878": 208, "7106": 208, "7518": 208, "5843": 208, "6961": 208, "7911": 208, "4319": 208, "7572": 208, "5898": 208, "7056": 208, "7894": 208, "7105": 208, "9998": 208, "3429": 208, "7596": 208, "5841": 208, "6977": 208, "7905": 208, "7080": 208, "4916": 208, "6266": 208, "7277": 208, "8096": 208, "7350": 208, "2384": 208, "778": 208, "624": 208, "7269": 208, "8047": 208, "7334": 208, "4237": 208, "7706": 208, "6239": 208, "7285": 208, "8058": 208, "7322": 208, "4697": 208, "7836": 208, "6195": 208, "7337": 208, "9983": 208, "5604": 208, "5732": 208, "648": 208, "7715": 208, "6746": 208, "7107": 208, "6982": 208, "5637": 208, "6527": 208, "7704": 208, "6713": 208, "9950": 208, "9702": 208, "5682": 208, "6575": 208, "7758": 208, "6742": 208, "9317": 208, "567": 208, "6902": 208, "7353": 208, "6622": 208, "7829": 208, "6862": 208, "9635": 208, "7246": 208, "5617": 208, "6756": 208, "7797": 208, "6854": 208, "9931": 208, "2799": 208, "7312": 208, "6059": 208, "7103": 208, "7077": 208, "2213": 208, "7273": 208, "6018": 208, "7088": 208, "7742": 208, "7030": 208, "9934": 208, "2538": 208, "083": 208, "7283": 208, "6053": 208, "7024": 208, "7764": 208, "7031": 208, "1889": 208, "374": 208, "727": 208, "5997": 208, "7018": 208, "9916": 208, "2504": 208, "497": 208, "7122": 208, "8984": 208, "5933": 208, "689": 208, "7851": 208, "7075": 208, "1556": 208, "448": 208, "7675": 208, "5934": 208, "7856": 208, "7111": 208, "9984": 208, "1514": 208, "927": 208, "7566": 208, "5899": 208, "7032": 208, "9953": 208, "1374": 208, "728": 208, "4628": 208, "6456": 208, "6029": 208, "6438": 208, "5799": 208, "4542": 208, "6004": 208, "0626": 208, "4789": 208, "6134": 208, "7432": 208, "5525": 208, "4731": 208, "6504": 208, "7617": 208, "6094": 208, "7828": 208, "5098": 208, "7622": 208, "6505": 208, "3242": 208, "6878": 208, "5058": 208, "6393": 208, "7633": 208, "6491": 208, "5514": 208, "6864": 208, "5084": 208, "6519": 208, "6509": 208, "4728": 208, "6876": 208, "5045": 208, "6474": 208, "9952": 208, "6379": 208, "5282": 208, "614": 208, "7448": 208, "6312": 208, "6377": 208, "5228": 208, "5991": 208, "6261": 208, "9919": 208, "4096": 208, "6224": 208, "4271": 208, "577": 208, "722": 208, "5871": 208, "9359": 208, "6123": 208, "4227": 208, "5738": 208, "7203": 208, "5823": 208, "9917": 208, "3377": 208, "615": 208, "4259": 208, "5714": 208, "7247": 208, "9951": 208, "2083": 208, "6154": 208, "4208": 208, "5777": 208, "7198": 208, "5834": 208, "3121": 208, "7233": 208, "5359": 208, "7753": 208, "195": 208, "7186": 208, "5328": 208, "7699": 208, "6687": 208, "9922": 208, "3463": 208, "7268": 208, "533": 208, "659": 208, "6726": 208, "2897": 208, "5718": 208, "6859": 208, "7927": 208, "6890": 208, "9324": 208, "7006": 208, "5655": 208, "6803": 208, "7965": 208, "6857": 208, "1515": 208, "5752": 208, "6748": 208, "7845": 208, "6724": 208, "5951": 208, "6472": 208, "5716": 208, "6685": 208, "784": 208, "6678": 208, "8539": 208, "6918": 208, "5819": 208, "678": 208, "6861": 208, "8863": 208, "5765": 208, "6827": 208, "7873": 208, "6832": 208, "1451": 208, "storywrit": 208, "693": 208, "5477": 208, "663": 208, "6719": 208, "9125": 208, "6661": 208, "7813": 208, "6693": 208, "9961": 208, "1137": 208, "rw": 208, "6604": 208, "5419": 208, "6598": 208, "6594": 208, "7616": 208, "6484": 208, "5369": 208, "7807": 208, "6559": 208, "9947": 208, "9411": 208, "6571": 208, "5398": 208, "6582": 208, "6579": 208, "8809": 208, "652": 208, "535": 208, "7682": 208, "6532": 208, "9906": 208, "0048": 208, "5177": 208, "6669": 208, "7824": 208, "5053": 208, "6301": 208, "5142": 208, "6654": 208, "6483": 208, "8146": 208, "517": 208, "9941": 208, "1666": 208, "734": 208, "1658": 208, "1495": 208, "733": 208, "1661": 208, "732": 208, "1713": 208, "767": 208, "1747": 208, "770": 208, "7519": 208, "4430": 208, "4413": 208, "72x": 208, "7190": 208, "4019": 208, "613": 208, "170": 208, "611": 208, "186": 208, "619": 208, "184": 208, "36x": 208, "623": 208, "5711": 208, "2584": 208, "6136": 208, "2630": 208, "33x": 208, "shufflenet": 208, "6820": 208, "3686": 208, "googlenet": 208, "1971": 208, "1120": 208, "76x": 208, "1838": 208, "1142": 208, "squeezenet": 208, "10163": 208, "5771": 208, "10339": 208, "6002": 208, "caffenet": 208, "2805": 208, "1077": 208, "60x": 208, "4351": 208, "822": 208, "2169": 208, "893": 208, "43x": 208, "2232": 208, "841": 208, "65x": 208, "zfnet": 208, "921": 208, "525": 208, "75x": 208, "925": 208, "534": 208, "73x": 208, "1862": 208, "1161": 208, "1956": 208, "1262": 208, "55x": 208, "efficientnet": 208, "2793": 208, "1383": 208, "beit": 208, "206": 208, "91x": 208, "duc": 208, "74x": 208, "ultra": 208, "8780": 208, "1920": 208, "emot": 208, "ferplu": 208, "6360": 208, "3067": 208, "07x": 208, "arcfac": 208, "449": 208, "511": 208, "484": 208, "222": 208, "18x": 208, "integerop": 208, "635": 208, "1324": 208, "244": 208, "47x": 208, "440": 208, "214": 208, "06x": 208, "715": 208, "201": 208, "03x": 208, "714": 208, "213": 208, "339": 208, "58x": 208, "215": 208, "89x": 208, "712": 208, "217": 208, "l12": 208, "h384": 208, "1209": 208, "588": 208, "1268": 208, "16x": 208, "1253": 208, "399": 208, "14x": 208, "l6": 208, "1139": 208, "94x": 208, "2365": 208, "08x": 208, "718": 208, "35x": 208, "electra": 208, "discrimin": 208, "1951": 208, "71x": 208, "2198": 208, "1129": 208, "mini": 208, "5814": 208, "3388": 208, "6396": 208, "3445": 208, "86x": 208, "bart": 208, "126": 208, "spanbert": 208, "multilingu": 208, "82x": 208, "118": 208, "46x": 208, "layoutlmv2": 208, "perplex": 208, "2788": 208, "7002": 208, "4124": 208, "9921": 208, "3950": 208, "9892": 208, "9163": 208, "7240": 208, "0438": 208, "7634": 208, "1186": 208, "9944": 208, "1276": 208, "7543": 208, "6181": 208, "rtnw4g32asym": 208, "6496": 208, "9967": 208, "7964": 208, "6612": 208, "rtnw4g32sym": 208, "7941": 208, "7243": 208, "9971": 208, "taskdataset": 208, "accuracyspars": 208, "ratiospars": 208, "commentsbalancedor": 208, "unbalanc": 208, "answeringsquad": 208, "87f1": 208, "momentumunbalanc": 208, "momentumbalanc": 208, "90f1": 208, "59f1": 208, "23f1": 208, "classificationmrpc": 208, "52f1": 208, "26f1": 208, "classificationsst": 208, "61accuraci": 208, "recognitionimagenet": 208, "95top1": 208, "v5s6": 208, "detectioncoco": 208, "ap0": 208, "6ap0": 208, "584": 208, "34f1": 208, "lassounbalanc": 208, "classificationmnli": 208, "mm": 208, "allbalanc": 208, "32accuraci": 208, "sensitivitybalanc": 208, "classificationqqp": 208, "classificationqnli": 208, "54accuraci": 208, "em": 208, "mobilenetv2": 208, "wideresnet40": 208, "9522": 208, "8178": 208, "0213": 208, "8235": 208, "027": 208, "5494": 208, "7153": 208, "5540": 208, "5523": 208, "vgg": 208, "bn": 208, "7022": 208, "7415": 208, "7025": 208, "0003": 208, "6739": 208, "7399": 208, "6845": 208, "0106": 208, "blendcnn": 208, "7034": 208, "8382": 208, "bilstm": 208, "8314": 208, "9403": 208, "9048": 208, "0734": 208, "7323": 208, "8256": 208, "8084": 208, "8814": 208, "7442": 208, "8371": 208, "0119": 208, "0115": 208, "tinybert": 208, "8018": 208, "8044": 208, "8363": 208, "8411": 208, "8025": 208, "8074": 208, "0007": 208, "0030": 208, "8626": 208, "9091": 208, "8782": 208, "8684": 208, "8259": 208, "distilroberta": 208, "6057": 208, "6187": 208, "0130": 208, "c6i": 208, "2xlarg": 208, "c6a": 208, "c6g": 208, "a100cuda": 208, "executionprovid": 208}, "objects": {"": [[37, 0, 0, "-", "neural_compressor"]], "neural_compressor": [[2, 0, 0, "-", "algorithm"], [5, 0, 0, "-", "benchmark"], [8, 0, 0, "-", "common"], [15, 0, 0, "-", "config"], [16, 0, 0, "-", "contrib"], [31, 0, 0, "-", "data"], [44, 0, 0, "-", "metric"], [46, 0, 0, "-", "mix_precision"], [48, 0, 0, "-", "model"], [56, 0, 0, "-", "objective"], [57, 0, 0, "-", "profiling"], [58, 0, 0, "-", "quantization"], [66, 0, 0, "-", "strategy"], [77, 0, 0, "-", "training"], [85, 0, 0, "-", "utils"], [94, 0, 0, "-", "version"]], "neural_compressor.algorithm": [[0, 0, 0, "-", "algorithm"], [1, 0, 0, "-", "fast_bias_correction"], [3, 0, 0, "-", "smooth_quant"], [4, 0, 0, "-", "weight_correction"]], "neural_compressor.algorithm.algorithm": [[0, 1, 1, "", "ALGORITHMS"], [0, 1, 1, "", "Algorithm"], [0, 1, 1, "", "AlgorithmScheduler"], [0, 2, 1, "", "algorithm_registry"]], "neural_compressor.algorithm.fast_bias_correction": [[1, 1, 1, "", "FastBiasCorrection"]], "neural_compressor.algorithm.smooth_quant": [[3, 1, 1, "", "SmoothQuant"]], "neural_compressor.algorithm.weight_correction": [[4, 1, 1, "", "WeightCorrection"]], "neural_compressor.benchmark": [[5, 2, 1, "", "benchmark_with_raw_cmd"], [5, 2, 1, "", "call_one"], [5, 2, 1, "", "config_instance"], [5, 2, 1, "", "fit"], [5, 2, 1, "", "generate_prefix"], [5, 2, 1, "", "get_architecture"], [5, 2, 1, "", "get_bounded_threads"], [5, 2, 1, "", "get_core_ids"], [5, 2, 1, "", "get_physical_ids"], [5, 2, 1, "", "get_threads"], [5, 2, 1, "", "get_threads_per_core"], [5, 2, 1, "", "profile"], [5, 2, 1, "", "run_instance"], [5, 2, 1, "", "set_all_env_var"], [5, 2, 1, "", "set_env_var"], [5, 2, 1, "", "summary_benchmark"]], "neural_compressor.common": [[6, 0, 0, "-", "base_config"], [7, 0, 0, "-", "base_tuning"], [9, 0, 0, "-", "tuning_param"], [11, 0, 0, "-", "utils"]], "neural_compressor.common.base_config": [[6, 1, 1, "", "BaseConfig"], [6, 1, 1, "", "ComposableConfig"], [6, 1, 1, "", "ConfigRegistry"], [6, 2, 1, "", "get_all_config_set_from_config_registry"], [6, 2, 1, "", "register_config"], [6, 2, 1, "", "register_supported_configs_for_fwk"]], "neural_compressor.common.base_config.BaseConfig": [[6, 3, 1, "", "name"], [6, 3, 1, "", "params_list"]], "neural_compressor.common.base_config.ComposableConfig": [[6, 3, 1, "", "config_list"]], "neural_compressor.common.base_tuning": [[7, 1, 1, "", "ConfigLoader"], [7, 1, 1, "", "ConfigSet"], [7, 1, 1, "", "EvaluationFuncWrapper"], [7, 1, 1, "", "Evaluator"], [7, 1, 1, "", "Sampler"], [7, 1, 1, "", "SequentialSampler"], [7, 1, 1, "", "TuningConfig"], [7, 1, 1, "", "TuningMonitor"], [7, 2, 1, "", "init_tuning"]], "neural_compressor.common.base_tuning.ConfigSet": [[7, 3, 1, "", "config_list"]], "neural_compressor.common.tuning_param": [[9, 1, 1, "", "ParamLevel"], [9, 1, 1, "", "TuningParam"]], "neural_compressor.common.tuning_param.ParamLevel": [[9, 3, 1, "", "MODEL_LEVEL"], [9, 3, 1, "", "OP_LEVEL"], [9, 3, 1, "", "OP_TYPE_LEVEL"]], "neural_compressor.common.utils": [[10, 0, 0, "-", "constants"], [12, 0, 0, "-", "logger"], [13, 0, 0, "-", "save_load"], [14, 0, 0, "-", "utility"]], "neural_compressor.common.utils.constants": [[10, 1, 1, "", "Mode"]], "neural_compressor.common.utils.logger": [[12, 1, 1, "", "Logger"], [12, 1, 1, "", "TuningLogger"]], "neural_compressor.common.utils.save_load": [[13, 2, 1, "", "load_config_mapping"], [13, 2, 1, "", "save_config_mapping"]], "neural_compressor.common.utils.utility": [[14, 1, 1, "", "CpuInfo"], [14, 1, 1, "", "LazyImport"], [14, 1, 1, "", "ProcessorType"], [14, 1, 1, "", "Statistics"], [14, 2, 1, "", "call_counter"], [14, 2, 1, "", "detect_processor_type_based_on_hw"], [14, 2, 1, "", "dump_elapsed_time"], [14, 2, 1, "", "get_workspace"], [14, 2, 1, "", "log_process"], [14, 2, 1, "", "set_random_seed"], [14, 2, 1, "", "set_resume_from"], [14, 2, 1, "", "set_tensorboard"], [14, 2, 1, "", "set_workspace"], [14, 2, 1, "", "singleton"]], "neural_compressor.config": [[15, 1, 1, "", "AccuracyCriterion"], [15, 1, 1, "", "BenchmarkConfig"], [15, 1, 1, "", "DistillationConfig"], [15, 1, 1, "", "DotDict"], [15, 1, 1, "", "ExportConfig"], [15, 1, 1, "", "HPOConfig"], [15, 1, 1, "", "IntermediateLayersKnowledgeDistillationLossConfig"], [15, 1, 1, "", "Keras"], [15, 1, 1, "", "KnowledgeDistillationLossConfig"], [15, 1, 1, "", "MXNet"], [15, 1, 1, "", "MixedPrecisionConfig"], [15, 1, 1, "", "NASConfig"], [15, 1, 1, "", "ONNX"], [15, 1, 1, "", "ONNXQlinear2QDQConfig"], [15, 1, 1, "", "Options"], [15, 1, 1, "", "PostTrainingQuantConfig"], [15, 1, 1, "", "PyTorch"], [15, 1, 1, "", "QuantizationAwareTrainingConfig"], [15, 1, 1, "", "SelfKnowledgeDistillationLossConfig"], [15, 1, 1, "", "TF2ONNXConfig"], [15, 1, 1, "", "TensorFlow"], [15, 1, 1, "", "Torch2ONNXConfig"], [15, 1, 1, "", "TuningCriterion"], [15, 1, 1, "", "WeightPruningConfig"]], "neural_compressor.contrib": [[17, 0, 0, "-", "strategy"]], "neural_compressor.contrib.strategy": [[18, 0, 0, "-", "sigopt"], [19, 0, 0, "-", "tpe"]], "neural_compressor.contrib.strategy.sigopt": [[18, 1, 1, "", "SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.tpe": [[19, 1, 1, "", "TpeTuneStrategy"]], "neural_compressor.data": [[26, 0, 0, "-", "datasets"], [30, 0, 0, "-", "filters"], [33, 0, 0, "-", "transforms"]], "neural_compressor.data.datasets": [[20, 0, 0, "-", "bert_dataset"], [21, 0, 0, "-", "coco_dataset"], [22, 0, 0, "-", "dataset"], [23, 0, 0, "-", "dummy_dataset"], [24, 0, 0, "-", "dummy_dataset_v2"], [25, 0, 0, "-", "imagenet_dataset"], [27, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.data.datasets.bert_dataset": [[20, 1, 1, "", "InputFeatures"], [20, 1, 1, "", "ONNXRTBertDataset"], [20, 1, 1, "", "ParseDecodeBert"], [20, 1, 1, "", "PytorchBertDataset"], [20, 1, 1, "", "TensorflowBertDataset"], [20, 1, 1, "", "TensorflowModelZooBertDataset"], [20, 2, 1, "", "convert_examples_to_features"], [20, 2, 1, "", "load_and_cache_examples"]], "neural_compressor.data.datasets.coco_dataset": [[21, 1, 1, "", "COCONpy"], [21, 1, 1, "", "COCORaw"], [21, 1, 1, "", "COCORecordDataset"], [21, 1, 1, "", "ParseDecodeCoco"]], "neural_compressor.data.datasets.dataset": [[22, 1, 1, "", "CIFAR10"], [22, 1, 1, "", "CIFAR100"], [22, 1, 1, "", "Dataset"], [22, 1, 1, "", "Datasets"], [22, 1, 1, "", "FashionMNIST"], [22, 1, 1, "", "ImageFolder"], [22, 1, 1, "", "IterableDataset"], [22, 1, 1, "", "MNIST"], [22, 1, 1, "", "MXNetCIFAR10"], [22, 1, 1, "", "MXNetCIFAR100"], [22, 1, 1, "", "MXNetDatasets"], [22, 1, 1, "", "MXNetFashionMNIST"], [22, 1, 1, "", "MXNetImageFolder"], [22, 1, 1, "", "MXNetMNIST"], [22, 1, 1, "", "ONNXRTITDatasets"], [22, 1, 1, "", "ONNXRTQLDatasets"], [22, 1, 1, "", "PyTorchDatasets"], [22, 1, 1, "", "PytorchCIFAR10"], [22, 1, 1, "", "PytorchCIFAR100"], [22, 1, 1, "", "PytorchFashionMNIST"], [22, 1, 1, "", "PytorchMNIST"], [22, 1, 1, "", "PytorchMxnetWrapDataset"], [22, 1, 1, "", "PytorchMxnetWrapFunction"], [22, 1, 1, "", "Tensorflow"], [22, 1, 1, "", "TensorflowCIFAR10"], [22, 1, 1, "", "TensorflowCIFAR100"], [22, 1, 1, "", "TensorflowDatasets"], [22, 1, 1, "", "TensorflowFashionMNIST"], [22, 1, 1, "", "TensorflowImageRecord"], [22, 1, 1, "", "TensorflowMNIST"], [22, 1, 1, "", "TensorflowTFRecordDataset"], [22, 1, 1, "", "TensorflowVOCRecord"], [22, 2, 1, "", "calculate_md5"], [22, 2, 1, "", "check_integrity"], [22, 2, 1, "", "dataset_registry"], [22, 2, 1, "", "download_url"], [22, 4, 1, "", "framework_datasets"], [22, 2, 1, "", "gen_bar_updater"]], "neural_compressor.data.datasets.dummy_dataset": [[23, 1, 1, "", "DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[24, 1, 1, "", "DummyDataset"], [24, 1, 1, "", "SparseDummyDataset"]], "neural_compressor.data.datasets.imagenet_dataset": [[25, 1, 1, "", "ImagenetRaw"], [25, 1, 1, "", "MXNetImagenetRaw"], [25, 1, 1, "", "ONNXRTImagenetDataset"], [25, 1, 1, "", "PytorchImagenetRaw"], [25, 1, 1, "", "TensorflowImagenetDataset"], [25, 1, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.data.datasets.style_transfer_dataset": [[27, 1, 1, "", "StyleTransferDataset"]], "neural_compressor.data.filters": [[28, 0, 0, "-", "coco_filter"], [29, 0, 0, "-", "filter"]], "neural_compressor.data.filters.coco_filter": [[28, 1, 1, "", "LabelBalanceCOCORawFilter"], [28, 1, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.filter": [[29, 1, 1, "", "FILTERS"], [29, 1, 1, "", "Filter"], [29, 1, 1, "", "MXNetFilters"], [29, 1, 1, "", "ONNXRTITFilters"], [29, 1, 1, "", "ONNXRTQLFilters"], [29, 1, 1, "", "PyTorchFilters"], [29, 1, 1, "", "TensorflowFilters"], [29, 2, 1, "", "filter_registry"]], "neural_compressor.data.transforms": [[32, 0, 0, "-", "imagenet_transform"], [34, 0, 0, "-", "postprocess"], [35, 0, 0, "-", "tokenization"], [36, 0, 0, "-", "transform"]], "neural_compressor.data.transforms.imagenet_transform": [[32, 1, 1, "", "BilinearImagenetTransform"], [32, 1, 1, "", "LabelShift"], [32, 1, 1, "", "ONNXResizeCropImagenetTransform"], [32, 1, 1, "", "OnnxBilinearImagenetTransform"], [32, 1, 1, "", "ParseDecodeImagenet"], [32, 1, 1, "", "ParseDecodeImagenetTransform"], [32, 1, 1, "", "QuantizedInput"], [32, 1, 1, "", "ResizeWithAspectRatio"], [32, 1, 1, "", "TensorflowResizeCropImagenetTransform"], [32, 1, 1, "", "TensorflowShiftRescale"], [32, 1, 1, "", "TensorflowTransposeLastChannel"]], "neural_compressor.data.transforms.postprocess": [[34, 1, 1, "", "Postprocess"]], "neural_compressor.data.transforms.tokenization": [[35, 1, 1, "", "BasicTokenizer"], [35, 1, 1, "", "FullTokenizer"], [35, 1, 1, "", "WordpieceTokenizer"], [35, 2, 1, "", "convert_by_vocab"], [35, 2, 1, "", "convert_to_unicode"], [35, 2, 1, "", "load_vocab"], [35, 2, 1, "", "whitespace_tokenize"]], "neural_compressor.data.transforms.transform": [[36, 1, 1, "", "AlignImageChannelTransform"], [36, 1, 1, "", "BaseTransform"], [36, 1, 1, "", "CastONNXTransform"], [36, 1, 1, "", "CastPyTorchTransform"], [36, 1, 1, "", "CastTFTransform"], [36, 1, 1, "", "CenterCropTFTransform"], [36, 1, 1, "", "CenterCropTransform"], [36, 1, 1, "", "CollectTransform"], [36, 1, 1, "", "ComposeTransform"], [36, 1, 1, "", "CropResizeTFTransform"], [36, 1, 1, "", "CropResizeTransform"], [36, 1, 1, "", "CropToBoundingBox"], [36, 1, 1, "", "InputFeatures"], [36, 1, 1, "", "MXNetCropResizeTransform"], [36, 1, 1, "", "MXNetCropToBoundingBox"], [36, 1, 1, "", "MXNetNormalizeTransform"], [36, 1, 1, "", "MXNetTransforms"], [36, 1, 1, "", "MXNetTranspose"], [36, 1, 1, "", "NormalizeTFTransform"], [36, 1, 1, "", "NormalizeTransform"], [36, 1, 1, "", "ONNXRTCropToBoundingBox"], [36, 1, 1, "", "ONNXRTITTransforms"], [36, 1, 1, "", "ONNXRTQLTransforms"], [36, 1, 1, "", "PaddedCenterCropTransform"], [36, 1, 1, "", "ParseDecodeVocTransform"], [36, 1, 1, "", "PyTorchAlignImageChannel"], [36, 1, 1, "", "PyTorchCropResizeTransform"], [36, 1, 1, "", "PyTorchNormalizeTransform"], [36, 1, 1, "", "PyTorchTransforms"], [36, 1, 1, "", "PyTorchTranspose"], [36, 1, 1, "", "PytorchMxnetTransform"], [36, 1, 1, "", "PytorchMxnetWrapFunction"], [36, 1, 1, "", "RandomCropTFTransform"], [36, 1, 1, "", "RandomCropTransform"], [36, 1, 1, "", "RandomHorizontalFlip"], [36, 1, 1, "", "RandomResizedCropMXNetTransform"], [36, 1, 1, "", "RandomResizedCropPytorchTransform"], [36, 1, 1, "", "RandomResizedCropTFTransform"], [36, 1, 1, "", "RandomResizedCropTransform"], [36, 1, 1, "", "RandomVerticalFlip"], [36, 1, 1, "", "RescaleKerasPretrainTransform"], [36, 1, 1, "", "RescaleTFTransform"], [36, 1, 1, "", "RescaleTransform"], [36, 1, 1, "", "ResizeMXNetTransform"], [36, 1, 1, "", "ResizePytorchTransform"], [36, 1, 1, "", "ResizeTFTransform"], [36, 1, 1, "", "ResizeTransform"], [36, 1, 1, "", "ResizeWithRatio"], [36, 1, 1, "", "SquadExample"], [36, 1, 1, "", "TFModelZooCollectTransform"], [36, 1, 1, "", "TFSquadV1ModelZooPostTransform"], [36, 1, 1, "", "TFSquadV1PostTransform"], [36, 1, 1, "", "TRANSFORMS"], [36, 1, 1, "", "TensorflowCropToBoundingBox"], [36, 1, 1, "", "TensorflowRandomHorizontalFlip"], [36, 1, 1, "", "TensorflowRandomVerticalFlip"], [36, 1, 1, "", "TensorflowResizeWithRatio"], [36, 1, 1, "", "TensorflowTransform"], [36, 1, 1, "", "TensorflowTransforms"], [36, 1, 1, "", "TensorflowTranspose"], [36, 1, 1, "", "TensorflowWrapFunction"], [36, 1, 1, "", "ToArray"], [36, 1, 1, "", "ToNDArrayTransform"], [36, 1, 1, "", "Transforms"], [36, 1, 1, "", "Transpose"], [36, 2, 1, "", "convert_examples_to_features"], [36, 2, 1, "", "get_final_text"], [36, 2, 1, "", "get_torchvision_map"], [36, 2, 1, "", "read_squad_examples"], [36, 2, 1, "", "transform_registry"]], "neural_compressor.metric": [[38, 0, 0, "-", "bleu"], [39, 0, 0, "-", "bleu_util"], [40, 0, 0, "-", "coco_label_map"], [41, 0, 0, "-", "coco_tools"], [42, 0, 0, "-", "evaluate_squad"], [43, 0, 0, "-", "f1"], [45, 0, 0, "-", "metric"]], "neural_compressor.metric.bleu": [[38, 1, 1, "", "BLEU"], [38, 1, 1, "", "UnicodeRegex"], [38, 2, 1, "", "bleu_tokenize"]], "neural_compressor.metric.bleu.BLEU": [[38, 3, 1, "", "labels"], [38, 3, 1, "", "predictions"]], "neural_compressor.metric.bleu.UnicodeRegex": [[38, 3, 1, "", "nondigit_punct_re"], [38, 3, 1, "", "punct_nondigit_re"], [38, 3, 1, "", "symbol_re"]], "neural_compressor.metric.bleu_util": [[39, 2, 1, "", "compute_bleu"]], "neural_compressor.metric.coco_tools": [[41, 1, 1, "", "COCOEvalWrapper"], [41, 1, 1, "", "COCOWrapper"], [41, 2, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [41, 2, 1, "", "ExportSingleImageDetectionMasksToCoco"], [41, 2, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.metric.coco_tools.COCOWrapper": [[41, 3, 1, "", "dataset"], [41, 3, 1, "", "detection_type"]], "neural_compressor.metric.evaluate_squad": [[42, 2, 1, "", "evaluate"], [42, 2, 1, "", "exact_match_score"], [42, 2, 1, "", "f1_score"], [42, 2, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[43, 2, 1, "", "evaluate"], [43, 2, 1, "", "f1_score"], [43, 2, 1, "", "metric_max_over_ground_truths"], [43, 2, 1, "", "normalize_answer"]], "neural_compressor.metric.metric": [[45, 1, 1, "", "Accuracy"], [45, 1, 1, "", "BaseMetric"], [45, 1, 1, "", "COCOmAPv2"], [45, 1, 1, "", "F1"], [45, 1, 1, "", "GeneralTopK"], [45, 1, 1, "", "Loss"], [45, 1, 1, "", "MAE"], [45, 1, 1, "", "METRICS"], [45, 1, 1, "", "MSE"], [45, 1, 1, "", "MXNetMetrics"], [45, 1, 1, "", "Metric"], [45, 1, 1, "", "ONNXRTGLUE"], [45, 1, 1, "", "ONNXRTITMetrics"], [45, 1, 1, "", "ONNXRTQLMetrics"], [45, 1, 1, "", "PyTorchLoss"], [45, 1, 1, "", "PyTorchMetrics"], [45, 1, 1, "", "RMSE"], [45, 1, 1, "", "ROC"], [45, 1, 1, "", "SquadF1"], [45, 1, 1, "", "TensorflowCOCOMAP"], [45, 1, 1, "", "TensorflowMAP"], [45, 1, 1, "", "TensorflowMetrics"], [45, 1, 1, "", "TensorflowTopK"], [45, 1, 1, "", "TensorflowVOCMAP"], [45, 1, 1, "", "WrapMXNetMetric"], [45, 1, 1, "", "WrapONNXRTMetric"], [45, 1, 1, "", "WrapPyTorchMetric"], [45, 1, 1, "", "mIOU"], [45, 2, 1, "", "metric_registry"], [45, 2, 1, "", "register_customer_metric"]], "neural_compressor.metric.metric.Accuracy": [[45, 3, 1, "", "label_list"], [45, 3, 1, "", "pred_list"], [45, 3, 1, "", "sample"]], "neural_compressor.metric.metric.GeneralTopK": [[45, 3, 1, "", "k"], [45, 3, 1, "", "num_correct"], [45, 3, 1, "", "num_sample"]], "neural_compressor.metric.metric.Loss": [[45, 3, 1, "", "sample"], [45, 3, 1, "", "sum"]], "neural_compressor.metric.metric.MAE": [[45, 3, 1, "", "compare_label"], [45, 3, 1, "", "label_list"], [45, 3, 1, "", "pred_list"]], "neural_compressor.metric.metric.METRICS": [[45, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.MSE": [[45, 3, 1, "", "compare_label"], [45, 3, 1, "", "label_list"], [45, 3, 1, "", "pred_list"]], "neural_compressor.metric.metric.MXNetMetrics": [[45, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTITMetrics": [[45, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTQLMetrics": [[45, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.PyTorchMetrics": [[45, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.RMSE": [[45, 3, 1, "", "mse"]], "neural_compressor.metric.metric.TensorflowMetrics": [[45, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.TensorflowTopK": [[45, 3, 1, "", "k"], [45, 3, 1, "", "num_correct"], [45, 3, 1, "", "num_sample"]], "neural_compressor.mix_precision": [[46, 2, 1, "", "fit"]], "neural_compressor.model": [[47, 0, 0, "-", "base_model"], [49, 0, 0, "-", "keras_model"], [50, 0, 0, "-", "model"], [51, 0, 0, "-", "mxnet_model"], [52, 0, 0, "-", "nets_factory"], [53, 0, 0, "-", "onnx_model"], [54, 0, 0, "-", "tensorflow_model"], [55, 0, 0, "-", "torch_model"]], "neural_compressor.model.base_model": [[47, 1, 1, "", "BaseModel"]], "neural_compressor.model.keras_model": [[49, 1, 1, "", "KerasModel"]], "neural_compressor.model.model": [[50, 1, 1, "", "Model"], [50, 2, 1, "", "get_model_fwk_name"]], "neural_compressor.model.mxnet_model": [[51, 1, 1, "", "MXNetModel"]], "neural_compressor.model.nets_factory": [[52, 1, 1, "", "TFSlimNetsFactory"]], "neural_compressor.model.onnx_model": [[53, 1, 1, "", "ONNXModel"]], "neural_compressor.model.tensorflow_model": [[54, 1, 1, "", "TensorflowBaseModel"], [54, 1, 1, "", "TensorflowCheckpointModel"], [54, 1, 1, "", "TensorflowLLMModel"], [54, 1, 1, "", "TensorflowModel"], [54, 1, 1, "", "TensorflowQATModel"], [54, 1, 1, "", "TensorflowSavedModelModel"], [54, 2, 1, "", "checkpoint_session"], [54, 2, 1, "", "estimator_session"], [54, 2, 1, "", "frozen_pb_session"], [54, 2, 1, "", "get_model_type"], [54, 2, 1, "", "graph_def_session"], [54, 2, 1, "", "graph_session"], [54, 2, 1, "", "keras_session"], [54, 2, 1, "", "load_saved_model"], [54, 2, 1, "", "saved_model_session"], [54, 2, 1, "", "slim_session"], [54, 2, 1, "", "try_loading_keras"], [54, 2, 1, "", "validate_and_inference_input_output"], [54, 2, 1, "", "validate_graph_node"]], "neural_compressor.model.torch_model": [[55, 1, 1, "", "IPEXModel"], [55, 1, 1, "", "PyTorchBaseModel"], [55, 1, 1, "", "PyTorchFXModel"], [55, 1, 1, "", "PyTorchModel"]], "neural_compressor.objective": [[56, 1, 1, "", "Accuracy"], [56, 1, 1, "", "Footprint"], [56, 1, 1, "", "ModelSize"], [56, 1, 1, "", "MultiObjective"], [56, 1, 1, "", "Objective"], [56, 1, 1, "", "Performance"], [56, 2, 1, "", "objective_custom_registry"], [56, 2, 1, "", "objective_registry"]], "neural_compressor.quantization": [[58, 2, 1, "", "fit"]], "neural_compressor.strategy": [[59, 0, 0, "-", "auto"], [60, 0, 0, "-", "auto_mixed_precision"], [61, 0, 0, "-", "basic"], [62, 0, 0, "-", "bayesian"], [63, 0, 0, "-", "conservative"], [64, 0, 0, "-", "exhaustive"], [65, 0, 0, "-", "hawq_v2"], [67, 0, 0, "-", "mse"], [68, 0, 0, "-", "mse_v2"], [69, 0, 0, "-", "random"], [70, 0, 0, "-", "strategy"], [72, 0, 0, "-", "utils"]], "neural_compressor.strategy.auto": [[59, 1, 1, "", "AutoTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[60, 1, 1, "", "AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.basic": [[61, 1, 1, "", "BasicTuneStrategy"]], "neural_compressor.strategy.bayesian": [[62, 1, 1, "", "BayesianOptimization"], [62, 1, 1, "", "BayesianTuneStrategy"], [62, 1, 1, "", "TargetSpace"], [62, 2, 1, "", "acq_max"]], "neural_compressor.strategy.conservative": [[63, 1, 1, "", "ConservativeTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[64, 1, 1, "", "ExhaustiveTuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[65, 1, 1, "", "HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.mse": [[67, 1, 1, "", "MSETuneStrategy"]], "neural_compressor.strategy.mse_v2": [[68, 1, 1, "", "MSE_V2TuneStrategy"]], "neural_compressor.strategy.random": [[69, 1, 1, "", "RandomTuneStrategy"]], "neural_compressor.strategy.strategy": [[70, 1, 1, "", "TuneStrategy"], [70, 1, 1, "", "TuneStrategyMeta"], [70, 2, 1, "", "strategy_registry"]], "neural_compressor.strategy.utils": [[71, 0, 0, "-", "constant"], [73, 0, 0, "-", "tuning_sampler"], [74, 0, 0, "-", "tuning_space"], [75, 0, 0, "-", "tuning_structs"], [76, 0, 0, "-", "utility"]], "neural_compressor.strategy.utils.tuning_sampler": [[73, 1, 1, "", "BlockFallbackTuningSampler"], [73, 1, 1, "", "FallbackTuningSampler"], [73, 1, 1, "", "LowerBitsSampler"], [73, 1, 1, "", "ModelWiseTuningSampler"], [73, 1, 1, "", "OpTypeWiseTuningSampler"], [73, 1, 1, "", "OpWiseTuningSampler"], [73, 1, 1, "", "SmoothQuantSampler"], [73, 1, 1, "", "TuningOrder"], [73, 1, 1, "", "TuningSampler"], [73, 1, 1, "", "WeightOnlyQuantSampler"]], "neural_compressor.strategy.utils.tuning_space": [[74, 1, 1, "", "TuningItem"], [74, 1, 1, "", "TuningSpace"], [74, 2, 1, "", "initial_tuning_cfg_with_quant_mode"], [74, 2, 1, "", "pattern_to_internal"], [74, 2, 1, "", "pattern_to_path"], [74, 2, 1, "", "quant_mode_from_pattern"]], "neural_compressor.strategy.utils.tuning_structs": [[75, 1, 1, "", "OpTuningConfig"]], "neural_compressor.strategy.utils.utility": [[76, 1, 1, "", "ClassRegister"], [76, 1, 1, "", "OrderedDefaultDict"], [76, 1, 1, "", "QuantOptions"], [76, 1, 1, "", "QuantType"], [76, 2, 1, "", "build_slave_faker_model"], [76, 2, 1, "", "extract_data_type"], [76, 2, 1, "", "get_adaptor_name"], [76, 2, 1, "", "preprocess_user_cfg"], [76, 2, 1, "", "reverted_data_type"]], "neural_compressor.training": [[77, 1, 1, "", "CallBacks"], [77, 1, 1, "", "CompressionManager"], [77, 2, 1, "", "fit"], [77, 2, 1, "", "prepare_compression"]], "neural_compressor.utils": [[78, 0, 0, "-", "collect_layer_histogram"], [79, 0, 0, "-", "constant"], [80, 0, 0, "-", "create_obj_from_config"], [81, 0, 0, "-", "export"], [86, 0, 0, "-", "kl_divergence"], [87, 0, 0, "-", "load_huggingface"], [88, 0, 0, "-", "logger"], [89, 0, 0, "-", "neural_insights_utils"], [90, 0, 0, "-", "options"], [91, 0, 0, "-", "pytorch"], [92, 0, 0, "-", "utility"], [93, 0, 0, "-", "weights_details"]], "neural_compressor.utils.collect_layer_histogram": [[78, 1, 1, "", "LayerHistogramCollector"]], "neural_compressor.utils.create_obj_from_config": [[80, 2, 1, "", "create_dataloader"], [80, 2, 1, "", "create_dataset"], [80, 2, 1, "", "create_eval_func"], [80, 2, 1, "", "create_train_func"], [80, 2, 1, "", "get_algorithm"], [80, 2, 1, "", "get_func_from_config"], [80, 2, 1, "", "get_metrics"], [80, 2, 1, "", "get_postprocess"], [80, 2, 1, "", "get_preprocess"]], "neural_compressor.utils.export": [[82, 0, 0, "-", "qlinear2qdq"], [83, 0, 0, "-", "tf2onnx"], [84, 0, 0, "-", "torch2onnx"]], "neural_compressor.utils.export.qlinear2qdq": [[82, 2, 1, "", "check_model"], [82, 2, 1, "", "onnx_qlinear_to_qdq"]], "neural_compressor.utils.export.tf2onnx": [[83, 2, 1, "", "tf_to_fp32_onnx"], [83, 2, 1, "", "tf_to_int8_onnx"]], "neural_compressor.utils.export.torch2onnx": [[84, 2, 1, "", "dynamic_quant_export"], [84, 2, 1, "", "get_node_mapping"], [84, 2, 1, "", "get_quantizable_onnx_ops"], [84, 2, 1, "", "static_quant_export"], [84, 2, 1, "", "torch_to_fp32_onnx"], [84, 2, 1, "", "torch_to_int8_onnx"]], "neural_compressor.utils.kl_divergence": [[86, 1, 1, "", "KL_Divergence"]], "neural_compressor.utils.load_huggingface": [[87, 1, 1, "", "OptimizedModel"], [87, 2, 1, "", "export_compressed_model"], [87, 2, 1, "", "save_for_huggingface_upstream"]], "neural_compressor.utils.logger": [[88, 1, 1, "", "Logger"], [88, 2, 1, "", "debug"], [88, 2, 1, "", "error"], [88, 2, 1, "", "fatal"], [88, 2, 1, "", "info"], [88, 2, 1, "", "log"], [88, 2, 1, "", "warn"], [88, 2, 1, "", "warning"]], "neural_compressor.utils.neural_insights_utils": [[89, 2, 1, "", "get_model_path"], [89, 2, 1, "", "register_neural_insights_workload"], [89, 2, 1, "", "update_neural_insights_workload"], [89, 2, 1, "", "update_neural_insights_workload_accuracy_data"]], "neural_compressor.utils.options": [[90, 1, 1, "", "onnxrt"]], "neural_compressor.utils.pytorch": [[91, 2, 1, "", "is_int8_model"], [91, 2, 1, "", "load"], [91, 2, 1, "", "load_weight_only"], [91, 2, 1, "", "recover_model_from_json"]], "neural_compressor.utils.utility": [[92, 1, 1, "", "CaptureOutputToFile"], [92, 1, 1, "", "CpuInfo"], [92, 2, 1, "", "Dequantize"], [92, 1, 1, "", "DotDict"], [92, 1, 1, "", "GLOBAL_STATE"], [92, 1, 1, "", "LazyImport"], [92, 1, 1, "", "MODE"], [92, 1, 1, "", "OpEntry"], [92, 1, 1, "", "Statistics"], [92, 2, 1, "", "alias_param"], [92, 2, 1, "", "calculate_mse"], [92, 2, 1, "", "check_key_exist"], [92, 2, 1, "", "combine_histogram"], [92, 2, 1, "", "compare_objects"], [92, 2, 1, "", "compute_sparsity"], [92, 2, 1, "", "deep_get"], [92, 2, 1, "", "deep_set"], [92, 2, 1, "", "dequantize_weight"], [92, 2, 1, "", "dump_class_attrs"], [92, 2, 1, "", "dump_data_to_local"], [92, 2, 1, "", "dump_elapsed_time"], [92, 2, 1, "", "dump_table"], [92, 2, 1, "", "dump_table_to_csv"], [92, 2, 1, "", "equal_dicts"], [92, 2, 1, "", "fault_tolerant_file"], [92, 2, 1, "", "get_all_fp32_data"], [92, 2, 1, "", "get_number_of_sockets"], [92, 2, 1, "", "get_op_list"], [92, 2, 1, "", "get_size"], [92, 2, 1, "", "get_tensor_histogram"], [92, 2, 1, "", "get_tensors_info"], [92, 2, 1, "", "get_tuning_history"], [92, 2, 1, "", "get_weights_details"], [92, 2, 1, "", "load_data_from_pkl"], [92, 2, 1, "", "mse_metric_gap"], [92, 2, 1, "", "print_op_list"], [92, 2, 1, "", "print_table"], [92, 2, 1, "", "recover"], [92, 2, 1, "", "set_random_seed"], [92, 2, 1, "", "set_resume_from"], [92, 2, 1, "", "set_tensorboard"], [92, 2, 1, "", "set_workspace"], [92, 2, 1, "", "show_memory_info"], [92, 2, 1, "", "singleton"], [92, 2, 1, "", "str2array"], [92, 2, 1, "", "time_limit"], [92, 2, 1, "", "version1_eq_version2"], [92, 2, 1, "", "version1_gt_version2"], [92, 2, 1, "", "version1_gte_version2"], [92, 2, 1, "", "version1_lt_version2"], [92, 2, 1, "", "version1_lte_version2"]], "neural_compressor.utils.weights_details": [[93, 1, 1, "", "WeightsDetails"], [93, 1, 1, "", "WeightsStatistics"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:function", "3": "py:attribute", "4": "py:data"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "function", "Python function"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "data", "Python data"]}, "titleterms": {"neural_compressor": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94], "algorithm": [0, 1, 2, 3, 4, 133, 199, 202, 205], "class": [0, 1, 3, 4, 6, 7, 9, 10, 12, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 32, 34, 35, 36, 38, 41, 45, 47, 49, 50, 51, 52, 53, 54, 55, 56, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 73, 74, 75, 76, 77, 78, 86, 87, 88, 90, 92, 93, 115, 184], "function": [0, 5, 6, 7, 13, 14, 20, 22, 29, 35, 36, 38, 39, 41, 42, 43, 45, 46, 50, 54, 56, 58, 62, 70, 74, 76, 77, 80, 82, 83, 84, 87, 88, 89, 91, 92, 141], "modul": [0, 1, 3, 4, 5, 6, 7, 9, 10, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 32, 34, 35, 36, 38, 39, 41, 42, 43, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 73, 74, 75, 76, 77, 78, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93], "content": [0, 1, 3, 4, 5, 6, 7, 9, 10, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 32, 34, 35, 36, 38, 39, 41, 42, 43, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 73, 74, 75, 76, 77, 78, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 114, 184], "fast_bias_correct": 1, "submodul": [2, 8, 11, 17, 26, 30, 33, 37, 44, 48, 66, 72, 81, 85], "smooth_quant": 3, "weight_correct": 4, "benchmark": [5, 106, 123, 132, 138, 153, 195], "common": [6, 7, 8, 9, 10, 11, 12, 13, 14, 100, 101, 111, 144], "base_config": 6, "base_tun": 7, "subpackag": [8, 16, 31, 37, 66, 85], "tuning_param": 9, "util": [10, 11, 12, 13, 14, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 120], "constant": [10, 71, 79], "logger": [12, 88, 134], "save_load": 13, "config": [15, 125, 136, 191], "contrib": [16, 17, 18, 19], "strategi": [17, 18, 19, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 130, 201, 205], "sigopt": [18, 201, 205], "tpe": [19, 205], "data": [20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 116, 117, 138, 142, 178], "dataset": [20, 21, 22, 23, 24, 25, 26, 27, 136, 138, 147, 179], "bert_dataset": 20, "coco_dataset": 21, "attribut": [22, 109], "dummy_dataset": 23, "dummy_dataset_v2": 24, "imagenet_dataset": 25, "style_transfer_dataset": 27, "filter": [28, 29, 30], "coco_filt": 28, "transform": [32, 33, 34, 35, 36, 147, 204], "imagenet_transform": 32, "postprocess": 34, "token": 35, "metric": [38, 39, 40, 41, 42, 43, 44, 45, 147, 152], "bleu": 38, "bleu_util": 39, "coco_label_map": 40, "coco_tool": 41, "evaluate_squad": 42, "f1": 43, "mix_precis": 46, "model": [47, 48, 49, 50, 51, 52, 53, 54, 55, 98, 99, 105, 116, 127, 143, 146, 149, 151, 153, 155, 156, 163, 177, 178, 179, 187, 188, 189, 193, 197, 199, 202, 208], "base_model": 47, "keras_model": 49, "mxnet_model": 51, "nets_factori": 52, "onnx_model": 53, "tensorflow_model": 54, "torch_model": 55, "object": [56, 128, 187, 188, 189, 191], "profil": [57, 138], "quantiz": [58, 95, 96, 98, 99, 100, 101, 102, 104, 107, 111, 114, 116, 117, 129, 133, 138, 140, 143, 146, 149, 151, 153, 154, 156, 163, 174, 176, 177, 178, 179, 187, 188, 189, 195, 196, 197, 198, 199, 202, 208], "auto": [59, 103, 168, 174, 198, 202, 205], "auto_mixed_precis": 60, "basic": [61, 112, 205], "bayesian": [62, 205], "conserv": [63, 205], "exhaust": [64, 205], "hawq_v2": [65, 205], "mse": [67, 205], "mse_v2": [68, 205], "random": [69, 205], "tuning_sampl": 73, "tuning_spac": 74, "tuning_struct": 75, "train": [77, 104, 107, 111, 131, 141, 153, 193, 196], "collect_layer_histogram": 78, "create_obj_from_config": 80, "export": [81, 82, 83, 84, 143, 199], "qlinear2qdq": 82, "tf2onnx": 83, "torch2onnx": 84, "kl_diverg": 86, "load_huggingfac": 87, "neural_insights_util": 89, "option": [90, 141, 162], "pytorch": [91, 97, 98, 99, 100, 105, 107, 136, 141, 143, 152, 178, 196, 197, 198, 203, 204, 208], "weights_detail": 93, "version": 94, "dynam": [95, 107, 111, 112, 196], "introduct": [95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 111, 112, 115, 116, 117, 132, 133, 135, 136, 138, 139, 140, 141, 143, 145, 148, 152, 154, 155, 156, 174, 177, 178, 179, 191, 192, 193, 195, 196, 197, 199, 201, 202, 203, 204, 205, 207], "get": [95, 96, 97, 99, 100, 102, 111, 112, 114, 115, 132, 135, 136, 138, 139, 140, 141, 145, 146, 152, 154, 156, 157, 168, 175, 176, 180, 181, 182, 183, 191, 192, 193, 195, 196, 203, 207], "start": [95, 96, 97, 99, 100, 102, 111, 112, 114, 115, 132, 135, 136, 138, 139, 140, 141, 145, 146, 152, 154, 156, 157, 158, 162, 168, 176, 180, 181, 182, 187, 188, 189, 191, 192, 193, 195, 196, 203, 207], "exampl": [95, 96, 97, 99, 100, 102, 103, 107, 111, 112, 115, 121, 132, 135, 136, 138, 139, 140, 141, 142, 143, 152, 153, 154, 155, 156, 159, 163, 176, 177, 178, 179, 181, 186, 187, 188, 189, 191, 192, 193, 196, 197, 199, 202, 203, 208], "microsc": [96, 156], "api": [96, 97, 101, 104, 112, 115, 116, 121, 122, 132, 135, 136, 139, 140, 141, 146, 147, 152, 154, 156, 157, 161, 175, 176, 183, 189, 191, 192, 193, 195, 206], "refer": [96, 100, 107, 133, 134, 156, 193, 196, 199, 202], "mix": [97, 126, 153, 154, 198], "precis": [97, 126, 153, 154, 198], "support": [97, 98, 100, 101, 104, 106, 110, 111, 112, 115, 117, 132, 133, 135, 136, 138, 139, 140, 141, 143, 145, 148, 149, 152, 154, 155, 156, 158, 159, 163, 164, 191, 192, 193, 195, 196, 197, 199, 202, 203, 204, 207], "matrix": [97, 98, 100, 101, 104, 106, 111, 112, 115, 132, 133, 135, 136, 138, 139, 140, 141, 143, 145, 148, 152, 154, 155, 156, 159, 191, 192, 193, 195, 196, 197, 199, 202, 203, 207], "hardwar": [97, 149, 154, 208], "softwar": [97, 149, 154], "request": [97, 110, 154, 185], "bf16": [97, 154], "fp16": [97, 154], "accuraci": [97, 102, 107, 151, 154, 177, 179, 196, 205], "driven": [97, 154], "autotun": [97, 101, 105], "smooth": [98, 103, 104, 107, 202], "usag": [98, 99, 100, 103, 106, 112, 163, 174, 183, 202, 203, 205], "fix": [98, 103, 202], "alpha": [98, 103, 202], "specifi": [98, 99, 100, 102, 196], "rule": [98, 99, 100, 102, 134, 196], "valid": [98, 146, 149, 202, 208], "framework": [98, 116, 135, 136, 143, 145, 155, 156, 195, 197, 199, 202], "static": [99, 104, 107, 111, 114, 196], "ipex": [99, 107, 196], "backend": [99, 104, 115, 196], "sampl": [99, 116, 146], "pt2e": 99, "weight": [100, 107, 114, 177, 178, 179, 199], "onli": [100, 107, 112, 114, 199], "argument": [100, 162], "rtn": 100, "gptq": 100, "autoround": 100, "awq": 100, "teq": 100, "hqq": 100, "save": 100, "load": [100, 101], "torch": [101, 120, 208], "like": [101, 117], "problem": [101, 111], "tensorflow": [102, 104, 105, 107, 136, 141, 143, 152, 196, 198, 203, 204, 208], "without": 102, "awar": [102, 107, 111, 153, 193, 196], "tune": [102, 103, 107, 117, 196, 199, 202, 205], "With": 102, "quant": [103, 202], "us": [103, 106, 117, 135, 152, 181, 182, 202], "determin": [103, 202], "through": [103, 149, 202, 208], "scheme": [104, 107, 196], "approach": [104, 196], "post": [104, 111, 153, 183, 196], "devic": [104, 196], "overview": [105, 110, 184, 206], "how": [105, 116, 117, 138, 177, 178, 179, 181], "work": [105, 115, 181, 196], "gener": [106, 116], "case": 106, "dump": [106, 176, 178], "throughput": 106, "latenc": 106, "summari": [106, 117, 177], "demo": 106, "fundament": [107, 196, 202], "symmetr": 107, "asymmetr": 107, "per": [107, 202], "tensor": [107, 176, 202], "channel": [107, 202], "matmul": [107, 202], "limit": [107, 202], "intel": [108, 114, 135, 138, 148, 149, 152, 153, 160, 168, 174, 209], "neural": [108, 111, 112, 114, 135, 138, 148, 149, 152, 153, 157, 161, 163, 168, 174, 176, 177, 178, 179, 181, 182, 183, 187, 188, 189, 193, 201, 206, 209], "compressor": [108, 111, 114, 135, 138, 148, 149, 152, 153, 168, 174, 201, 209], "document": [108, 114, 121, 209], "section": [108, 209], "contributor": [109, 110], "coven": [109, 110], "code": [109, 110, 112, 134, 153, 175, 180, 199, 206], "conduct": [109, 110], "our": [109, 202], "pledg": 109, "standard": 109, "respons": [109, 183], "scope": [109, 193], "enforc": 109, "contribut": [110, 167, 171], "guidelin": 110, "creat": [110, 180], "pull": 110, "step": [110, 176, 177, 178, 179], "checklist": 110, "templat": 110, "accept": 110, "criteria": [110, 193, 205], "statu": [110, 182, 183], "check": 110, "fx": 111, "mode": [111, 208], "note": [111, 200], "detail": 111, "architectur": [112, 137, 148, 149], "search": [112, 174], "na": [112, 195], "1": [112, 141, 144, 147, 153, 174, 181, 182, 208], "python": [112, 135, 146, 152, 157, 161, 162, 169, 172, 176, 195, 206], "yaml": [112, 116, 136, 141, 145, 207], "2": [112, 141, 144, 147, 153, 174, 181, 182, 208], "advanc": [112, 180, 206], "custom": [112, 135, 152, 187, 205], "secur": [113, 141], "polici": [113, 205], "report": 113, "vulner": 113, "what": [114, 157, 175, 181], "": [114, 149, 175, 181], "new": [114, 115, 117, 169, 172, 205], "instal": [114, 138, 149, 158, 160, 167, 168, 171, 176, 181, 182], "from": [114, 116, 149, 153, 176, 181, 182], "pypi": [114, 163, 176], "llm": [114, 151], "non": 114, "select": [114, 168], "public": [114, 134, 194], "event": [114, 194], "addit": 114, "commun": 114, "adaptor": [115, 116, 118], "flow": [115, 196], "queri": [115, 182, 187, 188, 189], "background": [115, 134, 174], "ad": 115, "capabl": [115, 199], "implement": [115, 116], "onnxrtadaptor": 115, "add": [116, 182], "an": [116, 187, 188, 189], "list": [116, 142, 186, 204], "need": 116, "design": [116, 137, 184, 205], "query_fw_cap": 116, "accord": [116, 117], "tune_cfg": 116, "prepar": [116, 138, 177, 178, 179, 201], "calibr": [116, 133], "fp32": [116, 143], "graph": 116, "run": [116, 138, 175, 177, 178, 179, 180], "iter": 116, "oper": [116, 117], "calcul": 116, "rang": 116, "type": [117, 134, 193], "int4": 117, "few": 117, "line": 117, "chang": [117, 147, 173, 175, 200], "defin": [117, 141], "abil": 117, "specif": [117, 136], "invok": 117, "kernel": 117, "configur": [117, 141, 145, 180, 195, 201, 207], "onnx": [119, 149, 196, 197, 208], "runtim": [119, 149, 196, 197, 208], "compress": [124, 199], "inc": 134, "convent": 134, "import": 134, "string": 134, "annot": 134, "comment": 134, "todo": 134, "intern": 134, "interfac": 134, "folder": [134, 175], "structur": 134, "recommend": 134, "v": [134, 175], "set": [134, 138, 160, 174], "json": 134, "dataload": [135, 136], "build": [135, 144, 152, 180, 181, 182], "mxnet": [136, 152, 196, 204], "onnxrt": [136, 152, 204], "file": [136, 145, 207], "user": [136, 141, 147, 195, 199, 206, 207], "workflow": [137, 184], "diagnosi": [138, 176], "featur": [138, 141, 145, 148, 163, 164, 168, 195, 196, 203, 207], "modifi": 138, "script": [138, 180], "see": 138, "do": [138, 157], "paramet": [138, 183], "descript": [138, 183, 185], "suggest": 138, "fallback": 138, "distil": [139, 140, 153, 195, 208], "knowledg": [139, 208], "intermedi": 139, "layer": [139, 197, 202], "self": 139, "distribut": [141, 163, 205], "infer": 141, "evalu": 141, "pure": 141, "horovodrun": 141, "execut": 141, "releas": [142, 169, 172, 200], "int8": [143, 208], "appendix": 143, "op": 143, "frequent": 144, "ask": 144, "question": 144, "issu": [144, 200], "3": [144, 158, 174, 194], "4": [144, 165, 174, 194], "quick": [146, 162], "incompat": [147, 200], "between": 147, "v1": 147, "face": [147, 188, 189], "built": [147, 149, 152], "infrastructur": 148, "prerequisit": [149, 181, 182], "binari": 149, "sourc": [149, 176, 178, 179, 181, 182], "ai": 149, "kit": 149, "system": 149, "requir": [149, 167, 171, 177, 178, 179, 187], "environ": [149, 160], "cpu": [149, 160, 208], "base": [149, 183, 206], "64": 149, "compat": 149, "processor": 149, "gpu": 149, "xe": 149, "multipl": [149, 191, 208], "vendor": 149, "legal": 150, "inform": 150, "licens": 150, "citat": 150, "trademark": 150, "recip": [151, 196], "larg": [151, 193], "languag": [151, 193], "migrat": 153, "x": 153, "prune": [153, 193, 195, 208], "orchestr": [153, 192], "dure": [154, 198], "coder": [157, 161, 163, 174, 206], "we": 157, "offer": 157, "jupyt": [157, 158, 169, 172], "lab": [157, 158], "extens": [157, 167, 168, 171, 174, 175, 184], "launcher": [157, 162], "contact": [157, 181], "aw": 158, "amazon": 158, "sagemak": 158, "For": 158, "studio": 158, "notebook": 158, "instanc": 158, "guid": [158, 206], "bigdl": 159, "nano": 159, "platform": [160, 201], "best": [160, 168], "perform": [160, 201], "mkl": 160, "openmp": 160, "jemalloc": 160, "numa": 160, "control": 160, "variabl": 160, "frequenc": 160, "govern": 160, "enabl": [161, 168, 174], "bench": 161, "superbench": 161, "optim": [164, 174, 184, 187, 188, 189, 192, 193, 206], "v0": 165, "highlight": 165, "other": 165, "changelog": [166, 170], "neural_compressor_ext_lab": [167, 169], "uninstal": [167, 171], "develop": [167, 171], "packag": [167, 169, 171, 172], "jupyterlab": 168, "Or": 168, "let": 168, "u": 168, "help": 168, "you": 168, "pre": 168, "requisit": 168, "make": [169, 172, 175, 180], "manual": [169, 172], "npm": [169, 172, 180], "autom": [169, 172], "publish": [169, 172], "conda": [169, 172], "forg": [169, 172], "neural_compressor_ext_lab_alibaba": [171, 172], "log": [173, 182, 183], "unreleas": 173, "vscode": 174, "open": [174, 179], "icon": 174, "5": 174, "welcom": 175, "your": 175, "setup": 175, "up": 175, "straight": 175, "awai": 175, "explor": 175, "test": [175, 180], "go": 175, "further": 175, "insight": [176, 177, 178, 179], "research": 176, "collabor": 176, "debug": [177, 179], "analyz": [177, 179, 180], "result": [177, 179, 187, 188, 189], "activ": 177, "histogram": 179, "react": 180, "app": 180, "avail": 180, "eject": 180, "learn": [180, 181], "more": [180, 181], "split": 180, "bundl": 180, "size": 180, "progress": 180, "web": 180, "deploy": [180, 193], "fail": 180, "minifi": 180, "solut": [181, 182, 183, 187, 188, 189], "why": 181, "doe": 181, "method": [181, 182], "pip": [181, 182], "end": [181, 187, 188, 189], "servic": [182, 184, 187, 188, 189], "submit": [182, 183, 187, 188, 189], "task": [182, 183, 185, 187, 188, 189], "stop": [182, 187, 188, 189], "inspect": 182, "manag": [182, 187, 188], "resourc": [182, 187, 188], "node": 182, "state": 182, "cluster": [182, 183], "remov": 182, "url": 183, "endpoint": 183, "task_id": 183, "websocket": 183, "screen": 183, "ping": 183, "download": [183, 187, 188], "doc": 184, "wip": 184, "oaa": 184, "definit": 184, "diagram": 184, "hug": [188, 189], "grpc": 189, "client": 190, "singl": 191, "One": 192, "shot": 192, "network": 193, "pattern": 193, "schedul": 193, "sparsiti": 193, "decai": 193, "regular": 193, "retrain": 193, "free": 193, "spars": 193, "hyperparamet": 193, "full": 194, "82": 194, "2024": 194, "2023": 194, "25": 194, "2022": 194, "35": 194, "2021": 194, "15": [194, 208], "2018": 194, "2020": 194, "style": 195, "access": 195, "wise": 197, "lwq": 197, "turn": 198, "off": 198, "woq": [199, 208], "known": 200, "benefit": 201, "comparison": 201, "differ": 201, "smoothquant": 202, "enhanc": 202, "engin": 202, "entir": 202, "each": 202, "block": 202, "tensorboard": 203, "space": 205, "exit": 205, "process": 205, "zero": 206, "topic": 206, "innov": 206, "product": 206, "0": 208, "ptq": 208, "qat": 208, "17": 208, "qdq": 208}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"neural_compressor.algorithm.algorithm": [[0, "module-neural_compressor.algorithm.algorithm"]], "Classes": [[0, "classes"], [1, "classes"], [3, "classes"], [4, "classes"], [6, "classes"], [7, "classes"], [9, "classes"], [10, "classes"], [12, "classes"], [14, "classes"], [15, "classes"], [18, "classes"], [19, "classes"], [20, "classes"], [21, "classes"], [22, "classes"], [23, "classes"], [24, "classes"], [25, "classes"], [27, "classes"], [28, "classes"], [29, "classes"], [32, "classes"], [34, "classes"], [35, "classes"], [36, "classes"], [38, "classes"], [41, "classes"], [45, "classes"], [47, "classes"], [49, "classes"], [50, "classes"], [51, "classes"], [52, "classes"], [53, "classes"], [54, "classes"], [55, "classes"], [56, "classes"], [59, "classes"], [60, "classes"], [61, "classes"], [62, "classes"], [63, "classes"], [64, "classes"], [65, "classes"], [67, "classes"], [68, "classes"], [69, "classes"], [70, "classes"], [73, "classes"], [74, "classes"], [75, "classes"], [76, "classes"], [77, "classes"], [78, "classes"], [86, "classes"], [87, "classes"], [88, "classes"], [90, "classes"], [92, "classes"], [93, "classes"]], "Functions": [[0, "functions"], [5, "functions"], [6, "functions"], [7, "functions"], [13, "functions"], [14, "functions"], [20, "functions"], [22, "functions"], [29, "functions"], [35, "functions"], [36, "functions"], [38, "functions"], [39, "functions"], [41, "functions"], [42, "functions"], [43, "functions"], [45, "functions"], [46, "functions"], [50, "functions"], [54, "functions"], [56, "functions"], [58, "functions"], [62, "functions"], [70, "functions"], [74, "functions"], [76, "functions"], [77, "functions"], [80, "functions"], [82, "functions"], [83, "functions"], [84, "functions"], [87, "functions"], [88, "functions"], [89, "functions"], [91, "functions"], [92, "functions"]], "Module Contents": [[0, "module-contents"], [1, "module-contents"], [3, "module-contents"], [4, "module-contents"], [5, "module-contents"], [6, "module-contents"], [7, "module-contents"], [9, "module-contents"], [10, "module-contents"], [12, "module-contents"], [13, "module-contents"], [14, "module-contents"], [15, "module-contents"], [18, "module-contents"], [19, "module-contents"], [20, "module-contents"], [21, "module-contents"], [22, "module-contents"], [23, "module-contents"], [24, "module-contents"], [25, "module-contents"], [27, "module-contents"], [28, "module-contents"], [29, "module-contents"], [32, "module-contents"], [34, "module-contents"], [35, "module-contents"], [36, "module-contents"], [38, "module-contents"], [39, "module-contents"], [41, "module-contents"], [42, "module-contents"], [43, "module-contents"], [45, "module-contents"], [46, "module-contents"], [47, "module-contents"], [49, "module-contents"], [50, "module-contents"], [51, "module-contents"], [52, "module-contents"], [53, "module-contents"], [54, "module-contents"], [55, "module-contents"], [56, "module-contents"], [58, "module-contents"], [59, "module-contents"], [60, "module-contents"], [61, "module-contents"], [62, "module-contents"], [63, "module-contents"], [64, "module-contents"], [65, "module-contents"], [67, "module-contents"], [68, "module-contents"], [69, "module-contents"], [70, "module-contents"], [73, "module-contents"], [74, "module-contents"], [75, "module-contents"], [76, "module-contents"], [77, "module-contents"], [78, "module-contents"], [80, "module-contents"], [82, "module-contents"], [83, "module-contents"], [84, "module-contents"], [86, "module-contents"], [87, "module-contents"], [88, "module-contents"], [89, "module-contents"], [90, "module-contents"], [91, "module-contents"], [92, "module-contents"], [93, "module-contents"]], "neural_compressor.algorithm.fast_bias_correction": [[1, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[2, "module-neural_compressor.algorithm"]], "Submodules": [[2, "submodules"], [8, "submodules"], [11, "submodules"], [17, "submodules"], [26, "submodules"], [30, "submodules"], [33, "submodules"], [37, "submodules"], [44, "submodules"], [48, "submodules"], [66, "submodules"], [72, "submodules"], [81, "submodules"], [85, "submodules"]], "neural_compressor.algorithm.smooth_quant": [[3, "module-neural_compressor.algorithm.smooth_quant"]], "neural_compressor.algorithm.weight_correction": [[4, "module-neural_compressor.algorithm.weight_correction"]], "neural_compressor.benchmark": [[5, "module-neural_compressor.benchmark"]], "neural_compressor.common.base_config": [[6, "module-neural_compressor.common.base_config"]], "neural_compressor.common.base_tuning": [[7, "module-neural_compressor.common.base_tuning"]], "neural_compressor.common": [[8, "module-neural_compressor.common"]], "Subpackages": [[8, "subpackages"], [16, "subpackages"], [31, "subpackages"], [37, "subpackages"], [66, "subpackages"], [85, "subpackages"]], "neural_compressor.common.tuning_param": [[9, "module-neural_compressor.common.tuning_param"]], "neural_compressor.common.utils.constants": [[10, "module-neural_compressor.common.utils.constants"]], "neural_compressor.common.utils": [[11, "module-neural_compressor.common.utils"]], "neural_compressor.common.utils.logger": [[12, "module-neural_compressor.common.utils.logger"]], "neural_compressor.common.utils.save_load": [[13, "module-neural_compressor.common.utils.save_load"]], "neural_compressor.common.utils.utility": [[14, "module-neural_compressor.common.utils.utility"]], "neural_compressor.config": [[15, "module-neural_compressor.config"]], "neural_compressor.contrib": [[16, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[17, "module-neural_compressor.contrib.strategy"]], "neural_compressor.contrib.strategy.sigopt": [[18, "module-neural_compressor.contrib.strategy.sigopt"]], "neural_compressor.contrib.strategy.tpe": [[19, "module-neural_compressor.contrib.strategy.tpe"]], "neural_compressor.data.datasets.bert_dataset": [[20, "module-neural_compressor.data.datasets.bert_dataset"]], "neural_compressor.data.datasets.coco_dataset": [[21, "module-neural_compressor.data.datasets.coco_dataset"]], "neural_compressor.data.datasets.dataset": [[22, "module-neural_compressor.data.datasets.dataset"]], "Attributes": [[22, "attributes"]], "neural_compressor.data.datasets.dummy_dataset": [[23, "module-neural_compressor.data.datasets.dummy_dataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[24, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "neural_compressor.data.datasets.imagenet_dataset": [[25, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[26, "module-neural_compressor.data.datasets"]], "neural_compressor.data.datasets.style_transfer_dataset": [[27, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "neural_compressor.data.filters.coco_filter": [[28, "module-neural_compressor.data.filters.coco_filter"]], "neural_compressor.data.filters.filter": [[29, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.filters": [[30, "module-neural_compressor.data.filters"]], "neural_compressor.data": [[31, "module-neural_compressor.data"]], "neural_compressor.data.transforms.imagenet_transform": [[32, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[33, "module-neural_compressor.data.transforms"]], "neural_compressor.data.transforms.postprocess": [[34, "module-neural_compressor.data.transforms.postprocess"]], "neural_compressor.data.transforms.tokenization": [[35, "module-neural_compressor.data.transforms.tokenization"]], "neural_compressor.data.transforms.transform": [[36, "module-neural_compressor.data.transforms.transform"]], "neural_compressor": [[37, "module-neural_compressor"]], "neural_compressor.metric.bleu": [[38, "module-neural_compressor.metric.bleu"]], "neural_compressor.metric.bleu_util": [[39, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[40, "module-neural_compressor.metric.coco_label_map"]], "neural_compressor.metric.coco_tools": [[41, "module-neural_compressor.metric.coco_tools"]], "neural_compressor.metric.evaluate_squad": [[42, "module-neural_compressor.metric.evaluate_squad"]], "neural_compressor.metric.f1": [[43, "module-neural_compressor.metric.f1"]], "neural_compressor.metric": [[44, "module-neural_compressor.metric"]], "neural_compressor.metric.metric": [[45, "module-neural_compressor.metric.metric"]], "neural_compressor.mix_precision": [[46, "module-neural_compressor.mix_precision"]], "neural_compressor.model.base_model": [[47, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[48, "module-neural_compressor.model"]], "neural_compressor.model.keras_model": [[49, "module-neural_compressor.model.keras_model"]], "neural_compressor.model.model": [[50, "module-neural_compressor.model.model"]], "neural_compressor.model.mxnet_model": [[51, "module-neural_compressor.model.mxnet_model"]], "neural_compressor.model.nets_factory": [[52, "module-neural_compressor.model.nets_factory"]], "neural_compressor.model.onnx_model": [[53, "module-neural_compressor.model.onnx_model"]], "neural_compressor.model.tensorflow_model": [[54, "module-neural_compressor.model.tensorflow_model"]], "neural_compressor.model.torch_model": [[55, "module-neural_compressor.model.torch_model"]], "neural_compressor.objective": [[56, "module-neural_compressor.objective"]], "neural_compressor.profiling": [[57, "module-neural_compressor.profiling"]], "neural_compressor.quantization": [[58, "module-neural_compressor.quantization"]], "neural_compressor.strategy.auto": [[59, "module-neural_compressor.strategy.auto"]], "neural_compressor.strategy.auto_mixed_precision": [[60, "module-neural_compressor.strategy.auto_mixed_precision"]], "neural_compressor.strategy.basic": [[61, "module-neural_compressor.strategy.basic"]], "neural_compressor.strategy.bayesian": [[62, "module-neural_compressor.strategy.bayesian"]], "neural_compressor.strategy.conservative": [[63, "module-neural_compressor.strategy.conservative"]], "neural_compressor.strategy.exhaustive": [[64, "module-neural_compressor.strategy.exhaustive"]], "neural_compressor.strategy.hawq_v2": [[65, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy": [[66, "module-neural_compressor.strategy"]], "neural_compressor.strategy.mse": [[67, "module-neural_compressor.strategy.mse"]], "neural_compressor.strategy.mse_v2": [[68, "module-neural_compressor.strategy.mse_v2"]], "neural_compressor.strategy.random": [[69, "module-neural_compressor.strategy.random"]], "neural_compressor.strategy.strategy": [[70, "module-neural_compressor.strategy.strategy"]], "neural_compressor.strategy.utils.constant": [[71, "module-neural_compressor.strategy.utils.constant"]], "neural_compressor.strategy.utils": [[72, "module-neural_compressor.strategy.utils"]], "neural_compressor.strategy.utils.tuning_sampler": [[73, "module-neural_compressor.strategy.utils.tuning_sampler"]], "neural_compressor.strategy.utils.tuning_space": [[74, "module-neural_compressor.strategy.utils.tuning_space"]], "neural_compressor.strategy.utils.tuning_structs": [[75, "module-neural_compressor.strategy.utils.tuning_structs"]], "neural_compressor.strategy.utils.utility": [[76, "module-neural_compressor.strategy.utils.utility"]], "neural_compressor.training": [[77, "module-neural_compressor.training"]], "neural_compressor.utils.collect_layer_histogram": [[78, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[79, "module-neural_compressor.utils.constant"]], "neural_compressor.utils.create_obj_from_config": [[80, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils.export": [[81, "module-neural_compressor.utils.export"]], "neural_compressor.utils.export.qlinear2qdq": [[82, "module-neural_compressor.utils.export.qlinear2qdq"]], "neural_compressor.utils.export.tf2onnx": [[83, "module-neural_compressor.utils.export.tf2onnx"]], "neural_compressor.utils.export.torch2onnx": [[84, "module-neural_compressor.utils.export.torch2onnx"]], "neural_compressor.utils": [[85, "module-neural_compressor.utils"]], "neural_compressor.utils.kl_divergence": [[86, "module-neural_compressor.utils.kl_divergence"]], "neural_compressor.utils.load_huggingface": [[87, "module-neural_compressor.utils.load_huggingface"]], "neural_compressor.utils.logger": [[88, "module-neural_compressor.utils.logger"]], "neural_compressor.utils.neural_insights_utils": [[89, "module-neural_compressor.utils.neural_insights_utils"]], "neural_compressor.utils.options": [[90, "module-neural_compressor.utils.options"]], "neural_compressor.utils.pytorch": [[91, "module-neural_compressor.utils.pytorch"]], "neural_compressor.utils.utility": [[92, "module-neural_compressor.utils.utility"]], "neural_compressor.utils.weights_details": [[93, "module-neural_compressor.utils.weights_details"]], "neural_compressor.version": [[94, "module-neural_compressor.version"]], "Dynamic Quantization": [[95, "dynamic-quantization"], [107, "dynamic-quantization"], [111, "dynamic-quantization"]], "Introduction": [[95, "introduction"], [96, "introduction"], [97, "introduction"], [98, "introduction"], [99, "introduction"], [100, "introduction"], [101, "introduction"], [102, "introduction"], [103, "introduction"], [104, "introduction"], [106, "introduction"], [107, "introduction"], [111, "introduction"], [112, "introduction"], [115, "introduction"], [116, "introduction"], [117, "introduction"], [132, "introduction"], [133, "introduction"], [135, "introduction"], [136, "introduction"], [139, "introduction"], [140, "introduction"], [141, "introduction"], [143, "introduction"], [145, "introduction"], [148, "introduction"], [152, "introduction"], [154, "introduction"], [155, "introduction"], [156, "introduction"], [177, "introduction"], [178, "introduction"], [179, "introduction"], [191, "introduction"], [192, "introduction"], [193, "introduction"], [195, "introduction"], [197, "introduction"], [199, "introduction"], [201, "introduction"], [202, "introduction"], [203, "introduction"], [204, "introduction"], [205, "introduction"], [207, "introduction"]], "Getting Started with Dynamic Quantization": [[95, "getting-started-with-dynamic-quantization"]], "Examples": [[95, "examples"], [96, "examples"], [97, "examples"], [100, "examples"], [102, "examples"], [103, "examples"], [111, "examples"], [112, "examples"], [132, "examples"], [135, "examples"], [136, "examples"], [139, "examples"], [140, "examples"], [141, "examples"], [142, "examples"], [143, "examples"], [153, "examples"], [154, "examples"], [155, "examples"], [156, "examples"], [192, "examples"], [193, "examples"], [196, "examples"], [197, "examples"], [199, "examples"], [203, "examples"]], "Microscaling Quantization": [[96, "microscaling-quantization"], [156, "microscaling-quantization"]], "Get Started with Microscaling Quantization API": [[96, "get-started-with-microscaling-quantization-api"], [156, "get-started-with-microscaling-quantization-api"]], "Reference": [[96, "reference"], [100, "reference"], [107, "reference"], [133, "reference"], [134, "reference"], [156, "reference"], [193, "reference"], [196, "reference"], [199, "reference"], [202, "reference"]], "PyTorch Mixed Precision": [[97, "pytorch-mixed-precision"]], "Mixed Precision Support Matrix": [[97, "mixed-precision-support-matrix"], [154, "mixed-precision-support-matrix"]], "Hardware and Software requests for BF16": [[97, "hardware-and-software-requests-for-bf16"], [154, "hardware-and-software-requests-for-bf16"]], "Hardware and Software requests for FP16": [[97, "hardware-and-software-requests-for-fp16"], [154, "hardware-and-software-requests-for-fp16"]], "Accuracy-driven mixed precision": [[97, "accuracy-driven-mixed-precision"], [154, "accuracy-driven-mixed-precision"]], "Get Started with autotune API": [[97, "get-started-with-autotune-api"]], "PyTorch Smooth Quantization": [[98, "pytorch-smooth-quantization"]], "Usage": [[98, "usage"], [100, "usage"], [103, "usage"], [106, "usage"], [163, "usage"], [183, "usage"], [183, "id2"], [183, "id6"], [183, "id9"], [183, "id16"], [183, "id19"], [183, "id22"], [183, "id25"], [202, "usage"], [203, "usage"], [203, "id1"], [205, "usage"], [205, "id2"], [205, "id4"], [205, "id6"], [205, "id8"], [205, "id10"], [205, "id12"], [205, "id14"], [205, "id16"], [205, "id18"], [205, "id20"], [205, "id22"]], "Fixed Alpha": [[98, "fixed-alpha"]], "Specify Quantization Rules": [[98, "specify-quantization-rules"], [99, "specify-quantization-rules"], [100, "specify-quantization-rules"], [102, "specify-quantization-rules"], [196, "specify-quantization-rules"]], "Validated Models": [[98, "validated-models"], [146, "validated-models"], [202, "validated-models"], [208, "validated-models"]], "Supported Framework Matrix": [[98, "supported-framework-matrix"], [202, "supported-framework-matrix"]], "PyTorch Static Quantization": [[99, "pytorch-static-quantization"]], "Get Started": [[99, "get-started"], [100, "get-started"], [102, "get-started"], [111, "get-started"], [138, "get-started"], [181, "get-started"], [196, "get-started"]], "Static Quantization with IPEX Backend": [[99, "static-quantization-with-ipex-backend"]], "Usage Sample with IPEX": [[99, "usage-sample-with-ipex"]], "Model Examples": [[99, "model-examples"]], "Static Quantization with PT2E Backend": [[99, "static-quantization-with-pt2e-backend"]], "Usage Sample with PT2E": [[99, "usage-sample-with-pt2e"]], "Model Examples with PT2E": [[99, "model-examples-with-pt2e"]], "PyTorch Weight Only Quantization": [[100, "pytorch-weight-only-quantization"]], "Supported Matrix": [[100, "supported-matrix"], [101, "supported-matrix"], [106, "supported-matrix"]], "Common arguments": [[100, "common-arguments"]], "RTN": [[100, "rtn"]], "GPTQ": [[100, "gptq"]], "AutoRound": [[100, "autoround"]], "AWQ": [[100, "awq"]], "TEQ": [[100, "teq"]], "HQQ": [[100, "hqq"]], "Saving and Loading": [[100, "saving-and-loading"]], "Torch": [[101, "torch"]], "Torch-like APIs": [[101, "torch-like-apis"]], "Quantization APIs": [[101, "quantization-apis"]], "Autotune API": [[101, "autotune-api"]], "Load API": [[101, "load-api"]], "Common Problems": [[101, "common-problems"]], "TensorFlow Quantization": [[102, "tensorflow-quantization"]], "Without Accuracy Aware Tuning": [[102, "without-accuracy-aware-tuning"]], "With Accuracy Aware Tuning": [[102, "with-accuracy-aware-tuning"]], "Smooth Quant": [[103, "smooth-quant"], [202, "smooth-quant"]], "Using a Fixed alpha": [[103, "using-a-fixed-alpha"]], "Determining the alpha through auto-tuning": [[103, "determining-the-alpha-through-auto-tuning"], [202, "determining-the-alpha-through-auto-tuning"]], "TensorFlow": [[104, "tensorflow"], [136, "tensorflow"], [152, "tensorflow"], [204, "tensorflow"]], "API for TensorFlow": [[104, "api-for-tensorflow"]], "Support Matrix": [[104, "support-matrix"], [133, "support-matrix"], [159, "support-matrix"]], "Quantization Scheme": [[104, "quantization-scheme"]], "Quantization Approaches": [[104, "quantization-approaches"], [196, "quantization-approaches"]], "Post Training Static Quantization": [[104, "post-training-static-quantization"], [111, "post-training-static-quantization"], [196, "post-training-static-quantization"]], "Smooth Quantization": [[104, "smooth-quantization"], [107, "smooth-quantization"]], "Backend and Device": [[104, "backend-and-device"]], "AutoTune": [[105, "autotune"]], "Overview": [[105, "overview"], [184, "overview"], [206, "overview"]], "How it Works": [[105, "how-it-works"]], "Working with Autotune": [[105, "working-with-autotune"]], "Working with PyTorch Model": [[105, "working-with-pytorch-model"]], "Working with Tensorflow Model": [[105, "working-with-tensorflow-model"]], "Benchmark": [[106, "benchmark"], [123, "benchmark"], [153, "benchmark"], [195, "benchmark"]], "General Use Cases": [[106, "general-use-cases"]], "Dump Throughput and Latency Summary": [[106, "dump-throughput-and-latency-summary"]], "Demo usage": [[106, "demo-usage"]], "Quantization": [[107, "quantization"], [129, "quantization"], [195, "quantization"], [196, "quantization"]], "Quantization Fundamentals": [[107, "quantization-fundamentals"], [196, "quantization-fundamentals"], [202, "quantization-fundamentals"]], "Symmetric & Asymmetric": [[107, "symmetric-asymmetric"]], "Quantization Scheme in TensorFlow": [[107, "quantization-scheme-in-tensorflow"], [196, "quantization-scheme-in-tensorflow"]], "Quantization Scheme in PyTorch": [[107, "quantization-scheme-in-pytorch"], [196, "quantization-scheme-in-pytorch"]], "Quantization Scheme in IPEX": [[107, "quantization-scheme-in-ipex"], [196, "quantization-scheme-in-ipex"]], "Per-tensor & Per-channel": [[107, "per-tensor-per-channel"], [202, "per-tensor-per-channel"]], "Per-tensor example": [[107, "per-tensor-example"], [202, "per-tensor-example"]], "Per-channel example": [[107, "per-channel-example"], [202, "per-channel-example"]], "Matmul quantization example": [[107, "matmul-quantization-example"], [202, "matmul-quantization-example"]], "Static Quantization": [[107, "static-quantization"]], "Per-channel limitation": [[107, "per-channel-limitation"], [202, "per-channel-limitation"]], "Weight Only Quantization": [[107, "weight-only-quantization"]], "Quantization Aware Training": [[107, "quantization-aware-training"], [153, "quantization-aware-training"], [196, "quantization-aware-training"], [196, "id1"]], "Accuracy Aware Tuning": [[107, "accuracy-aware-tuning"], [196, "accuracy-aware-tuning"]], "Intel\u00ae Neural Compressor Documentation": [[108, "intel-neural-compressor-documentation"], [209, "intel-neural-compressor-documentation"]], "Sections": [[108, "sections"], [209, "sections"]], "Contributor Covenant Code of Conduct": [[109, "contributor-covenant-code-of-conduct"], [110, "contributor-covenant-code-of-conduct"]], "Our Pledge": [[109, "our-pledge"]], "Our Standards": [[109, "our-standards"]], "Our Responsibilities": [[109, "our-responsibilities"]], "Scope": [[109, "scope"]], "Enforcement": [[109, "enforcement"]], "Attribution": [[109, "attribution"]], "Contribution Guidelines": [[110, "contribution-guidelines"]], "Create Pull Request": [[110, "create-pull-request"]], "Step-by-Step guidelines": [[110, "step-by-step-guidelines"]], "Pull Request Checklist": [[110, "pull-request-checklist"]], "Pull Request Template": [[110, "pull-request-template"]], "Pull Request Acceptance Criteria": [[110, "pull-request-acceptance-criteria"]], "Pull Request Status Checks Overview": [[110, "pull-request-status-checks-overview"]], "Support": [[110, "support"]], "FX": [[111, "fx"]], "FX Mode Support Matrix in Neural Compressor": [[111, "fx-mode-support-matrix-in-neural-compressor"]], "Post Training Dynamic Quantization": [[111, "post-training-dynamic-quantization"], [196, "post-training-dynamic-quantization"]], "Quantization-Aware Training": [[111, "quantization-aware-training"]], "Note": [[111, "note"]], "Details": [[111, "details"]], "Common Problem": [[111, "common-problem"]], "Static Quantization & Quantization Aware Training": [[111, "static-quantization-quantization-aware-training"]], "Neural Architecture Search": [[112, "neural-architecture-search"]], "Basic NAS": [[112, "basic-nas"]], "Dynamic NAS": [[112, "dynamic-nas"]], "NAS Support Matrix": [[112, "nas-support-matrix"]], "Get Started with NAS API": [[112, "get-started-with-nas-api"]], "Basic Usage": [[112, "basic-usage"]], "1. Python code + YAML": [[112, "python-code-yaml"]], "2. Python code only": [[112, "python-code-only"]], "Advanced Usage (Custom NAS)": [[112, "advanced-usage-custom-nas"]], "Security Policy": [[113, "security-policy"]], "Report a Vulnerability": [[113, "report-a-vulnerability"]], "Intel\u00ae Neural Compressor": [[114, "intel-neural-compressor"], [174, "intel-neural-compressor"]], "What\u2019s New": [[114, "what-s-new"]], "Installation": [[114, "installation"], [149, "installation"], [149, "id1"], [168, "installation"], [176, "installation"], [181, "installation"]], "Install from pypi": [[114, "install-from-pypi"], [176, "install-from-pypi"]], "Getting Started": [[114, "getting-started"], [146, "getting-started"], [176, "getting-started"]], "Weight-Only Quantization (LLMs)": [[114, "weight-only-quantization-llms"]], "Static Quantization (Non-LLMs)": [[114, "static-quantization-non-llms"]], "Documentation": [[114, "documentation"]], "Selected Publications/Events": [[114, "selected-publications-events"]], "Additional Content": [[114, "additional-content"]], "Communication": [[114, "communication"]], "Adaptor": [[115, "adaptor"], [118, "adaptor"]], "Adaptor Support Matrix": [[115, "adaptor-support-matrix"]], "Working Flow": [[115, "working-flow"], [196, "working-flow"]], "Get Started with Adaptor API": [[115, "get-started-with-adaptor-api"]], "Query API": [[115, "query-api"]], "Background": [[115, "background"], [134, "background"]], "Query API Introduction": [[115, "query-api-introduction"]], "Example of Adding a New Backend Support": [[115, "example-of-adding-a-new-backend-support"]], "Capability": [[115, "capability"]], "Implement ONNXRTAdaptor Class": [[115, "implement-onnxrtadaptor-class"]], "How to Add An Adaptor": [[116, "how-to-add-an-adaptor"]], "API List that Need to Implement": [[116, "api-list-that-need-to-implement"]], "Design the framework YAML": [[116, "design-the-framework-yaml"]], "Add query_fw_capability to Adaptor": [[116, "add-query-fw-capability-to-adaptor"]], "Add quantize API according to tune_cfg": [[116, "add-quantize-api-according-to-tune-cfg"]], "Prepare calibration model from fp32 graph": [[116, "prepare-calibration-model-from-fp32-graph"]], "Run sampling iterations of the fp32 graph to calibrate quantizable operators.": [[116, "run-sampling-iterations-of-the-fp32-graph-to-calibrate-quantizable-operators"]], "Calculate the data range and generate quantized model": [[116, "calculate-the-data-range-and-generate-quantized-model"]], "How to Support New Data Type, Like Int4, with a Few Line Changes": [[117, "how-to-support-new-data-type-like-int4-with-a-few-line-changes"]], "Define the Quantization Ability of the Specific Operator": [[117, "define-the-quantization-ability-of-the-specific-operator"]], "Invoke the Operator Kernel According to the Tuning Configuration": [[117, "invoke-the-operator-kernel-according-to-the-tuning-configuration"]], "Use the New Data Type": [[117, "use-the-new-data-type"]], "Summary": [[117, "summary"]], "ONNX Runtime": [[119, "onnx-runtime"]], "Torch Utils": [[120, "torch-utils"]], "API Document Example": [[121, "api-document-example"]], "APIs": [[122, "apis"]], "Compression": [[124, "compression"]], "Config": [[125, "config"]], "Mix Precision": [[126, "mix-precision"], [153, "mix-precision"]], "Model": [[127, "model"], [155, "model"], [177, "model"], [179, "model"]], "Objective": [[128, "objective"], [187, "objective"], [188, "objective"], [189, "objective"], [191, "objective"]], "Strategy": [[130, "strategy"]], "Training": [[131, "training"]], "Benchmarking": [[132, "benchmarking"]], "Benchmark Support Matrix": [[132, "benchmark-support-matrix"]], "Get Started with Benchmark API": [[132, "get-started-with-benchmark-api"]], "Calibration Algorithms in Quantization": [[133, "calibration-algorithms-in-quantization"]], "Calibration Algorithms": [[133, "calibration-algorithms"]], "INC Coding Conventions": [[134, "inc-coding-conventions"]], "Rules": [[134, "rules"]], "Imports": [[134, "imports"]], "Strings": [[134, "strings"]], "Logger": [[134, "logger"]], "Type Annotations": [[134, "type-annotations"]], "Comments": [[134, "comments"]], "TODO Comments": [[134, "todo-comments"]], "Public and Internal Interfaces": [[134, "public-and-internal-interfaces"]], "Folder structure": [[134, "folder-structure"]], "Recommend VS Code settings.json": [[134, "recommend-vs-code-settings-json"]], "DataLoader": [[135, "dataloader"]], "Supported Framework Dataloader Matrix": [[135, "supported-framework-dataloader-matrix"]], "Get Started with DataLoader": [[135, "get-started-with-dataloader"]], "Use Intel\u00ae Neural Compressor DataLoader API": [[135, "use-intel-neural-compressor-dataloader-api"]], "Build Custom Dataloader with Python API": [[135, "build-custom-dataloader-with-python-api"]], "Dataset": [[136, "dataset"]], "Supported Framework Dataset Matrix": [[136, "supported-framework-dataset-matrix"]], "PyTorch": [[136, "pytorch"], [152, "pytorch"], [198, "pytorch"]], "MXNet": [[136, "mxnet"], [152, "mxnet"], [204, "mxnet"]], "ONNXRT": [[136, "onnxrt"], [152, "onnxrt"], [204, "onnxrt"]], "Get start with Dataset API": [[136, "get-start-with-dataset-api"]], "Config dataloader in a yaml file": [[136, "config-dataloader-in-a-yaml-file"]], "User-specific dataset": [[136, "user-specific-dataset"]], "Design": [[137, "design"], [205, "design"], [205, "id1"], [205, "id3"], [205, "id5"], [205, "id7"], [205, "id9"], [205, "id11"], [205, "id13"], [205, "id15"], [205, "id17"], [205, "id19"], [205, "id21"]], "Architecture": [[137, "architecture"], [148, "architecture"]], "Workflow": [[137, "workflow"]], "Diagnosis": [[138, "diagnosis"]], "Diagnosis Introduction": [[138, "diagnosis-introduction"]], "Supported Feature Matrix": [[138, "supported-feature-matrix"], [141, "supported-feature-matrix"], [145, "supported-feature-matrix"], [148, "supported-feature-matrix"], [195, "supported-feature-matrix"], [196, "supported-feature-matrix"], [203, "supported-feature-matrix"], [207, "supported-feature-matrix"]], "Install Intel\u00ae Neural Compressor": [[138, "install-intel-neural-compressor"]], "Modify script": [[138, "modify-script"]], "Quantization diagnosis": [[138, "quantization-diagnosis"]], "Benchmark diagnosis": [[138, "benchmark-diagnosis"]], "Example": [[138, "example"], [152, "example"], [159, "example"], [163, "example"], [191, "example"]], "Prepare dataset": [[138, "prepare-dataset"]], "Run quantization script": [[138, "run-quantization-script"]], "Run benchmark script": [[138, "run-benchmark-script"]], "See quantization data": [[138, "see-quantization-data"]], "How to do diagnosis": [[138, "how-to-do-diagnosis"]], "Parameter description": [[138, "parameter-description"]], "Diagnosis suggestions": [[138, "diagnosis-suggestions"]], "Fallback setting example": [[138, "fallback-setting-example"]], "See profiling data": [[138, "see-profiling-data"]], "Distillation": [[139, "distillation"], [153, "distillation"], [195, "distillation"]], "Knowledge Distillation": [[139, "knowledge-distillation"]], "Intermediate Layer Knowledge Distillation": [[139, "intermediate-layer-knowledge-distillation"]], "Self Distillation": [[139, "self-distillation"]], "Distillation Support Matrix": [[139, "distillation-support-matrix"]], "Get Started with Distillation API": [[139, "get-started-with-distillation-api"]], "Distillation for Quantization": [[140, "distillation-for-quantization"]], "Distillation for Quantization Support Matrix": [[140, "distillation-for-quantization-support-matrix"]], "Get Started with Distillation for Quantization API": [[140, "get-started-with-distillation-for-quantization-api"]], "Distributed Training and Inference (Evaluation)": [[141, "distributed-training-and-inference-evaluation"]], "Get Started with Distributed Training and Inference API": [[141, "get-started-with-distributed-training-and-inference-api"]], "Option 1: Pure Yaml Configuration": [[141, "option-1-pure-yaml-configuration"]], "Option 2: User Defined Training Function": [[141, "option-2-user-defined-training-function"]], "Horovodrun Execution": [[141, "horovodrun-execution"]], "Security": [[141, "security"]], "PyTorch Examples:": [[141, "pytorch-examples"]], "TensorFlow Examples:": [[141, "tensorflow-examples"]], "Example List": [[142, "example-list"]], "Release Data": [[142, "release-data"]], "Export": [[143, "export"]], "Supported Framework Model Matrix": [[143, "supported-framework-model-matrix"], [155, "supported-framework-model-matrix"], [156, "supported-framework-model-matrix"], [197, "supported-framework-model-matrix"], [199, "supported-framework-model-matrix"]], "PyTorch Model": [[143, "pytorch-model"]], "FP32 Model Export": [[143, "fp32-model-export"], [143, "id1"]], "INT8 Model Export": [[143, "int8-model-export"], [143, "id2"]], "Tensorflow Model": [[143, "tensorflow-model"]], "Appendix": [[143, "appendix"]], "Supported quantized ops": [[143, "supported-quantized-ops"]], "Frequently Asked Questions": [[144, "frequently-asked-questions"]], "Common Build Issues": [[144, "common-build-issues"]], "Issue 1:": [[144, "issue-1"]], "Issue 2:": [[144, "issue-2"]], "Issue 3:": [[144, "issue-3"]], "Issue 4:": [[144, "issue-4"]], "Framework YAML Configuration Files": [[145, "framework-yaml-configuration-files"]], "Get started with Framework YAML Files": [[145, "get-started-with-framework-yaml-files"]], "Quick Samples": [[146, "quick-samples"]], "Quantization with Python API": [[146, "quantization-with-python-api"], [176, "quantization-with-python-api"]], "Incompatible changes between v1.2 and v1.1": [[147, "incompatible-changes-between-v1-2-and-v1-1"]], "User-facing APIs": [[147, "user-facing-apis"]], "Built-in transform/dataset/metric APIs": [[147, "built-in-transform-dataset-metric-apis"]], "Infrastructure of Intel\u00ae Neural Compressor": [[148, "infrastructure-of-intel-neural-compressor"]], "Prerequisites": [[149, "prerequisites"], [181, "prerequisites"], [182, "prerequisites"]], "Install from Binary": [[149, "install-from-binary"]], "Install from Source": [[149, "install-from-source"], [176, "install-from-source"]], "Install from AI Kit": [[149, "install-from-ai-kit"]], "System Requirements": [[149, "system-requirements"]], "Validated Hardware Environment": [[149, "validated-hardware-environment"]], "Intel\u00ae Neural Compressor supports CPUs based on Intel 64 architecture or compatible processors:": [[149, "intel-neural-compressor-supports-cpus-based-on-intel-64-architecture-or-compatible-processors"]], "Intel\u00ae Neural Compressor supports GPUs built on Intel\u2019s Xe architecture:": [[149, "intel-neural-compressor-supports-gpus-built-on-intel-s-xe-architecture"]], "Intel\u00ae Neural Compressor quantized ONNX models support multiple hardware vendors through ONNX Runtime:": [[149, "intel-neural-compressor-quantized-onnx-models-support-multiple-hardware-vendors-through-onnx-runtime"]], "Validated Software Environment": [[149, "validated-software-environment"]], "Legal Information": [[150, "legal-information"]], "License": [[150, "license"]], "Citation": [[150, "citation"]], "Trademarks": [[150, "trademarks"]], "LLMs Quantization Recipes": [[151, "llms-quantization-recipes"]], "Large Language Models Recipes": [[151, "large-language-models-recipes"]], "Large Language Models Accuracy": [[151, "large-language-models-accuracy"]], "Metrics": [[152, "metrics"]], "Supported Built-in Metric Matrix": [[152, "supported-built-in-metric-matrix"]], "Get Started with Metric": [[152, "get-started-with-metric"]], "Use Intel\u00ae Neural Compressor Metric API": [[152, "use-intel-neural-compressor-metric-api"]], "Build Custom Metric with Python API": [[152, "build-custom-metric-with-python-api"]], "Code Migration from Intel Neural Compressor 1.X to Intel Neural Compressor 2.X": [[153, "code-migration-from-intel-neural-compressor-1-x-to-intel-neural-compressor-2-x"]], "Model Quantization": [[153, "model-quantization"]], "Post-training Quantization": [[153, "post-training-quantization"]], "Pruning": [[153, "pruning"], [193, "pruning"], [195, "pruning"]], "Orchestration": [[153, "orchestration"]], "Mixed Precision": [[154, "mixed-precision"]], "During quantization mixed precision": [[154, "during-quantization-mixed-precision"]], "Get Started with Mixed Precision API": [[154, "get-started-with-mixed-precision-api"]], "Neural Coder": [[157, "neural-coder"], [174, "neural-coder"], [174, "id1"]], "What do we offer?": [[157, "what-do-we-offer"]], "Getting Started!": [[157, "getting-started"], [168, "getting-started"]], "Jupyter Lab Extension": [[157, "jupyter-lab-extension"]], "Python Launcher": [[157, "python-launcher"], [162, "python-launcher"]], "Python API": [[157, "python-api"]], "Contact": [[157, "contact"], [181, "contact"]], "AWS Amazon SageMaker Support": [[158, "aws-amazon-sagemaker-support"]], "Start Jupyter Lab 3": [[158, "start-jupyter-lab-3"]], "For SageMaker Studio": [[158, "for-sagemaker-studio"]], "For SageMaker Notebook instance": [[158, "for-sagemaker-notebook-instance"]], "Installation Guide": [[158, "installation-guide"]], "BigDL Nano Support": [[159, "bigdl-nano-support"]], "Intel CPU Platforms: Best Performance Setting": [[160, "intel-cpu-platforms-best-performance-setting"]], "Install MKL, OpenMP and JEMALLOC": [[160, "install-mkl-openmp-and-jemalloc"]], "Install NUMA Controller": [[160, "install-numa-controller"]], "Environment Variables": [[160, "environment-variables"]], "Frequency Governers": [[160, "frequency-governers"]], "Neural Coder as Python API": [[161, "neural-coder-as-python-api"]], "Enable": [[161, "enable"]], "Bench": [[161, "bench"]], "SuperBench": [[161, "superbench"]], "Quick-Start": [[162, "quick-start"]], "Launcher Arguments (Optional)": [[162, "launcher-arguments-optional"]], "Neural Coder for Quantization": [[163, "neural-coder-for-quantization"]], "Features Supported": [[163, "features-supported"]], "Models Supported": [[163, "models-supported"]], "PyPI distribution:": [[163, "pypi-distribution"]], "Supported Optimization Features": [[164, "supported-optimization-features"]], "v0.4": [[165, "v0-4"]], "Highlights": [[165, "highlights"]], "Others": [[165, "others"]], "Changelog": [[166, "changelog"], [170, "changelog"]], "neural_compressor_ext_lab": [[167, "neural-compressor-ext-lab"]], "Requirements": [[167, "requirements"], [171, "requirements"], [177, "requirements"], [178, "requirements"], [179, "requirements"], [187, "requirements"]], "Install": [[167, "install"]], "Uninstall": [[167, "uninstall"]], "Contributing": [[167, "contributing"], [171, "contributing"]], "Development install": [[167, "development-install"], [171, "development-install"]], "Development uninstall": [[167, "development-uninstall"], [171, "development-uninstall"]], "Packaging the extension": [[167, "packaging-the-extension"], [171, "packaging-the-extension"]], "Intel\u00ae Neural Compressor as JupyterLab Extension": [[168, "intel-neural-compressor-as-jupyterlab-extension"]], "Auto-enable a feature": [[168, "auto-enable-a-feature"]], "Or let us help you auto-select the best feature": [[168, "or-let-us-help-you-auto-select-the-best-feature"]], "Pre-requisites": [[168, "pre-requisites"]], "Making a new release of neural_compressor_ext_lab": [[169, "making-a-new-release-of-neural-compressor-ext-lab"]], "Manual release": [[169, "manual-release"], [172, "manual-release"]], "Python package": [[169, "python-package"], [172, "python-package"]], "NPM package": [[169, "npm-package"], [172, "npm-package"]], "Automated releases with the Jupyter Releaser": [[169, "automated-releases-with-the-jupyter-releaser"], [172, "automated-releases-with-the-jupyter-releaser"]], "Publishing to conda-forge": [[169, "publishing-to-conda-forge"], [172, "publishing-to-conda-forge"]], "neural_compressor_ext_lab_alibaba": [[171, "neural-compressor-ext-lab-alibaba"]], "Making a new release of neural_compressor_ext_lab_alibaba": [[172, "making-a-new-release-of-neural-compressor-ext-lab-alibaba"]], "Change Log": [[173, "change-log"]], "[Unreleased]": [[173, "unreleased"]], "Background Introduction": [[174, "background-introduction"]], "Neural Coder Extension in VSCode": [[174, "neural-coder-extension-in-vscode"]], "Neural Coder Extension Usage": [[174, "neural-coder-extension-usage"]], "1. Open": [[174, "open"]], "2. Search": [[174, "search"]], "3. Setting": [[174, "setting"]], "4. Icon": [[174, "icon"]], "5. optimization (quantization)": [[174, "optimization-quantization"]], "5.1 Enable": [[174, "enable"]], "5.2 Auto": [[174, "auto"]], "Welcome to your VS Code Extension": [[175, "welcome-to-your-vs-code-extension"]], "What\u2019s in the folder": [[175, "what-s-in-the-folder"]], "Setup": [[175, "setup"]], "Get up and running straight away": [[175, "get-up-and-running-straight-away"]], "Make changes": [[175, "make-changes"]], "Explore the API": [[175, "explore-the-api"]], "Run tests": [[175, "run-tests"]], "Go further": [[175, "go-further"]], "Neural Insights": [[176, "neural-insights"]], "Start the Neural Insights": [[176, "start-the-neural-insights"]], "Tensor dump examples": [[176, "tensor-dump-examples"]], "Step by Step Diagnosis Example": [[176, "step-by-step-diagnosis-example"]], "Research Collaborations": [[176, "research-collaborations"]], "Step by step example how to debug accuracy with Neural Insights": [[177, "step-by-step-example-how-to-debug-accuracy-with-neural-insights"], [179, "step-by-step-example-how-to-debug-accuracy-with-neural-insights"]], "Preparation": [[177, "preparation"], [178, "preparation"], [179, "preparation"], [201, "preparation"]], "Running the quantization": [[177, "running-the-quantization"], [178, "running-the-quantization"], [179, "running-the-quantization"]], "Analyzing the result of quantization": [[177, "analyzing-the-result-of-quantization"], [179, "analyzing-the-result-of-quantization"]], "Weights summary": [[177, "weights-summary"]], "Activations summary": [[177, "activations-summary"]], "Step by step example how to dump weights data for PyTorch model with Neural Insights": [[178, "step-by-step-example-how-to-dump-weights-data-for-pytorch-model-with-neural-insights"]], "Source": [[178, "source"], [179, "source"]], "Prepare the dataset": [[179, "prepare-the-dataset"]], "Analyzing weight histograms": [[179, "analyzing-weight-histograms"]], "Open Neural Insights": [[179, "open-neural-insights"]], "Getting Started with Create React App": [[180, "getting-started-with-create-react-app"]], "Available Scripts": [[180, "available-scripts"]], "npm start": [[180, "npm-start"]], "npm test": [[180, "npm-test"]], "npm run build": [[180, "npm-run-build"]], "npm run eject": [[180, "npm-run-eject"]], "Learn More": [[180, "learn-more"], [181, "learn-more"]], "Code Splitting": [[180, "code-splitting"]], "Analyzing the Bundle Size": [[180, "analyzing-the-bundle-size"]], "Making a Progressive Web App": [[180, "making-a-progressive-web-app"]], "Advanced Configuration": [[180, "advanced-configuration"]], "Deployment": [[180, "deployment"]], "npm run build fails to minify": [[180, "npm-run-build-fails-to-minify"]], "What\u2019s Neural Solution?": [[181, "what-s-neural-solution"]], "Why Neural Solution?": [[181, "why-neural-solution"]], "How does Neural Solution Work?": [[181, "how-does-neural-solution-work"]], "Method 1. Using pip:": [[181, "method-1-using-pip"]], "Method 2. Building from source:": [[181, "method-2-building-from-source"]], "End-to-end examples": [[181, "end-to-end-examples"]], "Get started": [[182, "get-started"]], "Install Neural Solution": [[182, "install-neural-solution"]], "Method 1. Using pip": [[182, "method-1-using-pip"]], "Method 2. Building from source": [[182, "method-2-building-from-source"]], "Start service": [[182, "start-service"]], "Submit task": [[182, "submit-task"]], "Query task status": [[182, "query-task-status"]], "Stop service": [[182, "stop-service"]], "Inspect logs": [[182, "inspect-logs"]], "Manage resource": [[182, "manage-resource"], [187, "manage-resource"], [188, "manage-resource"]], "Node States": [[182, "node-states"]], "Query cluster": [[182, "query-cluster"]], "Add node": [[182, "add-node"]], "Remove node": [[182, "remove-node"]], "Neural Solution API": [[183, "neural-solution-api"]], "Base URL": [[183, "base-url"]], "Endpoints": [[183, "endpoints"]], "GET /": [[183, "get"]], "Description": [[183, "description"], [183, "id1"], [183, "id4"], [183, "id8"], [183, "id12"], [183, "id15"], [183, "id18"], [183, "id21"], [183, "id24"]], "Responses": [[183, "responses"], [183, "id3"], [183, "id7"], [183, "id11"], [183, "id14"], [183, "id17"], [183, "id20"], [183, "id23"], [183, "id26"]], "POST /task/submit": [[183, "post-task-submit"]], "Parameters": [[183, "parameters"], [183, "id5"], [183, "id10"], [183, "id13"]], "GET /task/status/{task_id}": [[183, "get-task-status-task-id"]], "GET /task/log/{task_id}": [[183, "get-task-log-task-id"]], "WebSocket /task/screen/{task_id}": [[183, "websocket-task-screen-task-id"]], "GET /ping": [[183, "get-ping"]], "GET /cluster": [[183, "get-cluster"]], "GET /download/{task_id}": [[183, "get-download-task-id"]], "GET /description": [[183, "get-description"]], "Design Doc for Optimization as a Service [WIP]": [[184, "design-doc-for-optimization-as-a-service-wip"]], "Contents": [[184, "contents"]], "Workflow of OaaS": [[184, "workflow-of-oaas"]], "Class definition diagram": [[184, "class-definition-diagram"]], "Extensibility": [[184, "extensibility"]], "Task request description": [[185, "task-request-description"]], "Examples List": [[186, "examples-list"]], "An end-to-end example: quantize a custom model with Neural Solution": [[187, "an-end-to-end-example-quantize-a-custom-model-with-neural-solution"]], "Start the Neural Solution Service": [[187, "start-the-neural-solution-service"], [188, "start-the-neural-solution-service"], [189, "start-the-neural-solution-service"]], "Submit optimization task": [[187, "submit-optimization-task"], [188, "submit-optimization-task"], [189, "submit-optimization-task"]], "Query optimization result": [[187, "query-optimization-result"], [188, "query-optimization-result"], [189, "query-optimization-result"]], "Download optimized model": [[187, "download-optimized-model"], [188, "download-optimized-model"]], "Stop the service": [[187, "stop-the-service"], [188, "stop-the-service"], [189, "stop-the-service"]], "An end-to-end example: quantize a Hugging Face model with Neural Solution": [[188, "an-end-to-end-example-quantize-a-hugging-face-model-with-neural-solution"]], "An end-to-end example: quantize a Hugging Face model with Neural Solution gRPC API": [[189, "an-end-to-end-example-quantize-a-hugging-face-model-with-neural-solution-grpc-api"]], "Client": [[190, "client"]], "Single Objective": [[191, "single-objective"]], "Multiple Objectives": [[191, "multiple-objectives"]], "Objective Support Matrix": [[191, "objective-support-matrix"]], "Get Started with Objective API": [[191, "get-started-with-objective-api"]], "Config Single Objective": [[191, "config-single-objective"]], "Config Multiple Objectives": [[191, "config-multiple-objectives"]], "Optimization Orchestration": [[192, "optimization-orchestration"]], "One-shot": [[192, "one-shot"]], "Orchestration Support Matrix": [[192, "orchestration-support-matrix"]], "Get Started with Orchestration API": [[192, "get-started-with-orchestration-api"]], "Neural Network Pruning": [[193, "neural-network-pruning"]], "Pruning Patterns": [[193, "pruning-patterns"]], "Pruning Criteria": [[193, "pruning-criteria"]], "Pruning Types": [[193, "pruning-types"]], "Pruning Schedules": [[193, "pruning-schedules"]], "Pruning Scope": [[193, "pruning-scope"]], "Sparsity Decay Types": [[193, "sparsity-decay-types"]], "Regularization": [[193, "regularization"]], "Large Language Model Pruning": [[193, "large-language-model-pruning"]], "Pruning Support Matrix": [[193, "pruning-support-matrix"]], "Get Started with Pruning API": [[193, "get-started-with-pruning-api"]], "Training-aware pruning API": [[193, "training-aware-pruning-api"]], "Retrain-free Pruning API": [[193, "retrain-free-pruning-api"]], "Sparse Model Deployment": [[193, "sparse-model-deployment"]], "Pruning with Hyperparameter Optimization": [[193, "pruning-with-hyperparameter-optimization"]], "Full Publications/Events (82)": [[194, "full-publications-events-82"]], "2024 (3)": [[194, "id1"]], "2023 (25)": [[194, "id2"]], "2022 (35)": [[194, "id3"]], "2021 (15)": [[194, "id4"]], "2018 - 2020 (4)": [[194, "id5"]], "Pythonic Style Access for Configurations": [[195, "pythonic-style-access-for-configurations"]], "Pythonic API for User Configurations": [[195, "pythonic-api-for-user-configurations"], [195, "id1"]], "Pythonic API for Framework Configurations": [[195, "pythonic-api-for-framework-configurations"], [195, "id2"]], "Get Started with Pythonic API for Configurations": [[195, "get-started-with-pythonic-api-for-configurations"]], "NAS": [[195, "nas"]], "Quantization Introduction": [[196, "quantization-introduction"]], "Quantization Support Matrix": [[196, "quantization-support-matrix"]], "Quantization Scheme in MXNet": [[196, "quantization-scheme-in-mxnet"]], "Quantization Scheme in ONNX Runtime": [[196, "quantization-scheme-in-onnx-runtime"]], "Post Training Quantization": [[196, "post-training-quantization"]], "Specify Quantization Recipes": [[196, "specify-quantization-recipes"]], "Specify Quantization Backend and Device": [[196, "specify-quantization-backend-and-device"]], "Layer Wise Quantization (LWQ)": [[197, "layer-wise-quantization-lwq"]], "PyTorch framework example": [[197, "pytorch-framework-example"]], "ONNX Runtime framework example": [[197, "onnx-runtime-framework-example"]], "Turn OFF Auto Mixed Precision during Quantization": [[198, "turn-off-auto-mixed-precision-during-quantization"]], "Tensorflow": [[198, "tensorflow"]], "Weight Only Quantization (WOQ)": [[199, "weight-only-quantization-woq"]], "Quantization Capability": [[199, "quantization-capability"]], "Export Compressed Model": [[199, "export-compressed-model"]], "User Code Example": [[199, "user-code-example"]], "WOQ Algorithms Tuning": [[199, "woq-algorithms-tuning"]], "User code example": [[199, "id1"]], "Release": [[200, "release"]], "Release Notes": [[200, "release-notes"]], "Known Issues": [[200, "known-issues"]], "Incompatible Changes": [[200, "incompatible-changes"]], "SigOpt Strategy": [[201, "sigopt-strategy"]], "SigOpt Platform": [[201, "sigopt-platform"]], "Neural Compressor Configuration": [[201, "neural-compressor-configuration"]], "Performance": [[201, "performance"]], "Benefit of SigOpt Strategy": [[201, "benefit-of-sigopt-strategy"]], "Performance Comparison of Different Strategies": [[201, "performance-comparison-of-different-strategies"]], "SmoothQuant and Our Enhancement": [[202, "smoothquant-and-our-enhancement"]], "SmoothQuant": [[202, "smoothquant"]], "Our enhancement:": [[202, "our-enhancement"]], "Algorithm: Auto-tuning of $\\alpha$.": [[202, "algorithm-auto-tuning-of-alpha"]], "Engineering": [[202, "engineering"]], "Using a fixed alpha": [[202, "using-a-fixed-alpha"]], "Auto-tune the alpha for the entire model": [[202, "auto-tune-the-alpha-for-the-entire-model"]], "Auto-tune the alpha for each layer/block": [[202, "auto-tune-the-alpha-for-each-layer-block"]], "TensorBoard": [[203, "tensorboard"]], "Get Started with TensorBoard": [[203, "get-started-with-tensorboard"]], "PyTorch TensorBoard": [[203, "pytorch-tensorboard"]], "TensorFlow Tensorboard": [[203, "tensorflow-tensorboard"]], "PyTorch Examples": [[203, "pytorch-examples"]], "TensorFlow Examples": [[203, "tensorflow-examples"]], "Transform": [[204, "transform"]], "Transform Support List": [[204, "transform-support-list"]], "Pytorch": [[204, "pytorch"]], "Tuning Strategies": [[205, "tuning-strategies"]], "Strategy Design": [[205, "strategy-design"]], "Tuning Space": [[205, "tuning-space"]], "Exit Policy": [[205, "exit-policy"]], "Accuracy Criteria": [[205, "accuracy-criteria"]], "Tuning Process": [[205, "tuning-process"]], "Tuning Algorithms": [[205, "tuning-algorithms"]], "Auto": [[205, "auto"]], "Conservative Tuning": [[205, "conservative-tuning"]], "Basic": [[205, "basic"]], "MSE": [[205, "mse"]], "MSE_V2": [[205, "mse-v2"]], "HAWQ_V2": [[205, "hawq-v2"]], "Bayesian": [[205, "bayesian"]], "Exhaustive": [[205, "exhaustive"]], "Random": [[205, "random"]], "SigOpt": [[205, "sigopt"]], "TPE": [[205, "tpe"]], "Distributed Tuning": [[205, "distributed-tuning"]], "Customize a New Tuning Strategy": [[205, "customize-a-new-tuning-strategy"]], "User Guide": [[206, "user-guide"]], "Python-based APIs": [[206, "python-based-apis"]], "Neural Coder (Zero-code Optimization)": [[206, "neural-coder-zero-code-optimization"]], "Advanced Topics": [[206, "advanced-topics"]], "Innovations for Productivity": [[206, "innovations-for-productivity"]], "User YAML Configuration Files": [[207, "user-yaml-configuration-files"]], "Get started with User YAML Files": [[207, "get-started-with-user-yaml-files"]], "Validated Quantization Examples": [[208, "validated-quantization-examples"]], "TensorFlow Models with TensorFlow 2.15.0": [[208, "tensorflow-models-with-tensorflow-2-15-0"]], "PyTorch Models with Torch 2.2.1+cpu in PTQ Mode": [[208, "pytorch-models-with-torch-2-2-1-cpu-in-ptq-mode"]], "PyTorch Models with Torch 2.2.1+cpu in QAT Mode": [[208, "pytorch-models-with-torch-2-2-1-cpu-in-qat-mode"]], "PyTorch Models with Torch 2.0.1+cpu in WOQ Mode": [[208, "pytorch-models-with-torch-2-0-1-cpu-in-woq-mode"]], "ONNX Models with ONNX Runtime 1.17.1": [[208, "onnx-models-with-onnx-runtime-1-17-1"]], "ONNX Models with ONNX Runtime 1.15.0 in WOQ Mode": [[208, "onnx-models-with-onnx-runtime-1-15-0-in-woq-mode"]], "Validated Pruning Examples": [[208, "validated-pruning-examples"]], "Validated Knowledge Distillation Examples": [[208, "validated-knowledge-distillation-examples"]], "Validated ONNX QDQ INT8 Models on Multiple Hardware through ONNX Runtime": [[208, "validated-onnx-qdq-int8-models-on-multiple-hardware-through-onnx-runtime"]]}, "indexentries": {"algorithms (class in neural_compressor.algorithm.algorithm)": [[0, "neural_compressor.algorithm.algorithm.ALGORITHMS"]], "algorithm (class in neural_compressor.algorithm.algorithm)": [[0, "neural_compressor.algorithm.algorithm.Algorithm"]], "algorithmscheduler (class in neural_compressor.algorithm.algorithm)": [[0, "neural_compressor.algorithm.algorithm.AlgorithmScheduler"]], "algorithm_registry() (in module neural_compressor.algorithm.algorithm)": [[0, "neural_compressor.algorithm.algorithm.algorithm_registry"]], "module": [[0, "module-neural_compressor.algorithm.algorithm"], [1, "module-neural_compressor.algorithm.fast_bias_correction"], [2, "module-neural_compressor.algorithm"], [3, "module-neural_compressor.algorithm.smooth_quant"], [4, "module-neural_compressor.algorithm.weight_correction"], [5, "module-neural_compressor.benchmark"], [6, "module-neural_compressor.common.base_config"], [7, "module-neural_compressor.common.base_tuning"], [8, "module-neural_compressor.common"], [9, "module-neural_compressor.common.tuning_param"], [10, "module-neural_compressor.common.utils.constants"], [11, "module-neural_compressor.common.utils"], [12, "module-neural_compressor.common.utils.logger"], [13, "module-neural_compressor.common.utils.save_load"], [14, "module-neural_compressor.common.utils.utility"], [15, "module-neural_compressor.config"], [16, "module-neural_compressor.contrib"], [17, "module-neural_compressor.contrib.strategy"], [18, "module-neural_compressor.contrib.strategy.sigopt"], [19, "module-neural_compressor.contrib.strategy.tpe"], [20, "module-neural_compressor.data.datasets.bert_dataset"], [21, "module-neural_compressor.data.datasets.coco_dataset"], [22, "module-neural_compressor.data.datasets.dataset"], [23, "module-neural_compressor.data.datasets.dummy_dataset"], [24, "module-neural_compressor.data.datasets.dummy_dataset_v2"], [25, "module-neural_compressor.data.datasets.imagenet_dataset"], [26, "module-neural_compressor.data.datasets"], [27, "module-neural_compressor.data.datasets.style_transfer_dataset"], [28, "module-neural_compressor.data.filters.coco_filter"], [29, "module-neural_compressor.data.filters.filter"], [30, "module-neural_compressor.data.filters"], [31, "module-neural_compressor.data"], [32, "module-neural_compressor.data.transforms.imagenet_transform"], [33, "module-neural_compressor.data.transforms"], [34, "module-neural_compressor.data.transforms.postprocess"], [35, "module-neural_compressor.data.transforms.tokenization"], [36, "module-neural_compressor.data.transforms.transform"], [37, "module-neural_compressor"], [38, "module-neural_compressor.metric.bleu"], [39, "module-neural_compressor.metric.bleu_util"], [40, "module-neural_compressor.metric.coco_label_map"], [41, "module-neural_compressor.metric.coco_tools"], [42, "module-neural_compressor.metric.evaluate_squad"], [43, "module-neural_compressor.metric.f1"], [44, "module-neural_compressor.metric"], [45, "module-neural_compressor.metric.metric"], [46, "module-neural_compressor.mix_precision"], [47, "module-neural_compressor.model.base_model"], [48, "module-neural_compressor.model"], [49, "module-neural_compressor.model.keras_model"], [50, "module-neural_compressor.model.model"], [51, "module-neural_compressor.model.mxnet_model"], [52, "module-neural_compressor.model.nets_factory"], [53, "module-neural_compressor.model.onnx_model"], [54, "module-neural_compressor.model.tensorflow_model"], [55, "module-neural_compressor.model.torch_model"], [56, "module-neural_compressor.objective"], [57, "module-neural_compressor.profiling"], [58, "module-neural_compressor.quantization"], [59, "module-neural_compressor.strategy.auto"], [60, "module-neural_compressor.strategy.auto_mixed_precision"], [61, "module-neural_compressor.strategy.basic"], [62, "module-neural_compressor.strategy.bayesian"], [63, "module-neural_compressor.strategy.conservative"], [64, "module-neural_compressor.strategy.exhaustive"], [65, "module-neural_compressor.strategy.hawq_v2"], [66, "module-neural_compressor.strategy"], [67, "module-neural_compressor.strategy.mse"], [68, "module-neural_compressor.strategy.mse_v2"], [69, "module-neural_compressor.strategy.random"], [70, "module-neural_compressor.strategy.strategy"], [71, "module-neural_compressor.strategy.utils.constant"], [72, "module-neural_compressor.strategy.utils"], [73, "module-neural_compressor.strategy.utils.tuning_sampler"], [74, "module-neural_compressor.strategy.utils.tuning_space"], [75, "module-neural_compressor.strategy.utils.tuning_structs"], [76, "module-neural_compressor.strategy.utils.utility"], [77, "module-neural_compressor.training"], [78, "module-neural_compressor.utils.collect_layer_histogram"], [79, "module-neural_compressor.utils.constant"], [80, "module-neural_compressor.utils.create_obj_from_config"], [81, "module-neural_compressor.utils.export"], [82, "module-neural_compressor.utils.export.qlinear2qdq"], [83, "module-neural_compressor.utils.export.tf2onnx"], [84, "module-neural_compressor.utils.export.torch2onnx"], [85, "module-neural_compressor.utils"], [86, "module-neural_compressor.utils.kl_divergence"], [87, "module-neural_compressor.utils.load_huggingface"], [88, "module-neural_compressor.utils.logger"], [89, "module-neural_compressor.utils.neural_insights_utils"], [90, "module-neural_compressor.utils.options"], [91, "module-neural_compressor.utils.pytorch"], [92, "module-neural_compressor.utils.utility"], [93, "module-neural_compressor.utils.weights_details"], [94, "module-neural_compressor.version"]], "neural_compressor.algorithm.algorithm": [[0, "module-neural_compressor.algorithm.algorithm"]], "fastbiascorrection (class in neural_compressor.algorithm.fast_bias_correction)": [[1, "neural_compressor.algorithm.fast_bias_correction.FastBiasCorrection"]], "neural_compressor.algorithm.fast_bias_correction": [[1, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[2, "module-neural_compressor.algorithm"]], "smoothquant (class in neural_compressor.algorithm.smooth_quant)": [[3, "neural_compressor.algorithm.smooth_quant.SmoothQuant"]], "neural_compressor.algorithm.smooth_quant": [[3, "module-neural_compressor.algorithm.smooth_quant"]], "weightcorrection (class in neural_compressor.algorithm.weight_correction)": [[4, "neural_compressor.algorithm.weight_correction.WeightCorrection"]], "neural_compressor.algorithm.weight_correction": [[4, "module-neural_compressor.algorithm.weight_correction"]], "benchmark_with_raw_cmd() (in module neural_compressor.benchmark)": [[5, "neural_compressor.benchmark.benchmark_with_raw_cmd"]], "call_one() (in module neural_compressor.benchmark)": [[5, "neural_compressor.benchmark.call_one"]], "config_instance() (in module neural_compressor.benchmark)": [[5, "neural_compressor.benchmark.config_instance"]], "fit() (in module neural_compressor.benchmark)": [[5, "neural_compressor.benchmark.fit"]], "generate_prefix() (in module neural_compressor.benchmark)": [[5, "neural_compressor.benchmark.generate_prefix"]], "get_architecture() (in module neural_compressor.benchmark)": [[5, "neural_compressor.benchmark.get_architecture"]], "get_bounded_threads() (in module neural_compressor.benchmark)": [[5, "neural_compressor.benchmark.get_bounded_threads"]], "get_core_ids() (in module neural_compressor.benchmark)": [[5, "neural_compressor.benchmark.get_core_ids"]], "get_physical_ids() (in module neural_compressor.benchmark)": [[5, "neural_compressor.benchmark.get_physical_ids"]], "get_threads() (in module neural_compressor.benchmark)": [[5, "neural_compressor.benchmark.get_threads"]], "get_threads_per_core() (in module neural_compressor.benchmark)": [[5, "neural_compressor.benchmark.get_threads_per_core"]], "neural_compressor.benchmark": [[5, "module-neural_compressor.benchmark"]], "profile() (in module neural_compressor.benchmark)": [[5, "neural_compressor.benchmark.profile"]], "run_instance() (in module neural_compressor.benchmark)": [[5, "neural_compressor.benchmark.run_instance"]], "set_all_env_var() (in module neural_compressor.benchmark)": [[5, "neural_compressor.benchmark.set_all_env_var"]], "set_env_var() (in module neural_compressor.benchmark)": [[5, "neural_compressor.benchmark.set_env_var"]], "summary_benchmark() (in module neural_compressor.benchmark)": [[5, "neural_compressor.benchmark.summary_benchmark"]], "baseconfig (class in neural_compressor.common.base_config)": [[6, "neural_compressor.common.base_config.BaseConfig"]], "composableconfig (class in neural_compressor.common.base_config)": [[6, "neural_compressor.common.base_config.ComposableConfig"]], "configregistry (class in neural_compressor.common.base_config)": [[6, "neural_compressor.common.base_config.ConfigRegistry"]], "config_list (neural_compressor.common.base_config.composableconfig attribute)": [[6, "neural_compressor.common.base_config.ComposableConfig.config_list"]], "get_all_config_set_from_config_registry() (in module neural_compressor.common.base_config)": [[6, "neural_compressor.common.base_config.get_all_config_set_from_config_registry"]], "name (neural_compressor.common.base_config.baseconfig attribute)": [[6, "neural_compressor.common.base_config.BaseConfig.name"]], "neural_compressor.common.base_config": [[6, "module-neural_compressor.common.base_config"]], "params_list (neural_compressor.common.base_config.baseconfig attribute)": [[6, "neural_compressor.common.base_config.BaseConfig.params_list"]], "register_config() (in module neural_compressor.common.base_config)": [[6, "neural_compressor.common.base_config.register_config"]], "register_supported_configs_for_fwk() (in module neural_compressor.common.base_config)": [[6, "neural_compressor.common.base_config.register_supported_configs_for_fwk"]], "configloader (class in neural_compressor.common.base_tuning)": [[7, "neural_compressor.common.base_tuning.ConfigLoader"]], "configset (class in neural_compressor.common.base_tuning)": [[7, "neural_compressor.common.base_tuning.ConfigSet"]], "evaluationfuncwrapper (class in neural_compressor.common.base_tuning)": [[7, "neural_compressor.common.base_tuning.EvaluationFuncWrapper"]], "evaluator (class in neural_compressor.common.base_tuning)": [[7, "neural_compressor.common.base_tuning.Evaluator"]], "sampler (class in neural_compressor.common.base_tuning)": [[7, "neural_compressor.common.base_tuning.Sampler"]], "sequentialsampler (class in neural_compressor.common.base_tuning)": [[7, "neural_compressor.common.base_tuning.SequentialSampler"]], "tuningconfig (class in neural_compressor.common.base_tuning)": [[7, "neural_compressor.common.base_tuning.TuningConfig"]], "tuningmonitor (class in neural_compressor.common.base_tuning)": [[7, "neural_compressor.common.base_tuning.TuningMonitor"]], "config_list (neural_compressor.common.base_tuning.configset attribute)": [[7, "neural_compressor.common.base_tuning.ConfigSet.config_list"]], "init_tuning() (in module neural_compressor.common.base_tuning)": [[7, "neural_compressor.common.base_tuning.init_tuning"]], "neural_compressor.common.base_tuning": [[7, "module-neural_compressor.common.base_tuning"]], "neural_compressor.common": [[8, "module-neural_compressor.common"]], "model_level (neural_compressor.common.tuning_param.paramlevel attribute)": [[9, "neural_compressor.common.tuning_param.ParamLevel.MODEL_LEVEL"]], "op_level (neural_compressor.common.tuning_param.paramlevel attribute)": [[9, "neural_compressor.common.tuning_param.ParamLevel.OP_LEVEL"]], "op_type_level (neural_compressor.common.tuning_param.paramlevel attribute)": [[9, "neural_compressor.common.tuning_param.ParamLevel.OP_TYPE_LEVEL"]], "paramlevel (class in neural_compressor.common.tuning_param)": [[9, "neural_compressor.common.tuning_param.ParamLevel"]], "tuningparam (class in neural_compressor.common.tuning_param)": [[9, "neural_compressor.common.tuning_param.TuningParam"]], "neural_compressor.common.tuning_param": [[9, "module-neural_compressor.common.tuning_param"]], "mode (class in neural_compressor.common.utils.constants)": [[10, "neural_compressor.common.utils.constants.Mode"]], "neural_compressor.common.utils.constants": [[10, "module-neural_compressor.common.utils.constants"]], "neural_compressor.common.utils": [[11, "module-neural_compressor.common.utils"]], "logger (class in neural_compressor.common.utils.logger)": [[12, "neural_compressor.common.utils.logger.Logger"]], "tuninglogger (class in neural_compressor.common.utils.logger)": [[12, "neural_compressor.common.utils.logger.TuningLogger"]], "neural_compressor.common.utils.logger": [[12, "module-neural_compressor.common.utils.logger"]], "load_config_mapping() (in module neural_compressor.common.utils.save_load)": [[13, "neural_compressor.common.utils.save_load.load_config_mapping"]], "neural_compressor.common.utils.save_load": [[13, "module-neural_compressor.common.utils.save_load"]], "save_config_mapping() (in module neural_compressor.common.utils.save_load)": [[13, "neural_compressor.common.utils.save_load.save_config_mapping"]], "cpuinfo (class in neural_compressor.common.utils.utility)": [[14, "neural_compressor.common.utils.utility.CpuInfo"]], "lazyimport (class in neural_compressor.common.utils.utility)": [[14, "neural_compressor.common.utils.utility.LazyImport"]], "processortype (class in neural_compressor.common.utils.utility)": [[14, "neural_compressor.common.utils.utility.ProcessorType"]], "statistics (class in neural_compressor.common.utils.utility)": [[14, "neural_compressor.common.utils.utility.Statistics"]], "call_counter() (in module neural_compressor.common.utils.utility)": [[14, "neural_compressor.common.utils.utility.call_counter"]], "detect_processor_type_based_on_hw() (in module neural_compressor.common.utils.utility)": [[14, "neural_compressor.common.utils.utility.detect_processor_type_based_on_hw"]], "dump_elapsed_time() (in module neural_compressor.common.utils.utility)": [[14, "neural_compressor.common.utils.utility.dump_elapsed_time"]], "get_workspace() (in module neural_compressor.common.utils.utility)": [[14, "neural_compressor.common.utils.utility.get_workspace"]], "log_process() (in module neural_compressor.common.utils.utility)": [[14, "neural_compressor.common.utils.utility.log_process"]], "neural_compressor.common.utils.utility": [[14, "module-neural_compressor.common.utils.utility"]], "set_random_seed() (in module neural_compressor.common.utils.utility)": [[14, "neural_compressor.common.utils.utility.set_random_seed"]], "set_resume_from() (in module neural_compressor.common.utils.utility)": [[14, "neural_compressor.common.utils.utility.set_resume_from"]], "set_tensorboard() (in module neural_compressor.common.utils.utility)": [[14, "neural_compressor.common.utils.utility.set_tensorboard"]], "set_workspace() (in module neural_compressor.common.utils.utility)": [[14, "neural_compressor.common.utils.utility.set_workspace"]], "singleton() (in module neural_compressor.common.utils.utility)": [[14, "neural_compressor.common.utils.utility.singleton"]], "accuracycriterion (class in neural_compressor.config)": [[15, "neural_compressor.config.AccuracyCriterion"]], "benchmarkconfig (class in neural_compressor.config)": [[15, "neural_compressor.config.BenchmarkConfig"]], "distillationconfig (class in neural_compressor.config)": [[15, "neural_compressor.config.DistillationConfig"]], "dotdict (class in neural_compressor.config)": [[15, "neural_compressor.config.DotDict"]], "exportconfig (class in neural_compressor.config)": [[15, "neural_compressor.config.ExportConfig"]], "hpoconfig (class in neural_compressor.config)": [[15, "neural_compressor.config.HPOConfig"]], "intermediatelayersknowledgedistillationlossconfig (class in neural_compressor.config)": [[15, "neural_compressor.config.IntermediateLayersKnowledgeDistillationLossConfig"]], "keras (class in neural_compressor.config)": [[15, "neural_compressor.config.Keras"]], "knowledgedistillationlossconfig (class in neural_compressor.config)": [[15, "neural_compressor.config.KnowledgeDistillationLossConfig"]], "mxnet (class in neural_compressor.config)": [[15, "neural_compressor.config.MXNet"]], "mixedprecisionconfig (class in neural_compressor.config)": [[15, "neural_compressor.config.MixedPrecisionConfig"]], "nasconfig (class in neural_compressor.config)": [[15, "neural_compressor.config.NASConfig"]], "onnx (class in neural_compressor.config)": [[15, "neural_compressor.config.ONNX"]], "onnxqlinear2qdqconfig (class in neural_compressor.config)": [[15, "neural_compressor.config.ONNXQlinear2QDQConfig"]], "options (class in neural_compressor.config)": [[15, "neural_compressor.config.Options"]], "posttrainingquantconfig (class in neural_compressor.config)": [[15, "neural_compressor.config.PostTrainingQuantConfig"]], "pytorch (class in neural_compressor.config)": [[15, "neural_compressor.config.PyTorch"]], "quantizationawaretrainingconfig (class in neural_compressor.config)": [[15, "neural_compressor.config.QuantizationAwareTrainingConfig"]], "selfknowledgedistillationlossconfig (class in neural_compressor.config)": [[15, "neural_compressor.config.SelfKnowledgeDistillationLossConfig"]], "tf2onnxconfig (class in neural_compressor.config)": [[15, "neural_compressor.config.TF2ONNXConfig"]], "tensorflow (class in neural_compressor.config)": [[15, "neural_compressor.config.TensorFlow"]], "torch2onnxconfig (class in neural_compressor.config)": [[15, "neural_compressor.config.Torch2ONNXConfig"]], "tuningcriterion (class in neural_compressor.config)": [[15, "neural_compressor.config.TuningCriterion"]], "weightpruningconfig (class in neural_compressor.config)": [[15, "neural_compressor.config.WeightPruningConfig"]], "neural_compressor.config": [[15, "module-neural_compressor.config"]], "neural_compressor.contrib": [[16, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[17, "module-neural_compressor.contrib.strategy"]], "sigopttunestrategy (class in neural_compressor.contrib.strategy.sigopt)": [[18, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.sigopt": [[18, "module-neural_compressor.contrib.strategy.sigopt"]], "tpetunestrategy (class in neural_compressor.contrib.strategy.tpe)": [[19, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy"]], "neural_compressor.contrib.strategy.tpe": [[19, "module-neural_compressor.contrib.strategy.tpe"]], "inputfeatures (class in neural_compressor.data.datasets.bert_dataset)": [[20, "neural_compressor.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[20, "neural_compressor.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.data.datasets.bert_dataset)": [[20, "neural_compressor.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[20, "neural_compressor.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[20, "neural_compressor.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[20, "neural_compressor.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.data.datasets.bert_dataset)": [[20, "neural_compressor.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.data.datasets.bert_dataset)": [[20, "neural_compressor.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.data.datasets.bert_dataset": [[20, "module-neural_compressor.data.datasets.bert_dataset"]], "coconpy (class in neural_compressor.data.datasets.coco_dataset)": [[21, "neural_compressor.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.data.datasets.coco_dataset)": [[21, "neural_compressor.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.data.datasets.coco_dataset)": [[21, "neural_compressor.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.data.datasets.coco_dataset)": [[21, "neural_compressor.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.data.datasets.coco_dataset": [[21, "module-neural_compressor.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflow (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.Tensorflow"]], "tensorflowcifar10 (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagerecord (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.check_integrity"]], "dataset_registry() (in module neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.dataset_registry"]], "download_url() (in module neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.gen_bar_updater"]], "neural_compressor.data.datasets.dataset": [[22, "module-neural_compressor.data.datasets.dataset"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset)": [[23, "neural_compressor.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset": [[23, "module-neural_compressor.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[24, "neural_compressor.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[24, "neural_compressor.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[24, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[25, "neural_compressor.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[25, "neural_compressor.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[25, "neural_compressor.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[25, "neural_compressor.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[25, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[25, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.data.datasets.imagenet_dataset": [[25, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[26, "module-neural_compressor.data.datasets"]], "styletransferdataset (class in neural_compressor.data.datasets.style_transfer_dataset)": [[27, "neural_compressor.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.data.datasets.style_transfer_dataset": [[27, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.data.filters.coco_filter)": [[28, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.data.filters.coco_filter)": [[28, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.coco_filter": [[28, "module-neural_compressor.data.filters.coco_filter"]], "filters (class in neural_compressor.data.filters.filter)": [[29, "neural_compressor.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.data.filters.filter)": [[29, "neural_compressor.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.data.filters.filter)": [[29, "neural_compressor.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.data.filters.filter)": [[29, "neural_compressor.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.data.filters.filter)": [[29, "neural_compressor.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.data.filters.filter)": [[29, "neural_compressor.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.data.filters.filter)": [[29, "neural_compressor.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.data.filters.filter)": [[29, "neural_compressor.data.filters.filter.filter_registry"]], "neural_compressor.data.filters.filter": [[29, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.filters": [[30, "module-neural_compressor.data.filters"]], "neural_compressor.data": [[31, "module-neural_compressor.data"]], "bilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[32, "neural_compressor.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.data.transforms.imagenet_transform)": [[32, "neural_compressor.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[32, "neural_compressor.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[32, "neural_compressor.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.data.transforms.imagenet_transform)": [[32, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[32, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.data.transforms.imagenet_transform)": [[32, "neural_compressor.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.data.transforms.imagenet_transform)": [[32, "neural_compressor.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[32, "neural_compressor.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "tensorflowshiftrescale (class in neural_compressor.data.transforms.imagenet_transform)": [[32, "neural_compressor.data.transforms.imagenet_transform.TensorflowShiftRescale"]], "tensorflowtransposelastchannel (class in neural_compressor.data.transforms.imagenet_transform)": [[32, "neural_compressor.data.transforms.imagenet_transform.TensorflowTransposeLastChannel"]], "neural_compressor.data.transforms.imagenet_transform": [[32, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[33, "module-neural_compressor.data.transforms"]], "postprocess (class in neural_compressor.data.transforms.postprocess)": [[34, "neural_compressor.data.transforms.postprocess.Postprocess"]], "neural_compressor.data.transforms.postprocess": [[34, "module-neural_compressor.data.transforms.postprocess"]], "basictokenizer (class in neural_compressor.data.transforms.tokenization)": [[35, "neural_compressor.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.data.transforms.tokenization)": [[35, "neural_compressor.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.data.transforms.tokenization)": [[35, "neural_compressor.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.data.transforms.tokenization)": [[35, "neural_compressor.data.transforms.tokenization.convert_by_vocab"]], "convert_to_unicode() (in module neural_compressor.data.transforms.tokenization)": [[35, "neural_compressor.data.transforms.tokenization.convert_to_unicode"]], "load_vocab() (in module neural_compressor.data.transforms.tokenization)": [[35, "neural_compressor.data.transforms.tokenization.load_vocab"]], "neural_compressor.data.transforms.tokenization": [[35, "module-neural_compressor.data.transforms.tokenization"]], "whitespace_tokenize() (in module neural_compressor.data.transforms.tokenization)": [[35, "neural_compressor.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.TRANSFORMS"], [36, "neural_compressor.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.get_final_text"]], "get_torchvision_map() (in module neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.get_torchvision_map"]], "neural_compressor.data.transforms.transform": [[36, "module-neural_compressor.data.transforms.transform"]], "read_squad_examples() (in module neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.read_squad_examples"]], "transform_registry() (in module neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.transform_registry"]], "neural_compressor": [[37, "module-neural_compressor"]], "bleu (class in neural_compressor.metric.bleu)": [[38, "neural_compressor.metric.bleu.BLEU"]], "unicoderegex (class in neural_compressor.metric.bleu)": [[38, "neural_compressor.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.metric.bleu)": [[38, "neural_compressor.metric.bleu.bleu_tokenize"]], "labels (neural_compressor.metric.bleu.bleu attribute)": [[38, "neural_compressor.metric.bleu.BLEU.labels"]], "neural_compressor.metric.bleu": [[38, "module-neural_compressor.metric.bleu"]], "nondigit_punct_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[38, "neural_compressor.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "predictions (neural_compressor.metric.bleu.bleu attribute)": [[38, "neural_compressor.metric.bleu.BLEU.predictions"]], "punct_nondigit_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[38, "neural_compressor.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "symbol_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[38, "neural_compressor.metric.bleu.UnicodeRegex.symbol_re"]], "compute_bleu() (in module neural_compressor.metric.bleu_util)": [[39, "neural_compressor.metric.bleu_util.compute_bleu"]], "neural_compressor.metric.bleu_util": [[39, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[40, "module-neural_compressor.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.metric.coco_tools)": [[41, "neural_compressor.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.metric.coco_tools)": [[41, "neural_compressor.metric.coco_tools.COCOWrapper"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.metric.coco_tools)": [[41, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.metric.coco_tools)": [[41, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.metric.coco_tools)": [[41, "neural_compressor.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "dataset (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[41, "neural_compressor.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[41, "neural_compressor.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.metric.coco_tools": [[41, "module-neural_compressor.metric.coco_tools"]], "evaluate() (in module neural_compressor.metric.evaluate_squad)": [[42, "neural_compressor.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.metric.evaluate_squad)": [[42, "neural_compressor.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.metric.evaluate_squad)": [[42, "neural_compressor.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.evaluate_squad)": [[42, "neural_compressor.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.metric.evaluate_squad": [[42, "module-neural_compressor.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.metric.f1)": [[43, "neural_compressor.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.metric.f1)": [[43, "neural_compressor.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.f1)": [[43, "neural_compressor.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[43, "module-neural_compressor.metric.f1"]], "normalize_answer() (in module neural_compressor.metric.f1)": [[43, "neural_compressor.metric.f1.normalize_answer"]], "neural_compressor.metric": [[44, "module-neural_compressor.metric"]], "accuracy (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.F1"]], "generaltopk (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.Loss"]], "mae (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.MAE"]], "metrics (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.METRICS"]], "mse (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.MXNetMetrics"]], "metric (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.Metric"]], "onnxrtglue (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.RMSE"]], "roc (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.ROC"]], "squadf1 (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.metric.metric.mae attribute)": [[45, "neural_compressor.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.metric.metric.mse attribute)": [[45, "neural_compressor.metric.metric.MSE.compare_label"]], "k (neural_compressor.metric.metric.generaltopk attribute)": [[45, "neural_compressor.metric.metric.GeneralTopK.k"]], "k (neural_compressor.metric.metric.tensorflowtopk attribute)": [[45, "neural_compressor.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.metric.metric.accuracy attribute)": [[45, "neural_compressor.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.metric.metric.mae attribute)": [[45, "neural_compressor.metric.metric.MAE.label_list"]], "label_list (neural_compressor.metric.metric.mse attribute)": [[45, "neural_compressor.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.mIOU"]], "metric_registry() (in module neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.metric_registry"]], "metrics (neural_compressor.metric.metric.metrics attribute)": [[45, "neural_compressor.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.metric.metric.mxnetmetrics attribute)": [[45, "neural_compressor.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtitmetrics attribute)": [[45, "neural_compressor.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtqlmetrics attribute)": [[45, "neural_compressor.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.metric.metric.pytorchmetrics attribute)": [[45, "neural_compressor.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.metric.metric.tensorflowmetrics attribute)": [[45, "neural_compressor.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.metric.metric.rmse attribute)": [[45, "neural_compressor.metric.metric.RMSE.mse"]], "neural_compressor.metric.metric": [[45, "module-neural_compressor.metric.metric"]], "num_correct (neural_compressor.metric.metric.generaltopk attribute)": [[45, "neural_compressor.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.metric.metric.tensorflowtopk attribute)": [[45, "neural_compressor.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.metric.metric.generaltopk attribute)": [[45, "neural_compressor.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.metric.metric.tensorflowtopk attribute)": [[45, "neural_compressor.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.metric.metric.accuracy attribute)": [[45, "neural_compressor.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.metric.metric.mae attribute)": [[45, "neural_compressor.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.metric.metric.mse attribute)": [[45, "neural_compressor.metric.metric.MSE.pred_list"]], "register_customer_metric() (in module neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.register_customer_metric"]], "sample (neural_compressor.metric.metric.accuracy attribute)": [[45, "neural_compressor.metric.metric.Accuracy.sample"]], "sample (neural_compressor.metric.metric.loss attribute)": [[45, "neural_compressor.metric.metric.Loss.sample"]], "sum (neural_compressor.metric.metric.loss attribute)": [[45, "neural_compressor.metric.metric.Loss.sum"]], "fit() (in module neural_compressor.mix_precision)": [[46, "neural_compressor.mix_precision.fit"]], "neural_compressor.mix_precision": [[46, "module-neural_compressor.mix_precision"]], "basemodel (class in neural_compressor.model.base_model)": [[47, "neural_compressor.model.base_model.BaseModel"]], "neural_compressor.model.base_model": [[47, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[48, "module-neural_compressor.model"]], "kerasmodel (class in neural_compressor.model.keras_model)": [[49, "neural_compressor.model.keras_model.KerasModel"]], "neural_compressor.model.keras_model": [[49, "module-neural_compressor.model.keras_model"]], "model (class in neural_compressor.model.model)": [[50, "neural_compressor.model.model.Model"]], "get_model_fwk_name() (in module neural_compressor.model.model)": [[50, "neural_compressor.model.model.get_model_fwk_name"]], "neural_compressor.model.model": [[50, "module-neural_compressor.model.model"]], "mxnetmodel (class in neural_compressor.model.mxnet_model)": [[51, "neural_compressor.model.mxnet_model.MXNetModel"]], "neural_compressor.model.mxnet_model": [[51, "module-neural_compressor.model.mxnet_model"]], "tfslimnetsfactory (class in neural_compressor.model.nets_factory)": [[52, "neural_compressor.model.nets_factory.TFSlimNetsFactory"]], "neural_compressor.model.nets_factory": [[52, "module-neural_compressor.model.nets_factory"]], "onnxmodel (class in neural_compressor.model.onnx_model)": [[53, "neural_compressor.model.onnx_model.ONNXModel"]], "neural_compressor.model.onnx_model": [[53, "module-neural_compressor.model.onnx_model"]], "tensorflowbasemodel (class in neural_compressor.model.tensorflow_model)": [[54, "neural_compressor.model.tensorflow_model.TensorflowBaseModel"]], "tensorflowcheckpointmodel (class in neural_compressor.model.tensorflow_model)": [[54, "neural_compressor.model.tensorflow_model.TensorflowCheckpointModel"]], "tensorflowllmmodel (class in neural_compressor.model.tensorflow_model)": [[54, "neural_compressor.model.tensorflow_model.TensorflowLLMModel"]], "tensorflowmodel (class in neural_compressor.model.tensorflow_model)": [[54, "neural_compressor.model.tensorflow_model.TensorflowModel"]], "tensorflowqatmodel (class in neural_compressor.model.tensorflow_model)": [[54, "neural_compressor.model.tensorflow_model.TensorflowQATModel"]], "tensorflowsavedmodelmodel (class in neural_compressor.model.tensorflow_model)": [[54, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel"]], "checkpoint_session() (in module neural_compressor.model.tensorflow_model)": [[54, "neural_compressor.model.tensorflow_model.checkpoint_session"]], "estimator_session() (in module neural_compressor.model.tensorflow_model)": [[54, "neural_compressor.model.tensorflow_model.estimator_session"]], "frozen_pb_session() (in module neural_compressor.model.tensorflow_model)": [[54, "neural_compressor.model.tensorflow_model.frozen_pb_session"]], "get_model_type() (in module neural_compressor.model.tensorflow_model)": [[54, "neural_compressor.model.tensorflow_model.get_model_type"]], "graph_def_session() (in module neural_compressor.model.tensorflow_model)": [[54, "neural_compressor.model.tensorflow_model.graph_def_session"]], "graph_session() (in module neural_compressor.model.tensorflow_model)": [[54, "neural_compressor.model.tensorflow_model.graph_session"]], "keras_session() (in module neural_compressor.model.tensorflow_model)": [[54, "neural_compressor.model.tensorflow_model.keras_session"]], "load_saved_model() (in module neural_compressor.model.tensorflow_model)": [[54, "neural_compressor.model.tensorflow_model.load_saved_model"]], "neural_compressor.model.tensorflow_model": [[54, "module-neural_compressor.model.tensorflow_model"]], "saved_model_session() (in module neural_compressor.model.tensorflow_model)": [[54, "neural_compressor.model.tensorflow_model.saved_model_session"]], "slim_session() (in module neural_compressor.model.tensorflow_model)": [[54, "neural_compressor.model.tensorflow_model.slim_session"]], "try_loading_keras() (in module neural_compressor.model.tensorflow_model)": [[54, "neural_compressor.model.tensorflow_model.try_loading_keras"]], "validate_and_inference_input_output() (in module neural_compressor.model.tensorflow_model)": [[54, "neural_compressor.model.tensorflow_model.validate_and_inference_input_output"]], "validate_graph_node() (in module neural_compressor.model.tensorflow_model)": [[54, "neural_compressor.model.tensorflow_model.validate_graph_node"]], "ipexmodel (class in neural_compressor.model.torch_model)": [[55, "neural_compressor.model.torch_model.IPEXModel"]], "pytorchbasemodel (class in neural_compressor.model.torch_model)": [[55, "neural_compressor.model.torch_model.PyTorchBaseModel"]], "pytorchfxmodel (class in neural_compressor.model.torch_model)": [[55, "neural_compressor.model.torch_model.PyTorchFXModel"]], "pytorchmodel (class in neural_compressor.model.torch_model)": [[55, "neural_compressor.model.torch_model.PyTorchModel"]], "neural_compressor.model.torch_model": [[55, "module-neural_compressor.model.torch_model"]], "accuracy (class in neural_compressor.objective)": [[56, "neural_compressor.objective.Accuracy"]], "footprint (class in neural_compressor.objective)": [[56, "neural_compressor.objective.Footprint"]], "modelsize (class in neural_compressor.objective)": [[56, "neural_compressor.objective.ModelSize"]], "multiobjective (class in neural_compressor.objective)": [[56, "neural_compressor.objective.MultiObjective"]], "objective (class in neural_compressor.objective)": [[56, "neural_compressor.objective.Objective"]], "performance (class in neural_compressor.objective)": [[56, "neural_compressor.objective.Performance"]], "neural_compressor.objective": [[56, "module-neural_compressor.objective"]], "objective_custom_registry() (in module neural_compressor.objective)": [[56, "neural_compressor.objective.objective_custom_registry"]], "objective_registry() (in module neural_compressor.objective)": [[56, "neural_compressor.objective.objective_registry"]], "neural_compressor.profiling": [[57, "module-neural_compressor.profiling"]], "fit() (in module neural_compressor.quantization)": [[58, "neural_compressor.quantization.fit"]], "neural_compressor.quantization": [[58, "module-neural_compressor.quantization"]], "autotunestrategy (class in neural_compressor.strategy.auto)": [[59, "neural_compressor.strategy.auto.AutoTuneStrategy"]], "neural_compressor.strategy.auto": [[59, "module-neural_compressor.strategy.auto"]], "automixedprecisiontunestrategy (class in neural_compressor.strategy.auto_mixed_precision)": [[60, "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[60, "module-neural_compressor.strategy.auto_mixed_precision"]], "basictunestrategy (class in neural_compressor.strategy.basic)": [[61, "neural_compressor.strategy.basic.BasicTuneStrategy"]], "neural_compressor.strategy.basic": [[61, "module-neural_compressor.strategy.basic"]], "bayesianoptimization (class in neural_compressor.strategy.bayesian)": [[62, "neural_compressor.strategy.bayesian.BayesianOptimization"]], "bayesiantunestrategy (class in neural_compressor.strategy.bayesian)": [[62, "neural_compressor.strategy.bayesian.BayesianTuneStrategy"]], "targetspace (class in neural_compressor.strategy.bayesian)": [[62, "neural_compressor.strategy.bayesian.TargetSpace"]], "acq_max() (in module neural_compressor.strategy.bayesian)": [[62, "neural_compressor.strategy.bayesian.acq_max"]], "neural_compressor.strategy.bayesian": [[62, "module-neural_compressor.strategy.bayesian"]], "conservativetunestrategy (class in neural_compressor.strategy.conservative)": [[63, "neural_compressor.strategy.conservative.ConservativeTuneStrategy"]], "neural_compressor.strategy.conservative": [[63, "module-neural_compressor.strategy.conservative"]], "exhaustivetunestrategy (class in neural_compressor.strategy.exhaustive)": [[64, "neural_compressor.strategy.exhaustive.ExhaustiveTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[64, "module-neural_compressor.strategy.exhaustive"]], "hawq_v2tunestrategy (class in neural_compressor.strategy.hawq_v2)": [[65, "neural_compressor.strategy.hawq_v2.HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[65, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy": [[66, "module-neural_compressor.strategy"]], "msetunestrategy (class in neural_compressor.strategy.mse)": [[67, "neural_compressor.strategy.mse.MSETuneStrategy"]], "neural_compressor.strategy.mse": [[67, "module-neural_compressor.strategy.mse"]], "mse_v2tunestrategy (class in neural_compressor.strategy.mse_v2)": [[68, "neural_compressor.strategy.mse_v2.MSE_V2TuneStrategy"]], "neural_compressor.strategy.mse_v2": [[68, "module-neural_compressor.strategy.mse_v2"]], "randomtunestrategy (class in neural_compressor.strategy.random)": [[69, "neural_compressor.strategy.random.RandomTuneStrategy"]], "neural_compressor.strategy.random": [[69, "module-neural_compressor.strategy.random"]], "tunestrategy (class in neural_compressor.strategy.strategy)": [[70, "neural_compressor.strategy.strategy.TuneStrategy"]], "tunestrategymeta (class in neural_compressor.strategy.strategy)": [[70, "neural_compressor.strategy.strategy.TuneStrategyMeta"]], "neural_compressor.strategy.strategy": [[70, "module-neural_compressor.strategy.strategy"]], "strategy_registry() (in module neural_compressor.strategy.strategy)": [[70, "neural_compressor.strategy.strategy.strategy_registry"]], "neural_compressor.strategy.utils.constant": [[71, "module-neural_compressor.strategy.utils.constant"]], "neural_compressor.strategy.utils": [[72, "module-neural_compressor.strategy.utils"]], "blockfallbacktuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[73, "neural_compressor.strategy.utils.tuning_sampler.BlockFallbackTuningSampler"]], "fallbacktuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[73, "neural_compressor.strategy.utils.tuning_sampler.FallbackTuningSampler"]], "lowerbitssampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[73, "neural_compressor.strategy.utils.tuning_sampler.LowerBitsSampler"]], "modelwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[73, "neural_compressor.strategy.utils.tuning_sampler.ModelWiseTuningSampler"]], "optypewisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[73, "neural_compressor.strategy.utils.tuning_sampler.OpTypeWiseTuningSampler"]], "opwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[73, "neural_compressor.strategy.utils.tuning_sampler.OpWiseTuningSampler"]], "smoothquantsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[73, "neural_compressor.strategy.utils.tuning_sampler.SmoothQuantSampler"]], "tuningorder (class in neural_compressor.strategy.utils.tuning_sampler)": [[73, "neural_compressor.strategy.utils.tuning_sampler.TuningOrder"]], "tuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[73, "neural_compressor.strategy.utils.tuning_sampler.TuningSampler"]], "weightonlyquantsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[73, "neural_compressor.strategy.utils.tuning_sampler.WeightOnlyQuantSampler"]], "neural_compressor.strategy.utils.tuning_sampler": [[73, "module-neural_compressor.strategy.utils.tuning_sampler"]], "tuningitem (class in neural_compressor.strategy.utils.tuning_space)": [[74, "neural_compressor.strategy.utils.tuning_space.TuningItem"]], "tuningspace (class in neural_compressor.strategy.utils.tuning_space)": [[74, "neural_compressor.strategy.utils.tuning_space.TuningSpace"]], "initial_tuning_cfg_with_quant_mode() (in module neural_compressor.strategy.utils.tuning_space)": [[74, "neural_compressor.strategy.utils.tuning_space.initial_tuning_cfg_with_quant_mode"]], "neural_compressor.strategy.utils.tuning_space": [[74, "module-neural_compressor.strategy.utils.tuning_space"]], "pattern_to_internal() (in module neural_compressor.strategy.utils.tuning_space)": [[74, "neural_compressor.strategy.utils.tuning_space.pattern_to_internal"]], "pattern_to_path() (in module neural_compressor.strategy.utils.tuning_space)": [[74, "neural_compressor.strategy.utils.tuning_space.pattern_to_path"]], "quant_mode_from_pattern() (in module neural_compressor.strategy.utils.tuning_space)": [[74, "neural_compressor.strategy.utils.tuning_space.quant_mode_from_pattern"]], "optuningconfig (class in neural_compressor.strategy.utils.tuning_structs)": [[75, "neural_compressor.strategy.utils.tuning_structs.OpTuningConfig"]], "neural_compressor.strategy.utils.tuning_structs": [[75, "module-neural_compressor.strategy.utils.tuning_structs"]], "classregister (class in neural_compressor.strategy.utils.utility)": [[76, "neural_compressor.strategy.utils.utility.ClassRegister"]], "ordereddefaultdict (class in neural_compressor.strategy.utils.utility)": [[76, "neural_compressor.strategy.utils.utility.OrderedDefaultDict"]], "quantoptions (class in neural_compressor.strategy.utils.utility)": [[76, "neural_compressor.strategy.utils.utility.QuantOptions"]], "quanttype (class in neural_compressor.strategy.utils.utility)": [[76, "neural_compressor.strategy.utils.utility.QuantType"]], "build_slave_faker_model() (in module neural_compressor.strategy.utils.utility)": [[76, "neural_compressor.strategy.utils.utility.build_slave_faker_model"]], "extract_data_type() (in module neural_compressor.strategy.utils.utility)": [[76, "neural_compressor.strategy.utils.utility.extract_data_type"]], "get_adaptor_name() (in module neural_compressor.strategy.utils.utility)": [[76, "neural_compressor.strategy.utils.utility.get_adaptor_name"]], "neural_compressor.strategy.utils.utility": [[76, "module-neural_compressor.strategy.utils.utility"]], "preprocess_user_cfg() (in module neural_compressor.strategy.utils.utility)": [[76, "neural_compressor.strategy.utils.utility.preprocess_user_cfg"]], "reverted_data_type() (in module neural_compressor.strategy.utils.utility)": [[76, "neural_compressor.strategy.utils.utility.reverted_data_type"]], "callbacks (class in neural_compressor.training)": [[77, "neural_compressor.training.CallBacks"]], "compressionmanager (class in neural_compressor.training)": [[77, "neural_compressor.training.CompressionManager"]], "fit() (in module neural_compressor.training)": [[77, "neural_compressor.training.fit"]], "neural_compressor.training": [[77, "module-neural_compressor.training"]], "prepare_compression() (in module neural_compressor.training)": [[77, "neural_compressor.training.prepare_compression"]], "layerhistogramcollector (class in neural_compressor.utils.collect_layer_histogram)": [[78, "neural_compressor.utils.collect_layer_histogram.LayerHistogramCollector"]], "neural_compressor.utils.collect_layer_histogram": [[78, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[79, "module-neural_compressor.utils.constant"]], "create_dataloader() (in module neural_compressor.utils.create_obj_from_config)": [[80, "neural_compressor.utils.create_obj_from_config.create_dataloader"]], "create_dataset() (in module neural_compressor.utils.create_obj_from_config)": [[80, "neural_compressor.utils.create_obj_from_config.create_dataset"]], "create_eval_func() (in module neural_compressor.utils.create_obj_from_config)": [[80, "neural_compressor.utils.create_obj_from_config.create_eval_func"]], "create_train_func() (in module neural_compressor.utils.create_obj_from_config)": [[80, "neural_compressor.utils.create_obj_from_config.create_train_func"]], "get_algorithm() (in module neural_compressor.utils.create_obj_from_config)": [[80, "neural_compressor.utils.create_obj_from_config.get_algorithm"]], "get_func_from_config() (in module neural_compressor.utils.create_obj_from_config)": [[80, "neural_compressor.utils.create_obj_from_config.get_func_from_config"]], "get_metrics() (in module neural_compressor.utils.create_obj_from_config)": [[80, "neural_compressor.utils.create_obj_from_config.get_metrics"]], "get_postprocess() (in module neural_compressor.utils.create_obj_from_config)": [[80, "neural_compressor.utils.create_obj_from_config.get_postprocess"]], "get_preprocess() (in module neural_compressor.utils.create_obj_from_config)": [[80, "neural_compressor.utils.create_obj_from_config.get_preprocess"]], "neural_compressor.utils.create_obj_from_config": [[80, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils.export": [[81, "module-neural_compressor.utils.export"]], "check_model() (in module neural_compressor.utils.export.qlinear2qdq)": [[82, "neural_compressor.utils.export.qlinear2qdq.check_model"]], "neural_compressor.utils.export.qlinear2qdq": [[82, "module-neural_compressor.utils.export.qlinear2qdq"]], "onnx_qlinear_to_qdq() (in module neural_compressor.utils.export.qlinear2qdq)": [[82, "neural_compressor.utils.export.qlinear2qdq.onnx_qlinear_to_qdq"]], "neural_compressor.utils.export.tf2onnx": [[83, "module-neural_compressor.utils.export.tf2onnx"]], "tf_to_fp32_onnx() (in module neural_compressor.utils.export.tf2onnx)": [[83, "neural_compressor.utils.export.tf2onnx.tf_to_fp32_onnx"]], "tf_to_int8_onnx() (in module neural_compressor.utils.export.tf2onnx)": [[83, "neural_compressor.utils.export.tf2onnx.tf_to_int8_onnx"]], "dynamic_quant_export() (in module neural_compressor.utils.export.torch2onnx)": [[84, "neural_compressor.utils.export.torch2onnx.dynamic_quant_export"]], "get_node_mapping() (in module neural_compressor.utils.export.torch2onnx)": [[84, "neural_compressor.utils.export.torch2onnx.get_node_mapping"]], "get_quantizable_onnx_ops() (in module neural_compressor.utils.export.torch2onnx)": [[84, "neural_compressor.utils.export.torch2onnx.get_quantizable_onnx_ops"]], "neural_compressor.utils.export.torch2onnx": [[84, "module-neural_compressor.utils.export.torch2onnx"]], "static_quant_export() (in module neural_compressor.utils.export.torch2onnx)": [[84, "neural_compressor.utils.export.torch2onnx.static_quant_export"]], "torch_to_fp32_onnx() (in module neural_compressor.utils.export.torch2onnx)": [[84, "neural_compressor.utils.export.torch2onnx.torch_to_fp32_onnx"]], "torch_to_int8_onnx() (in module neural_compressor.utils.export.torch2onnx)": [[84, "neural_compressor.utils.export.torch2onnx.torch_to_int8_onnx"]], "neural_compressor.utils": [[85, "module-neural_compressor.utils"]], "kl_divergence (class in neural_compressor.utils.kl_divergence)": [[86, "neural_compressor.utils.kl_divergence.KL_Divergence"]], "neural_compressor.utils.kl_divergence": [[86, "module-neural_compressor.utils.kl_divergence"]], "optimizedmodel (class in neural_compressor.utils.load_huggingface)": [[87, "neural_compressor.utils.load_huggingface.OptimizedModel"]], "export_compressed_model() (in module neural_compressor.utils.load_huggingface)": [[87, "neural_compressor.utils.load_huggingface.export_compressed_model"]], "neural_compressor.utils.load_huggingface": [[87, "module-neural_compressor.utils.load_huggingface"]], "save_for_huggingface_upstream() (in module neural_compressor.utils.load_huggingface)": [[87, "neural_compressor.utils.load_huggingface.save_for_huggingface_upstream"]], "logger (class in neural_compressor.utils.logger)": [[88, "neural_compressor.utils.logger.Logger"]], "debug() (in module neural_compressor.utils.logger)": [[88, "neural_compressor.utils.logger.debug"]], "error() (in module neural_compressor.utils.logger)": [[88, "neural_compressor.utils.logger.error"]], "fatal() (in module neural_compressor.utils.logger)": [[88, "neural_compressor.utils.logger.fatal"]], "info() (in module neural_compressor.utils.logger)": [[88, "neural_compressor.utils.logger.info"]], "log() (in module neural_compressor.utils.logger)": [[88, "neural_compressor.utils.logger.log"]], "neural_compressor.utils.logger": [[88, "module-neural_compressor.utils.logger"]], "warn() (in module neural_compressor.utils.logger)": [[88, "neural_compressor.utils.logger.warn"]], "warning() (in module neural_compressor.utils.logger)": [[88, "neural_compressor.utils.logger.warning"]], "get_model_path() (in module neural_compressor.utils.neural_insights_utils)": [[89, "neural_compressor.utils.neural_insights_utils.get_model_path"]], "neural_compressor.utils.neural_insights_utils": [[89, "module-neural_compressor.utils.neural_insights_utils"]], "register_neural_insights_workload() (in module neural_compressor.utils.neural_insights_utils)": [[89, "neural_compressor.utils.neural_insights_utils.register_neural_insights_workload"]], "update_neural_insights_workload() (in module neural_compressor.utils.neural_insights_utils)": [[89, "neural_compressor.utils.neural_insights_utils.update_neural_insights_workload"]], "update_neural_insights_workload_accuracy_data() (in module neural_compressor.utils.neural_insights_utils)": [[89, "neural_compressor.utils.neural_insights_utils.update_neural_insights_workload_accuracy_data"]], "neural_compressor.utils.options": [[90, "module-neural_compressor.utils.options"]], "onnxrt (class in neural_compressor.utils.options)": [[90, "neural_compressor.utils.options.onnxrt"]], "is_int8_model() (in module neural_compressor.utils.pytorch)": [[91, "neural_compressor.utils.pytorch.is_int8_model"]], "load() (in module neural_compressor.utils.pytorch)": [[91, "neural_compressor.utils.pytorch.load"]], "load_weight_only() (in module neural_compressor.utils.pytorch)": [[91, "neural_compressor.utils.pytorch.load_weight_only"]], "neural_compressor.utils.pytorch": [[91, "module-neural_compressor.utils.pytorch"]], "recover_model_from_json() (in module neural_compressor.utils.pytorch)": [[91, "neural_compressor.utils.pytorch.recover_model_from_json"]], "captureoutputtofile (class in neural_compressor.utils.utility)": [[92, "neural_compressor.utils.utility.CaptureOutputToFile"]], "cpuinfo (class in neural_compressor.utils.utility)": [[92, "neural_compressor.utils.utility.CpuInfo"]], "dequantize() (in module neural_compressor.utils.utility)": [[92, "neural_compressor.utils.utility.Dequantize"]], "dotdict (class in neural_compressor.utils.utility)": [[92, "neural_compressor.utils.utility.DotDict"]], "global_state (class in neural_compressor.utils.utility)": [[92, "neural_compressor.utils.utility.GLOBAL_STATE"]], "lazyimport (class in neural_compressor.utils.utility)": [[92, "neural_compressor.utils.utility.LazyImport"]], "mode (class in neural_compressor.utils.utility)": [[92, "neural_compressor.utils.utility.MODE"]], "opentry (class in neural_compressor.utils.utility)": [[92, "neural_compressor.utils.utility.OpEntry"]], "statistics (class in neural_compressor.utils.utility)": [[92, "neural_compressor.utils.utility.Statistics"]], "alias_param() (in module neural_compressor.utils.utility)": [[92, "neural_compressor.utils.utility.alias_param"]], "calculate_mse() (in module neural_compressor.utils.utility)": [[92, "neural_compressor.utils.utility.calculate_mse"]], "check_key_exist() (in module neural_compressor.utils.utility)": [[92, "neural_compressor.utils.utility.check_key_exist"]], "combine_histogram() (in module neural_compressor.utils.utility)": [[92, "neural_compressor.utils.utility.combine_histogram"]], "compare_objects() (in module neural_compressor.utils.utility)": [[92, "neural_compressor.utils.utility.compare_objects"]], "compute_sparsity() (in module neural_compressor.utils.utility)": [[92, "neural_compressor.utils.utility.compute_sparsity"]], "deep_get() (in module neural_compressor.utils.utility)": [[92, "neural_compressor.utils.utility.deep_get"]], "deep_set() (in module neural_compressor.utils.utility)": [[92, "neural_compressor.utils.utility.deep_set"]], "dequantize_weight() (in module neural_compressor.utils.utility)": [[92, "neural_compressor.utils.utility.dequantize_weight"]], "dump_class_attrs() (in module neural_compressor.utils.utility)": [[92, "neural_compressor.utils.utility.dump_class_attrs"]], "dump_data_to_local() (in module neural_compressor.utils.utility)": [[92, "neural_compressor.utils.utility.dump_data_to_local"]], "dump_elapsed_time() (in module neural_compressor.utils.utility)": [[92, "neural_compressor.utils.utility.dump_elapsed_time"]], "dump_table() (in module neural_compressor.utils.utility)": [[92, "neural_compressor.utils.utility.dump_table"]], "dump_table_to_csv() (in module neural_compressor.utils.utility)": [[92, "neural_compressor.utils.utility.dump_table_to_csv"]], "equal_dicts() (in module neural_compressor.utils.utility)": [[92, "neural_compressor.utils.utility.equal_dicts"]], "fault_tolerant_file() (in module neural_compressor.utils.utility)": [[92, "neural_compressor.utils.utility.fault_tolerant_file"]], "get_all_fp32_data() (in module neural_compressor.utils.utility)": [[92, "neural_compressor.utils.utility.get_all_fp32_data"]], "get_number_of_sockets() (in module neural_compressor.utils.utility)": [[92, "neural_compressor.utils.utility.get_number_of_sockets"]], "get_op_list() (in module neural_compressor.utils.utility)": [[92, "neural_compressor.utils.utility.get_op_list"]], "get_size() (in module neural_compressor.utils.utility)": [[92, "neural_compressor.utils.utility.get_size"]], "get_tensor_histogram() (in module neural_compressor.utils.utility)": [[92, "neural_compressor.utils.utility.get_tensor_histogram"]], "get_tensors_info() (in module neural_compressor.utils.utility)": [[92, "neural_compressor.utils.utility.get_tensors_info"]], "get_tuning_history() (in module neural_compressor.utils.utility)": [[92, "neural_compressor.utils.utility.get_tuning_history"]], "get_weights_details() (in module neural_compressor.utils.utility)": [[92, "neural_compressor.utils.utility.get_weights_details"]], "load_data_from_pkl() (in module neural_compressor.utils.utility)": [[92, "neural_compressor.utils.utility.load_data_from_pkl"]], "mse_metric_gap() (in module neural_compressor.utils.utility)": [[92, "neural_compressor.utils.utility.mse_metric_gap"]], "neural_compressor.utils.utility": [[92, "module-neural_compressor.utils.utility"]], "print_op_list() (in module neural_compressor.utils.utility)": [[92, "neural_compressor.utils.utility.print_op_list"]], "print_table() (in module neural_compressor.utils.utility)": [[92, "neural_compressor.utils.utility.print_table"]], "recover() (in module neural_compressor.utils.utility)": [[92, "neural_compressor.utils.utility.recover"]], "set_random_seed() (in module neural_compressor.utils.utility)": [[92, "neural_compressor.utils.utility.set_random_seed"]], "set_resume_from() (in module neural_compressor.utils.utility)": [[92, "neural_compressor.utils.utility.set_resume_from"]], "set_tensorboard() (in module neural_compressor.utils.utility)": [[92, "neural_compressor.utils.utility.set_tensorboard"]], "set_workspace() (in module neural_compressor.utils.utility)": [[92, "neural_compressor.utils.utility.set_workspace"]], "show_memory_info() (in module neural_compressor.utils.utility)": [[92, "neural_compressor.utils.utility.show_memory_info"]], "singleton() (in module neural_compressor.utils.utility)": [[92, "neural_compressor.utils.utility.singleton"]], "str2array() (in module neural_compressor.utils.utility)": [[92, "neural_compressor.utils.utility.str2array"]], "time_limit() (in module neural_compressor.utils.utility)": [[92, "neural_compressor.utils.utility.time_limit"]], "version1_eq_version2() (in module neural_compressor.utils.utility)": [[92, "neural_compressor.utils.utility.version1_eq_version2"]], "version1_gt_version2() (in module neural_compressor.utils.utility)": [[92, "neural_compressor.utils.utility.version1_gt_version2"]], "version1_gte_version2() (in module neural_compressor.utils.utility)": [[92, "neural_compressor.utils.utility.version1_gte_version2"]], "version1_lt_version2() (in module neural_compressor.utils.utility)": [[92, "neural_compressor.utils.utility.version1_lt_version2"]], "version1_lte_version2() (in module neural_compressor.utils.utility)": [[92, "neural_compressor.utils.utility.version1_lte_version2"]], "weightsdetails (class in neural_compressor.utils.weights_details)": [[93, "neural_compressor.utils.weights_details.WeightsDetails"]], "weightsstatistics (class in neural_compressor.utils.weights_details)": [[93, "neural_compressor.utils.weights_details.WeightsStatistics"]], "neural_compressor.utils.weights_details": [[93, "module-neural_compressor.utils.weights_details"]], "neural_compressor.version": [[94, "module-neural_compressor.version"]]}})